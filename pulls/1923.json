{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1923",
    "id": 2733304062,
    "node_id": "PR_kwDOAN28mc6i6uj-",
    "html_url": "https://github.com/bitcoin/bips/pull/1923",
    "diff_url": "https://github.com/bitcoin/bips/pull/1923.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1923.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1923/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/d1d03420ac5ee234494d84358a4abd06df269f65",
    "number": 1923,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": " BIP draft: BIPs for Utreexo",
    "user": {
      "login": "kcalvinalvin",
      "id": 37185887,
      "node_id": "MDQ6VXNlcjM3MTg1ODg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kcalvinalvin",
      "html_url": "https://github.com/kcalvinalvin",
      "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
      "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
      "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
      "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
      "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "These are the 3 BIPs that describe Utreexo, a consensus-compatible (non-soft fork) way to send and verify transactions without storing the full UTXO set.\r\n\r\nThe 3 BIPs are for:\r\n1. The specification of the Utreexo accumulator.\r\n2. The specification of Bitcoin block and tx validation using the Utreexo accumulator.\r\n3. The peer to peer networking changes required to enable Utreexo nodes.\r\n\r\nMailing list post: https://groups.google.com/g/bitcoindev/c/W1lxBraKG_E",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2025-08-10T06:56:50Z",
    "updated_at": "2025-08-27T18:56:48Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "50fce67a0d48e1ff1582c423f8eeacc1cff83576",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "kcalvinalvin:2025-08-10-utreexo-bips",
      "ref": "2025-08-10-utreexo-bips",
      "sha": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 986054383,
        "node_id": "R_kgDOOsX-7w",
        "name": "bips",
        "full_name": "kcalvinalvin/bips",
        "owner": {
          "login": "kcalvinalvin",
          "id": 37185887,
          "node_id": "MDQ6VXNlcjM3MTg1ODg3",
          "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/kcalvinalvin",
          "html_url": "https://github.com/kcalvinalvin",
          "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
          "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
          "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
          "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
          "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/kcalvinalvin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/kcalvinalvin/bips",
        "archive_url": "https://api.github.com/repos/kcalvinalvin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/kcalvinalvin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/kcalvinalvin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/kcalvinalvin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/kcalvinalvin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/kcalvinalvin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/kcalvinalvin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/kcalvinalvin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/kcalvinalvin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/kcalvinalvin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/kcalvinalvin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/kcalvinalvin/bips/downloads",
        "events_url": "https://api.github.com/repos/kcalvinalvin/bips/events",
        "forks_url": "https://api.github.com/repos/kcalvinalvin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/kcalvinalvin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/kcalvinalvin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/kcalvinalvin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/kcalvinalvin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/kcalvinalvin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/kcalvinalvin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/kcalvinalvin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/kcalvinalvin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/kcalvinalvin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/kcalvinalvin/bips/languages",
        "merges_url": "https://api.github.com/repos/kcalvinalvin/bips/merges",
        "milestones_url": "https://api.github.com/repos/kcalvinalvin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/kcalvinalvin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/kcalvinalvin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/kcalvinalvin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:kcalvinalvin/bips.git",
        "stargazers_url": "https://api.github.com/repos/kcalvinalvin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/kcalvinalvin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/kcalvinalvin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/kcalvinalvin/bips/subscription",
        "tags_url": "https://api.github.com/repos/kcalvinalvin/bips/tags",
        "teams_url": "https://api.github.com/repos/kcalvinalvin/bips/teams",
        "trees_url": "https://api.github.com/repos/kcalvinalvin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/kcalvinalvin/bips.git",
        "hooks_url": "https://api.github.com/repos/kcalvinalvin/bips/hooks",
        "svn_url": "https://github.com/kcalvinalvin/bips",
        "homepage": "",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 17272,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-12T06:23:33Z",
        "created_at": "2025-05-19T03:26:28Z",
        "updated_at": "2025-05-19T03:26:28Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "4f1359d0f8cb934e1d9380414cbda66665e335e7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5712,
        "stargazers_count": 10148,
        "watchers_count": 10148,
        "size": 16604,
        "default_branch": "master",
        "open_issues_count": 36,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-08-25T18:58:40Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-08-27T12:05:20Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 1446,
    "deletions": 0,
    "changed_files": 13,
    "commits": 3,
    "review_comments": 75,
    "comments": 14
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 19074534274,
      "node_id": "HRFPE_lADOAN28mc7FIK1EzwAAAARw7kuC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19074534274",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9b3eafb52bfdf69280c5326e90dda3347fc71ab0",
      "commit_url": "https://api.github.com/repos/kcalvinalvin/bips/commits/9b3eafb52bfdf69280c5326e90dda3347fc71ab0",
      "created_at": "2025-08-10T07:06:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19074544819,
      "node_id": "HRFPE_lADOAN28mc7FIK1EzwAAAARw7nSz",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19074544819",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "commit_url": "https://api.github.com/repos/kcalvinalvin/bips/commits/a94f6434c8f4be7469a3d913046a3c66db48f805",
      "created_at": "2025-08-10T07:09:03Z"
    },
    {
      "event": "labeled",
      "id": 19077017639,
      "node_id": "LE_lADOAN28mc7FIK1EzwAAAARxFDAn",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19077017639",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-10T17:29:05Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 3106077404,
      "node_id": "PRR_kwDOAN28mc65Ivrc",
      "url": null,
      "actor": null,
      "commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-11T14:34:10Z",
      "author_association": "NONE",
      "body": "some typos",
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3106077404",
      "submitted_at": "2025-08-11T14:34:10Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    },
    {
      "event": "reviewed",
      "id": 3107530297,
      "node_id": "PRR_kwDOAN28mc65OSY5",
      "url": null,
      "actor": null,
      "commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-11T21:52:02Z",
      "author_association": "MEMBER",
      "body": "Thank you for proposing these drafts. They already look quite complete with respect to the editorial requirements (BIPs 2 and 3). I've done a cursory first pass. No immediate conceptual feedback. A few editorial comments follow; feel free to ignore them during conceptual review until they are applicable.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3107530297",
      "submitted_at": "2025-08-11T21:52:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    },
    {
      "event": "reviewed",
      "id": 3107913820,
      "node_id": "PRR_kwDOAN28mc65PwBc",
      "url": null,
      "actor": null,
      "commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-11T22:06:47Z",
      "author_association": "NONE",
      "user": {
        "login": "luisschwab",
        "id": 97608688,
        "node_id": "U_kgDOBdFj8A",
        "avatar_url": "https://avatars.githubusercontent.com/u/97608688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luisschwab",
        "html_url": "https://github.com/luisschwab",
        "followers_url": "https://api.github.com/users/luisschwab/followers",
        "following_url": "https://api.github.com/users/luisschwab/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luisschwab/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luisschwab/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luisschwab/subscriptions",
        "organizations_url": "https://api.github.com/users/luisschwab/orgs",
        "repos_url": "https://api.github.com/users/luisschwab/repos",
        "events_url": "https://api.github.com/users/luisschwab/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luisschwab/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3107913820",
      "submitted_at": "2025-08-11T22:06:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19103917616,
      "node_id": "HRFPE_lADOAN28mc7FIK1EzwAAAARyrqYw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19103917616",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "cb2993cf7d4b33de452ed38b6ddaba3262603fc6",
      "commit_url": "https://api.github.com/repos/kcalvinalvin/bips/commits/cb2993cf7d4b33de452ed38b6ddaba3262603fc6",
      "created_at": "2025-08-12T06:15:36Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg0NDRhMjgzMzFhYWJhZjM3NWRlYjk4MTY5M2FlNGMzNzljYmM4NDE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8444a28331aabaf375deb981693ae4c379cbc841",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8444a28331aabaf375deb981693ae4c379cbc841",
      "tree": {
        "sha": "5b299feb0fb2990e8fe2a93ff92c123074477e1a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5b299feb0fb2990e8fe2a93ff92c123074477e1a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e97c908096a275b7a71b304ba7ed82ca3602a72c",
          "sha": "e97c908096a275b7a71b304ba7ed82ca3602a72c",
          "html_url": "https://github.com/bitcoin/bips/commit/e97c908096a275b7a71b304ba7ed82ca3602a72c"
        }
      ],
      "message": "Add the Utreexo accumulator BIP",
      "committer": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-12T06:23:25Z"
      },
      "author": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-10T06:44:26Z"
      },
      "sha": "8444a28331aabaf375deb981693ae4c379cbc841"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGNhNTExZmYxZGU0MDIzOWY2MGJiMWY4NWY4NzI0ZjA5MmYyNDA2MDc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ca511ff1de40239f60bb1f85f8724f092f240607",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ca511ff1de40239f60bb1f85f8724f092f240607",
      "tree": {
        "sha": "25caa5229f36ec09741e09de9f7486c569e4d6e4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/25caa5229f36ec09741e09de9f7486c569e4d6e4"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8444a28331aabaf375deb981693ae4c379cbc841",
          "sha": "8444a28331aabaf375deb981693ae4c379cbc841",
          "html_url": "https://github.com/bitcoin/bips/commit/8444a28331aabaf375deb981693ae4c379cbc841"
        }
      ],
      "message": "Add Utreexo validation BIP",
      "committer": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-12T06:23:25Z"
      },
      "author": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-10T06:44:50Z"
      },
      "sha": "ca511ff1de40239f60bb1f85f8724f092f240607"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQxZDAzNDIwYWM1ZWUyMzQ0OTRkODQzNThhNGFiZDA2ZGYyNjlmNjU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d1d03420ac5ee234494d84358a4abd06df269f65",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d1d03420ac5ee234494d84358a4abd06df269f65",
      "tree": {
        "sha": "5503257237f3dc7a44b77b895a5aaf9896c6dd53",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5503257237f3dc7a44b77b895a5aaf9896c6dd53"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ca511ff1de40239f60bb1f85f8724f092f240607",
          "sha": "ca511ff1de40239f60bb1f85f8724f092f240607",
          "html_url": "https://github.com/bitcoin/bips/commit/ca511ff1de40239f60bb1f85f8724f092f240607"
        }
      ],
      "message": "Add Utreexo P2P BIP",
      "committer": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-12T06:23:25Z"
      },
      "author": {
        "name": "Calvin Kim",
        "email": "calvin@kcalvinalvin.info",
        "date": "2025-08-10T06:45:09Z"
      },
      "sha": "d1d03420ac5ee234494d84358a4abd06df269f65"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 19104050469,
      "node_id": "HRFPE_lADOAN28mc7FIK1EzwAAAARysK0l",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19104050469",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "commit_url": "https://api.github.com/repos/kcalvinalvin/bips/commits/d1d03420ac5ee234494d84358a4abd06df269f65",
      "created_at": "2025-08-12T06:23:34Z"
    },
    {
      "event": "subscribed",
      "id": 19111100143,
      "node_id": "SE_lADOAN28mc7FIK1EzwAAAARzHD7v",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19111100143",
      "actor": {
        "login": "judemont",
        "id": 96385330,
        "node_id": "U_kgDOBb65Mg",
        "avatar_url": "https://avatars.githubusercontent.com/u/96385330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/judemont",
        "html_url": "https://github.com/judemont",
        "followers_url": "https://api.github.com/users/judemont/followers",
        "following_url": "https://api.github.com/users/judemont/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/judemont/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/judemont/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/judemont/subscriptions",
        "organizations_url": "https://api.github.com/users/judemont/orgs",
        "repos_url": "https://api.github.com/users/judemont/repos",
        "events_url": "https://api.github.com/users/judemont/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/judemont/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T12:16:41Z"
    },
    {
      "event": "commented",
      "id": 3179972052,
      "node_id": "IC_kwDOAN28mc69ioXU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3179972052",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T15:52:53Z",
      "updated_at": "2025-08-12T15:52:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol. Right now you just link to a paper from 2011. But that paper is out of date now that hardware support for SHA-256 has become common.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3179972052",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3180517949,
      "node_id": "IC_kwDOAN28mc69kto9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3180517949",
      "actor": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-12T18:29:31Z",
      "updated_at": "2025-08-12T18:49:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "I strongly recommend replacing SHA-256 with **SHAKE256** (from the SHA-3 standard) for the following reasons:\r\n\r\n## 1. Security Advantages\r\n- 🔒 Provides built-in protection against length-extension attacks\r\n- 📏 Offers flexible output lengths (supports 128-bit and 256-bit security levels)\r\n- ⚙️ Based on Keccak sponge construction (NIST FIPS 202 standard)\r\n- 🌐 Aligns with post-quantum cryptography standards\r\n\r\n## 2. Comparative Analysis: SHA-256 vs SHAKE256\r\n\r\n| Characteristic       | SHA-256          | SHAKE256         |\r\n|----------------------|------------------|------------------|\r\n| **Algorithm Family** | SHA-2            | SHA-3 (Keccak)   |\r\n| **Output Flexibility** | Fixed 256-bit    | Arbitrary length |\r\n| **Security Properties** | Vulnerable to length-extension | Resistant to length-extension |\r\n| **Internal Structure** | Merkle-Damgård   | Sponge function  |\r\n| **Standardization** | NIST FIPS 180-4  | NIST FIPS 202    |\r\n\r\n## 3. Functional Example\r\n**Input:** `Bitcoin` \r\n\r\n**SHAKE256 (512-bit output):**  \r\n`6beb0661ba1fa7289bf359fbb81550bd9641cf5abc62a14d466c421c8a86e528e027632ec0e7ceb994650566f3c8258af2240333b6d0e9186766fd2c1ebb763a`\r\n\r\n**SHAKE256 (256-bit output):**  \r\n`6beb0661ba1fa7289bf359fbb81550bd9641cf5abc62a14d466c421c8a86e528`\r\n\r\n## 4. Implementation Benefits\r\n- ✅ Maintains 256-bit output compatibility where needed\r\n- ✅ Future-proofs against emerging cryptographic vulnerabilities\r\n- ✅ Reduces potential attack vectors through improved design\r\n- ✅ Supports Bitcoin's security evolution while maintaining performance\r\n\r\n## 5. Technical Reference\r\nFor detailed cryptographic differences:  \r\n[Cryptographic Comparison: SHA-2 vs SHA-3](https://crypto.stackexchange.com/a/68314)",
      "user": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3180517949",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3196199910,
      "node_id": "IC_kwDOAN28mc6-giPm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3196199910",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T11:06:29Z",
      "updated_at": "2025-08-18T11:06:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "> You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol. Right now you just link to a paper from 2011. But that paper is out of date now that hardware support for SHA-256 has become common.\r\n\r\nSure we can update the accumulator BIP with benchmarks for SHA512/256 vs SHA256.\r\n\r\nBut could you link to the aforementioned justifications for the other parts of the Bitcoin protocol that use SHA512?",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3196199910",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3196210709,
      "node_id": "IC_kwDOAN28mc6-gk4V",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3196210709",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T11:10:24Z",
      "updated_at": "2025-08-18T14:27:06Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I strongly recommend replacing SHA-256 with **SHAKE256** (from the SHA-3 standard) for the following reasons:\r\n\r\nSHAKE256 is not used in Bitcoin and introduces a new hash which increases the trust-assumption. We do not want to do this.",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3196210709",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "comment_deleted",
      "id": 19205324154,
      "node_id": "CDE_lADOAN28mc7FIK1EzwAAAAR4uf16",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19205324154",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T14:31:43Z"
    },
    {
      "event": "comment_deleted",
      "id": 19205326711,
      "node_id": "CDE_lADOAN28mc7FIK1EzwAAAAR4ugd3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19205326711",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T14:31:51Z"
    },
    {
      "event": "commented",
      "id": 3197189723,
      "node_id": "IC_kwDOAN28mc6-kT5b",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3197189723",
      "actor": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T14:32:51Z",
      "updated_at": "2025-08-18T14:55:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "The reliance of Bitcoin on SHA-2—a legacy hash function designed by the National Security Agency (NSA)—introduces non-trivial security risks, particularly when considering the often-dismissed threat posed by quantum adversaries.\n\nMigrating to SHAKE256 (a variant of SHA-3) would represent a meaningful improvement, though such a change merely delays the inevitable: Bitcoin must eventually transition to a quantum-resistant cryptographic framework. When this occurs—and it will, regardless of opposition—SHA-2, along with ECDSA private keys, public keys, and signatures, will become obsolete.\n\nSee: Lenght extension attack (Bitcoin is vulnerable because it's using SHA-256)\n\n",
      "user": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3197189723",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "comment_deleted",
      "id": 19205349784,
      "node_id": "CDE_lADOAN28mc7FIK1EzwAAAAR4umGY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19205349784",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T14:33:03Z"
    },
    {
      "event": "comment_deleted",
      "id": 19205361336,
      "node_id": "CDE_lADOAN28mc7FIK1EzwAAAAR4uo64",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19205361336",
      "actor": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T14:33:35Z"
    },
    {
      "event": "commented",
      "id": 3197200979,
      "node_id": "IC_kwDOAN28mc6-kWpT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3197200979",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T14:35:55Z",
      "updated_at": "2025-08-18T14:35:55Z",
      "author_association": "MEMBER",
      "body": "Some friendly moderation to keep the discussion focused on technical review -- thanks.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3197200979",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3197240847,
      "node_id": "IC_kwDOAN28mc6-kgYP",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3197240847",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T14:46:13Z",
      "updated_at": "2025-08-18T20:01:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The reliance of Bitcoin on SHA-2—a legacy hash function designed by the National Security Agency (NSA)—introduces non-trivial security risks, particularly when considering the often-dismissed threat posed by quantum adversaries.\r\n\r\nSHA256 and SHA512 are quantum resistent.\r\n\r\n> Migrating to SHAKE256 (a variant of SHA-3) would represent a meaningful improvement, though such a change merely delays the inevitable: Bitcoin must eventually transition to a quantum-resistant cryptographic framework. When this occurs—and it will, regardless of opposition—SHA-2, along with ECDSA private keys, public keys, and signatures, will become obsolete.\r\n> See: Lenght extension attack (Bitcoin is vulnerable because it's using SHA-256)\r\n\r\nOk but this has nothing to do with this BIP.",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3197240847",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "unsubscribed",
      "id": 19206204134,
      "node_id": "UE_lADOAN28mc7FIK1EzwAAAAR4x2rm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19206204134",
      "actor": {
        "login": "judemont",
        "id": 96385330,
        "node_id": "U_kgDOBb65Mg",
        "avatar_url": "https://avatars.githubusercontent.com/u/96385330?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/judemont",
        "html_url": "https://github.com/judemont",
        "followers_url": "https://api.github.com/users/judemont/followers",
        "following_url": "https://api.github.com/users/judemont/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/judemont/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/judemont/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/judemont/subscriptions",
        "organizations_url": "https://api.github.com/users/judemont/orgs",
        "repos_url": "https://api.github.com/users/judemont/repos",
        "events_url": "https://api.github.com/users/judemont/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/judemont/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T15:16:18Z"
    },
    {
      "event": "commented",
      "id": 3198584473,
      "node_id": "IC_kwDOAN28mc6-poaZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3198584473",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T22:15:07Z",
      "updated_at": "2025-08-18T22:15:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "@1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw, please cut out the LLM generated comments. If any of us were interested in seeing an LLM’s prediction of what might be said about a topic, we could prompt one ourselves.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3198584473",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3198590980,
      "node_id": "IC_kwDOAN28mc6-pqAE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3198590980",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-18T22:18:29Z",
      "updated_at": "2025-08-18T22:18:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "On Mon, Aug 18, 2025 at 04:06:51AM -0700, Calvin Kim wrote:\n> kcalvinalvin left a comment (bitcoin/bips#1923)\n> \n> > You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol. Right now you just link to a paper from 2011. But that paper is out of date now that hardware support for SHA-256 has become common.\n> \n> Sure we can update the accumulator BIP with benchmarks for SHA512/256 vs SHA256.\n> \n> But could you link to the aforementioned justifications for the other parts of the Bitcoin protocol that use SHA512?\n\nNo part of the Bitcoin consensus protocol uses SHA512.\n",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3198590980",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3199355396,
      "node_id": "IC_kwDOAN28mc6-skoE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3199355396",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-19T06:17:17Z",
      "updated_at": "2025-08-19T06:17:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "> On Mon, Aug 18, 2025 at 04:06:51AM -0700, Calvin Kim wrote: kcalvinalvin left a comment ([bitcoin/bips#1923](https://github.com/bitcoin/bips/pull/1923)) > You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol. Right now you just link to a paper from 2011. But that paper is out of date now that hardware support for SHA-256 has become common. Sure we can update the accumulator BIP with benchmarks for SHA512/256 vs SHA256. But could you link to the aforementioned justifications for the other parts of the Bitcoin protocol that use SHA512?\r\n> No part of the Bitcoin consensus protocol uses SHA512.\r\n\r\nOk but you've stated in your previous comment \"You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol\". Would be very helpful to see what type of justifications the other protocols have made.\r\n\r\nSecond, I don't think it matters if SHA512 wasn't used in the Bitcoin consensus protocol. SHA512 is used in BIP32 and the argument that SHA512 is safe for generating private keys but not safe for Bitcoin consensus isn't sound.\r\n\r\nI think our original justification (better performance with SHA512/256) mentioned in the BIP is sound. Happy to provide the benchmarks, they're being worked on at the moment.",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3199355396",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3204352724,
      "node_id": "IC_kwDOAN28mc6-_orU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3204352724",
      "actor": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T06:22:28Z",
      "updated_at": "2025-08-20T07:31:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "> SHA512 is safe for generating private keys\n\nLol, what did you say?",
      "user": {
        "login": "1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "id": 219042429,
        "node_id": "U_kgDODQ5SfQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/219042429?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "html_url": "https://github.com/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw",
        "followers_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/followers",
        "following_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/subscriptions",
        "organizations_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/orgs",
        "repos_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/repos",
        "events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1BitcoinBoWP1FZ4xwTNkq6XksKidmgYYw/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3204352724",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3204387233,
      "node_id": "IC_kwDOAN28mc6-_xGh",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3204387233",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T06:35:19Z",
      "updated_at": "2025-08-20T07:31:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > SHA512 is safe for generating private keys\r\n> \r\n> Lol, what did you say?\r\n\r\nDude, go look up on chatgpt how SHA512/256 works. Length extension attacks that you mentioned DOES NOT work on it because the outputs are truncated. BIP32 uses HMAC-SHA512 which is just a keyed SHA512.\r\n\r\nWhy do I even have to deal with this guy. It's clear he doesn't know anything. His comments are worthless and this is wasting my time and energy.",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3204387233",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "commented",
      "id": 3204518476,
      "node_id": "IC_kwDOAN28mc6_ARJM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3204518476",
      "actor": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-20T07:16:26Z",
      "updated_at": "2025-08-20T07:30:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "![IMG_0371](https://github.com/user-attachments/assets/5ea010a6-b8e0-44e7-9d56-86e7fd3ad21b)\r\n\r\nThis is the type of email he sends me after I block him. I'm sorry for posting unrelated comments here but imho he should be blocked from this repo.",
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3204518476",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "reviewed",
      "id": 3141977529,
      "node_id": "PRR_kwDOAN28mc67RsW5",
      "url": null,
      "actor": null,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-21T19:13:47Z",
      "author_association": "NONE",
      "user": {
        "login": "lucad70",
        "id": 102705148,
        "node_id": "U_kgDOBh8n_A",
        "avatar_url": "https://avatars.githubusercontent.com/u/102705148?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lucad70",
        "html_url": "https://github.com/lucad70",
        "followers_url": "https://api.github.com/users/lucad70/followers",
        "following_url": "https://api.github.com/users/lucad70/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lucad70/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lucad70/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lucad70/subscriptions",
        "organizations_url": "https://api.github.com/users/lucad70/orgs",
        "repos_url": "https://api.github.com/users/lucad70/repos",
        "events_url": "https://api.github.com/users/lucad70/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lucad70/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3141977529",
      "submitted_at": "2025-08-21T19:13:47Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    },
    {
      "event": "commented",
      "id": 3218116360,
      "node_id": "IC_kwDOAN28mc6_0I8I",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3218116360",
      "actor": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-08-24T13:48:55Z",
      "updated_at": "2025-08-24T13:48:55Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > On Mon, Aug 18, 2025 at 04:06:51AM -0700, Calvin Kim wrote: kcalvinalvin left a comment ([bitcoin/bips#1923](https://github.com/bitcoin/bips/pull/1923)) > You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol. Right now you just link to a paper from 2011. But that paper is out of date now that hardware support for SHA-256 has become common. Sure we can update the accumulator BIP with benchmarks for SHA512/256 vs SHA256. But could you link to the aforementioned justifications for the other parts of the Bitcoin protocol that use SHA512?\r\n> > No part of the Bitcoin consensus protocol uses SHA512.\r\n> \r\n> Ok but you've stated in your previous comment \"You need to justify why you're using SHA-512/256 rather than SHA-256, like the rest of the Bitcoin protocol\". Would be very helpful to see what type of justifications the other protocols have made.\r\n> \r\n> Second, I don't think it matters if SHA512 wasn't used in the Bitcoin consensus protocol. SHA512 is used in BIP32 and the argument that SHA512 is safe for generating private keys but not safe for Bitcoin consensus isn't sound.\r\n> \r\n> I think our original justification (better performance with SHA512/256) mentioned in the BIP is sound. Happy to provide the benchmarks, they're being worked on at the moment.\r\n\r\nThe question is 1) why are we added one new dependency to consensus implementations, and 2) is this actually a performance increase, given that dedicated SHA256 hardware is becoming common?\r\n\r\nLength-extension attacks are not relevant for this use-case as we are only committing to public data.",
      "user": {
        "login": "petertodd",
        "id": 7042,
        "node_id": "MDQ6VXNlcjcwNDI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/petertodd",
        "html_url": "https://github.com/petertodd",
        "followers_url": "https://api.github.com/users/petertodd/followers",
        "following_url": "https://api.github.com/users/petertodd/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/petertodd/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/petertodd/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
        "organizations_url": "https://api.github.com/users/petertodd/orgs",
        "repos_url": "https://api.github.com/users/petertodd/repos",
        "events_url": "https://api.github.com/users/petertodd/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/petertodd/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#issuecomment-3218116360",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1923"
    },
    {
      "event": "reviewed",
      "id": 3152676858,
      "node_id": "PRR_kwDOAN28mc676gf6",
      "url": null,
      "actor": null,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-25T21:22:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "I had a look at most of the Accumulator Specification for the first helping. Looks very good already. I only reviewed the function definitions up to `root_position`, then skimmed the rest, before reading on from Rationale.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3152676858",
      "submitted_at": "2025-08-25T21:22:50Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    },
    {
      "event": "reviewed",
      "id": 3160624315,
      "node_id": "PRR_kwDOAN28mc68Y0y7",
      "url": null,
      "actor": null,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-08-27T18:56:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "This time I took a look at the \"Validation Layer\" BIP. Also looks very good already. I noticed that there is no Rationale section, and the title seemed a little less informative than it could be.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1923#pullrequestreview-3160624315",
      "submitted_at": "2025-08-27T18:56:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266894044",
      "pull_request_review_id": 3106077404,
      "id": 2266894044,
      "node_id": "PRRC_kwDOAN28mc6HHg7c",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 26,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "an -> a",
      "created_at": "2025-08-11T14:08:16Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266894044",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266894044"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266895876",
      "pull_request_review_id": 3106077404,
      "id": 2266895876,
      "node_id": "PRRC_kwDOAN28mc6HHhYE",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 27,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "an -> a",
      "created_at": "2025-08-11T14:08:56Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266895876",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266895876"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266899583",
      "pull_request_review_id": 3106077404,
      "id": 2266899583,
      "node_id": "PRRC_kwDOAN28mc6HHiR_",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 50,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "are in fact should -> should in fact",
      "created_at": "2025-08-11T14:10:17Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266899583",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266899583"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266915855",
      "pull_request_review_id": 3106077404,
      "id": 2266915855,
      "node_id": "PRRC_kwDOAN28mc6HHmQP",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 98,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "- is",
      "created_at": "2025-08-11T14:15:52Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266915855",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266915855"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266920621",
      "pull_request_review_id": 3106077404,
      "id": 2266920621,
      "node_id": "PRRC_kwDOAN28mc6HHnat",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 105,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "make -> includes",
      "created_at": "2025-08-11T14:17:23Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266920621",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266920621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266927458",
      "pull_request_review_id": 3106077404,
      "id": 2266927458,
      "node_id": "PRRC_kwDOAN28mc6HHpFi",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.\n+\n+A hash with the type `utreexoproofhash` represents 4 Utreexo merkle tree positions, each of them little endian serialized and taking up 8 bytes in the 32 byte hash.\n+When sending an inv message to a Utreexo node for a tx, we append `utreexoproofhash` inventory vectors to represent the merkle tree positions for each of the UTXOs being referenced in the inputs of the tx.\n+The Utreexo merkle tree positions are explained in detail in the bip \"Utreexo Accumulator Specification\".\n+Since the hash in an inventory vector is always 32 bytes, any unused space will be padded with the max uint64 value of 18446744073709551615.\n+\n+With these merkle tree positions for the UTXOs referenced in the inputs, we can calculate the needed positions of the merkle hashes to them.\n+These positions are then sent over in the `getdata` message as an another inventory vector.\n+\n+![Utreexo TX relay multiple Utreexo proof hash vectors](bip-utreexo-p2p/utreexo-tx-relay-multiple-proofhash-vectors.png)\n+\n+There may be cases where the transaction is referencing more than 4 merkle positions.\n+In this case, the extra positions are added as another inventory vector.\n+There can be as many additional inventory vectors for the `utreexoproofhash`es as needed.\n+An inventory vector of type `utreexoproofhash` will be ignored if it's not prepended with an inventory vector of type `transaction`.\n+\n+![Utreexo TX relay with multiple txs](bip-utreexo-p2p/utreexo-tx-relay-with-multiple-txs.png)\n+\n+It's possible to have an inv message with multiple txs as well.\n+Note that an inventory vector of type `utreexoproofhash` MUST be appended to the `tx` inventory vector.\n+\n+### Block Propagation\n+\n+![Legacy Block Propagation](bip-utreexo-p2p/legacy-block-propagation.png)\n+\n+Legacy block propagation without Compact Blocks comprises of three steps:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node A sends the block data to Node B.\n+\n+![Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/legacy-block-propagation-with-utreexo-nodes.png)\n+\n+The same block propagation with Utreexo nodes will look like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node B makes a getutreexoproof request for the block.\n+4. Node A sends the block data to Node B.\n+5. Node A sends the inclusion proof to Node B.\n+\n+Note that while Node A sent the inv or the blockhash to Node B, Node B is free to ask for the Utreexo proof from a node other than Node A.\n+This allows a Utreexo node to be notified of new blocks from non-Utreexo nodes.\n+\n+Since there's no PoW required for the inclusion proof, the block may be valid and the proof may be invalid.\n+If the block header validation passed while the full block validation fails, Node B should request the inclusion proof from a different peer.\n+If the new proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+![Bandwidth Saving Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/bandwidth-saving-legacy-block-propagation-with-utreexo-nodes.png)\n+\n+Since the inclusion proof is cached for each of the transaction in the mempool, it's possible to omit the proof hashes for the input UTXOs that we can already prove on our own.\n+This method looks like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request (MSG_UTREEXO_SUMMARY) for the given blockhash.\n+3. Node A sends the utreexoblocksummary message to Node B.\n+4. Node B calculates which proof hashes and leafdatas it needs to prove this block.\n+5. Node B makes a getdata request for the block to Node A.\n+6. Node B makes a getutreexoproof request for the block to Node A.\n+7. Node A sends the block data to Node B.\n+8. Node A sends the requested inclusion proof data to Node B.\n+\n+As with the getutreexoproof message, Node B is free to ask for the utreexoblocksummary message from a node other than Node A.\n+Since there's no commitment to anything in a utreexoblocksummary message, the information given in it can be false.\n+Should the block fail to validate with this propagation, Node B should request the full proof from a different peer.\n+Should the proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+All of the above propagation works the same with Compact Block propagation as well.\n+The requester would need to send a getdata request (MSG_UTREEXO_SUMMARY) after the Compact Block propagation has concluded for high-bandwidth Compact Block propagation and after the header/inv message was received from the broadcasting peer.\n+\n+## Specification\n+\n+Several new data structures and messages are introduced to make the IBD and tx relay possible.\n+All structures are little-endian encoded unless otherwise noted.\n+\n+### New data structures\n+\n+#### Compact leaf data\n+\n+For a CSN to learn the data associated with a UTXO, it must ask for a peer that has it.\n+To authenticate this data, it is committed into the accumulator, and therefore cannot be changed by peer.\n+The committed data is defined in BIP-VALIDATION#LEAF_DATA, but for some information in the leaf data, the receiving peer might already have it, so sending it again is a waste of bandwidth.\n+To save that bandwidth, we only send a Compact Leaf Data, that contains all missing information for the receiving peer to reconstruct the full leaf data.\n+A compact leaf data is defined as:\n+\n+| Field        | type                         | Description     |\n+|--------------|------------------------------|-----------------|\n+| header code  | uint32                       | This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| amount       | int64                        | The amount in sats locked on this output |\n+| scriptPubkey | reconstructable scriptPubkey | The scriptPubkey in a reconstructable format, see [Reconstructable Script](#Reconstructable-Script) for more details |\n+\n+#### Reconstructable Script\n+\n+For some script types (e.g. `ScriptHash`, `PubkeyHash`, `WitnessScriptHash`, `WitnessPubkeyHash`) the actual locking condition is not in the scriptPubkey, but a hash of it.\n+The script which is evaluated is provided as an element of the scriptSig or witness data.\n+\n+Therefore, we can safely just omit the locking script hash from the UTXO data and reconstruct it from the witness or scriptSig.\n+\n+A Reconstructable Script is a tagged union that lets nodes recreate the script without necessarily providing redundant information.\n+If we can reconstruct the committed hash from the transaction data, we just say which type should we expect.\n+Only if the actual script cannot be reconstructed from transaction data, like in the case of taproot outputs, we send the actual script.\n+\n+The serialization and tag values are given below:\n+\n+| Field   | Type                    | Description       | Required                 |\n+|---------|-------------------------|-------------------|--------------------------|\n+| tag     | 1-byte unsigned integer | Script type       | yes                      |\n+| length  | varint                  | The script length | only if tag type is 0x00 |\n+| script  | variable-length vector  | The actual script | only if tag type is 0x00 |\n+\n+The possible values for the tag are:\n+\n+| Value | Script Type         |\n+|-------|---------------------|\n+| 0x00  | Other               |\n+| 0x01  | Pubkey Hash         |\n+| 0x02  | WitnessV0PubkeyHash |\n+| 0x03  | ScriptHash          |\n+| 0x04  | WitnessV0ScriptHash |\n+\n+#### TTL Info\n+\n+For all UTXOs that get added to the Utreexo merkle forest, a TTL info exists for it and includes information necessary for efficiently caching and requesting proofs.\n+The TTL value provides information to determine which leaves should be cached and the death position is used to calculate which positions in the merkle forest we need to prove a block.\n+\n+| Field          | Type   | Description                                                                                                                                                          |\n+|----------------|--------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| TTL            | varint | The time-to-live value of a leaf in the Utreexo merkle forest. The value is determined by the amount of leaves that were added to the accumulator since its creation |\n+| death position | varint | The position in the Utreexo merkle forest when the leaf was removed                                                                                                  |\n+\n+#### Utreexo TTL\n+\n+| Field        | Type                | Description                                                                                                                                                          |\n+|--------------|---------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| block height | uint32              | The time-to-live value of a leaf in the Utreexo merkle forest. The value is determined by the amount of leaves that were added to the accumulator since its creation |\n+| length       | varint              | The length of the TTLs                                                                                                                                               |\n+| TTLs         | vector of TTL infos | position in the Utreexo merkle forest when the leaf was removed                                                                                                      |\n+\n+### New Messages\n+\n+#### MSG_UTREEXO_PROOF\n+\n+`MSG_UTREEXO_PROOF` is all the data required for a CSN or archive node using the Utreexo accumulators to validate a Bitcoin block.\n+\n+Its `cmdString` for P2PV1 is `uproof`.\n+Its [BIP324 P2PV2](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#user-content-v2_Bitcoin_P2P_message_structure) message type is `29`.\n+\n+| Field                          | Type                         | Description                                                                                                                                |\n+|--------------------------------|------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n+| blockhash                      | 32 byte vector               | The hash of the block that this inclusion proof proves                                                                                     |\n+| length of the proof hashes     | varint                       | The length of the proof hashes                                                                                                             |\n+| proof hashes                   | vector of 32 byte vectors    | The hashes requested by MSG_GET_UTREEXO_PROOF. MUST be in tree order                                                                       |\n+| length of the target locations | varint                       | The length of the target locations                                                                                                         |\n+| target locations               | vector of varint values      | The Utreexo merkle tree locations of the leafdatas. MUST be in blockchain order. MUST include all the locations or none of the locations   |\n+| length of the leafdatas        | varint                       | The length of the leafdatas                                                                                                                |\n+| leafdatas                      | vector of compact leafdatas  | The preimage of the committed UTXOs requested by the MSG_GET_UTREEXO_PROOF. MUST be in blockchain order. See compact leaf data for details |\n+\n+The proof hashes MUST be in merkle forest tree ordering.\n+See BIP [Utreexo Accumulator Specification](./utreexo-accumulator-bip.md#Merkle Forest) for an explanation on how each of the hashes in the merkle forest are positioned.\n+\n+Each of the target location represents the position of the leaf data at the same index.\n+While each leaf data represent a UTXO in a given block, not all are added as per [Utreexo - Validation Layer](./utreexo-validation-bip.md#Excluded UTXOs from the accumulator).\n+\n+#### MSG_GET_UTREEXO_PROOF\n+\n+`MSG_GET_UTREEXO_PROOF` is a message to request the inclusion proof for a given block.\n+\n+Its `cmdString` for P2PV1 is `getuproof`.\n+Its [BIP324 P2PV2](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#user-content-v2_Bitcoin_P2P_message_structure) message type is `30`.\n+\n+| Field                     | Type                        | Description                                                        |\n+|---------------------------|-----------------------------|--------------------------------------------------------------------|\n+| blockhash                 | 32 byte vector              | The hash of the bitcoin block that we want the inclusion proof for |\n+| include all               | boolean                     | A boolean value to request all parts of the inclusion proof        |\n+| proof request bitmap      | variable-length byte vector | A bitmap of the requested proof hashes                             |\n+| leaf data request bitmap  | variable-length byte vector | A bitmap of the requested leafdatas                                |\n+\n+The bitmaps here are formatted as big-endian and padded to the nearest byte, with 1 meaning a request for the proof hash or the leaf data, and 0 meaning omit the proof hash or the leaf data.\n+\n+Since there's one corresponding leaf data per target location, it's trivial to generate a bitmap for the leafdatas.\n+\n+Using the [proof_positions](./utreexo-accumulator-bip.md#Utility Functions) function, it's possible to generate the positions of the needed proof hashes for a given set of targets.\n+With these positions, we can set the bit in the bitmap for the hashes we require.\n+\n+#### MSG_UTREEXO_TTLS\n+\n+`MSG_UTREEXO_TTLS` is the requested group of Utreexo TTLs that includes the proof hashes needed to validate that the given TTLs were committed in the provided binary.\n+\n+Its `cmdString` for P2PV1 is `uttls`.\n+Its [BIP324 P2PV2](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#user-content-v2_Bitcoin_P2P_message_structure) message type is `31`.\n+\n+| Field                      | Type                                | Description                                   |\n+|----------------------------|-------------------------------------|-----------------------------------------------|\n+| length of the Utreexo TTLs | varint                              | The length of the Utreexo summaries           |\n+| Utreexo TTLs               | vector of Utreexo summaries         | The vector of the requested Utreexo summaries |\n+| length of the proof hashes | varint                              | The length of the proof hashes                |\n+| proof hashes               | vector of 32 byte hashes            | The vector of the requested Utreexo summaries |",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 302,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "requested proof hashes*?",
      "created_at": "2025-08-11T14:19:44Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266927458",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266927458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 302,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266933047",
      "pull_request_review_id": 3106077404,
      "id": 2266933047,
      "node_id": "PRRC_kwDOAN28mc6HHqc3",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.\n+\n+A hash with the type `utreexoproofhash` represents 4 Utreexo merkle tree positions, each of them little endian serialized and taking up 8 bytes in the 32 byte hash.\n+When sending an inv message to a Utreexo node for a tx, we append `utreexoproofhash` inventory vectors to represent the merkle tree positions for each of the UTXOs being referenced in the inputs of the tx.\n+The Utreexo merkle tree positions are explained in detail in the bip \"Utreexo Accumulator Specification\".\n+Since the hash in an inventory vector is always 32 bytes, any unused space will be padded with the max uint64 value of 18446744073709551615.\n+\n+With these merkle tree positions for the UTXOs referenced in the inputs, we can calculate the needed positions of the merkle hashes to them.\n+These positions are then sent over in the `getdata` message as an another inventory vector.\n+\n+![Utreexo TX relay multiple Utreexo proof hash vectors](bip-utreexo-p2p/utreexo-tx-relay-multiple-proofhash-vectors.png)\n+\n+There may be cases where the transaction is referencing more than 4 merkle positions.\n+In this case, the extra positions are added as another inventory vector.\n+There can be as many additional inventory vectors for the `utreexoproofhash`es as needed.\n+An inventory vector of type `utreexoproofhash` will be ignored if it's not prepended with an inventory vector of type `transaction`.\n+\n+![Utreexo TX relay with multiple txs](bip-utreexo-p2p/utreexo-tx-relay-with-multiple-txs.png)\n+\n+It's possible to have an inv message with multiple txs as well.\n+Note that an inventory vector of type `utreexoproofhash` MUST be appended to the `tx` inventory vector.\n+\n+### Block Propagation\n+\n+![Legacy Block Propagation](bip-utreexo-p2p/legacy-block-propagation.png)\n+\n+Legacy block propagation without Compact Blocks comprises of three steps:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node A sends the block data to Node B.\n+\n+![Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/legacy-block-propagation-with-utreexo-nodes.png)\n+\n+The same block propagation with Utreexo nodes will look like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node B makes a getutreexoproof request for the block.\n+4. Node A sends the block data to Node B.\n+5. Node A sends the inclusion proof to Node B.\n+\n+Note that while Node A sent the inv or the blockhash to Node B, Node B is free to ask for the Utreexo proof from a node other than Node A.\n+This allows a Utreexo node to be notified of new blocks from non-Utreexo nodes.\n+\n+Since there's no PoW required for the inclusion proof, the block may be valid and the proof may be invalid.\n+If the block header validation passed while the full block validation fails, Node B should request the inclusion proof from a different peer.\n+If the new proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+![Bandwidth Saving Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/bandwidth-saving-legacy-block-propagation-with-utreexo-nodes.png)\n+\n+Since the inclusion proof is cached for each of the transaction in the mempool, it's possible to omit the proof hashes for the input UTXOs that we can already prove on our own.\n+This method looks like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request (MSG_UTREEXO_SUMMARY) for the given blockhash.\n+3. Node A sends the utreexoblocksummary message to Node B.\n+4. Node B calculates which proof hashes and leafdatas it needs to prove this block.\n+5. Node B makes a getdata request for the block to Node A.\n+6. Node B makes a getutreexoproof request for the block to Node A.\n+7. Node A sends the block data to Node B.\n+8. Node A sends the requested inclusion proof data to Node B.\n+\n+As with the getutreexoproof message, Node B is free to ask for the utreexoblocksummary message from a node other than Node A.\n+Since there's no commitment to anything in a utreexoblocksummary message, the information given in it can be false.\n+Should the block fail to validate with this propagation, Node B should request the full proof from a different peer.\n+Should the proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+All of the above propagation works the same with Compact Block propagation as well.\n+The requester would need to send a getdata request (MSG_UTREEXO_SUMMARY) after the Compact Block propagation has concluded for high-bandwidth Compact Block propagation and after the header/inv message was received from the broadcasting peer.\n+\n+## Specification\n+\n+Several new data structures and messages are introduced to make the IBD and tx relay possible.\n+All structures are little-endian encoded unless otherwise noted.\n+\n+### New data structures\n+\n+#### Compact leaf data\n+\n+For a CSN to learn the data associated with a UTXO, it must ask for a peer that has it.\n+To authenticate this data, it is committed into the accumulator, and therefore cannot be changed by peer.\n+The committed data is defined in BIP-VALIDATION#LEAF_DATA, but for some information in the leaf data, the receiving peer might already have it, so sending it again is a waste of bandwidth.\n+To save that bandwidth, we only send a Compact Leaf Data, that contains all missing information for the receiving peer to reconstruct the full leaf data.\n+A compact leaf data is defined as:\n+\n+| Field        | type                         | Description     |\n+|--------------|------------------------------|-----------------|\n+| header code  | uint32                       | This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| amount       | int64                        | The amount in sats locked on this output |\n+| scriptPubkey | reconstructable scriptPubkey | The scriptPubkey in a reconstructable format, see [Reconstructable Script](#Reconstructable-Script) for more details |\n+\n+#### Reconstructable Script\n+\n+For some script types (e.g. `ScriptHash`, `PubkeyHash`, `WitnessScriptHash`, `WitnessPubkeyHash`) the actual locking condition is not in the scriptPubkey, but a hash of it.\n+The script which is evaluated is provided as an element of the scriptSig or witness data.\n+\n+Therefore, we can safely just omit the locking script hash from the UTXO data and reconstruct it from the witness or scriptSig.\n+\n+A Reconstructable Script is a tagged union that lets nodes recreate the script without necessarily providing redundant information.\n+If we can reconstruct the committed hash from the transaction data, we just say which type should we expect.\n+Only if the actual script cannot be reconstructed from transaction data, like in the case of taproot outputs, we send the actual script.\n+\n+The serialization and tag values are given below:\n+\n+| Field   | Type                    | Description       | Required                 |\n+|---------|-------------------------|-------------------|--------------------------|\n+| tag     | 1-byte unsigned integer | Script type       | yes                      |\n+| length  | varint                  | The script length | only if tag type is 0x00 |\n+| script  | variable-length vector  | The actual script | only if tag type is 0x00 |\n+\n+The possible values for the tag are:\n+\n+| Value | Script Type         |\n+|-------|---------------------|\n+| 0x00  | Other               |\n+| 0x01  | Pubkey Hash         |\n+| 0x02  | WitnessV0PubkeyHash |\n+| 0x03  | ScriptHash          |\n+| 0x04  | WitnessV0ScriptHash |\n+\n+#### TTL Info\n+\n+For all UTXOs that get added to the Utreexo merkle forest, a TTL info exists for it and includes information necessary for efficiently caching and requesting proofs.\n+The TTL value provides information to determine which leaves should be cached and the death position is used to calculate which positions in the merkle forest we need to prove a block.\n+\n+| Field          | Type   | Description                                                                                                                                                          |\n+|----------------|--------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| TTL            | varint | The time-to-live value of a leaf in the Utreexo merkle forest. The value is determined by the amount of leaves that were added to the accumulator since its creation |\n+| death position | varint | The position in the Utreexo merkle forest when the leaf was removed                                                                                                  |\n+\n+#### Utreexo TTL\n+\n+| Field        | Type                | Description                                                                                                                                                          |\n+|--------------|---------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n+| block height | uint32              | The time-to-live value of a leaf in the Utreexo merkle forest. The value is determined by the amount of leaves that were added to the accumulator since its creation |\n+| length       | varint              | The length of the TTLs                                                                                                                                               |\n+| TTLs         | vector of TTL infos | position in the Utreexo merkle forest when the leaf was removed                                                                                                      |",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 242,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "description?",
      "created_at": "2025-08-11T14:21:45Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266933047",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266933047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 242,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266937404",
      "pull_request_review_id": 3106077404,
      "id": 2266937404,
      "node_id": "PRRC_kwDOAN28mc6HHrg8",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.\n+\n+A hash with the type `utreexoproofhash` represents 4 Utreexo merkle tree positions, each of them little endian serialized and taking up 8 bytes in the 32 byte hash.\n+When sending an inv message to a Utreexo node for a tx, we append `utreexoproofhash` inventory vectors to represent the merkle tree positions for each of the UTXOs being referenced in the inputs of the tx.\n+The Utreexo merkle tree positions are explained in detail in the bip \"Utreexo Accumulator Specification\".\n+Since the hash in an inventory vector is always 32 bytes, any unused space will be padded with the max uint64 value of 18446744073709551615.\n+\n+With these merkle tree positions for the UTXOs referenced in the inputs, we can calculate the needed positions of the merkle hashes to them.\n+These positions are then sent over in the `getdata` message as an another inventory vector.\n+\n+![Utreexo TX relay multiple Utreexo proof hash vectors](bip-utreexo-p2p/utreexo-tx-relay-multiple-proofhash-vectors.png)\n+\n+There may be cases where the transaction is referencing more than 4 merkle positions.\n+In this case, the extra positions are added as another inventory vector.\n+There can be as many additional inventory vectors for the `utreexoproofhash`es as needed.\n+An inventory vector of type `utreexoproofhash` will be ignored if it's not prepended with an inventory vector of type `transaction`.\n+\n+![Utreexo TX relay with multiple txs](bip-utreexo-p2p/utreexo-tx-relay-with-multiple-txs.png)\n+\n+It's possible to have an inv message with multiple txs as well.\n+Note that an inventory vector of type `utreexoproofhash` MUST be appended to the `tx` inventory vector.\n+\n+### Block Propagation\n+\n+![Legacy Block Propagation](bip-utreexo-p2p/legacy-block-propagation.png)\n+\n+Legacy block propagation without Compact Blocks comprises of three steps:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node A sends the block data to Node B.\n+\n+![Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/legacy-block-propagation-with-utreexo-nodes.png)\n+\n+The same block propagation with Utreexo nodes will look like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node B makes a getutreexoproof request for the block.\n+4. Node A sends the block data to Node B.\n+5. Node A sends the inclusion proof to Node B.\n+\n+Note that while Node A sent the inv or the blockhash to Node B, Node B is free to ask for the Utreexo proof from a node other than Node A.\n+This allows a Utreexo node to be notified of new blocks from non-Utreexo nodes.\n+\n+Since there's no PoW required for the inclusion proof, the block may be valid and the proof may be invalid.\n+If the block header validation passed while the full block validation fails, Node B should request the inclusion proof from a different peer.\n+If the new proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+![Bandwidth Saving Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/bandwidth-saving-legacy-block-propagation-with-utreexo-nodes.png)\n+\n+Since the inclusion proof is cached for each of the transaction in the mempool, it's possible to omit the proof hashes for the input UTXOs that we can already prove on our own.\n+This method looks like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request (MSG_UTREEXO_SUMMARY) for the given blockhash.\n+3. Node A sends the utreexoblocksummary message to Node B.\n+4. Node B calculates which proof hashes and leafdatas it needs to prove this block.\n+5. Node B makes a getdata request for the block to Node A.\n+6. Node B makes a getutreexoproof request for the block to Node A.\n+7. Node A sends the block data to Node B.\n+8. Node A sends the requested inclusion proof data to Node B.\n+\n+As with the getutreexoproof message, Node B is free to ask for the utreexoblocksummary message from a node other than Node A.\n+Since there's no commitment to anything in a utreexoblocksummary message, the information given in it can be false.\n+Should the block fail to validate with this propagation, Node B should request the full proof from a different peer.\n+Should the proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+All of the above propagation works the same with Compact Block propagation as well.\n+The requester would need to send a getdata request (MSG_UTREEXO_SUMMARY) after the Compact Block propagation has concluded for high-bandwidth Compact Block propagation and after the header/inv message was received from the broadcasting peer.\n+\n+## Specification\n+\n+Several new data structures and messages are introduced to make the IBD and tx relay possible.\n+All structures are little-endian encoded unless otherwise noted.\n+\n+### New data structures\n+\n+#### Compact leaf data\n+\n+For a CSN to learn the data associated with a UTXO, it must ask for a peer that has it.\n+To authenticate this data, it is committed into the accumulator, and therefore cannot be changed by peer.\n+The committed data is defined in BIP-VALIDATION#LEAF_DATA, but for some information in the leaf data, the receiving peer might already have it, so sending it again is a waste of bandwidth.\n+To save that bandwidth, we only send a Compact Leaf Data, that contains all missing information for the receiving peer to reconstruct the full leaf data.\n+A compact leaf data is defined as:\n+\n+| Field        | type                         | Description     |\n+|--------------|------------------------------|-----------------|\n+| header code  | uint32                       | This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| amount       | int64                        | The amount in sats locked on this output |",
      "path": "utreexo-p2p-bip.md",
      "position": 194,
      "original_position": 194,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jmoik",
        "id": 63734881,
        "node_id": "MDQ6VXNlcjYzNzM0ODgx",
        "avatar_url": "https://avatars.githubusercontent.com/u/63734881?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jmoik",
        "html_url": "https://github.com/jmoik",
        "followers_url": "https://api.github.com/users/jmoik/followers",
        "following_url": "https://api.github.com/users/jmoik/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jmoik/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jmoik/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jmoik/subscriptions",
        "organizations_url": "https://api.github.com/users/jmoik/orgs",
        "repos_url": "https://api.github.com/users/jmoik/repos",
        "events_url": "https://api.github.com/users/jmoik/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jmoik/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "should probably be unsigned",
      "created_at": "2025-08-11T14:23:14Z",
      "updated_at": "2025-08-11T14:34:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2266937404",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2266937404"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267164435",
      "pull_request_review_id": 3106465271,
      "id": 2267164435,
      "node_id": "PRRC_kwDOAN28mc6HIi8T",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 26,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266894044,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "there are two, would be this one\r\n```suggestion\r\nEach block has a corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\r\n```",
      "created_at": "2025-08-11T15:39:19Z",
      "updated_at": "2025-08-11T15:39:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267164435",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267164435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267173538",
      "pull_request_review_id": 3106478939,
      "id": 2267173538,
      "node_id": "PRRC_kwDOAN28mc6HIlKi",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 105,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266920621,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "s/ which make/, which makes/",
      "created_at": "2025-08-11T15:42:09Z",
      "updated_at": "2025-08-11T21:32:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267173538",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267173538"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267845722",
      "pull_request_review_id": 3107530297,
      "id": 2267845722,
      "node_id": "PRRC_kwDOAN28mc6HLJRa",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Per BIPs 2 and 3, this would be \"Requires\" (and currently refers to the same BIP)\r\n\r\n```suggestion\r\nRequires: BIP-???? (Utreexo - Peer Services)\r\n```",
      "created_at": "2025-08-11T19:41:08Z",
      "updated_at": "2025-08-12T16:24:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267845722",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267845722"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267846287",
      "pull_request_review_id": 3107530297,
      "id": 2267846287,
      "node_id": "PRRC_kwDOAN28mc6HLJaP",
      "diff_hunk": "@@ -0,0 +1,342 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)",
      "path": "utreexo-validation-bip.md",
      "position": 1,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Per BIPs 2 and 3, this would be \"Requires\"\r\n\r\n```suggestion\r\nRequires: BIP-???? (Utreexo Accumulator Specification)\r\n```",
      "created_at": "2025-08-11T19:41:22Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267846287",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267846287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267849415",
      "pull_request_review_id": 3107530297,
      "id": 2267849415,
      "node_id": "PRRC_kwDOAN28mc6HLKLH",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Refers to the same document. If correct, this line should be dropped.",
      "created_at": "2025-08-11T19:42:33Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267849415",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267849415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267860444",
      "pull_request_review_id": 3107530297,
      "id": 2267860444,
      "node_id": "PRRC_kwDOAN28mc6HLM3c",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"increases the requirement\" -- perhaps mention here \"compared to the UTXO set\"",
      "created_at": "2025-08-11T19:47:53Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2267860444",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2267860444"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268081567",
      "pull_request_review_id": 3107530297,
      "id": 2268081567,
      "node_id": "PRRC_kwDOAN28mc6HMC2f",
      "diff_hunk": "@@ -0,0 +1,342 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.",
      "path": "utreexo-validation-bip.md",
      "position": 1,
      "original_position": 39,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The preceding 3 paragraphs seem to be duplicates of the accumulator BIP that this BIP requires. Can perhaps remove them or refer to the accumulator BIP motivation.",
      "created_at": "2025-08-11T21:38:20Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268081567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268081567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268096096",
      "pull_request_review_id": 3107530297,
      "id": 2268096096,
      "node_id": "PRRC_kwDOAN28mc6HMGZg",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log₂(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\n+each 1-bit corresponds to a tree, and its position in the binary encoding determines the size of that tree.\n+\n+For example, a forest with 5 elements (binary `0b101`) would consist of two trees: one with 4 elements (representing the 2nd bit)\n+and one with 1 element (representing the 0th bit). A forest with 8 elements (`0b1000`) would require only a single 8-element tree,\n+as 8 is a power of 2.\n+\n+More generally, for any N, the number of trees equals the number of set bits (1s) in the binary representation of N.\n+The size of each tree corresponds to the power of two represented by the position of each set bit.\n+For example, the decimal number 21 (binary `0b10101`) contains three 1-bits, meaning three trees are needed in the forest:\n+a 16-element tree ($2^4$), a 4-element tree ($2^2$), and a 1-element tree ($2^0$), with gaps at the 8-element ($2^3$)\n+and 2-element ($2^1$) positions.\n+\n+Each of the hashes in the forest can be referred by an integer label. This labeling is a convention we find easiest\n+to use but does not directly affect the design of the accumulator; other labelling systems could also work and be\n+translated to this one.\n+\n+We label positions starting at `0` on the bottom left, incrementing as we traverse the bottom row from left to right,\n+and then continue on to higher rows. There may be gaps in the label numbers when moving up a row; the label\n+numbers are \"padded out\" to the next perfect tree that could encompass the entire forest.\n+\n+For example, a forest with 8 leaves will have a single tree and positions will be labeled like this:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+While a forest with 7 leaves will look like this:\n+\n+```\n+\n+|---------------\\\n+12\n+|-------\\       |-------\\\n+08      09      10\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06\n+```\n+\n+\n+When adding another leaf to the accumulator when it's already allocated $2^N$ leaves will result in\n+the accumulator resizing to hold $2^{N+1}$ leaves. For example, when adding a leaf to the accumulator\n+state here:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+The new accumulator will look like so:\n+\n+```\n+\n+|-------------------------------\\\n+28\n+|---------------\\               |---------------\\\n+24              25\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08\n+```\n+\n+The new accumulator with all the positions:\n+\n+```\n+30\n+|-------------------------------\\\n+28                              29\n+|---------------\\               |---------------\\\n+24              25              26              27\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19      20      21      22      23\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15\n+```\n+\n+# Definitions\n+\n+- `hash` refers to a vector of 32 byte arrays.\n+- `[]hash` refers to a vector of `hash`.\n+- `acc` refers to the Utreexo accumulator state. An `acc` is comprised of:\n+  - `roots` refers to the roots of the Merkle Trees. Represented as `[]hash`.\n+  - `numleaves` refers to the number of total leaves added to the accumulator. Represented as uint64.\n+- `root` refers to the top `hash` in a tree in the `acc`.\n+- `proof` is an inclusion proof for elements in the accumulator. It's comprised of two fields:\n+  - `targets` are the positions of the elements being proven. Represented as a vector of uint64.\n+  - `proof` are the hashes needed to hash the roots. Represented as a `[]hash`. `proof` MUST be in ascending order by the node positions.\n+    The proof is considered invalid otherwise.\n+\n+# Specification\n+\n+The hash function SHA512/256[^2] is used for the hash operations in the accumulator.\n+\n+An Utreexo accumulator implementation MUST support these 3 operations: Addition, Verification, and Deletion.\n+\n+## Utility Functions\n+\n+The following utility functions are required for performing accumulator operations:\n+\n+**parent_hash(left, right):** Returns the hash of the concatenation of two child hashes (`left` and `right`).\n+If either child is `nil`, the result is simply the non-`nil` child (treated as if the tree has a single child at that position).\n+if both children are `nil`, the result is `nil`.\n+\n+Implementation:\n+\n+```python\n+def parent_hash(left: bytes, right: bytes) -> bytes:\n+    if right is None and left is None: return None\n+    if left is None: return right\n+    if right is None: return left\n+\n+    return sha512_256(left + right)\n+```\n+\n+**treerows(numleaves):** Returns the minimum number of bits required to represent `numleaves - 1`. This corresponds to the height of the largest tree in the forest. Returns `0` if `numleaves` is `0`.\n+\n+Implementation:\n+\n+```python\n+def treerows(numleaves: int) -> int:\n+    if numleaves == 0: return 0\n+    return (numleaves - 1).bit_length()\n+```\n+\n+**is_right_sibling(position):** Returns `true` if the given `position` corresponds to a right sibling.\n+A position is on the right side if its least significant bit (LSB) is set (i.e., `position & 1 == 1`).\n+And it is the right sibling of a **given node** if all bits but the LSB are identical.\n+\n+Implementation:\n+\n+```python\n+def is_right_sibling(position: int) -> bool:\n+    return (position & 1) == 1\n+```\n+\n+**right_sibling(position):** Returns the position of the right sibling of the given `position`.\n+If `position` is already on the right side, it returns `position` unchanged.\n+Otherwise, turning on the least significant bit moves the position to the right side.\n+\n+Implementation:\n+\n+```python\n+def right_sibling(position: int) -> int:\n+    return position | 1\n+```\n+\n+**sibling(position):** Returns the position of the sibling of the given `position`.\n+If `position` is on the right side, it returns the left sibling by turning off the least significant bit.\n+If `position` is on the left side, it returns the right sibling by turning on the least significant bit.\n+\n+Implementation:\n+\n+```python\n+def sibling(position: int) -> int:\n+    return position ^ 1\n+```\n+\n+**parent(position, total_rows):** Returns the parent position of the given `position` in an accumulator with `total_rows` tree rows.\n+\n+Implementation:\n+\n+```python\n+def parent(position: int, total_rows: int) -> int:\n+    return (position >> 1) | (1 << total_rows)\n+```\n+\n+**root_position(numleaves, row, total_rows):** Returns the position of the root at the specified `row`\n+in an accumulator with `numleaves` leaves and `total_rows` rows. Returns an undefined (garbage) value if\n+no root exists at the given row. This can be calculated as:\n+\n+Implementation:\n+\n+```python\n+def root_position(numleaves: int, row: int, total_rows: int) -> int:\n+    if row < 0 or row > total_rows:\n+        raise ValueError(\"Row must be between 0 and total_rows inclusive\")\n+\n+    mask = (2 << total_rows) - 1\n+    before = numleaves & (mask << (row + 1))\n+    shifted = (before >> row) | (mask << (total_rows + 1 - row))\n+    shifted & mask\n+```\n+\n+**root_present(numleaves, row):** Returns `true` if there is a root at the specified `row`\n+in an accumulator with `numleaves` leaves.\n+\n+Implementation:\n+\n+```python\n+def root_present(numleaves: int, row: int) -> bool:\n+    return numleaves & (1 << row) != 0\n+```\n+\n+**detect_row(position, total_rows):** Returns the row at which the given `position` resides\n+in an accumulator with `total_rows` rows.\n+\n+Implementation:\n+\n+```python\n+for row in range(total_rows, -1, -1):\n+    rowbit = 1 << row\n+    if rowbit & position == 0: return total_rows-row\n+```\n+\n+**isroot(position, numleaves, total_rows):** Returns `true` if the given `position` corresponds to a root\n+in an accumulator with `numleaves` leaves and `total_rows` rows.\n+It has the following precondition:\n+\n+Implementation:\n+\n+```python\n+def isroot(position: int, numleaves: int, total_rows: int) -> bool:\n+    row = detect_row(position, total_rows)\n+    return root_present(numleaves, row) && position == root_position(numleaves, row, total_rows)\n+```\n+\n+**getrootidx(numleaves, position):** Returns the index (within the accumulator's root list)\n+of the root that will be affected when deleting the given `position`.\n+\n+Implementation:\n+\n+```python\n+def getrootidx(numleaves: int, position: int) -> int:\n+    idx = 0\n+    for row in range(tree_rows(numleaves), -1, -1):\n+        if not root_present(numleaves, row):\n+            continue\n+        pos = position\n+        for _ in range(detect_row(position, tree_rows(numleaves)), row): pos = parent(pos, tree_rows(numleaves))\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            return idx\n+        idx += 1\n+```\n+\n+**getrootidxs(numleaves, positions):** Returns a list of indexes corresponding to the roots in the accumulator state\n+that will be affected when deleting the given set of `positions`.\n+This is a wrapper around **getrootidx**, applied to each position in the input list.\n+\n+Implementation:\n+\n+```python\n+def getrootidxs(numleaves: int, positions: [int]) -> [int]:\n+    return [getrootidx(numleaves, pos) for pos in positions]\n+```\n+\n+The following utility functions are required for the P2P layer:\n+\n+**max_possible_pos_at_row(row, total_rows):** Returns the greatest position the row can have in the given total rows.\n+\n+Implementation:\n+\n+```python\n+def max_possible_pos_at_row(row: int, total_rows: int) -> int:\n+    mask = (2 << total_rows) - 1\n+    return ((mask << (total_rows - row)) & mask) - 1\n+```\n+\n+**is_root_position(position, num_leaves, row):** Returns if the given position is a root with the passed in num_leaves and row.\n+\n+```python\n+def is_root_position(position: int, num_leaves: int, row: int) -> bool:\n+    root_present = (num_leaves & (1 << row)) != 0\n+    root_pos = root_position(num_leaves, row, tree_rows(num_leaves))\n+    return root_present and root_pos == position\n+```\n+\n+**proof_positions(targets, num_leaves):** Returns all the positions of the proof hashes that are required to validate the given targets.\n+\n+```python\n+def proof_positions(targets: [int], num_leaves: int) -> [int]:\n+    targets.sort()\n+\n+    next_targets = []\n+    proof_positions = []\n+\n+    total_rows = tree_rows(num_leaves)\n+    for row in range(total_rows + 1):\n+        i = 0\n+        while i < len(targets):\n+            target = targets[i]\n+\n+            if target > max_possible_pos_at_row(row, total_rows):\n+                i += 1\n+                continue\n+\n+            if row != detect_row(target, total_rows):\n+                i += 1\n+                continue\n+\n+            if is_root_position(target, num_leaves, row):\n+                i += 1\n+                continue\n+\n+            if i + 1 < len(targets) and right_sib(target) == targets[i + 1]:\n+                parent_pos = parent(target, total_rows)\n+                next_targets.append(parent_pos)\n+                targets[i] = parent_pos\n+                i += 2  # skip the sibling\n+                continue\n+\n+            # Sibling is a needed proof position\n+            proof_positions.append(sibling(target))\n+            parent_pos = parent(target, total_rows)\n+            next_targets.append(parent_pos)\n+            targets[i] = parent_pos\n+            i += 1\n+\n+        targets.sort()\n+\n+    return proof_positions\n+```\n+\n+### CalculateRoots\n+\n+Both the Verification and Deletion operations depend on the Calculate Roots function.\n+\n+- Inputs:\n+  - `acc.numleaves`.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The passed in `[]hash` and `proof.targets` should be in the same order. The element at index `i` in `[]hashes` should\n+be the hash for element at index `i` in `proof.targets`. Otherwise the returned roots will be invalid.\n+\n+The calculate roots algorithm is defined as `CalculateRoots(numleaves, []hash, proof) -> calculated_roots`:\n+\n+- Check if length of `proof.targets` is equal to the length of `[]hash`. Return early if they're not equal.\n+- map `proof.targets` to their hash.\n+- Sort `proof.targets`.\n+- Loop until `proof.targets` are empty:\n+  - Pop off the first target in `proof.targets`. Pop off the associated `hash` as well.\n+  - If the target is a root, we append the current position's `hash` to the calculated_roots vector and continue.\n+  - Check if the next target in `proof.targets` is the right sibling of the current target. If it is, grab its hash as the sibling hash. Otherwise the next hash in `proof.proof` is the sibling hash. Raise error if `proof.proof` is empty.\n+  - Figure out if the sibling hash is on the left or the right.\n+  - Apply *parent_hash* to the current position's `hash` and the sibling `hash` with regards to their positioning.\n+  - Calculate parent position.\n+  - Insert parent position into the sorted `proof.targets`.\n+  - Map parent hash to the parent position.\n+- Return calculated_roots\n+\n+The algorithm implemented in python:\n+\n+```python\n+def calculate_roots(numleaves: int, dels: [bytes], proof: Proof) -> [bytes]:\n+    if not proof.targets: return []\n+    if len(proof.targets) != len(dels): return []\n+\n+    position_hashes = {}\n+    for i, target in enumerate(proof.targets):\n+        position_hashes[target] = None if dels is None else dels[i]\n+\n+    calculated_roots = []\n+    sortedTargets = sorted(proof.targets)\n+    while sortedTargets:\n+        pos = sortedTargets.pop(0)\n+        cur_hash = position_hashes.pop(pos)\n+\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            calculated_roots.append(cur_hash)\n+            continue\n+\n+        parent_pos, p_hash = parent(pos, tree_rows(numleaves)), bytes\n+        if sortedTargets and right_sibling(pos) == sortedTargets[0]:\n+            sib_pos = sortedTargets.pop(0)\n+            p_hash = parent_hash(cur_hash, position_hashes.pop(sib_pos))\n+        else:\n+            proofhash = proof.proof.pop(0)\n+            p_hash = parent_hash(proofhash, cur_hash) if is_right_sibling(pos) else parent_hash(cur_hash, proofhash)\n+\n+        position_hashes[parent_pos] = p_hash\n+        bisect.insort(sortedTargets, parent_pos)\n+\n+    return calculated_roots\n+```\n+\n+## Addition\n+\n+Addition adds a leaf to the accumulator. The added leaves are able to be verified of their\n+existence with an inclusion proof.\n+\n+Inputs:\n+  - `acc`.\n+  - `hash` to be added.\n+\n+The Addition algorithm Add(`acc`, `hash`) is defined as:\n+\n+- From row 0 to and **including** `treerows(acc.numleaves)`\n+  - Break if there's no root at this row.\n+  - remove the last root from `acc.roots`.\n+    - Calculate the parent hash of the removed root and the `hash` to be added using *parent_hash*.\n+  - Make the result from `parent_hash` the new `hash`.\n+- Increment `acc.numleaves` by 1.\n+- Append `hash` to `acc.roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def add(self, hash: bytes):\n+    for row in range(tree_rows(self.numleaves)+1):\n+        if not root_present(self.numleaves, row): break\n+        root = self.roots.pop()\n+        hash = parent_hash(root, hash)\n+\n+    self.roots.append(hash)\n+    self.numleaves += 1\n+```\n+\n+## Verification\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The Verification algorithm `Verify(acc, []hash, proof) -> bool` is defined as:\n+\n+- Raise error if length of `[]hash` differ from `proof.targets`.\n+- Get modified_roots from `CalculateRoots(acc.numleaves, []hash, Proof)`.\n+- Get `root_idxs` from `getrootidxs`.\n+- Raise error if the length of `modified_roots` and `root_idxs` do not match.\n+- Attempt to match roots in modified_roots with roots in `acc`. Raise error if we don't find all the roots in the modified_roots in `acc`.\n+- Return `true`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def verify(self, dels: [bytes], proof: Proof) -> bool:\n+    if len(dels) != len(proof.targets):\n+        raise(\"len of dels and proof.targets differ\")\n+\n+    root_candidates = calculate_roots(self.numleaves, dels, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+\n+    if len(root_candidates) != len(root_idxs):\n+        raise(\"length of calculated roots from the proof and expected root count differ\")\n+\n+    for i, idx in enumerate(root_idxs):\n+        if self.roots[idx] != root_candidates[i]:\n+            raise(\"calculated roots from the proof and matched roots differ\")\n+\n+    return true\n+```\n+\n+## Deletion\n+\n+Deletion removes leaves from the accumulator. The deletion algorithm takes in a `proof` but it does not\n+verify that the proof is valid. It assumes that the passed in proof has already passed verification.\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `proof`.\n+\n+The Deletion algorithm `Delete(acc, Proof) -> acc` is defined as:\n+\n+- Get the modified indexes of the roots `root_idxes` from `getrootidxs`.\n+- Get modified_roots from `Calculate_Roots(acc.numleaves, []positions, Proof)`.\n+- Replace the matching indexes from the `root_idxes` in `acc.roots` with `modified_roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def delete(self, proof: Proof):\n+    modified_roots = calculate_roots(self.numleaves, None, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+    for i, idx in enumerate(root_idxs):\n+        self.roots[idx] = modified_roots[i]\n+```\n+\n+## Rationale\n+\n+**Why use a hash-based accumulator instead of something more powerful (e.g., RSA accumulators[^3], class groups[^4], etc.)?**\n+\n+While RSA accumulators and similar constructions offer significant advantages in proof size—often allowing a\n+single proof to cover an entire block's worth of UTXOs—the trade-offs in proof generation cost and latency are\n+substantial. In RSA-based designs, creating a proof for any given UTXO at arbitrary times can be computationally\n+intensive, especially as the number of UTXOs grows.\n+\n+Utreexo's design is driven by the need for Bridge Nodes: nodes that maintain backward compatibility with existing",
      "path": "utreexo-accumulator-bip.md",
      "position": 554,
      "original_position": 555,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This BIP appears to be missing a required backwards compatibility section.",
      "created_at": "2025-08-11T21:48:22Z",
      "updated_at": "2025-08-11T21:52:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268096096",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268096096"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": 554,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268118463",
      "pull_request_review_id": 3107913820,
      "id": 2268118463,
      "node_id": "PRRC_kwDOAN28mc6HML2_",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "luisschwab",
        "id": 97608688,
        "node_id": "U_kgDOBdFj8A",
        "avatar_url": "https://avatars.githubusercontent.com/u/97608688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luisschwab",
        "html_url": "https://github.com/luisschwab",
        "followers_url": "https://api.github.com/users/luisschwab/followers",
        "following_url": "https://api.github.com/users/luisschwab/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luisschwab/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luisschwab/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luisschwab/subscriptions",
        "organizations_url": "https://api.github.com/users/luisschwab/orgs",
        "repos_url": "https://api.github.com/users/luisschwab/repos",
        "events_url": "https://api.github.com/users/luisschwab/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luisschwab/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nTo accommodate this, Utreexo increases the storage requirement for the accumulator state to $O(log_2(N))$,\r\n```\r\n\r\nLaTeX renderers don't play nice with this unicode symbol.",
      "created_at": "2025-08-11T22:05:03Z",
      "updated_at": "2025-08-11T22:06:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268118463",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268118463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268118700",
      "pull_request_review_id": 3107913820,
      "id": 2268118700,
      "node_id": "PRRC_kwDOAN28mc6HML6s",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log₂(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 66,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": null,
      "user": {
        "login": "luisschwab",
        "id": 97608688,
        "node_id": "U_kgDOBdFj8A",
        "avatar_url": "https://avatars.githubusercontent.com/u/97608688?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luisschwab",
        "html_url": "https://github.com/luisschwab",
        "followers_url": "https://api.github.com/users/luisschwab/followers",
        "following_url": "https://api.github.com/users/luisschwab/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luisschwab/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luisschwab/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luisschwab/subscriptions",
        "organizations_url": "https://api.github.com/users/luisschwab/orgs",
        "repos_url": "https://api.github.com/users/luisschwab/repos",
        "events_url": "https://api.github.com/users/luisschwab/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luisschwab/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\napproximately $\\frac{log_2(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\r\n```\r\n\r\nLaTeX renderers don't play nice with this unicode symbol.",
      "created_at": "2025-08-11T22:05:14Z",
      "updated_at": "2025-08-11T22:06:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268118700",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268118700"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268508383",
      "pull_request_review_id": 3108452258,
      "id": 2268508383,
      "node_id": "PRRC_kwDOAN28mc6HNrDf",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 105,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266920621,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'll go with `, which makes` since `includes` sounds like the `utreexoproofhash` invvect has other information as well\n\nEDIT: Replaced with `, which makes` in the latest push",
      "created_at": "2025-08-12T03:49:15Z",
      "updated_at": "2025-08-12T06:57:53Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268508383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268508383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268556363",
      "pull_request_review_id": 3108509674,
      "id": 2268556363,
      "node_id": "PRRC_kwDOAN28mc6HN2xL",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.\n+\n+![Utreexo TX relay](bip-utreexo-p2p/utreexo-tx-relay.png)\n+\n+The transaction relay for Utreexo nodes doesn't add any extra round trips.\n+However, it does include extra inventory vectors in the inv message.\n+\n+We introduce a new inventory vector type called `utreexoproofhash` which make up the extra information that a Utreexo node will receive.\n+\n+A hash with the type `utreexoproofhash` represents 4 Utreexo merkle tree positions, each of them little endian serialized and taking up 8 bytes in the 32 byte hash.\n+When sending an inv message to a Utreexo node for a tx, we append `utreexoproofhash` inventory vectors to represent the merkle tree positions for each of the UTXOs being referenced in the inputs of the tx.\n+The Utreexo merkle tree positions are explained in detail in the bip \"Utreexo Accumulator Specification\".\n+Since the hash in an inventory vector is always 32 bytes, any unused space will be padded with the max uint64 value of 18446744073709551615.\n+\n+With these merkle tree positions for the UTXOs referenced in the inputs, we can calculate the needed positions of the merkle hashes to them.\n+These positions are then sent over in the `getdata` message as an another inventory vector.\n+\n+![Utreexo TX relay multiple Utreexo proof hash vectors](bip-utreexo-p2p/utreexo-tx-relay-multiple-proofhash-vectors.png)\n+\n+There may be cases where the transaction is referencing more than 4 merkle positions.\n+In this case, the extra positions are added as another inventory vector.\n+There can be as many additional inventory vectors for the `utreexoproofhash`es as needed.\n+An inventory vector of type `utreexoproofhash` will be ignored if it's not prepended with an inventory vector of type `transaction`.\n+\n+![Utreexo TX relay with multiple txs](bip-utreexo-p2p/utreexo-tx-relay-with-multiple-txs.png)\n+\n+It's possible to have an inv message with multiple txs as well.\n+Note that an inventory vector of type `utreexoproofhash` MUST be appended to the `tx` inventory vector.\n+\n+### Block Propagation\n+\n+![Legacy Block Propagation](bip-utreexo-p2p/legacy-block-propagation.png)\n+\n+Legacy block propagation without Compact Blocks comprises of three steps:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node A sends the block data to Node B.\n+\n+![Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/legacy-block-propagation-with-utreexo-nodes.png)\n+\n+The same block propagation with Utreexo nodes will look like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request for the block.\n+3. Node B makes a getutreexoproof request for the block.\n+4. Node A sends the block data to Node B.\n+5. Node A sends the inclusion proof to Node B.\n+\n+Note that while Node A sent the inv or the blockhash to Node B, Node B is free to ask for the Utreexo proof from a node other than Node A.\n+This allows a Utreexo node to be notified of new blocks from non-Utreexo nodes.\n+\n+Since there's no PoW required for the inclusion proof, the block may be valid and the proof may be invalid.\n+If the block header validation passed while the full block validation fails, Node B should request the inclusion proof from a different peer.\n+If the new proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+![Bandwidth Saving Legacy Block Propagation with Utreexo Nodes](bip-utreexo-p2p/bandwidth-saving-legacy-block-propagation-with-utreexo-nodes.png)\n+\n+Since the inclusion proof is cached for each of the transaction in the mempool, it's possible to omit the proof hashes for the input UTXOs that we can already prove on our own.\n+This method looks like so:\n+\n+1. Node A sends an inv message or a block header to Node B.\n+2. Node B makes a getdata request (MSG_UTREEXO_SUMMARY) for the given blockhash.\n+3. Node A sends the utreexoblocksummary message to Node B.\n+4. Node B calculates which proof hashes and leafdatas it needs to prove this block.\n+5. Node B makes a getdata request for the block to Node A.\n+6. Node B makes a getutreexoproof request for the block to Node A.\n+7. Node A sends the block data to Node B.\n+8. Node A sends the requested inclusion proof data to Node B.\n+\n+As with the getutreexoproof message, Node B is free to ask for the utreexoblocksummary message from a node other than Node A.\n+Since there's no commitment to anything in a utreexoblocksummary message, the information given in it can be false.\n+Should the block fail to validate with this propagation, Node B should request the full proof from a different peer.\n+Should the proof and the block pass validation, we can conclude that Node A is malicious and ban the peer.\n+\n+All of the above propagation works the same with Compact Block propagation as well.\n+The requester would need to send a getdata request (MSG_UTREEXO_SUMMARY) after the Compact Block propagation has concluded for high-bandwidth Compact Block propagation and after the header/inv message was received from the broadcasting peer.\n+\n+## Specification\n+\n+Several new data structures and messages are introduced to make the IBD and tx relay possible.\n+All structures are little-endian encoded unless otherwise noted.\n+\n+### New data structures\n+\n+#### Compact leaf data\n+\n+For a CSN to learn the data associated with a UTXO, it must ask for a peer that has it.\n+To authenticate this data, it is committed into the accumulator, and therefore cannot be changed by peer.\n+The committed data is defined in BIP-VALIDATION#LEAF_DATA, but for some information in the leaf data, the receiving peer might already have it, so sending it again is a waste of bandwidth.\n+To save that bandwidth, we only send a Compact Leaf Data, that contains all missing information for the receiving peer to reconstruct the full leaf data.\n+A compact leaf data is defined as:\n+\n+| Field        | type                         | Description     |\n+|--------------|------------------------------|-----------------|\n+| header code  | uint32                       | This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| amount       | int64                        | The amount in sats locked on this output |",
      "path": "utreexo-p2p-bip.md",
      "position": 194,
      "original_position": 194,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266937404,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It makes sense to have it as int64 as `CAmount` is represented as `int64` in code https://github.com/bitcoin/bitcoin/blob/273e600e65c2e31a6e9a0bd72b40672aaa503b08/src/consensus/amount.h#L12\n\nOther implementations follow this as well:https://github.com/btcsuite/btcd/blob/baebb836c2d4692da3de3b0d437f4da6ce915546/wire/msgtx.go#L337",
      "created_at": "2025-08-12T04:38:57Z",
      "updated_at": "2025-08-12T04:38:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268556363",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268556363"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 194,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268584595",
      "pull_request_review_id": 3108546515,
      "id": 2268584595,
      "node_id": "PRRC_kwDOAN28mc6HN9qT",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267860444,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ah the paragraph could be worded better.\n\nIt's referring to how the merkle forest is expanded to support more leaves. Like sparse merkle trees, you pre-allocate the Utreexo accumulator to hold 2^n leaves. If you want to hold (2^n)+1 leaves, you need to resize the accumulator to hold 2^n+1 leaves.",
      "created_at": "2025-08-12T05:03:58Z",
      "updated_at": "2025-08-12T05:03:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268584595",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268584595"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268685762",
      "pull_request_review_id": 3108680478,
      "id": 2268685762,
      "node_id": "PRRC_kwDOAN28mc6HOWXC",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267860444,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "~~Oh I read it wrong too. It increases the requirements vs the paper referenced in [^1].~~\n\n~~Fixing this...~~\n\nChanged the sentence to improve legibility",
      "created_at": "2025-08-12T06:05:46Z",
      "updated_at": "2025-08-12T06:55:17Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268685762",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268685762"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268781592",
      "pull_request_review_id": 3108812390,
      "id": 2268781592,
      "node_id": "PRRC_kwDOAN28mc6HOtwY",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2268118463,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:52:39Z",
      "updated_at": "2025-08-12T06:52:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268781592",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268781592"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268782264",
      "pull_request_review_id": 3108813541,
      "id": 2268782264,
      "node_id": "PRRC_kwDOAN28mc6HOt64",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log₂(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 66,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2268118700,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:52:57Z",
      "updated_at": "2025-08-12T06:52:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268782264",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268782264"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268783509",
      "pull_request_review_id": 3108815244,
      "id": 2268783509,
      "node_id": "PRRC_kwDOAN28mc6HOuOV",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267845722,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:53:28Z",
      "updated_at": "2025-08-12T06:53:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268783509",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268783509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268784111",
      "pull_request_review_id": 3108815976,
      "id": 2268784111,
      "node_id": "PRRC_kwDOAN28mc6HOuXv",
      "diff_hunk": "@@ -0,0 +1,342 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)",
      "path": "utreexo-validation-bip.md",
      "position": 1,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267846287,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:53:45Z",
      "updated_at": "2025-08-12T06:53:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268784111",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268784111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268784944",
      "pull_request_review_id": 3108817475,
      "id": 2268784944,
      "node_id": "PRRC_kwDOAN28mc6HOukw",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)",
      "path": "utreexo-accumulator-bip.md",
      "position": 1,
      "original_position": 13,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2267849415,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Dropped in the latest push",
      "created_at": "2025-08-12T06:54:05Z",
      "updated_at": "2025-08-12T06:54:05Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268784944",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268784944"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 13,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268789478",
      "pull_request_review_id": 3108824269,
      "id": 2268789478,
      "node_id": "PRRC_kwDOAN28mc6HOvrm",
      "diff_hunk": "@@ -0,0 +1,342 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.",
      "path": "utreexo-validation-bip.md",
      "position": 1,
      "original_position": 39,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2268081567,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed the preceding 3 paragraphs in the latest push",
      "created_at": "2025-08-12T06:56:04Z",
      "updated_at": "2025-08-12T06:56:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268789478",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268789478"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268790205",
      "pull_request_review_id": 3108825607,
      "id": 2268790205,
      "node_id": "PRRC_kwDOAN28mc6HOv29",
      "diff_hunk": "@@ -0,0 +1,627 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent—a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely—bounded only by block size—it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo increases the storage requirement for the accumulator state to O(log₂(N)),\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log₂(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\n+each 1-bit corresponds to a tree, and its position in the binary encoding determines the size of that tree.\n+\n+For example, a forest with 5 elements (binary `0b101`) would consist of two trees: one with 4 elements (representing the 2nd bit)\n+and one with 1 element (representing the 0th bit). A forest with 8 elements (`0b1000`) would require only a single 8-element tree,\n+as 8 is a power of 2.\n+\n+More generally, for any N, the number of trees equals the number of set bits (1s) in the binary representation of N.\n+The size of each tree corresponds to the power of two represented by the position of each set bit.\n+For example, the decimal number 21 (binary `0b10101`) contains three 1-bits, meaning three trees are needed in the forest:\n+a 16-element tree ($2^4$), a 4-element tree ($2^2$), and a 1-element tree ($2^0$), with gaps at the 8-element ($2^3$)\n+and 2-element ($2^1$) positions.\n+\n+Each of the hashes in the forest can be referred by an integer label. This labeling is a convention we find easiest\n+to use but does not directly affect the design of the accumulator; other labelling systems could also work and be\n+translated to this one.\n+\n+We label positions starting at `0` on the bottom left, incrementing as we traverse the bottom row from left to right,\n+and then continue on to higher rows. There may be gaps in the label numbers when moving up a row; the label\n+numbers are \"padded out\" to the next perfect tree that could encompass the entire forest.\n+\n+For example, a forest with 8 leaves will have a single tree and positions will be labeled like this:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+While a forest with 7 leaves will look like this:\n+\n+```\n+\n+|---------------\\\n+12\n+|-------\\       |-------\\\n+08      09      10\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06\n+```\n+\n+\n+When adding another leaf to the accumulator when it's already allocated $2^N$ leaves will result in\n+the accumulator resizing to hold $2^{N+1}$ leaves. For example, when adding a leaf to the accumulator\n+state here:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+The new accumulator will look like so:\n+\n+```\n+\n+|-------------------------------\\\n+28\n+|---------------\\               |---------------\\\n+24              25\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08\n+```\n+\n+The new accumulator with all the positions:\n+\n+```\n+30\n+|-------------------------------\\\n+28                              29\n+|---------------\\               |---------------\\\n+24              25              26              27\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19      20      21      22      23\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15\n+```\n+\n+# Definitions\n+\n+- `hash` refers to a vector of 32 byte arrays.\n+- `[]hash` refers to a vector of `hash`.\n+- `acc` refers to the Utreexo accumulator state. An `acc` is comprised of:\n+  - `roots` refers to the roots of the Merkle Trees. Represented as `[]hash`.\n+  - `numleaves` refers to the number of total leaves added to the accumulator. Represented as uint64.\n+- `root` refers to the top `hash` in a tree in the `acc`.\n+- `proof` is an inclusion proof for elements in the accumulator. It's comprised of two fields:\n+  - `targets` are the positions of the elements being proven. Represented as a vector of uint64.\n+  - `proof` are the hashes needed to hash the roots. Represented as a `[]hash`. `proof` MUST be in ascending order by the node positions.\n+    The proof is considered invalid otherwise.\n+\n+# Specification\n+\n+The hash function SHA512/256[^2] is used for the hash operations in the accumulator.\n+\n+An Utreexo accumulator implementation MUST support these 3 operations: Addition, Verification, and Deletion.\n+\n+## Utility Functions\n+\n+The following utility functions are required for performing accumulator operations:\n+\n+**parent_hash(left, right):** Returns the hash of the concatenation of two child hashes (`left` and `right`).\n+If either child is `nil`, the result is simply the non-`nil` child (treated as if the tree has a single child at that position).\n+if both children are `nil`, the result is `nil`.\n+\n+Implementation:\n+\n+```python\n+def parent_hash(left: bytes, right: bytes) -> bytes:\n+    if right is None and left is None: return None\n+    if left is None: return right\n+    if right is None: return left\n+\n+    return sha512_256(left + right)\n+```\n+\n+**treerows(numleaves):** Returns the minimum number of bits required to represent `numleaves - 1`. This corresponds to the height of the largest tree in the forest. Returns `0` if `numleaves` is `0`.\n+\n+Implementation:\n+\n+```python\n+def treerows(numleaves: int) -> int:\n+    if numleaves == 0: return 0\n+    return (numleaves - 1).bit_length()\n+```\n+\n+**is_right_sibling(position):** Returns `true` if the given `position` corresponds to a right sibling.\n+A position is on the right side if its least significant bit (LSB) is set (i.e., `position & 1 == 1`).\n+And it is the right sibling of a **given node** if all bits but the LSB are identical.\n+\n+Implementation:\n+\n+```python\n+def is_right_sibling(position: int) -> bool:\n+    return (position & 1) == 1\n+```\n+\n+**right_sibling(position):** Returns the position of the right sibling of the given `position`.\n+If `position` is already on the right side, it returns `position` unchanged.\n+Otherwise, turning on the least significant bit moves the position to the right side.\n+\n+Implementation:\n+\n+```python\n+def right_sibling(position: int) -> int:\n+    return position | 1\n+```\n+\n+**sibling(position):** Returns the position of the sibling of the given `position`.\n+If `position` is on the right side, it returns the left sibling by turning off the least significant bit.\n+If `position` is on the left side, it returns the right sibling by turning on the least significant bit.\n+\n+Implementation:\n+\n+```python\n+def sibling(position: int) -> int:\n+    return position ^ 1\n+```\n+\n+**parent(position, total_rows):** Returns the parent position of the given `position` in an accumulator with `total_rows` tree rows.\n+\n+Implementation:\n+\n+```python\n+def parent(position: int, total_rows: int) -> int:\n+    return (position >> 1) | (1 << total_rows)\n+```\n+\n+**root_position(numleaves, row, total_rows):** Returns the position of the root at the specified `row`\n+in an accumulator with `numleaves` leaves and `total_rows` rows. Returns an undefined (garbage) value if\n+no root exists at the given row. This can be calculated as:\n+\n+Implementation:\n+\n+```python\n+def root_position(numleaves: int, row: int, total_rows: int) -> int:\n+    if row < 0 or row > total_rows:\n+        raise ValueError(\"Row must be between 0 and total_rows inclusive\")\n+\n+    mask = (2 << total_rows) - 1\n+    before = numleaves & (mask << (row + 1))\n+    shifted = (before >> row) | (mask << (total_rows + 1 - row))\n+    shifted & mask\n+```\n+\n+**root_present(numleaves, row):** Returns `true` if there is a root at the specified `row`\n+in an accumulator with `numleaves` leaves.\n+\n+Implementation:\n+\n+```python\n+def root_present(numleaves: int, row: int) -> bool:\n+    return numleaves & (1 << row) != 0\n+```\n+\n+**detect_row(position, total_rows):** Returns the row at which the given `position` resides\n+in an accumulator with `total_rows` rows.\n+\n+Implementation:\n+\n+```python\n+for row in range(total_rows, -1, -1):\n+    rowbit = 1 << row\n+    if rowbit & position == 0: return total_rows-row\n+```\n+\n+**isroot(position, numleaves, total_rows):** Returns `true` if the given `position` corresponds to a root\n+in an accumulator with `numleaves` leaves and `total_rows` rows.\n+It has the following precondition:\n+\n+Implementation:\n+\n+```python\n+def isroot(position: int, numleaves: int, total_rows: int) -> bool:\n+    row = detect_row(position, total_rows)\n+    return root_present(numleaves, row) && position == root_position(numleaves, row, total_rows)\n+```\n+\n+**getrootidx(numleaves, position):** Returns the index (within the accumulator's root list)\n+of the root that will be affected when deleting the given `position`.\n+\n+Implementation:\n+\n+```python\n+def getrootidx(numleaves: int, position: int) -> int:\n+    idx = 0\n+    for row in range(tree_rows(numleaves), -1, -1):\n+        if not root_present(numleaves, row):\n+            continue\n+        pos = position\n+        for _ in range(detect_row(position, tree_rows(numleaves)), row): pos = parent(pos, tree_rows(numleaves))\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            return idx\n+        idx += 1\n+```\n+\n+**getrootidxs(numleaves, positions):** Returns a list of indexes corresponding to the roots in the accumulator state\n+that will be affected when deleting the given set of `positions`.\n+This is a wrapper around **getrootidx**, applied to each position in the input list.\n+\n+Implementation:\n+\n+```python\n+def getrootidxs(numleaves: int, positions: [int]) -> [int]:\n+    return [getrootidx(numleaves, pos) for pos in positions]\n+```\n+\n+The following utility functions are required for the P2P layer:\n+\n+**max_possible_pos_at_row(row, total_rows):** Returns the greatest position the row can have in the given total rows.\n+\n+Implementation:\n+\n+```python\n+def max_possible_pos_at_row(row: int, total_rows: int) -> int:\n+    mask = (2 << total_rows) - 1\n+    return ((mask << (total_rows - row)) & mask) - 1\n+```\n+\n+**is_root_position(position, num_leaves, row):** Returns if the given position is a root with the passed in num_leaves and row.\n+\n+```python\n+def is_root_position(position: int, num_leaves: int, row: int) -> bool:\n+    root_present = (num_leaves & (1 << row)) != 0\n+    root_pos = root_position(num_leaves, row, tree_rows(num_leaves))\n+    return root_present and root_pos == position\n+```\n+\n+**proof_positions(targets, num_leaves):** Returns all the positions of the proof hashes that are required to validate the given targets.\n+\n+```python\n+def proof_positions(targets: [int], num_leaves: int) -> [int]:\n+    targets.sort()\n+\n+    next_targets = []\n+    proof_positions = []\n+\n+    total_rows = tree_rows(num_leaves)\n+    for row in range(total_rows + 1):\n+        i = 0\n+        while i < len(targets):\n+            target = targets[i]\n+\n+            if target > max_possible_pos_at_row(row, total_rows):\n+                i += 1\n+                continue\n+\n+            if row != detect_row(target, total_rows):\n+                i += 1\n+                continue\n+\n+            if is_root_position(target, num_leaves, row):\n+                i += 1\n+                continue\n+\n+            if i + 1 < len(targets) and right_sib(target) == targets[i + 1]:\n+                parent_pos = parent(target, total_rows)\n+                next_targets.append(parent_pos)\n+                targets[i] = parent_pos\n+                i += 2  # skip the sibling\n+                continue\n+\n+            # Sibling is a needed proof position\n+            proof_positions.append(sibling(target))\n+            parent_pos = parent(target, total_rows)\n+            next_targets.append(parent_pos)\n+            targets[i] = parent_pos\n+            i += 1\n+\n+        targets.sort()\n+\n+    return proof_positions\n+```\n+\n+### CalculateRoots\n+\n+Both the Verification and Deletion operations depend on the Calculate Roots function.\n+\n+- Inputs:\n+  - `acc.numleaves`.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The passed in `[]hash` and `proof.targets` should be in the same order. The element at index `i` in `[]hashes` should\n+be the hash for element at index `i` in `proof.targets`. Otherwise the returned roots will be invalid.\n+\n+The calculate roots algorithm is defined as `CalculateRoots(numleaves, []hash, proof) -> calculated_roots`:\n+\n+- Check if length of `proof.targets` is equal to the length of `[]hash`. Return early if they're not equal.\n+- map `proof.targets` to their hash.\n+- Sort `proof.targets`.\n+- Loop until `proof.targets` are empty:\n+  - Pop off the first target in `proof.targets`. Pop off the associated `hash` as well.\n+  - If the target is a root, we append the current position's `hash` to the calculated_roots vector and continue.\n+  - Check if the next target in `proof.targets` is the right sibling of the current target. If it is, grab its hash as the sibling hash. Otherwise the next hash in `proof.proof` is the sibling hash. Raise error if `proof.proof` is empty.\n+  - Figure out if the sibling hash is on the left or the right.\n+  - Apply *parent_hash* to the current position's `hash` and the sibling `hash` with regards to their positioning.\n+  - Calculate parent position.\n+  - Insert parent position into the sorted `proof.targets`.\n+  - Map parent hash to the parent position.\n+- Return calculated_roots\n+\n+The algorithm implemented in python:\n+\n+```python\n+def calculate_roots(numleaves: int, dels: [bytes], proof: Proof) -> [bytes]:\n+    if not proof.targets: return []\n+    if len(proof.targets) != len(dels): return []\n+\n+    position_hashes = {}\n+    for i, target in enumerate(proof.targets):\n+        position_hashes[target] = None if dels is None else dels[i]\n+\n+    calculated_roots = []\n+    sortedTargets = sorted(proof.targets)\n+    while sortedTargets:\n+        pos = sortedTargets.pop(0)\n+        cur_hash = position_hashes.pop(pos)\n+\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            calculated_roots.append(cur_hash)\n+            continue\n+\n+        parent_pos, p_hash = parent(pos, tree_rows(numleaves)), bytes\n+        if sortedTargets and right_sibling(pos) == sortedTargets[0]:\n+            sib_pos = sortedTargets.pop(0)\n+            p_hash = parent_hash(cur_hash, position_hashes.pop(sib_pos))\n+        else:\n+            proofhash = proof.proof.pop(0)\n+            p_hash = parent_hash(proofhash, cur_hash) if is_right_sibling(pos) else parent_hash(cur_hash, proofhash)\n+\n+        position_hashes[parent_pos] = p_hash\n+        bisect.insort(sortedTargets, parent_pos)\n+\n+    return calculated_roots\n+```\n+\n+## Addition\n+\n+Addition adds a leaf to the accumulator. The added leaves are able to be verified of their\n+existence with an inclusion proof.\n+\n+Inputs:\n+  - `acc`.\n+  - `hash` to be added.\n+\n+The Addition algorithm Add(`acc`, `hash`) is defined as:\n+\n+- From row 0 to and **including** `treerows(acc.numleaves)`\n+  - Break if there's no root at this row.\n+  - remove the last root from `acc.roots`.\n+    - Calculate the parent hash of the removed root and the `hash` to be added using *parent_hash*.\n+  - Make the result from `parent_hash` the new `hash`.\n+- Increment `acc.numleaves` by 1.\n+- Append `hash` to `acc.roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def add(self, hash: bytes):\n+    for row in range(tree_rows(self.numleaves)+1):\n+        if not root_present(self.numleaves, row): break\n+        root = self.roots.pop()\n+        hash = parent_hash(root, hash)\n+\n+    self.roots.append(hash)\n+    self.numleaves += 1\n+```\n+\n+## Verification\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The Verification algorithm `Verify(acc, []hash, proof) -> bool` is defined as:\n+\n+- Raise error if length of `[]hash` differ from `proof.targets`.\n+- Get modified_roots from `CalculateRoots(acc.numleaves, []hash, Proof)`.\n+- Get `root_idxs` from `getrootidxs`.\n+- Raise error if the length of `modified_roots` and `root_idxs` do not match.\n+- Attempt to match roots in modified_roots with roots in `acc`. Raise error if we don't find all the roots in the modified_roots in `acc`.\n+- Return `true`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def verify(self, dels: [bytes], proof: Proof) -> bool:\n+    if len(dels) != len(proof.targets):\n+        raise(\"len of dels and proof.targets differ\")\n+\n+    root_candidates = calculate_roots(self.numleaves, dels, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+\n+    if len(root_candidates) != len(root_idxs):\n+        raise(\"length of calculated roots from the proof and expected root count differ\")\n+\n+    for i, idx in enumerate(root_idxs):\n+        if self.roots[idx] != root_candidates[i]:\n+            raise(\"calculated roots from the proof and matched roots differ\")\n+\n+    return true\n+```\n+\n+## Deletion\n+\n+Deletion removes leaves from the accumulator. The deletion algorithm takes in a `proof` but it does not\n+verify that the proof is valid. It assumes that the passed in proof has already passed verification.\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `proof`.\n+\n+The Deletion algorithm `Delete(acc, Proof) -> acc` is defined as:\n+\n+- Get the modified indexes of the roots `root_idxes` from `getrootidxs`.\n+- Get modified_roots from `Calculate_Roots(acc.numleaves, []positions, Proof)`.\n+- Replace the matching indexes from the `root_idxes` in `acc.roots` with `modified_roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def delete(self, proof: Proof):\n+    modified_roots = calculate_roots(self.numleaves, None, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+    for i, idx in enumerate(root_idxs):\n+        self.roots[idx] = modified_roots[i]\n+```\n+\n+## Rationale\n+\n+**Why use a hash-based accumulator instead of something more powerful (e.g., RSA accumulators[^3], class groups[^4], etc.)?**\n+\n+While RSA accumulators and similar constructions offer significant advantages in proof size—often allowing a\n+single proof to cover an entire block's worth of UTXOs—the trade-offs in proof generation cost and latency are\n+substantial. In RSA-based designs, creating a proof for any given UTXO at arbitrary times can be computationally\n+intensive, especially as the number of UTXOs grows.\n+\n+Utreexo's design is driven by the need for Bridge Nodes: nodes that maintain backward compatibility with existing",
      "path": "utreexo-accumulator-bip.md",
      "position": 554,
      "original_position": 555,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2268096096,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Added a backwards compatibility section",
      "created_at": "2025-08-12T06:56:25Z",
      "updated_at": "2025-08-12T06:56:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268790205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268790205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": 554,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268790682",
      "pull_request_review_id": 3108826305,
      "id": 2268790682,
      "node_id": "PRRC_kwDOAN28mc6HOv-a",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 26,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266894044,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:56:38Z",
      "updated_at": "2025-08-12T06:56:39Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268790682",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268790682"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268791138",
      "pull_request_review_id": 3108826843,
      "id": 2268791138,
      "node_id": "PRRC_kwDOAN28mc6HOwFi",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 27,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266895876,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:56:50Z",
      "updated_at": "2025-08-12T06:56:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268791138",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268791138"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268791526",
      "pull_request_review_id": 3108827321,
      "id": 2268791526,
      "node_id": "PRRC_kwDOAN28mc6HOwLm",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 50,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266899583,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Addressed in the latest push",
      "created_at": "2025-08-12T06:57:00Z",
      "updated_at": "2025-08-12T06:57:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268791526",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268791526"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 50,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268792149",
      "pull_request_review_id": 3108828384,
      "id": 2268792149,
      "node_id": "PRRC_kwDOAN28mc6HOwVV",
      "diff_hunk": "@@ -0,0 +1,486 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Peer Services\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2024-08-08\n+License: BSD-3-Clause\n+Depends: BIP-???? (Utreexo - Peer Services)\n+```\n+\n+## Abstract\n+\n+Utreexo creates a compact representation of the UTXO set that only takes a couple of kilobytes.\n+When spending a transaction, one must provide an inclusion proof for the UTXOs being spent.\n+This BIP defines the networking-layer changes needed to allow nodes to exchange the inclusion proofs.\n+This document **does not** describe how to validate blocks and transactions using the provided data, see [Utreexo - Validation Layer](./utreexo-validation-bip.md) for more details.\n+\n+## Motivation\n+\n+Utreexo nodes require the inclusion proof to fully validate blocks and transactions.\n+Each block has an corresponding inclusion proof with it and this inclusion proof for blocks up to height 906,937 requires an additional 631.85GB, which is roughly 40GB less than the size of the block data.\n+Each transaction also has an corresponding inclusion proof with it and for normal transaction relay, the proof is roughly 3 times the size of the transaction.\n+It's still reasonable for a single node to download this extra data but little caching goes a long way in reducing the amount of data that one has to download.\n+We define the new P2P messages for the inclusion proofs to support caching to reduce bandwidth while also allowing a high bandwidth, low-latency usage.\n+\n+## License\n+\n+This BIP is licensed under the BSD-3-Clause license.\n+\n+## Overview\n+\n+### Requirements and Compatibility\n+\n+Nodes implementing Utreexo can choose which messages to support.\n+There are a number of configurations possible, and this BIP does not restrict nodes to any subsets of messages.\n+\n+That said, there are three likely types of nodes:\n+1. Compact State Nodes (CSNs)\n+2. Bridge nodes\n+3. Archive nodes\n+\n+CSNs have the goal of minimizing data storage and download while performing block validation.\n+Archive and bridge nodes store more data and provide this data to CSNs.\n+\n+Bridge nodes are nodes that can add inclusion proofs to mempool transactions, support the same set of messages as CSNs, and are in fact should be indistinguishable from CSNs on the network.\n+Archive nodes are able to serve the blocks and the inclusion proofs. However, they are not able to generate the inclusion proofs as they do not keep the full UTXO set.\n+\n+Note that the archive and bridge capabilities of a node are separate; a bridge node can be bridge only, without previous block proof data, and an archive node doesn't need to be able to bridge.\n+\n+The one exception to this flexibility is that archive nodes must provide both the blocks and the inclusion proofs.\n+While theoretically possible to split these two resources, the blocks are quite small relative to the block proofs, and it simplifies clients to be able to rely on being able to request both over the same connection.\n+\n+### Pre-P2P: Bridge Building\n+\n+When introducing Utreexo into an existing network, there are 2 thing needed before CSNs can operate.\n+First, archive nodes need to build proofs for old blocks to serve during the initial-block download (IBD).\n+Second, nodes need to build and maintain the UTXO merkle forest, and an index of outpoints to leaves of that forest, so that they can build proofs for new transactions.\n+Both of these processes happen without any p2p messages by taking an already existing, synchronized archive full node and going through its stored block data.\n+\n+Once an archive and bridge node have been established, CSNs download blocks and inclusion proofs to IBD and maintain sync with the bitcoin network. \n+\n+### Initial Block Download\n+\n+![Current IBD](bip-utreexo-p2p/current-ibd.png)\n+\n+Current IBD is done by a headers-first block download, in which the node downloads all the Bitcoin block headers, verifies that they connect, and start downloading the actual block data for validation.\n+\n+![Utreexo node IBD](bip-utreexo-p2p/utreexo-node-ibd.png)\n+\n+Utreexo nodes still perform the headers-first phase.\n+However, in addition to blocks, they also require the inclusion proof for UTXOs spent in that block.\n+Hence a Utreexo node will send a `getutreexoproof` message along with the `getdata` message for a given block.\n+This flow is the simplest change and allows a Utreexo node to validate and perform IBD but this method does require downloading about 2 times compared to the current nodes as the inclusion proof for a block is roughly the same size as the block itself.\n+\n+![Bandwidth efficient Utreexo node IBD](bip-utreexo-p2p/bandwidth-efficient-utreexo-node-ibd.png)\n+\n+For Utreexo nodes with memory to spare, we introduce a `TTL` message that will have a time-to-live value for each of the outputs in a given block.\n+\n+With these TTL values, a node receiving the `TTL` message will be able to determine which output to cache with the Clairvoyant algorithm[^1] which allows the IBD-ing node to reduce the bandwidth required in syncing the node in the most efficient way possible.\n+\n+The node will have the block and the TTLs for the outputs of the given block which it can then use to cache parts of the inclusion proof and only request the needed parts of an inclusion proof for future blocks.\n+\n+We note that it is feasible for a node to receive incorrect TTL values from malicious nodes and this can negatively impact the bandwidth savings.\n+Nodes can mitigate this by not downloading TTL values too far into the future or by checking if the `TTL` message received was included in the accumulator hard-coded into the binary.\n+\n+This TTL commitment scheme is described in detail [here](#Commitment scheme for TTL messages).\n+\n+### Transaction relay\n+\n+![Current TX relay](bip-utreexo-p2p/current-tx-relay.png)\n+\n+Current transaction relay is done by sending an inv message with the hash of the transaction and a type field that denotes that this hash represents a transaction.\n+If the node receiving the inv is does not have a tx matching that hash, it then requests for it using a getdata message.",
      "path": "utreexo-p2p-bip.md",
      "position": 1,
      "original_position": 98,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "a94f6434c8f4be7469a3d913046a3c66db48f805",
      "in_reply_to_id": 2266915855,
      "user": {
        "login": "kcalvinalvin",
        "id": 37185887,
        "node_id": "MDQ6VXNlcjM3MTg1ODg3",
        "avatar_url": "https://avatars.githubusercontent.com/u/37185887?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kcalvinalvin",
        "html_url": "https://github.com/kcalvinalvin",
        "followers_url": "https://api.github.com/users/kcalvinalvin/followers",
        "following_url": "https://api.github.com/users/kcalvinalvin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kcalvinalvin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kcalvinalvin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kcalvinalvin/subscriptions",
        "organizations_url": "https://api.github.com/users/kcalvinalvin/orgs",
        "repos_url": "https://api.github.com/users/kcalvinalvin/repos",
        "events_url": "https://api.github.com/users/kcalvinalvin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kcalvinalvin/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Removed in the latest push",
      "created_at": "2025-08-12T06:57:15Z",
      "updated_at": "2025-08-12T06:57:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2268792149",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2268792149"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2291920873",
      "pull_request_review_id": 3141977529,
      "id": 2291920873,
      "node_id": "PRRC_kwDOAN28mc6Im-_p",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |",
      "path": "utreexo-validation-bip.md",
      "position": 66,
      "original_position": 66,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "lucad70",
        "id": 102705148,
        "node_id": "U_kgDOBh8n_A",
        "avatar_url": "https://avatars.githubusercontent.com/u/102705148?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/lucad70",
        "html_url": "https://github.com/lucad70",
        "followers_url": "https://api.github.com/users/lucad70/followers",
        "following_url": "https://api.github.com/users/lucad70/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/lucad70/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/lucad70/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/lucad70/subscriptions",
        "organizations_url": "https://api.github.com/users/lucad70/orgs",
        "repos_url": "https://api.github.com/users/lucad70/repos",
        "events_url": "https://api.github.com/users/lucad70/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/lucad70/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For clarification, is the `Utreexo_Tag_V1` really used twice in preimage to the hash?",
      "created_at": "2025-08-21T19:13:46Z",
      "updated_at": "2025-08-21T19:13:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2291920873",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2291920873"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 63,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2298879164",
      "pull_request_review_id": 3152676858,
      "id": 2298879164,
      "node_id": "PRRC_kwDOAN28mc6JBhy8",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification",
      "path": "utreexo-accumulator-bip.md",
      "position": 10,
      "original_position": 10,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "8444a28331aabaf375deb981693ae4c379cbc841",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: BIP 2 is still active, so this should be \"Standard Track\" for the time being.",
      "created_at": "2025-08-25T19:02:51Z",
      "updated_at": "2025-08-25T21:22:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2298879164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2298879164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 10,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2298882141",
      "pull_request_review_id": 3152676858,
      "id": 2298882141,
      "node_id": "PRRC_kwDOAN28mc6JBihd",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the",
      "path": "utreexo-accumulator-bip.md",
      "position": 17,
      "original_position": 17,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nThis BIP describes the Utreexo accumulator and its operations. It lays down how to update the\n```",
      "created_at": "2025-08-25T19:04:27Z",
      "updated_at": "2025-08-25T21:22:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2298882141",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2298882141"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 17,
      "original_line": 17,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299081095",
      "pull_request_review_id": 3152676858,
      "id": 2299081095,
      "node_id": "PRRC_kwDOAN28mc6JCTGH",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent, a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely, bounded only by block size, it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo changes the storage requirement from the accumulator design in [^1] to $O(log_2(N))$,\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.",
      "path": "utreexo-accumulator-bip.md",
      "position": 56,
      "original_position": 56,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In case this doesn’t get discussed later, it might be interesting to compare how O(log<sub>2</sub>(N)) for all transaction outputs ever created compare to the current UTXO set size.",
      "created_at": "2025-08-25T20:36:36Z",
      "updated_at": "2025-08-25T21:22:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2299081095",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299081095"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 55,
      "original_start_line": 55,
      "start_side": "RIGHT",
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299099519",
      "pull_request_review_id": 3152676858,
      "id": 2299099519,
      "node_id": "PRRC_kwDOAN28mc6JCXl_",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent, a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely, bounded only by block size, it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo changes the storage requirement from the accumulator design in [^1] to $O(log_2(N))$,\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log_2(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\n+each 1-bit corresponds to a tree, and its position in the binary encoding determines the size of that tree.\n+\n+For example, a forest with 5 elements (binary `0b101`) would consist of two trees: one with 4 elements (representing the 2nd bit)\n+and one with 1 element (representing the 0th bit). A forest with 8 elements (`0b1000`) would require only a single 8-element tree,\n+as 8 is a power of 2.\n+\n+More generally, for any N, the number of trees equals the number of set bits (1s) in the binary representation of N.\n+The size of each tree corresponds to the power of two represented by the position of each set bit.\n+For example, the decimal number 21 (binary `0b10101`) contains three 1-bits, meaning three trees are needed in the forest:\n+a 16-element tree ($2^4$), a 4-element tree ($2^2$), and a 1-element tree ($2^0$), with gaps at the 8-element ($2^3$)\n+and 2-element ($2^1$) positions.\n+\n+Each of the hashes in the forest can be referred by an integer label. This labeling is a convention we find easiest\n+to use but does not directly affect the design of the accumulator; other labelling systems could also work and be\n+translated to this one.\n+\n+We label positions starting at `0` on the bottom left, incrementing as we traverse the bottom row from left to right,\n+and then continue on to higher rows. There may be gaps in the label numbers when moving up a row; the label\n+numbers are \"padded out\" to the next perfect tree that could encompass the entire forest.\n+\n+For example, a forest with 8 leaves will have a single tree and positions will be labeled like this:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+While a forest with 7 leaves will look like this:\n+\n+```\n+\n+|---------------\\\n+12\n+|-------\\       |-------\\\n+08      09      10\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06\n+```\n+\n+\n+When adding another leaf to the accumulator when it's already allocated $2^N$ leaves will result in\n+the accumulator resizing to hold $2^{N+1}$ leaves. For example, when adding a leaf to the accumulator\n+state here:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+The new accumulator will look like so:\n+\n+```\n+\n+|-------------------------------\\\n+28\n+|---------------\\               |---------------\\\n+24              25\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08\n+```\n+\n+The new accumulator with all the positions:\n+\n+```\n+30\n+|-------------------------------\\\n+28                              29\n+|---------------\\               |---------------\\\n+24              25              26              27\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19      20      21      22      23\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15\n+```\n+\n+# Definitions\n+\n+- `hash` refers to a vector of 32 byte arrays.\n+- `[]hash` refers to a vector of `hash`.\n+- `acc` refers to the Utreexo accumulator state. An `acc` is comprised of:\n+  - `roots` refers to the roots of the Merkle Trees. Represented as `[]hash`.\n+  - `numleaves` refers to the number of total leaves added to the accumulator. Represented as uint64.\n+- `root` refers to the top `hash` in a tree in the `acc`.\n+- `proof` is an inclusion proof for elements in the accumulator. It's comprised of two fields:\n+  - `targets` are the positions of the elements being proven. Represented as a vector of uint64.\n+  - `proof` are the hashes needed to hash the roots. Represented as a `[]hash`. `proof` MUST be in ascending order by the node positions.\n+    The proof is considered invalid otherwise.\n+\n+# Specification\n+\n+The hash function SHA512/256[^2] is used for the hash operations in the accumulator.\n+\n+An Utreexo accumulator implementation MUST support these 3 operations: Addition, Verification, and Deletion.\n+\n+## Utility Functions\n+\n+The following utility functions are required for performing accumulator operations:\n+\n+**parent_hash(left, right):** Returns the hash of the concatenation of two child hashes (`left` and `right`).",
      "path": "utreexo-accumulator-bip.md",
      "position": 176,
      "original_position": 176,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does this ambiguity regarding the depth of the leaf in the tree not introduce similar weaknesses as the original Merkle tree construction? Why would we float up leaf-hashes rather than create a tagged hash at each level?\n\nIs this fully mitigated due to the number of leaves being known?",
      "created_at": "2025-08-25T20:44:51Z",
      "updated_at": "2025-08-25T21:22:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2299099519",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299099519"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 176,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299106678",
      "pull_request_review_id": 3152676858,
      "id": 2299106678,
      "node_id": "PRRC_kwDOAN28mc6JCZV2",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent, a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely, bounded only by block size, it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo changes the storage requirement from the accumulator design in [^1] to $O(log_2(N))$,\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log_2(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\n+each 1-bit corresponds to a tree, and its position in the binary encoding determines the size of that tree.\n+\n+For example, a forest with 5 elements (binary `0b101`) would consist of two trees: one with 4 elements (representing the 2nd bit)\n+and one with 1 element (representing the 0th bit). A forest with 8 elements (`0b1000`) would require only a single 8-element tree,\n+as 8 is a power of 2.\n+\n+More generally, for any N, the number of trees equals the number of set bits (1s) in the binary representation of N.\n+The size of each tree corresponds to the power of two represented by the position of each set bit.\n+For example, the decimal number 21 (binary `0b10101`) contains three 1-bits, meaning three trees are needed in the forest:\n+a 16-element tree ($2^4$), a 4-element tree ($2^2$), and a 1-element tree ($2^0$), with gaps at the 8-element ($2^3$)\n+and 2-element ($2^1$) positions.\n+\n+Each of the hashes in the forest can be referred by an integer label. This labeling is a convention we find easiest\n+to use but does not directly affect the design of the accumulator; other labelling systems could also work and be\n+translated to this one.\n+\n+We label positions starting at `0` on the bottom left, incrementing as we traverse the bottom row from left to right,\n+and then continue on to higher rows. There may be gaps in the label numbers when moving up a row; the label\n+numbers are \"padded out\" to the next perfect tree that could encompass the entire forest.\n+\n+For example, a forest with 8 leaves will have a single tree and positions will be labeled like this:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+While a forest with 7 leaves will look like this:\n+\n+```\n+\n+|---------------\\\n+12\n+|-------\\       |-------\\\n+08      09      10\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06\n+```\n+\n+\n+When adding another leaf to the accumulator when it's already allocated $2^N$ leaves will result in\n+the accumulator resizing to hold $2^{N+1}$ leaves. For example, when adding a leaf to the accumulator\n+state here:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+The new accumulator will look like so:\n+\n+```\n+\n+|-------------------------------\\\n+28\n+|---------------\\               |---------------\\\n+24              25\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08\n+```\n+\n+The new accumulator with all the positions:\n+\n+```\n+30\n+|-------------------------------\\\n+28                              29\n+|---------------\\               |---------------\\\n+24              25              26              27\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19      20      21      22      23\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15\n+```\n+\n+# Definitions\n+\n+- `hash` refers to a vector of 32 byte arrays.\n+- `[]hash` refers to a vector of `hash`.\n+- `acc` refers to the Utreexo accumulator state. An `acc` is comprised of:\n+  - `roots` refers to the roots of the Merkle Trees. Represented as `[]hash`.\n+  - `numleaves` refers to the number of total leaves added to the accumulator. Represented as uint64.\n+- `root` refers to the top `hash` in a tree in the `acc`.\n+- `proof` is an inclusion proof for elements in the accumulator. It's comprised of two fields:\n+  - `targets` are the positions of the elements being proven. Represented as a vector of uint64.\n+  - `proof` are the hashes needed to hash the roots. Represented as a `[]hash`. `proof` MUST be in ascending order by the node positions.\n+    The proof is considered invalid otherwise.\n+\n+# Specification\n+\n+The hash function SHA512/256[^2] is used for the hash operations in the accumulator.\n+\n+An Utreexo accumulator implementation MUST support these 3 operations: Addition, Verification, and Deletion.\n+\n+## Utility Functions\n+\n+The following utility functions are required for performing accumulator operations:\n+\n+**parent_hash(left, right):** Returns the hash of the concatenation of two child hashes (`left` and `right`).\n+If either child is `nil`, the result is simply the non-`nil` child (treated as if the tree has a single child at that position).\n+if both children are `nil`, the result is `nil`.\n+\n+Implementation:\n+\n+```python\n+def parent_hash(left: bytes, right: bytes) -> bytes:\n+    if right is None and left is None: return None\n+    if left is None: return right\n+    if right is None: return left\n+\n+    return sha512_256(left + right)\n+```\n+\n+**treerows(numleaves):** Returns the minimum number of bits required to represent `numleaves - 1`. This corresponds to the height of the largest tree in the forest. Returns `0` if `numleaves` is `0`.",
      "path": "utreexo-accumulator-bip.md",
      "position": 191,
      "original_position": 191,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The `numleaves - 1` throws me off here. It’s not obvious to me, why the function would be defined that way rather than the \"minimum number of bits required to represent `numleaves`\"? Perhaps a bit more context would help?",
      "created_at": "2025-08-25T20:49:04Z",
      "updated_at": "2025-08-25T21:22:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2299106678",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299106678"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 191,
      "original_line": 191,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299136899",
      "pull_request_review_id": 3152676858,
      "id": 2299136899,
      "node_id": "PRRC_kwDOAN28mc6JCguD",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent, a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely, bounded only by block size, it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo changes the storage requirement from the accumulator design in [^1] to $O(log_2(N))$,\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log_2(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\n+each 1-bit corresponds to a tree, and its position in the binary encoding determines the size of that tree.\n+\n+For example, a forest with 5 elements (binary `0b101`) would consist of two trees: one with 4 elements (representing the 2nd bit)\n+and one with 1 element (representing the 0th bit). A forest with 8 elements (`0b1000`) would require only a single 8-element tree,\n+as 8 is a power of 2.\n+\n+More generally, for any N, the number of trees equals the number of set bits (1s) in the binary representation of N.\n+The size of each tree corresponds to the power of two represented by the position of each set bit.\n+For example, the decimal number 21 (binary `0b10101`) contains three 1-bits, meaning three trees are needed in the forest:\n+a 16-element tree ($2^4$), a 4-element tree ($2^2$), and a 1-element tree ($2^0$), with gaps at the 8-element ($2^3$)\n+and 2-element ($2^1$) positions.\n+\n+Each of the hashes in the forest can be referred by an integer label. This labeling is a convention we find easiest\n+to use but does not directly affect the design of the accumulator; other labelling systems could also work and be\n+translated to this one.\n+\n+We label positions starting at `0` on the bottom left, incrementing as we traverse the bottom row from left to right,\n+and then continue on to higher rows. There may be gaps in the label numbers when moving up a row; the label\n+numbers are \"padded out\" to the next perfect tree that could encompass the entire forest.\n+\n+For example, a forest with 8 leaves will have a single tree and positions will be labeled like this:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+While a forest with 7 leaves will look like this:\n+\n+```\n+\n+|---------------\\\n+12\n+|-------\\       |-------\\\n+08      09      10\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06\n+```\n+\n+\n+When adding another leaf to the accumulator when it's already allocated $2^N$ leaves will result in\n+the accumulator resizing to hold $2^{N+1}$ leaves. For example, when adding a leaf to the accumulator\n+state here:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+The new accumulator will look like so:\n+\n+```\n+\n+|-------------------------------\\\n+28\n+|---------------\\               |---------------\\\n+24              25\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08\n+```\n+\n+The new accumulator with all the positions:\n+\n+```\n+30\n+|-------------------------------\\\n+28                              29\n+|---------------\\               |---------------\\\n+24              25              26              27\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19      20      21      22      23\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15\n+```\n+\n+# Definitions\n+\n+- `hash` refers to a vector of 32 byte arrays.\n+- `[]hash` refers to a vector of `hash`.\n+- `acc` refers to the Utreexo accumulator state. An `acc` is comprised of:\n+  - `roots` refers to the roots of the Merkle Trees. Represented as `[]hash`.\n+  - `numleaves` refers to the number of total leaves added to the accumulator. Represented as uint64.\n+- `root` refers to the top `hash` in a tree in the `acc`.\n+- `proof` is an inclusion proof for elements in the accumulator. It's comprised of two fields:\n+  - `targets` are the positions of the elements being proven. Represented as a vector of uint64.\n+  - `proof` are the hashes needed to hash the roots. Represented as a `[]hash`. `proof` MUST be in ascending order by the node positions.\n+    The proof is considered invalid otherwise.\n+\n+# Specification\n+\n+The hash function SHA512/256[^2] is used for the hash operations in the accumulator.\n+\n+An Utreexo accumulator implementation MUST support these 3 operations: Addition, Verification, and Deletion.\n+\n+## Utility Functions\n+\n+The following utility functions are required for performing accumulator operations:\n+\n+**parent_hash(left, right):** Returns the hash of the concatenation of two child hashes (`left` and `right`).\n+If either child is `nil`, the result is simply the non-`nil` child (treated as if the tree has a single child at that position).\n+if both children are `nil`, the result is `nil`.\n+\n+Implementation:\n+\n+```python\n+def parent_hash(left: bytes, right: bytes) -> bytes:\n+    if right is None and left is None: return None\n+    if left is None: return right\n+    if right is None: return left\n+\n+    return sha512_256(left + right)\n+```\n+\n+**treerows(numleaves):** Returns the minimum number of bits required to represent `numleaves - 1`. This corresponds to the height of the largest tree in the forest. Returns `0` if `numleaves` is `0`.\n+\n+Implementation:\n+\n+```python\n+def treerows(numleaves: int) -> int:\n+    if numleaves == 0: return 0\n+    return (numleaves - 1).bit_length()\n+```\n+\n+**is_right_sibling(position):** Returns `true` if the given `position` corresponds to a right sibling.\n+A position is on the right side if its least significant bit (LSB) is set (i.e., `position & 1 == 1`).\n+And it is the right sibling of a **given node** if all bits but the LSB are identical.\n+\n+Implementation:\n+\n+```python\n+def is_right_sibling(position: int) -> bool:\n+    return (position & 1) == 1\n+```\n+\n+**right_sibling(position):** Returns the position of the right sibling of the given `position`.\n+If `position` is already on the right side, it returns `position` unchanged.\n+Otherwise, turning on the least significant bit moves the position to the right side.\n+\n+Implementation:\n+\n+```python\n+def right_sibling(position: int) -> int:\n+    return position | 1\n+```\n+\n+**sibling(position):** Returns the position of the sibling of the given `position`.\n+If `position` is on the right side, it returns the left sibling by turning off the least significant bit.\n+If `position` is on the left side, it returns the right sibling by turning on the least significant bit.\n+\n+Implementation:\n+\n+```python\n+def sibling(position: int) -> int:\n+    return position ^ 1\n+```\n+\n+**parent(position, total_rows):** Returns the parent position of the given `position` in an accumulator with `total_rows` tree rows.\n+\n+Implementation:\n+\n+```python\n+def parent(position: int, total_rows: int) -> int:\n+    return (position >> 1) | (1 << total_rows)\n+```",
      "path": "utreexo-accumulator-bip.md",
      "position": 241,
      "original_position": 241,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I could have used a little more explanation why this returns the parent, but staring at it for a bit, it seems to me that a fully filled tree with 2<super>n</super> leaves would have 2<super>n</super>-1 inner nodes, meaning that all leaves start with a zero in the first position and all inner nodes starting with a one. \n\nE.g. for four leaves, the leaves are 000, 001, 010, and 011, and the inner nodes would be 100, 101, 110.\n\nFor 000 and 001, shifting to the right gives 00 and setting the top bit makes the parent 100. For 010 and 011, it works out to be 101. For 100 and 101, it works out to 110.\n\nGotcha, cool.",
      "created_at": "2025-08-25T21:05:57Z",
      "updated_at": "2025-08-25T21:22:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2299136899",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299136899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 234,
      "original_start_line": 234,
      "start_side": "RIGHT",
      "line": 241,
      "original_line": 241,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299160022",
      "pull_request_review_id": 3152676858,
      "id": 2299160022,
      "node_id": "PRRC_kwDOAN28mc6JCmXW",
      "diff_hunk": "@@ -0,0 +1,632 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo Accumulator Specification\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2025-06-18\n+License: BSD-3-Clause\n+```\n+\n+## Abstract\n+\n+This BIP describes the Utreexo accumulator and it's operations. It lays down how to update the\n+accumulator as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+\n+## Motivation\n+\n+The Bitcoin network is composed of a set of nodes that validate blocks and\n+transactions as they are received. These nodes need to keep track of the current state of the network in order to\n+fulfill their role. Most importantly, they must maintain a record of all coins that\n+have been created but not yet spent, a collection known as the UTXO set.\n+\n+This set is typically stored in a database that must be accessed frequently and cannot\n+be pruned. As a result, the cost of running a node is directly tied to the size\n+of the UTXO set. Since it can grow indefinitely, bounded only by block size, it represents a\n+long-term scalability concern.\n+\n+Utreexo is a dynamic accumulator that enables the UTXO set to be represented in just a few kilobytes,\n+by requiring peers to provide additional proof data to verify the inclusion of a UTXO in the\n+accumulator. This allows for the construction of extremely lightweight nodes capable of performing\n+the same validation as a full node, without the need to store the entire UTXO set.\n+\n+This BIP defines how the Utreexo accumulator works, defining the data structure and algorithms used to\n+maintain the accumulator, as well as how to generate and verify inclusion proofs for elements in the accumulator.\n+It does not define how the accumulator is used in the Bitcoin protocol, but rather provides a foundation for future\n+BIPs that will define how to integrate Utreexo into Bitcoin validation and P2P network protocol.\n+\n+## License\n+\n+This document is licensed under the BSD-3-Clause license.\n+\n+## Preliminaries\n+\n+An accumulator is a cryptographic data structure that allows for the compact representation of a set,\n+enabling efficient membership proofs without requiring storage of the entire set. In the context of Utreexo,\n+the accumulator tracks the current set of unspent transaction outputs (UTXOs).\n+\n+The Utreexo accumulator is based on an append-only Merkle tree design introduced in [^1],\n+which provides logarithmic-sized inclusion proofs. Utreexo extends this design to support dynamic updates,\n+specifically enabling deletions from the set—a requirement for tracking UTXO spends in Bitcoin.\n+To accommodate this, Utreexo changes the storage requirement from the accumulator design in [^1] to $O(log_2(N))$,\n+where N is the number of elements ever added to the set, while still keeping proof sizes small and verification efficient.\n+\n+## Merkle Forest\n+\n+The Utreexo accumulator consists of a set of Merkle trees: specifically, perfect binary trees with $2^n$ elements,\n+where each node in the tree contains a 32-byte hash. The elements being stored appear at the leaves—the bottom layer of the tree.\n+The topmost node is referred to as the \"root,\" while nodes located between the leaves and the root are called \"intermediate nodes.\"\n+\n+Any integer number of elements ($N$) can be represented as a forest of such trees. On average, a set of N elements will require\n+approximately $\\frac{log_2(N)}{2}$ trees. The number and sizes of trees are determined by the binary representation of $N$:\n+each 1-bit corresponds to a tree, and its position in the binary encoding determines the size of that tree.\n+\n+For example, a forest with 5 elements (binary `0b101`) would consist of two trees: one with 4 elements (representing the 2nd bit)\n+and one with 1 element (representing the 0th bit). A forest with 8 elements (`0b1000`) would require only a single 8-element tree,\n+as 8 is a power of 2.\n+\n+More generally, for any N, the number of trees equals the number of set bits (1s) in the binary representation of N.\n+The size of each tree corresponds to the power of two represented by the position of each set bit.\n+For example, the decimal number 21 (binary `0b10101`) contains three 1-bits, meaning three trees are needed in the forest:\n+a 16-element tree ($2^4$), a 4-element tree ($2^2$), and a 1-element tree ($2^0$), with gaps at the 8-element ($2^3$)\n+and 2-element ($2^1$) positions.\n+\n+Each of the hashes in the forest can be referred by an integer label. This labeling is a convention we find easiest\n+to use but does not directly affect the design of the accumulator; other labelling systems could also work and be\n+translated to this one.\n+\n+We label positions starting at `0` on the bottom left, incrementing as we traverse the bottom row from left to right,\n+and then continue on to higher rows. There may be gaps in the label numbers when moving up a row; the label\n+numbers are \"padded out\" to the next perfect tree that could encompass the entire forest.\n+\n+For example, a forest with 8 leaves will have a single tree and positions will be labeled like this:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+While a forest with 7 leaves will look like this:\n+\n+```\n+\n+|---------------\\\n+12\n+|-------\\       |-------\\\n+08      09      10\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06\n+```\n+\n+\n+When adding another leaf to the accumulator when it's already allocated $2^N$ leaves will result in\n+the accumulator resizing to hold $2^{N+1}$ leaves. For example, when adding a leaf to the accumulator\n+state here:\n+\n+```\n+14\n+|---------------\\\n+12              13\n+|-------\\       |-------\\\n+08      09      10      11\n+|---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07\n+```\n+\n+The new accumulator will look like so:\n+\n+```\n+\n+|-------------------------------\\\n+28\n+|---------------\\               |---------------\\\n+24              25\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08\n+```\n+\n+The new accumulator with all the positions:\n+\n+```\n+30\n+|-------------------------------\\\n+28                              29\n+|---------------\\               |---------------\\\n+24              25              26              27\n+|-------\\       |-------\\       |-------\\       |-------\\\n+16      17      18      19      20      21      22      23\n+|---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\   |---\\\n+00  01  02  03  04  05  06  07  08  09  10  11  12  13  14  15\n+```\n+\n+# Definitions\n+\n+- `hash` refers to a vector of 32 byte arrays.\n+- `[]hash` refers to a vector of `hash`.\n+- `acc` refers to the Utreexo accumulator state. An `acc` is comprised of:\n+  - `roots` refers to the roots of the Merkle Trees. Represented as `[]hash`.\n+  - `numleaves` refers to the number of total leaves added to the accumulator. Represented as uint64.\n+- `root` refers to the top `hash` in a tree in the `acc`.\n+- `proof` is an inclusion proof for elements in the accumulator. It's comprised of two fields:\n+  - `targets` are the positions of the elements being proven. Represented as a vector of uint64.\n+  - `proof` are the hashes needed to hash the roots. Represented as a `[]hash`. `proof` MUST be in ascending order by the node positions.\n+    The proof is considered invalid otherwise.\n+\n+# Specification\n+\n+The hash function SHA512/256[^2] is used for the hash operations in the accumulator.\n+\n+An Utreexo accumulator implementation MUST support these 3 operations: Addition, Verification, and Deletion.\n+\n+## Utility Functions\n+\n+The following utility functions are required for performing accumulator operations:\n+\n+**parent_hash(left, right):** Returns the hash of the concatenation of two child hashes (`left` and `right`).\n+If either child is `nil`, the result is simply the non-`nil` child (treated as if the tree has a single child at that position).\n+if both children are `nil`, the result is `nil`.\n+\n+Implementation:\n+\n+```python\n+def parent_hash(left: bytes, right: bytes) -> bytes:\n+    if right is None and left is None: return None\n+    if left is None: return right\n+    if right is None: return left\n+\n+    return sha512_256(left + right)\n+```\n+\n+**treerows(numleaves):** Returns the minimum number of bits required to represent `numleaves - 1`. This corresponds to the height of the largest tree in the forest. Returns `0` if `numleaves` is `0`.\n+\n+Implementation:\n+\n+```python\n+def treerows(numleaves: int) -> int:\n+    if numleaves == 0: return 0\n+    return (numleaves - 1).bit_length()\n+```\n+\n+**is_right_sibling(position):** Returns `true` if the given `position` corresponds to a right sibling.\n+A position is on the right side if its least significant bit (LSB) is set (i.e., `position & 1 == 1`).\n+And it is the right sibling of a **given node** if all bits but the LSB are identical.\n+\n+Implementation:\n+\n+```python\n+def is_right_sibling(position: int) -> bool:\n+    return (position & 1) == 1\n+```\n+\n+**right_sibling(position):** Returns the position of the right sibling of the given `position`.\n+If `position` is already on the right side, it returns `position` unchanged.\n+Otherwise, turning on the least significant bit moves the position to the right side.\n+\n+Implementation:\n+\n+```python\n+def right_sibling(position: int) -> int:\n+    return position | 1\n+```\n+\n+**sibling(position):** Returns the position of the sibling of the given `position`.\n+If `position` is on the right side, it returns the left sibling by turning off the least significant bit.\n+If `position` is on the left side, it returns the right sibling by turning on the least significant bit.\n+\n+Implementation:\n+\n+```python\n+def sibling(position: int) -> int:\n+    return position ^ 1\n+```\n+\n+**parent(position, total_rows):** Returns the parent position of the given `position` in an accumulator with `total_rows` tree rows.\n+\n+Implementation:\n+\n+```python\n+def parent(position: int, total_rows: int) -> int:\n+    return (position >> 1) | (1 << total_rows)\n+```\n+\n+**root_position(numleaves, row, total_rows):** Returns the position of the root at the specified `row`\n+in an accumulator with `numleaves` leaves and `total_rows` rows. Returns an undefined (garbage) value if\n+no root exists at the given row. This can be calculated as:\n+\n+Implementation:\n+\n+```python\n+def root_position(numleaves: int, row: int, total_rows: int) -> int:\n+    if row < 0 or row > total_rows:\n+        raise ValueError(\"Row must be between 0 and total_rows inclusive\")\n+\n+    mask = (2 << total_rows) - 1\n+    before = numleaves & (mask << (row + 1))\n+    shifted = (before >> row) | (mask << (total_rows + 1 - row))\n+    shifted & mask\n+```\n+\n+**root_present(numleaves, row):** Returns `true` if there is a root at the specified `row`\n+in an accumulator with `numleaves` leaves.\n+\n+Implementation:\n+\n+```python\n+def root_present(numleaves: int, row: int) -> bool:\n+    return numleaves & (1 << row) != 0\n+```\n+\n+**detect_row(position, total_rows):** Returns the row at which the given `position` resides\n+in an accumulator with `total_rows` rows.\n+\n+Implementation:\n+\n+```python\n+for row in range(total_rows, -1, -1):\n+    rowbit = 1 << row\n+    if rowbit & position == 0: return total_rows-row\n+```\n+\n+**isroot(position, numleaves, total_rows):** Returns `true` if the given `position` corresponds to a root\n+in an accumulator with `numleaves` leaves and `total_rows` rows.\n+It has the following precondition:\n+\n+Implementation:\n+\n+```python\n+def isroot(position: int, numleaves: int, total_rows: int) -> bool:\n+    row = detect_row(position, total_rows)\n+    return root_present(numleaves, row) && position == root_position(numleaves, row, total_rows)\n+```\n+\n+**getrootidx(numleaves, position):** Returns the index (within the accumulator's root list)\n+of the root that will be affected when deleting the given `position`.\n+\n+Implementation:\n+\n+```python\n+def getrootidx(numleaves: int, position: int) -> int:\n+    idx = 0\n+    for row in range(tree_rows(numleaves), -1, -1):\n+        if not root_present(numleaves, row):\n+            continue\n+        pos = position\n+        for _ in range(detect_row(position, tree_rows(numleaves)), row): pos = parent(pos, tree_rows(numleaves))\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            return idx\n+        idx += 1\n+```\n+\n+**getrootidxs(numleaves, positions):** Returns a list of indexes corresponding to the roots in the accumulator state\n+that will be affected when deleting the given set of `positions`.\n+This is a wrapper around **getrootidx**, applied to each position in the input list.\n+\n+Implementation:\n+\n+```python\n+def getrootidxs(numleaves: int, positions: [int]) -> [int]:\n+    return [getrootidx(numleaves, pos) for pos in positions]\n+```\n+\n+The following utility functions are required for the P2P layer:\n+\n+**max_possible_pos_at_row(row, total_rows):** Returns the greatest position the row can have in the given total rows.\n+\n+Implementation:\n+\n+```python\n+def max_possible_pos_at_row(row: int, total_rows: int) -> int:\n+    mask = (2 << total_rows) - 1\n+    return ((mask << (total_rows - row)) & mask) - 1\n+```\n+\n+**is_root_position(position, num_leaves, row):** Returns if the given position is a root with the passed in num_leaves and row.\n+\n+```python\n+def is_root_position(position: int, num_leaves: int, row: int) -> bool:\n+    root_present = (num_leaves & (1 << row)) != 0\n+    root_pos = root_position(num_leaves, row, tree_rows(num_leaves))\n+    return root_present and root_pos == position\n+```\n+\n+**proof_positions(targets, num_leaves):** Returns all the positions of the proof hashes that are required to validate the given targets.\n+\n+```python\n+def proof_positions(targets: [int], num_leaves: int) -> [int]:\n+    targets.sort()\n+\n+    next_targets = []\n+    proof_positions = []\n+\n+    total_rows = tree_rows(num_leaves)\n+    for row in range(total_rows + 1):\n+        i = 0\n+        while i < len(targets):\n+            target = targets[i]\n+\n+            if target > max_possible_pos_at_row(row, total_rows):\n+                i += 1\n+                continue\n+\n+            if row != detect_row(target, total_rows):\n+                i += 1\n+                continue\n+\n+            if is_root_position(target, num_leaves, row):\n+                i += 1\n+                continue\n+\n+            if i + 1 < len(targets) and right_sib(target) == targets[i + 1]:\n+                parent_pos = parent(target, total_rows)\n+                next_targets.append(parent_pos)\n+                targets[i] = parent_pos\n+                i += 2  # skip the sibling\n+                continue\n+\n+            # Sibling is a needed proof position\n+            proof_positions.append(sibling(target))\n+            parent_pos = parent(target, total_rows)\n+            next_targets.append(parent_pos)\n+            targets[i] = parent_pos\n+            i += 1\n+\n+        targets.sort()\n+\n+    return proof_positions\n+```\n+\n+### CalculateRoots\n+\n+Both the Verification and Deletion operations depend on the Calculate Roots function.\n+\n+- Inputs:\n+  - `acc.numleaves`.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The passed in `[]hash` and `proof.targets` should be in the same order. The element at index `i` in `[]hashes` should\n+be the hash for element at index `i` in `proof.targets`. Otherwise the returned roots will be invalid.\n+\n+The calculate roots algorithm is defined as `CalculateRoots(numleaves, []hash, proof) -> calculated_roots`:\n+\n+- Check if length of `proof.targets` is equal to the length of `[]hash`. Return early if they're not equal.\n+- map `proof.targets` to their hash.\n+- Sort `proof.targets`.\n+- Loop until `proof.targets` are empty:\n+  - Pop off the first target in `proof.targets`. Pop off the associated `hash` as well.\n+  - If the target is a root, we append the current position's `hash` to the calculated_roots vector and continue.\n+  - Check if the next target in `proof.targets` is the right sibling of the current target. If it is, grab its hash as the sibling hash. Otherwise the next hash in `proof.proof` is the sibling hash. Raise error if `proof.proof` is empty.\n+  - Figure out if the sibling hash is on the left or the right.\n+  - Apply *parent_hash* to the current position's `hash` and the sibling `hash` with regards to their positioning.\n+  - Calculate parent position.\n+  - Insert parent position into the sorted `proof.targets`.\n+  - Map parent hash to the parent position.\n+- Return calculated_roots\n+\n+The algorithm implemented in python:\n+\n+```python\n+def calculate_roots(numleaves: int, dels: [bytes], proof: Proof) -> [bytes]:\n+    if not proof.targets: return []\n+    if len(proof.targets) != len(dels): return []\n+\n+    position_hashes = {}\n+    for i, target in enumerate(proof.targets):\n+        position_hashes[target] = None if dels is None else dels[i]\n+\n+    calculated_roots = []\n+    sortedTargets = sorted(proof.targets)\n+    while sortedTargets:\n+        pos = sortedTargets.pop(0)\n+        cur_hash = position_hashes.pop(pos)\n+\n+        if isroot(pos, numleaves, tree_rows(numleaves)):\n+            calculated_roots.append(cur_hash)\n+            continue\n+\n+        parent_pos, p_hash = parent(pos, tree_rows(numleaves)), bytes\n+        if sortedTargets and right_sibling(pos) == sortedTargets[0]:\n+            sib_pos = sortedTargets.pop(0)\n+            p_hash = parent_hash(cur_hash, position_hashes.pop(sib_pos))\n+        else:\n+            proofhash = proof.proof.pop(0)\n+            p_hash = parent_hash(proofhash, cur_hash) if is_right_sibling(pos) else parent_hash(cur_hash, proofhash)\n+\n+        position_hashes[parent_pos] = p_hash\n+        bisect.insort(sortedTargets, parent_pos)\n+\n+    return calculated_roots\n+```\n+\n+## Addition\n+\n+Addition adds a leaf to the accumulator. The added leaves are able to be verified of their\n+existence with an inclusion proof.\n+\n+Inputs:\n+  - `acc`.\n+  - `hash` to be added.\n+\n+The Addition algorithm Add(`acc`, `hash`) is defined as:\n+\n+- From row 0 to and **including** `treerows(acc.numleaves)`\n+  - Break if there's no root at this row.\n+  - remove the last root from `acc.roots`.\n+    - Calculate the parent hash of the removed root and the `hash` to be added using *parent_hash*.\n+  - Make the result from `parent_hash` the new `hash`.\n+- Increment `acc.numleaves` by 1.\n+- Append `hash` to `acc.roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def add(self, hash: bytes):\n+    for row in range(tree_rows(self.numleaves)+1):\n+        if not root_present(self.numleaves, row): break\n+        root = self.roots.pop()\n+        hash = parent_hash(root, hash)\n+\n+    self.roots.append(hash)\n+    self.numleaves += 1\n+```\n+\n+## Verification\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `[]hash` that are the hashes for the `proof.targets`.\n+  - `proof`.\n+\n+The Verification algorithm `Verify(acc, []hash, proof) -> bool` is defined as:\n+\n+- Raise error if length of `[]hash` differ from `proof.targets`.\n+- Get modified_roots from `CalculateRoots(acc.numleaves, []hash, Proof)`.\n+- Get `root_idxs` from `getrootidxs`.\n+- Raise error if the length of `modified_roots` and `root_idxs` do not match.\n+- Attempt to match roots in modified_roots with roots in `acc`. Raise error if we don't find all the roots in the modified_roots in `acc`.\n+- Return `true`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def verify(self, dels: [bytes], proof: Proof) -> bool:\n+    if len(dels) != len(proof.targets):\n+        raise(\"len of dels and proof.targets differ\")\n+\n+    root_candidates = calculate_roots(self.numleaves, dels, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+\n+    if len(root_candidates) != len(root_idxs):\n+        raise(\"length of calculated roots from the proof and expected root count differ\")\n+\n+    for i, idx in enumerate(root_idxs):\n+        if self.roots[idx] != root_candidates[i]:\n+            raise(\"calculated roots from the proof and matched roots differ\")\n+\n+    return true\n+```\n+\n+## Deletion\n+\n+Deletion removes leaves from the accumulator. The deletion algorithm takes in a `proof` but it does not\n+verify that the proof is valid. It assumes that the passed in proof has already passed verification.\n+\n+- Inputs:\n+  - The accumulator state.\n+  - `proof`.\n+\n+The Deletion algorithm `Delete(acc, Proof) -> acc` is defined as:\n+\n+- Get the modified indexes of the roots `root_idxes` from `getrootidxs`.\n+- Get modified_roots from `Calculate_Roots(acc.numleaves, []positions, Proof)`.\n+- Replace the matching indexes from the `root_idxes` in `acc.roots` with `modified_roots`.\n+\n+The algorithm implemented in python:\n+\n+```python\n+def delete(self, proof: Proof):\n+    modified_roots = calculate_roots(self.numleaves, None, proof)\n+    root_idxs = getrootidxs(self.numleaves, proof.targets)\n+    for i, idx in enumerate(root_idxs):\n+        self.roots[idx] = modified_roots[i]\n+```\n+\n+## Rationale\n+\n+**Why use a hash-based accumulator instead of something more powerful (e.g., RSA accumulators[^3], class groups[^4], etc.)?**\n+\n+While RSA accumulators and similar constructions offer significant advantages in proof size—often allowing a\n+single proof to cover an entire block's worth of UTXOs—the trade-offs in proof generation cost and latency are\n+substantial. In RSA-based designs, creating a proof for any given UTXO at arbitrary times can be computationally\n+intensive, especially as the number of UTXOs grows.\n+\n+Utreexo's design is driven by the need for Bridge Nodes: nodes that maintain backward compatibility with existing",
      "path": "utreexo-accumulator-bip.md",
      "position": 554,
      "original_position": 554,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "New jargon is usually italicized on introduction, perhaps consider:\n\n```suggestion\nUtreexo's design is driven by the need for *bridge nodes*: nodes that maintain backward compatibility with existing\n```",
      "created_at": "2025-08-25T21:16:41Z",
      "updated_at": "2025-08-25T21:22:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2299160022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2299160022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 554,
      "original_line": 554,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304532833",
      "pull_request_review_id": 3160624315,
      "id": 2304532833,
      "node_id": "PRRC_kwDOAN28mc6JXGFh",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer",
      "path": "utreexo-validation-bip.md",
      "position": 4,
      "original_position": 4,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "ca511ff1de40239f60bb1f85f8724f092f240607",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The title feels a bit odd to me. It could be a bit more descriptive, I was thinking \"Utreexo - Transaction and block validation\" or smth?",
      "created_at": "2025-08-27T16:14:21Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304532833",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304532833"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 4,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304540964",
      "pull_request_review_id": 3160624315,
      "id": 2304540964,
      "node_id": "PRRC_kwDOAN28mc6JXIEk",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification",
      "path": "utreexo-validation-bip.md",
      "position": 10,
      "original_position": 10,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "ca511ff1de40239f60bb1f85f8724f092f240607",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: Until BIP 3 activates, this should be Standards Track.",
      "created_at": "2025-08-27T16:16:50Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304540964",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304540964"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 10,
      "original_line": 10,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304597186",
      "pull_request_review_id": 3160624315,
      "id": 2304597186,
      "node_id": "PRRC_kwDOAN28mc6JXVzC",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with",
      "path": "utreexo-validation-bip.md",
      "position": 20,
      "original_position": 20,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe for the time being:\n\n```suggestion\nUtreexo accumulator itself, for that see [‎BIP Utreexo Accumulator](‎utreexo-accumulator-bip.md). This document is only concerned with\n```",
      "created_at": "2025-08-27T16:32:26Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304597186",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304597186"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 20,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304610628",
      "pull_request_review_id": 3160624315,
      "id": 2304610628,
      "node_id": "PRRC_kwDOAN28mc6JXZFE",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that",
      "path": "utreexo-validation-bip.md",
      "position": 52,
      "original_position": 52,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nbeing added or removed from the accumulator. The leaf hash is a 32-byte hash that\n```",
      "created_at": "2025-08-27T16:35:58Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304610628",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304610628"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304612430",
      "pull_request_review_id": 3160624315,
      "id": 2304612430,
      "node_id": "PRRC_kwDOAN28mc6JXZhO",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this",
      "path": "utreexo-validation-bip.md",
      "position": 60,
      "original_position": 60,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nIndividual UTXOs are represented as 32-byte hashes in the Utreexo accumulator. To obtain this\n```",
      "created_at": "2025-08-27T16:36:25Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304612430",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304612430"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304621352",
      "pull_request_review_id": 3160624315,
      "id": 2304621352,
      "node_id": "PRRC_kwDOAN28mc6JXbso",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |",
      "path": "utreexo-validation-bip.md",
      "position": 66,
      "original_position": 66,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": 2291920873,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "My guess would be that this duplication is unintended.\n\n```suggestion\n| Name              | Type                     | Description                               |\n| ----------------- | ------------------------ | ----------------------------------------- |\n| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n```",
      "created_at": "2025-08-27T16:38:59Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304621352",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304621352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 63,
      "original_start_line": 63,
      "start_side": "RIGHT",
      "line": 66,
      "original_line": 66,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304643537",
      "pull_request_review_id": 3160624315,
      "id": 2304643537,
      "node_id": "PRRC_kwDOAN28mc6JXhHR",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning",
      "path": "utreexo-validation-bip.md",
      "position": 79,
      "original_position": 79,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe link to the section introducing tagged hashes in BIP 340: https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki#user-content-Design",
      "created_at": "2025-08-27T16:45:42Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304643537",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304643537"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 79,
      "original_line": 79,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304645472",
      "pull_request_review_id": 3160624315,
      "id": 2304645472,
      "node_id": "PRRC_kwDOAN28mc6JXhlg",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is",
      "path": "utreexo-validation-bip.md",
      "position": 84,
      "original_position": 84,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\n`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64-byte output is\n```",
      "created_at": "2025-08-27T16:46:18Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304645472",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304645472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 84,
      "original_line": 84,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304656197",
      "pull_request_review_id": 3160624315,
      "id": 2304656197,
      "node_id": "PRRC_kwDOAN28mc6JXkNF",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |",
      "path": "utreexo-validation-bip.md",
      "position": 67,
      "original_position": 67,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "On all lines in this table, when the byte count is used as an adjective:\n\n```diff\n-32 byte array\n+32-byte array\n```\nand\n\n```diff\n-4 bytes unsigned integer\n+4-byte unsigned integer\n```",
      "created_at": "2025-08-27T16:49:10Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304656197",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304656197"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 67,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304686355",
      "pull_request_review_id": 3160624315,
      "id": 2304686355,
      "node_id": "PRRC_kwDOAN28mc6JXrkT",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |",
      "path": "utreexo-validation-bip.md",
      "position": 70,
      "original_position": 70,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\n| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction by one bit, and then OR-ing it with 1, only if this transaction is a coinbase. |\n```",
      "created_at": "2025-08-27T16:57:36Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304686355",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304686355"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 70,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304703828",
      "pull_request_review_id": 3160624315,
      "id": 2304703828,
      "node_id": "PRRC_kwDOAN28mc6JXv1U",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase",
      "path": "utreexo-validation-bip.md",
      "position": 110,
      "original_position": 110,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nThis field stores the block height and a boolean for marking that the UTXO was\ncreated by a coinbase transaction. Mostly serves to save space as the coinbase\n```",
      "created_at": "2025-08-27T17:02:40Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304703828",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304703828"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 109,
      "original_start_line": 109,
      "start_side": "RIGHT",
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304705019",
      "pull_request_review_id": 3160624315,
      "id": 2304705019,
      "node_id": "PRRC_kwDOAN28mc6JXwH7",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only",
      "path": "utreexo-validation-bip.md",
      "position": 114,
      "original_position": 114,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nconfirmed this transaction by one bit, and then setting the least significant bit to 1 only\n```",
      "created_at": "2025-08-27T17:03:02Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304705019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304705019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 114,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304707067",
      "pull_request_review_id": 3160624315,
      "id": 2304707067,
      "node_id": "PRRC_kwDOAN28mc6JXwn7",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.",
      "path": "utreexo-validation-bip.md",
      "position": 130,
      "original_position": 130,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nThe boolean for coinbase outputs is needed as they may not be spent before having 100 confirmations.\n```",
      "created_at": "2025-08-27T17:03:39Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304707067",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304707067"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 130,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304722258",
      "pull_request_review_id": 3160624315,
      "id": 2304722258,
      "node_id": "PRRC_kwDOAN28mc6JX0VS",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.",
      "path": "utreexo-validation-bip.md",
      "position": 150,
      "original_position": 150,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps consider \"output script\" as \"scriptPubKey\" is just Bitcoin Core’s variable name for that field.\n\n```suggestion\n##### Output script size\n\nAs the output script (\"scriptPubKey\" in Bitcoin Core) is a variable length byte array, we prepend it with the\nlength.\n\n##### Output Script\n\nThis field is added to commit to the output script of the UTXO. With current\nnodes, this is stored in the UTXO set but since we receive this in the proof\nfrom our peers, we need to commit to this value to avoid malicious peers that\nmay send over the wrong output script.\n```",
      "created_at": "2025-08-27T17:08:12Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304722258",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304722258"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 140,
      "original_start_line": 140,
      "start_side": "RIGHT",
      "line": 150,
      "original_line": 150,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304739014",
      "pull_request_review_id": 3160624315,
      "id": 2304739014,
      "node_id": "PRRC_kwDOAN28mc6JX4bG",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)",
      "path": "utreexo-validation-bip.md",
      "position": 173,
      "original_position": 173,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\n- Outputs whose output script starts with an OP_RETURN (0x6a)\n```",
      "created_at": "2025-08-27T17:13:00Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304739014",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304739014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304915942",
      "pull_request_review_id": 3160624315,
      "id": 2304915942,
      "node_id": "PRRC_kwDOAN28mc6JYjnm",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes",
      "path": "utreexo-validation-bip.md",
      "position": 174,
      "original_position": 174,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\n- Outputs with an output script larger than 10,000 bytes\n```",
      "created_at": "2025-08-27T18:04:28Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304915942",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304915942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 174,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304918712",
      "pull_request_review_id": 3160624315,
      "id": 2304918712,
      "node_id": "PRRC_kwDOAN28mc6JYkS4",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence",
      "path": "utreexo-validation-bip.md",
      "position": 186,
      "original_position": 186,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\npossible but doesn't serve any purpose - once outputs are spent, their past existence\n```",
      "created_at": "2025-08-27T18:05:59Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304918712",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304918712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 186,
      "original_line": 186,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304924164",
      "pull_request_review_id": 3160624315,
      "id": 2304924164,
      "node_id": "PRRC_kwDOAN28mc6JYloE",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.",
      "path": "utreexo-validation-bip.md",
      "position": 199,
      "original_position": 199,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For the time being, maybe just use `[‎BIP Utreexo Accumulator](‎utreexo-accumulator-bip.md)` to clarify whether you are referring to one or the other.",
      "created_at": "2025-08-27T18:08:27Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304924164",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304924164"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 198,
      "original_start_line": 198,
      "start_side": "RIGHT",
      "line": 199,
      "original_line": 199,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304928126",
      "pull_request_review_id": 3160624315,
      "id": 2304928126,
      "node_id": "PRRC_kwDOAN28mc6JYml-",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.",
      "path": "utreexo-validation-bip.md",
      "position": 204,
      "original_position": 204,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ditto",
      "created_at": "2025-08-27T18:10:20Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304928126",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304928126"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 204,
      "original_line": 204,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304928350",
      "pull_request_review_id": 3160624315,
      "id": 2304928350,
      "node_id": "PRRC_kwDOAN28mc6JYmpe",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:",
      "path": "utreexo-validation-bip.md",
      "position": 213,
      "original_position": 213,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ditto",
      "created_at": "2025-08-27T18:10:26Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304928350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304928350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 213,
      "original_line": 213,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304930364",
      "pull_request_review_id": 3160624315,
      "id": 2304930364,
      "node_id": "PRRC_kwDOAN28mc6JYnI8",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in",
      "path": "utreexo-validation-bip.md",
      "position": 218,
      "original_position": 218,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nFor (1), positions are in the order of the leaves that are being proven in\n```",
      "created_at": "2025-08-27T18:11:24Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304930364",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304930364"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 218,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304944981",
      "pull_request_review_id": 3160624315,
      "id": 2304944981,
      "node_id": "PRRC_kwDOAN28mc6JYqtV",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.",
      "path": "utreexo-validation-bip.md",
      "position": 224,
      "original_position": 224,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For some reason I had thought that the accumulator proof was a Merkle branch, but now reading this, it makes me think that the proofs are built-up from the leaf preimages. Which of the two is correct, and could you perhaps check whether some more clarification should be added here to make it unambiguous? \nThis might also just be me mixing up something as I’m trying to puzzle together everything that is going on.",
      "created_at": "2025-08-27T18:16:25Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304944981",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304944981"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 223,
      "original_start_line": 223,
      "start_side": "RIGHT",
      "line": 224,
      "original_line": 224,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304952139",
      "pull_request_review_id": 3160624315,
      "id": 2304952139,
      "node_id": "PRRC_kwDOAN28mc6JYsdL",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO",
      "path": "utreexo-validation-bip.md",
      "position": 237,
      "original_position": 237,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nThe end result of the UTXO proof validation results in the vector of UTXO\n```",
      "created_at": "2025-08-27T18:18:45Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304952139",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304952139"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 237,
      "original_line": 237,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304955391",
      "pull_request_review_id": 3160624315,
      "id": 2304955391,
      "node_id": "PRRC_kwDOAN28mc6JYtP_",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding",
      "path": "utreexo-validation-bip.md",
      "position": 258,
      "original_position": 258,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\ntransactions shared a same TXID, the transaction outputs of the succeeding\n```",
      "created_at": "2025-08-27T18:20:01Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304955391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304955391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 258,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304981350",
      "pull_request_review_id": 3160624315,
      "id": 2304981350,
      "node_id": "PRRC_kwDOAN28mc6JYzlm",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding\n+transaction would overwrite the previously created UTXOs. It was assumed that\n+TXIDs were unique but it's trivially easy to create a transaction that share\n+the same `TXID` for coinbase transactions by re-using the same bitcoin address.",
      "path": "utreexo-validation-bip.md",
      "position": 261,
      "original_position": 261,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: It’s not just that the TXID is the same, the entire transaction is the same.",
      "created_at": "2025-08-27T18:30:28Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304981350",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304981350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 260,
      "original_start_line": 260,
      "start_side": "RIGHT",
      "line": 261,
      "original_line": 261,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304982351",
      "pull_request_review_id": 3160624315,
      "id": 2304982351,
      "node_id": "PRRC_kwDOAN28mc6JYz1P",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding\n+transaction would overwrite the previously created UTXOs. It was assumed that\n+TXIDs were unique but it's trivially easy to create a transaction that share\n+the same `TXID` for coinbase transactions by re-using the same bitcoin address.\n+\n+`BIP-0030` check is a consensus check that enforces that newly created transactions\n+do not have outputs that overwrites an existing UTXO.",
      "path": "utreexo-validation-bip.md",
      "position": 264,
      "original_position": 264,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\ndo not have outputs that overwrite an existing UTXO.\n```",
      "created_at": "2025-08-27T18:30:52Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304982351",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304982351"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 264,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304994489",
      "pull_request_review_id": 3160624315,
      "id": 2304994489,
      "node_id": "PRRC_kwDOAN28mc6JY2y5",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding\n+transaction would overwrite the previously created UTXOs. It was assumed that\n+TXIDs were unique but it's trivially easy to create a transaction that share\n+the same `TXID` for coinbase transactions by re-using the same bitcoin address.\n+\n+`BIP-0030` check is a consensus check that enforces that newly created transactions\n+do not have outputs that overwrites an existing UTXO.\n+\n+`BIP-0034` was a rule where the block height was included in the script signature",
      "path": "utreexo-validation-bip.md",
      "position": 266,
      "original_position": 266,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What was called originally \"generator transaction\" is now more familiarly referred to as a \"coinbase transaction\" after the \"scriptSig\" equivalent being called \"coinbase field\" in that context.\n\n```suggestion\n`BIP-0034` introduces a rule that requires the block height to be included in the coinbase field\n```",
      "created_at": "2025-08-27T18:35:43Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2304994489",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2304994489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 266,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305002690",
      "pull_request_review_id": 3160624315,
      "id": 2305002690,
      "node_id": "PRRC_kwDOAN28mc6JY4zC",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding\n+transaction would overwrite the previously created UTXOs. It was assumed that\n+TXIDs were unique but it's trivially easy to create a transaction that share\n+the same `TXID` for coinbase transactions by re-using the same bitcoin address.\n+\n+`BIP-0030` check is a consensus check that enforces that newly created transactions\n+do not have outputs that overwrites an existing UTXO.\n+\n+`BIP-0034` was a rule where the block height was included in the script signature\n+of the coinbase transaction. One of the reason for the change was to make",
      "path": "utreexo-validation-bip.md",
      "position": 267,
      "original_position": 267,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As far as I can tell, the rest of BIP 34 explains the activation mechanism of BIP 34, so I would claim that this is the main reason.\n\n```suggestion\nof the coinbase transaction. The main reason for the change was to make\n```",
      "created_at": "2025-08-27T18:39:17Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2305002690",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305002690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 267,
      "original_line": 267,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305007849",
      "pull_request_review_id": 3160624315,
      "id": 2305007849,
      "node_id": "PRRC_kwDOAN28mc6JY6Dp",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding\n+transaction would overwrite the previously created UTXOs. It was assumed that\n+TXIDs were unique but it's trivially easy to create a transaction that share\n+the same `TXID` for coinbase transactions by re-using the same bitcoin address.\n+\n+`BIP-0030` check is a consensus check that enforces that newly created transactions\n+do not have outputs that overwrites an existing UTXO.\n+\n+`BIP-0034` was a rule where the block height was included in the script signature\n+of the coinbase transaction. One of the reason for the change was to make\n+coinbase transactions unique so that the expensive check of going through the\n+UTXO set wouldn't be needed. However, there were blocks in the past that had\n+random bytes that could be interpreted as block heights. The lowest block\n+heights are: 209,921, 490,897, and 1,983,702.",
      "path": "utreexo-validation-bip.md",
      "position": 271,
      "original_position": 271,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nrandom bytes that could be interpreted as block heights. The lowest implicated block\nheights are: 209,921, 490,897, and 1,983,702.\n```",
      "created_at": "2025-08-27T18:41:25Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2305007849",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305007849"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 270,
      "original_start_line": 270,
      "start_side": "RIGHT",
      "line": 271,
      "original_line": 271,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305022050",
      "pull_request_review_id": 3160624315,
      "id": 2305022050,
      "node_id": "PRRC_kwDOAN28mc6JY9hi",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding\n+transaction would overwrite the previously created UTXOs. It was assumed that\n+TXIDs were unique but it's trivially easy to create a transaction that share\n+the same `TXID` for coinbase transactions by re-using the same bitcoin address.\n+\n+`BIP-0030` check is a consensus check that enforces that newly created transactions\n+do not have outputs that overwrites an existing UTXO.\n+\n+`BIP-0034` was a rule where the block height was included in the script signature\n+of the coinbase transaction. One of the reason for the change was to make\n+coinbase transactions unique so that the expensive check of going through the\n+UTXO set wouldn't be needed. However, there were blocks in the past that had\n+random bytes that could be interpreted as block heights. The lowest block\n+heights are: 209,921, 490,897, and 1,983,702.\n+\n+Up until block 209,921 the BIP-0030 checks are performed for non-Utreexo nodes.\n+Since Utreexo nodes only keep the UTXO set commitment, it's not possible to\n+perform the `BIP-0030` check. In theory, those blocks can't be reorged, because\n+of checkpoints, that goes back to block height 295,000 with the block hash\n+`00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983`. Any chain that\n+doesn't include this block at height 295,000 isn't valid as removing this check\n+would be a hard-fork. We note, however, that after version `0.30`, Bitcoin Core\n+will remove the checkpoints[^1], as they are not needed anymore to prevent attacks\n+against nodes during Initial Block Download. This is effectively a hard-fork,\n+that will probably never actually happen, however.\n+\n+Block 1,983,702 is the first block that Utreexo nodes would be in danger of a\n+consensus failure due to the inability to perform the BIP-0030 checks. However,",
      "path": "utreexo-validation-bip.md",
      "position": 285,
      "original_position": 285,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\nconsensus failure due to the inability to perform the BIP-0030 checks, if someone were to reuse coinbase transaction from block 164,384 . However,\n```",
      "created_at": "2025-08-27T18:47:35Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2305022050",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305022050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 285,
      "original_line": 285,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305024910",
      "pull_request_review_id": 3160624315,
      "id": 2305024910,
      "node_id": "PRRC_kwDOAN28mc6JY-OO",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding\n+transaction would overwrite the previously created UTXOs. It was assumed that\n+TXIDs were unique but it's trivially easy to create a transaction that share\n+the same `TXID` for coinbase transactions by re-using the same bitcoin address.\n+\n+`BIP-0030` check is a consensus check that enforces that newly created transactions\n+do not have outputs that overwrites an existing UTXO.\n+\n+`BIP-0034` was a rule where the block height was included in the script signature\n+of the coinbase transaction. One of the reason for the change was to make\n+coinbase transactions unique so that the expensive check of going through the\n+UTXO set wouldn't be needed. However, there were blocks in the past that had\n+random bytes that could be interpreted as block heights. The lowest block\n+heights are: 209,921, 490,897, and 1,983,702.\n+\n+Up until block 209,921 the BIP-0030 checks are performed for non-Utreexo nodes.\n+Since Utreexo nodes only keep the UTXO set commitment, it's not possible to\n+perform the `BIP-0030` check. In theory, those blocks can't be reorged, because\n+of checkpoints, that goes back to block height 295,000 with the block hash\n+`00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983`. Any chain that\n+doesn't include this block at height 295,000 isn't valid as removing this check\n+would be a hard-fork. We note, however, that after version `0.30`, Bitcoin Core\n+will remove the checkpoints[^1], as they are not needed anymore to prevent attacks\n+against nodes during Initial Block Download. This is effectively a hard-fork,\n+that will probably never actually happen, however.\n+\n+Block 1,983,702 is the first block that Utreexo nodes would be in danger of a\n+consensus failure due to the inability to perform the BIP-0030 checks. However,\n+this block will happen in roughly 21 years from now, and some mitigations have been\n+proposed [^2].\n+\n+### Historical BIP-0030 violations\n+\n+There were two UTXOs that were overwritten due to this consensus rule are:",
      "path": "utreexo-validation-bip.md",
      "position": 291,
      "original_position": 291,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Not due to this rule, but rather before it was introduced:\n\n```suggestion\nThere were two UTXOs that were overwritten by repeated transactions:\n```",
      "created_at": "2025-08-27T18:48:53Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2305024910",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305024910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 291,
      "original_line": 291,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305031178",
      "pull_request_review_id": 3160624315,
      "id": 2305031178,
      "node_id": "PRRC_kwDOAN28mc6JY_wK",
      "diff_hunk": "@@ -0,0 +1,328 @@\n+```\n+BIP: TBD\n+Layer: Peer Services\n+Title: Utreexo - Validation Layer\n+Authors: Tadge Dryja <rx@awsomnet.org>\n+         Calvin Kim <bip@calvinkim.info>\n+         Davidson Souza <bip@dlsouza.dev>\n+Comments-URI: TBD\n+Status: Draft\n+Type: Specification\n+Created: 2023-10-01\n+License: BSD-3-Clause\n+Requires: BIP-???? (Utreexo Accumulator Specification)\n+```\n+\n+## Abstract\n+\n+This BIP defines the rules for validating blocks and transactions using the\n+Utreexo accumulator. It is important to note that this BIP does not define the\n+Utreexo accumulator itself, for that see BIP-????. This document is only concerned with\n+the general rules for validating blocks and transactions using the Utreexo,\n+so that all Utreexo nodes can stay in consensus with one another.\n+\n+## Motivation\n+\n+Although Utreexo in its current form is not proposed as a soft fork, it is essential that\n+all implementations adhere to a consistent workflow when performing consensus-critical\n+operations. This BIP defines that workflow, along with the specific rules and their\n+required ordering.\n+\n+There are five consensus-critical components when using the Utreexo accumulator to\n+represent the UTXO set:\n+\n+ - 1: The serialization format of each UTXO (\"leaf data\").\n+ - 2: The hash function used to hash the leaf data.\n+ - 3: Which transaction outputs are excluded from the accumulator.\n+ - 4: The order of operations for the additions and deletions in the accumulator.\n+ - 5: The format of the UTXO proof.\n+\n+A discrepancy in any of the five components above will result in a divergent\n+accumulator state, leading to consensus incompatibilities.\n+\n+## License\n+\n+This BIP is licensed under the BSD 3-clause license.\n+\n+## Specification\n+\n+### Node Hashes\n+\n+During a node's normal operation, it will need to compute the leaf hash for UTXOs\n+being added or removed from the accumulator. The leaf hash is a 32 byte hash that\n+is computed using the SHA-512/256 hash function. See [UTXO Hash Preimages](#utxo-hash-preimages) for the\n+details on how to compute the leaf hash.\n+\n+Unless otherwise specified, all fields are in little-endian format.\n+\n+#### UTXO Hash Preimages\n+\n+Individual UTXOs are represented as 32 byte hashes in the Utreexo accumulator. To obtain this\n+hash, you must compute the SHA-512/256 hash of the following data:\n+\n+| Name              | Type                     | Description                               |\n+| ----------------- | ------------------------ | ----------------------------------------- |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| Utreexo_Tag_V1    | 64 byte array            | The version tag to be prepended to the leafhash. |\n+| BlockHash         | 32 byte array            | The hash of the block in which this tx was confirmed. |\n+| TXID              | 32 byte array            | The transaction's TXID                    |\n+| Vout              | 4 bytes unsigned integer | The output index of this UTXO             |\n+| Header code       | 4 bytes unsigned integer | The block height and iscoinbase. This is a value obtained by left shifting the block height that confirmed this transaction, and then OR-ing it with 1, only if this transaction is a coinbase. |\n+| Amount            | 8 bytes unsigned integer | The amount in satoshis for this UTXO      |\n+| scriptPubkey size | varint                   | scriptPubKey length in bytes              |\n+| scriptPubkey      | variable byte array      | The locking script of the UTXO            |\n+\n+Each field being defined as follows:\n+\n+##### Version tag\n+\n+We use tagged hashes for the hashes committed in the accumulator for versioning\n+purposes. This is added so that if there are changes in the preimage of the\n+hash, the version tag helps to avoid misinterpretation.\n+\n+The Utreexo version tag is the SHA512 hash of the string `UtreexoV1`, which is represented as the vector\n+`[85 116 114 101 101 120 111 86 49]` and hex `0x5574726565786f5631`.  (The resulting 64 byte output is\n+`5b832db8ca26c25be1c542d6cceddda8c145615cff5c35727fb3462610807e20ae534dc3f64299199931772e03787d18156eb3151e0ed1b3098bdc8445861885`).\n+\n+##### Blockhash\n+\n+We commit to the hash of the block which confirms the UTXO. This\n+is not currently used in the validation code, but could be used at a future\n+version to increase the work required for collision attacks.\n+A valid blockhash requires a large amount of work, which would prevent an\n+attacker from performing a standard cycle-finding collision attack in $2^{n/2}$\n+operations for an n-bit hash.\n+\n+This could allow a later or alternate version to use shorter truncated hashes,\n+saving bandwidth and storage while still keeping Bitcoin's $2^{128}$ security.\n+\n+##### TXID\n+\n+The TXID is the transaction ID of the transaction that created this UTXO.\n+\n+##### VOUT\n+\n+The output index of the UTXO in the transaction.\n+\n+##### Header code\n+\n+This field stores the block height and a boolean for marking that the UTXO is\n+part of a coinbase transaction. Mostly serves to save space as the coinbase\n+boolean can be stored in a single bit.\n+\n+This field is a value obtained by left shifting the block height that\n+confirmed this transaction, and then setting the least significant bit to 1 only\n+if it's part of a coinbase transaction. The code to do that is like so:\n+\n+```\n+header_code = block_height\n+header_code <<= 1\n+if IsCoinBase {\n+    header_code |= 1 // only set the bit 0 if it's a coinbase.\n+}\n+```\n+\n+The block height is needed as during transaction validation, it is used during\n+the check of BIP-0065 CLTV. In current nodes, the block height is stored locally\n+as a part of the UTXO set. Since Utreexo nodes get this data from peers, we need\n+to commit to the block height to avoid security vulnerabilities.\n+\n+The boolean for coinbase is needed as they may not be spent before having 100 confirmations.\n+This data is also currently stored locally as a part of the UTXO set for current nodes.\n+\n+##### Amount\n+\n+This field is added to commit to the value of the UTXO. With current nodes, this\n+is stored in the UTXO set but since we receive this in the proof from our peers,\n+we need to commit to this value to avoid malicious peers that may send over the\n+wrong amount.\n+\n+##### script pubkey size\n+\n+As the script pubkey is a variable length byte array, we prepend it with the\n+length.\n+\n+##### script pubkey\n+\n+This field is added to commit to the locking script of the UTXO. With current\n+nodes, this is stored in the UTXO set but since we receive this in the proof\n+from our peers, we need to commit to this value to avoid malicious peers that\n+may send over the wrong locking script.\n+\n+#### Hash function\n+\n+The leaf data is hashed with SHA-512/256, which gives us a 32 byte hash.\n+It was chosen over SHA-256 due to the faster performance on 64 bit systems.\n+\n+#### Excluded UTXOs from the accumulator\n+\n+Not all transaction outputs are added to a node's UTXO set. Normal Bitcoin nodes\n+only form consensus on the set of transactions, not on the UTXO set, so different\n+nodes can omit different outputs and stay compatible as long as those outputs are\n+never spent. Utreexo nodes, however, do require explicit consensus on the UTXO set\n+as all proofs are with respect to the Merkle roots of the entire set.\n+\n+For this reason, we define which UTXOs are not inserted to the accumulator.  Any\n+variations here will result in Utreexo nodes with incompatible proofs.\n+\n+##### Provably unspendable transaction outputs\n+\n+There are outputs in the Bitcoin network that we can guarantee that they cannot\n+be spent without a hard-fork of the network. The following output types are not\n+added to the accumulator:\n+- Outputs that start with an OP_RETURN (0x6a)\n+- Outputs with a scriptPubkey larger than 10,000 bytes\n+\n+##### Same block spends\n+\n+Often, UTXOs are created and spent in the same block. This is allowed by Bitcoin\n+consensus rules as long as the output being spent is created by a transaction earlier\n+in the block than the spending transaction.\n+In Utreexo, nodes inspect blocks and identify which outputs are being created\n+and destroyed in the same block, and exclude them from the accumulator and proofs.\n+\n+There's no need to provide proofs for outputs which have been created in the same\n+block. Adding and then immediately removing the output from the accumulator would be\n+possible but doesn't serve any purpose - once outputs are spent their past existence\n+cannot be proven with the Utreexo accumulator (and SPV proofs already provide that).\n+\n+For these reasons, outputs which are spent in the same block where they are created\n+are omitted from the accumulator, and those inputs are omitted from block proofs.\n+\n+#### Order of operations\n+\n+The Utreexo accumulator lacks associative properties during addition and the\n+ordering of which UTXO hash gets added first is consensus critical. For\n+the modification of the accumulator the steps are as follows:\n+\n+1. Batch remove the UTXOs that were spent in the block based on the algorithm\n+   defined in BIP-????. Deletions itself are order-independent.\n+2. Batch add all non-excluded outputs in the order they're included in the\n+   Bitcoin block. Additions are order-dependent.\n+\n+The removal and the addition of the hashes follow the algorithms defined in\n+BIP-????.\n+\n+#### Format of the UTXO proof\n+\n+The UTXO proof has 2 elements: the accumulator proof and the leaf data. The\n+leaf data provides the necessary UTXO data for block validation that would be\n+stored locally for non-Utreexo nodes. The accumulator proof proves that the\n+given UTXO hash preimages are committed in the accumulator.\n+\n+Accumulator proof is defined in BIP-????, and contains two elements:\n+\n+1. A vector of positions of the UTXO hashes in the accumulator.\n+2. A vector of hashes required to hash up to the roots.\n+\n+For (1), positions are in the order of the leaves that are being proved in\n+the accumulator. These are all the inputs in the natural blockchain order that\n+excludes the same block spends.\n+\n+The UTXO hash preimages follow the same ordering as (1) in the accumulator\n+proofs. Each of the positions in (1) refer to the UTXO hash preimage in the same\n+index.\n+\n+| Field Name          | Data Type           | Byte Size | Description                             |\n+| ------------------- | ------------------- | --------- | --------------------------------------- |\n+| Accumulator Proof   | variable byte array | variable  | The Utreexo proof as defined in BIP-????|\n+| UTXO hash preimages | variable byte array | variable  | The UTXO data needed to validate all the transaction in the block |\n+\n+#### UTXO proof validation\n+\n+For each block, the UTXO proof must be provided with the bitcoin block for\n+validation to be possible. Without the UTXO proof, it's not possible to\n+validate that the inputs being referenced exists in the UTXO set.\n+\n+The end result of the UTXO proof validation results us in the vector of UTXO\n+hash preimages that are required to perform the rest of the consensus\n+validation checks. Note that the resulting data from the UTXO proof validation\n+is the same data that would normally be fetched from the locally stored UTXO\n+set.\n+\n+The order of operations for the UTXO proof validation are:\n+\n+1. Hash the UTXO preimages.\n+2. Verify that the UTXO preimages exist in the accumulator with the verification\n+   algorithm specified in BIP-????.\n+\n+### BIP-0030\n+\n+[`BIP-0030`](https://github.com/bitcoin/bips/blob/master/bip-0030.mediawiki) is an added\n+consensus check that prevents duplicate TXIDs. This check and the historical violations\n+of this check affect the consensus validation for Utreexo nodes.\n+\n+### BIP-0030 and BIP-0034 consensus check\n+\n+Before `BIP-0030`, the Bitcoin consensus rules allowed for duplicate TXIDs. If two\n+transactions shared a same TXID, the transaction outputs of the preceding\n+transaction would overwrite the previously created UTXOs. It was assumed that\n+TXIDs were unique but it's trivially easy to create a transaction that share\n+the same `TXID` for coinbase transactions by re-using the same bitcoin address.\n+\n+`BIP-0030` check is a consensus check that enforces that newly created transactions\n+do not have outputs that overwrites an existing UTXO.\n+\n+`BIP-0034` was a rule where the block height was included in the script signature\n+of the coinbase transaction. One of the reason for the change was to make\n+coinbase transactions unique so that the expensive check of going through the\n+UTXO set wouldn't be needed. However, there were blocks in the past that had\n+random bytes that could be interpreted as block heights. The lowest block\n+heights are: 209,921, 490,897, and 1,983,702.\n+\n+Up until block 209,921 the BIP-0030 checks are performed for non-Utreexo nodes.\n+Since Utreexo nodes only keep the UTXO set commitment, it's not possible to\n+perform the `BIP-0030` check. In theory, those blocks can't be reorged, because\n+of checkpoints, that goes back to block height 295,000 with the block hash\n+`00000000000000004d9b4ef50f0f9d686fd69db2e03af35a100370c64632a983`. Any chain that\n+doesn't include this block at height 295,000 isn't valid as removing this check\n+would be a hard-fork. We note, however, that after version `0.30`, Bitcoin Core\n+will remove the checkpoints[^1], as they are not needed anymore to prevent attacks\n+against nodes during Initial Block Download. This is effectively a hard-fork,\n+that will probably never actually happen, however.\n+\n+Block 1,983,702 is the first block that Utreexo nodes would be in danger of a\n+consensus failure due to the inability to perform the BIP-0030 checks. However,\n+this block will happen in roughly 21 years from now, and some mitigations have been\n+proposed [^2].\n+\n+### Historical BIP-0030 violations\n+\n+There were two UTXOs that were overwritten due to this consensus rule are:\n+`e3bf3d07d4b0375638d5f1db5255fe07ba2c4cb067cd81b84ee974b6585fb468:0` at block height 91,722\n+`d5d27987d2a3dfc724e359870c6644b40e497bdc0589a033220fe15429d88599:0` at block height 91,812\n+\n+Since the leaf hashes that are committed to the Utreexo accumulator commit to\n+the block hash as well, all the leaf hashes are unique and the two historical\n+violations do not happen with how the UTXO set is represented with the Utreexo\n+accumulator. To be consensus compatible with clients that do have the historical\n+violations, the leaves representing these two UTXOs in the Utreexo accumulator\n+are hardcoded as unspendable.",
      "path": "utreexo-validation-bip.md",
      "position": 300,
      "original_position": 300,
      "commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "original_commit_id": "d1d03420ac5ee234494d84358a4abd06df269f65",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I’m understanding this right:\n\n```suggestion\naccumulator. To be consensus compatible with clients that retain only the second\noccurrences of these outputs, the leaves representing the corresponding first UTXOs in the Utreexo accumulator\nare hardcoded as unspendable.\n```",
      "created_at": "2025-08-27T18:51:27Z",
      "updated_at": "2025-08-27T18:56:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1923#discussion_r2305031178",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2305031178"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1923"
        }
      },
      "start_line": 298,
      "original_start_line": 298,
      "start_side": "RIGHT",
      "line": 300,
      "original_line": 300,
      "side": "RIGHT"
    }
  ]
}