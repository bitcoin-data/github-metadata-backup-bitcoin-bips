{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1483",
    "id": 1473076467,
    "node_id": "PR_kwDOAN28mc5XzVzz",
    "html_url": "https://github.com/bitcoin/bips/pull/1483",
    "diff_url": "https://github.com/bitcoin/bips/pull/1483.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1483.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1483/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/3046520ebaf481fa77e0e887bbb2be29f1961832",
    "number": 1483,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP 77: Payjoin Version 2 â€” Async Payjoin",
    "user": {
      "login": "DanGould",
      "id": 8525467,
      "node_id": "MDQ6VXNlcjg1MjU0Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DanGould",
      "html_url": "https://github.com/DanGould",
      "followers_url": "https://api.github.com/users/DanGould/followers",
      "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
      "organizations_url": "https://api.github.com/users/DanGould/orgs",
      "repos_url": "https://api.github.com/users/DanGould/repos",
      "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/DanGould/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This document proposes an asynchronous, backwards-compatible second version of the payjoin protocol described in [BIP 78](bip-0078.mediawiki), enabling complete payjoin receiver functionality including payment output substitution with only an HTTP client rather than server. The former requirement for receivers to run HTTP servers is replaced with an untrusted third-party \"payjoin directory\" store-and-forward server accessed by polling clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. It was [originally proposed to the mailing list here](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-January/021364.html).\r\n\r\nThe protocol design has received rounds of review elsewhere on the [bitcoin-dev mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021868.html) as well.\r\n\r\nFeedback from that list post has been incorporated into this draft.\r\n\r\nProposing this as an Standards Track BIP to ensure wallets across the ecosystem can come to rough consensus on a single asynchronous payjoin standard and correctly implement it widely.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2023-08-12T21:10:05Z",
    "updated_at": "2024-10-17T02:02:29Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merge_commit_sha": "146bc42526e65daa51205619266ce34cd07782fa",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "DanGould:pjv2",
      "ref": "pjv2",
      "sha": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 477538160,
        "node_id": "R_kgDOHHancA",
        "name": "bips",
        "full_name": "DanGould/bips",
        "owner": {
          "login": "DanGould",
          "id": 8525467,
          "node_id": "MDQ6VXNlcjg1MjU0Njc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/DanGould",
          "html_url": "https://github.com/DanGould",
          "followers_url": "https://api.github.com/users/DanGould/followers",
          "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
          "organizations_url": "https://api.github.com/users/DanGould/orgs",
          "repos_url": "https://api.github.com/users/DanGould/repos",
          "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/DanGould/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/DanGould/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/DanGould/bips",
        "archive_url": "https://api.github.com/repos/DanGould/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/DanGould/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/DanGould/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/DanGould/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/DanGould/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/DanGould/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/DanGould/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/DanGould/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/DanGould/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/DanGould/bips/contributors",
        "deployments_url": "https://api.github.com/repos/DanGould/bips/deployments",
        "downloads_url": "https://api.github.com/repos/DanGould/bips/downloads",
        "events_url": "https://api.github.com/repos/DanGould/bips/events",
        "forks_url": "https://api.github.com/repos/DanGould/bips/forks",
        "git_commits_url": "https://api.github.com/repos/DanGould/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/DanGould/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/DanGould/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/DanGould/bips.git",
        "issue_comment_url": "https://api.github.com/repos/DanGould/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/DanGould/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/DanGould/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/DanGould/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/DanGould/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/DanGould/bips/languages",
        "merges_url": "https://api.github.com/repos/DanGould/bips/merges",
        "milestones_url": "https://api.github.com/repos/DanGould/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/DanGould/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/DanGould/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/DanGould/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:DanGould/bips.git",
        "stargazers_url": "https://api.github.com/repos/DanGould/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/DanGould/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/DanGould/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/DanGould/bips/subscription",
        "tags_url": "https://api.github.com/repos/DanGould/bips/tags",
        "teams_url": "https://api.github.com/repos/DanGould/bips/teams",
        "trees_url": "https://api.github.com/repos/DanGould/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/DanGould/bips.git",
        "hooks_url": "https://api.github.com/repos/DanGould/bips/hooks",
        "svn_url": "https://github.com/DanGould/bips",
        "homepage": "",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 14825,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-16T19:27:23Z",
        "created_at": "2022-04-04T03:35:06Z",
        "updated_at": "2022-04-03T20:34:01Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "af8f9e470bc5e1b908c988f344d0bbaef9eef39d",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5353,
        "stargazers_count": 9319,
        "watchers_count": 9319,
        "size": 15670,
        "default_branch": "master",
        "open_issues_count": 45,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-10-15T16:45:25Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2024-10-17T02:39:00Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 287,
    "deletions": 0,
    "changed_files": 3,
    "commits": 41,
    "review_comments": 135,
    "comments": 14
  },
  "events": [
    {
      "event": "subscribed",
      "id": 10079823582,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAJYzebe",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10079823582",
      "actor": {
        "login": "ubbabeck",
        "id": 36157890,
        "node_id": "MDQ6VXNlcjM2MTU3ODkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/36157890?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ubbabeck",
        "html_url": "https://github.com/ubbabeck",
        "followers_url": "https://api.github.com/users/ubbabeck/followers",
        "following_url": "https://api.github.com/users/ubbabeck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ubbabeck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ubbabeck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ubbabeck/subscriptions",
        "organizations_url": "https://api.github.com/users/ubbabeck/orgs",
        "repos_url": "https://api.github.com/users/ubbabeck/repos",
        "events_url": "https://api.github.com/users/ubbabeck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ubbabeck/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-13T12:40:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11242576509,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAKeHBp9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11242576509",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T02:23:16Z"
    },
    {
      "event": "ready_for_review",
      "id": 11242607479,
      "node_id": "RFRE_lADOAN28mc5uKfAvzwAAAAKeHJN3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11242607479",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T02:30:04Z"
    },
    {
      "event": "labeled",
      "id": 11340766832,
      "node_id": "LE_lADOAN28mc5uKfAvzwAAAAKj9l5w",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11340766832",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:03:19Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 1869727203,
      "node_id": "IC_kwDOAN28mc5vccXj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1869727203",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:14:47Z",
      "updated_at": "2023-12-26T19:14:47Z",
      "author_association": "MEMBER",
      "body": "Let's call this BIP 77",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-1869727203",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "renamed",
      "id": 11340807520,
      "node_id": "RTE_lADOAN28mc5uKfAvzwAAAAKj9v1g",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11340807520",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:16:05Z",
      "rename": {
        "from": "BIP for Payjoin Version 2: Serverless Payjoin",
        "to": "BIP 77: Payjoin Version 2: Serverless Payjoin"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12030454087,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAALNEilH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12030454087",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-06T16:29:52Z"
    },
    {
      "event": "commented",
      "id": 2088916537,
      "node_id": "IC_kwDOAN28mc58glY5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2088916537",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:09Z",
      "updated_at": "2024-05-01T18:50:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @DanGould, the first comment on this PR seems to indicate that this proposal is still WIP. Is that an accurate understanding? If this PR is not yet ready to be merged, perhaps it should be changed to \"Draft\". If I misunderstood the status of this PR, please respond below so someone may review to assess whether this is ready for merge.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2088916537",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 12673599205,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAALzZ8bl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12673599205",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:10Z"
    },
    {
      "event": "subscribed",
      "id": 12673599217,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAALzZ8bx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12673599217",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:10Z"
    },
    {
      "event": "reviewed",
      "id": 2036951404,
      "node_id": "PRR_kwDOAN28mc55aWls",
      "url": null,
      "actor": null,
      "commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2036951404",
      "submitted_at": "2024-05-02T22:23:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2037072195,
      "node_id": "PRR_kwDOAN28mc55a0FD",
      "url": null,
      "actor": null,
      "commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2037072195",
      "submitted_at": "2024-05-02T22:30:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "convert_to_draft",
      "id": 12691191699,
      "node_id": "CTDE_lADOAN28mc5uKfAvzwAAAAL0dDeT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691191699",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T02:50:35Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDVlMmYyYWFkMWMyZTNhMmMxMTE5NWRmZTI1NGI0YTllYjBkOTQyM2U",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e",
      "tree": {
        "sha": "9767b27b965cf7de03916b026075414e68566f8b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9767b27b965cf7de03916b026075414e68566f8b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9767b27b965cf7de03916b026075414e68566f8b\nparent 24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2\nauthor DanGould <d@ngould.dev> 1685832633 -0400\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nDraft payjoin v2 BIP\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWfARAP0Q5SQ5aDAttpltYieIniDrZRMcBaYM9SAR8mpS8INU9gD+IGHBm0IEHzro\ngz62ZUyaj28ckdWITm4DMF6uJ6no2wE=\n=VvhW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2",
          "sha": "24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2",
          "html_url": "https://github.com/bitcoin/bips/commit/24a15a6ae37b20d5d9c6fed9dc41d3a63d007ad2"
        }
      ],
      "message": "Draft payjoin v2 BIP",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-06-03T22:50:33Z"
      },
      "sha": "5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNkZjNmNTFiZjJlOTE0NWVkZTZjZjc1MWY0NWJkZTk1ZjA4M2JlZTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3df3f51bf2e9145ede6cf751f45bde95f083bee9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3df3f51bf2e9145ede6cf751f45bde95f083bee9",
      "tree": {
        "sha": "9c0f5521cd881655d76e55f130fa9a5df1cfc09e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9c0f5521cd881655d76e55f130fa9a5df1cfc09e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9c0f5521cd881655d76e55f130fa9a5df1cfc09e\nparent 5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e\nauthor DanGould <d@ngould.dev> 1691873345 -0400\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nInclude mailing list feedback\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWWfuAP9L0sZwayoE6yIfQNzBUeH1PSuBCtRPBUSzQAKre/HNcgEAhdcrV3LpVHBO\n4lMezx3uM6mEhpWiU0d2xSVAAhMCngg=\n=A9Er\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e",
          "sha": "5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e",
          "html_url": "https://github.com/bitcoin/bips/commit/5e2f2aad1c2e3a2c11195dfe254b4a9eb0d9423e"
        }
      ],
      "message": "Include mailing list feedback",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-08-12T20:49:05Z"
      },
      "sha": "3df3f51bf2e9145ede6cf751f45bde95f083bee9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDkzNmQwZTdmZDk5ZjU0ZmRhZTBjMWU3OTJiYjI1NjM0OGQzZGNiOTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/936d0e7fd99f54fdae0c1e792bb256348d3dcb99",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/936d0e7fd99f54fdae0c1e792bb256348d3dcb99",
      "tree": {
        "sha": "60d8fe155585baf4d6915e8963a24793919b8c3a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/60d8fe155585baf4d6915e8963a24793919b8c3a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 60d8fe155585baf4d6915e8963a24793919b8c3a\nparent 3df3f51bf2e9145ede6cf751f45bde95f083bee9\nauthor DanGould <d@ngould.dev> 1698869139 -0400\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nInclude TABConf feedback\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWS50AP9S+7XBzjuaawr+EYAo9/gbKHlxDGSAqXogSmJQoNUqrwEA/O1syU5yWdxc\nwGods2dZxJIBL58kmVh8uhCAqURcrAc=\n=d2k1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3df3f51bf2e9145ede6cf751f45bde95f083bee9",
          "sha": "3df3f51bf2e9145ede6cf751f45bde95f083bee9",
          "html_url": "https://github.com/bitcoin/bips/commit/3df3f51bf2e9145ede6cf751f45bde95f083bee9"
        }
      ],
      "message": "Include TABConf feedback",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-11-01T20:05:39Z"
      },
      "sha": "936d0e7fd99f54fdae0c1e792bb256348d3dcb99"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQwNjlkYjUxYmEyNTg5ZmFmNzljZjczODljNjhjMWQwOTRkZDhjNjQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4069db51ba2589faf79cf7389c68c1d094dd8c64",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4069db51ba2589faf79cf7389c68c1d094dd8c64",
      "tree": {
        "sha": "da62e12eeff2a1d8b321cd97a3f05a616a24e231",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/da62e12eeff2a1d8b321cd97a3f05a616a24e231"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree da62e12eeff2a1d8b321cd97a3f05a616a24e231\nparent 936d0e7fd99f54fdae0c1e792bb256348d3dcb99\nauthor DanGould <d@ngould.dev> 1702520982 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nInclude padding\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWbduAP9i+7ki37NdEr7KFwQM2d1DzpwmtHl1XF5CTYtSi77WigD/RxmzavQXebBd\nXjnen28yNemwkeNNQnEMB+SpCG35cAc=\n=s71m\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/936d0e7fd99f54fdae0c1e792bb256348d3dcb99",
          "sha": "936d0e7fd99f54fdae0c1e792bb256348d3dcb99",
          "html_url": "https://github.com/bitcoin/bips/commit/936d0e7fd99f54fdae0c1e792bb256348d3dcb99"
        }
      ],
      "message": "Include padding",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-14T02:29:42Z"
      },
      "sha": "4069db51ba2589faf79cf7389c68c1d094dd8c64"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQ1ZGFlZDRlZjFjNjRiNDgwNTNkMzIzNDI4OTZkM2JkYjEyMGUxMGQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/45daed4ef1c64b48053d32342896d3bdb120e10d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/45daed4ef1c64b48053d32342896d3bdb120e10d",
      "tree": {
        "sha": "2b002e0ae43a6c5e3b05ca54318eff4c4a2a5475",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2b002e0ae43a6c5e3b05ca54318eff4c4a2a5475"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2b002e0ae43a6c5e3b05ca54318eff4c4a2a5475\nparent 4069db51ba2589faf79cf7389c68c1d094dd8c64\nauthor DanGould <d@ngould.dev> 1702667376 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nInclude production reference implementation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWUvOAP4tPTEZKb67kwBasUVLsFLXHCFkjzoTRTVt6VBbmGNcJQEA7Rz/OT1uLwxr\nneS/tl4RgvEqt/u1Pv5KNKflhrlrhwE=\n=mAh5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4069db51ba2589faf79cf7389c68c1d094dd8c64",
          "sha": "4069db51ba2589faf79cf7389c68c1d094dd8c64",
          "html_url": "https://github.com/bitcoin/bips/commit/4069db51ba2589faf79cf7389c68c1d094dd8c64"
        }
      ],
      "message": "Include production reference implementation",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-15T19:09:36Z"
      },
      "sha": "45daed4ef1c64b48053d32342896d3bdb120e10d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI1OTNjNDU3YzliZGE1YTQ3YWQyZjkxZjk2NTg1MTc4MDU4NjY5ZTg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b593c457c9bda5a47ad2f91f96585178058669e8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b593c457c9bda5a47ad2f91f96585178058669e8",
      "tree": {
        "sha": "fc639bc4ce976119f9f12fd6257b509b8dc78d8c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fc639bc4ce976119f9f12fd6257b509b8dc78d8c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fc639bc4ce976119f9f12fd6257b509b8dc78d8c\nparent 45daed4ef1c64b48053d32342896d3bdb120e10d\nauthor DanGould <d@ngould.dev> 1703692789 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nAdopt BIP-77 for payjoin v2\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWVKeAP9E6+kDlNsLNEKJu1Igr2WmzHVGj9QAoRcYJS0mbmAvWQD8C+l0qzbKS83c\nYP66TGOnGetgl5HQKgY2S4ljhrDCuQs=\n=Pb7P\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/45daed4ef1c64b48053d32342896d3bdb120e10d",
          "sha": "45daed4ef1c64b48053d32342896d3bdb120e10d",
          "html_url": "https://github.com/bitcoin/bips/commit/45daed4ef1c64b48053d32342896d3bdb120e10d"
        }
      ],
      "message": "Adopt BIP-77 for payjoin v2",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-27T15:59:49Z"
      },
      "sha": "b593c457c9bda5a47ad2f91f96585178058669e8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZiZWNiMzRhNWUxMzQyNDZmNTM3NjUxNWMyMjFiZWE3YjY4ODZhMGQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6becb34a5e134246f5376515c221bea7b6886a0d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6becb34a5e134246f5376515c221bea7b6886a0d",
      "tree": {
        "sha": "01e8014e11919dd5bc3f4d44f6db5a5166d1333e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/01e8014e11919dd5bc3f4d44f6db5a5166d1333e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 01e8014e11919dd5bc3f4d44f6db5a5166d1333e\nparent b593c457c9bda5a47ad2f91f96585178058669e8\nauthor DanGould <d@ngould.dev> 1709740506 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nDistinguish payjoin directory from OHTTP Relay\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWSeGAP0W77mNjzdWsyqRuN9DD/6DfU0njNjNmR6Xcal6mXF1sAEA/nBhRVixSNs7\nnR4PciFC4KPEzzLQhm/sUy+IY25ZZgo=\n=Yh7m\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b593c457c9bda5a47ad2f91f96585178058669e8",
          "sha": "b593c457c9bda5a47ad2f91f96585178058669e8",
          "html_url": "https://github.com/bitcoin/bips/commit/b593c457c9bda5a47ad2f91f96585178058669e8"
        }
      ],
      "message": "Distinguish payjoin directory from OHTTP Relay",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T15:55:06Z"
      },
      "sha": "6becb34a5e134246f5376515c221bea7b6886a0d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDc1NGUyODdkNDYyYTA3NGRlMTY5ZTM5NDNjNjlhNmZjMTMxYTU1MDA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/754e287d462a074de169e3943c69a6fc131a5500",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/754e287d462a074de169e3943c69a6fc131a5500",
      "tree": {
        "sha": "3c4e204d33d564e4ea04a565c03960fa3eee539d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3c4e204d33d564e4ea04a565c03960fa3eee539d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3c4e204d33d564e4ea04a565c03960fa3eee539d\nparent 6becb34a5e134246f5376515c221bea7b6886a0d\nauthor DanGould <d@ngould.dev> 1709741847 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nDetail OHTTP Key Configuration mechanism\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWXRpAQDUtDF1fntGnt3/53w4bLHogwpdzBwLQ99i4Tv+SSkkWQEA6t9qS5BJFxT+\nIA1I5uXp70d4EG6EcNlPX4PeYnCajAU=\n=3TT9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6becb34a5e134246f5376515c221bea7b6886a0d",
          "sha": "6becb34a5e134246f5376515c221bea7b6886a0d",
          "html_url": "https://github.com/bitcoin/bips/commit/6becb34a5e134246f5376515c221bea7b6886a0d"
        }
      ],
      "message": "Detail OHTTP Key Configuration mechanism",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:17:27Z"
      },
      "sha": "754e287d462a074de169e3943c69a6fc131a5500"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgwYjhiYWNmZDAyMTUyYWM3OTYxMDkwYjZjNzRiMzhhNmZkOTYyZDI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/80b8bacfd02152ac7961090b6c74b38a6fd962d2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/80b8bacfd02152ac7961090b6c74b38a6fd962d2",
      "tree": {
        "sha": "1f6e03e176ac365ce9046b28b93e2ab3c0e1e950",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1f6e03e176ac365ce9046b28b93e2ab3c0e1e950"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1f6e03e176ac365ce9046b28b93e2ab3c0e1e950\nparent 754e287d462a074de169e3943c69a6fc131a5500\nauthor DanGould <d@ngould.dev> 1709741941 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nFix punctuation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWRp8AQDfU2yQxa3AWIjB0D4FvSN5dasUu1NIwLJxXcdvyMPF6gD/WGnmyBKnu4X8\npnBAMGHs07TnKVF/q63yUfrOF+9KDgs=\n=+JJY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/754e287d462a074de169e3943c69a6fc131a5500",
          "sha": "754e287d462a074de169e3943c69a6fc131a5500",
          "html_url": "https://github.com/bitcoin/bips/commit/754e287d462a074de169e3943c69a6fc131a5500"
        }
      ],
      "message": "Fix punctuation",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:19:01Z"
      },
      "sha": "80b8bacfd02152ac7961090b6c74b38a6fd962d2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI1MzUzYjU5YjA3YjY5NGMyMWNhNWVmOTc3ZTQ0NTNlYTIzZDczNzU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5353b59b07b694c21ca5ef977e4453ea23d7375",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b5353b59b07b694c21ca5ef977e4453ea23d7375",
      "tree": {
        "sha": "6b2419e881557f2d97d8b5f2e12bd2063a70c9d0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6b2419e881557f2d97d8b5f2e12bd2063a70c9d0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6b2419e881557f2d97d8b5f2e12bd2063a70c9d0\nparent 80b8bacfd02152ac7961090b6c74b38a6fd962d2\nauthor DanGould <d@ngould.dev> 1709742448 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nMake base64URL references consistent\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWTOGAP9vomdt2qzMtD1p9mcaMJgR9qhQEpUlSpW8DwRF1zRHFgEAyc+y61K7SdAp\nLT/KMKIbyaHMmyUpie90ERMvA+Cbkwo=\n=qhO7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/80b8bacfd02152ac7961090b6c74b38a6fd962d2",
          "sha": "80b8bacfd02152ac7961090b6c74b38a6fd962d2",
          "html_url": "https://github.com/bitcoin/bips/commit/80b8bacfd02152ac7961090b6c74b38a6fd962d2"
        }
      ],
      "message": "Make base64URL references consistent",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:27:28Z"
      },
      "sha": "b5353b59b07b694c21ca5ef977e4453ea23d7375"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDllOGI0ZDdlZTc1NWJiNzJhMDM4OWEzYmNlNDQ3MzFkMTMxZWNhZDE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9e8b4d7ee755bb72a0389a3bce44731d131ecad1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9e8b4d7ee755bb72a0389a3bce44731d131ecad1",
      "tree": {
        "sha": "4774d0e66fc67cd164eab3fe01f3351bdab6437e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4774d0e66fc67cd164eab3fe01f3351bdab6437e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4774d0e66fc67cd164eab3fe01f3351bdab6437e\nparent b5353b59b07b694c21ca5ef977e4453ea23d7375\nauthor DanGould <d@ngould.dev> 1709742582 -0500\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nReference standardized Secp256k1 DHKEM for HPKE\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWZPmAP9uyyeB4n/RXgfMs3HBNjAkai9LDcpUsgipdrdgyxFNYAD/SDZJEWr74qHb\nVn9zjzplLG0DAHprFQIuLZB9dF6yVg0=\n=0OCm\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5353b59b07b694c21ca5ef977e4453ea23d7375",
          "sha": "b5353b59b07b694c21ca5ef977e4453ea23d7375",
          "html_url": "https://github.com/bitcoin/bips/commit/b5353b59b07b694c21ca5ef977e4453ea23d7375"
        }
      ],
      "message": "Reference standardized Secp256k1 DHKEM for HPKE",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:29:42Z"
      },
      "sha": "9e8b4d7ee755bb72a0389a3bce44731d131ecad1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNjMTYyOWJiMjM2MWFhMjI5YWRiZGUzNjUyN2I3ZTFiYzU5MTM4ZGM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3c1629bb2361aa229adbde36527b7e1bc59138dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3c1629bb2361aa229adbde36527b7e1bc59138dc",
      "tree": {
        "sha": "e35c87294c9a01f8add0eb844f4bcec57aa29e0a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e35c87294c9a01f8add0eb844f4bcec57aa29e0a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e35c87294c9a01f8add0eb844f4bcec57aa29e0a\nparent 9e8b4d7ee755bb72a0389a3bce44731d131ecad1\nauthor DanGould <d@ngould.dev> 1711511148 -0400\ncommitter DanGould <d@ngould.dev> 1714705440 -0400\n\nAdd Comments-URI\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjRUIAAKCRA4cTNWCSIP\nWd1SAP0Q9KWir8gJcZ5Iao7PoT8IFk3GMGAo4uwgcnfkAdlmywD/bxnRWxNL0hGW\nEoYJiJwt7k4qbyZ5KBT60Sb2nTmFuQU=\n=33pI\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9e8b4d7ee755bb72a0389a3bce44731d131ecad1",
          "sha": "9e8b4d7ee755bb72a0389a3bce44731d131ecad1",
          "html_url": "https://github.com/bitcoin/bips/commit/9e8b4d7ee755bb72a0389a3bce44731d131ecad1"
        }
      ],
      "message": "Add Comments-URI",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:04:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-27T03:45:48Z"
      },
      "sha": "3c1629bb2361aa229adbde36527b7e1bc59138dc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12691236404,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL0dOY0",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691236404",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T03:04:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12691275864,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL0dYBY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691275864",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T03:13:18Z"
    },
    {
      "event": "commented",
      "id": 2092055828,
      "node_id": "IC_kwDOAN28mc58sj0U",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2092055828",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T03:14:37Z",
      "updated_at": "2024-05-03T03:14:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Converted to draft until we have some more experience with the implementations in the wild.\r\n\r\nStill seeking review especially on the soundness of the network privacy, choice of cryptosystem, and bip21 parameter encoding.",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2092055828",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "reviewed",
      "id": 2039869772,
      "node_id": "PRR_kwDOAN28mc55lfFM",
      "url": null,
      "actor": null,
      "commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2039869772",
      "submitted_at": "2024-05-06T02:23:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGEwZDM2NTQ0NzEyOWZmYTMxYWNhOThlZjg0ZjU0ZWFmNjY0MWIwOGQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a0d365447129ffa31aca98ef84f54eaf6641b08d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a0d365447129ffa31aca98ef84f54eaf6641b08d",
      "tree": {
        "sha": "5e505054d04e74ac142e284654bb9383b302d470",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5e505054d04e74ac142e284654bb9383b302d470"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5e505054d04e74ac142e284654bb9383b302d470\nparent 3c1629bb2361aa229adbde36527b7e1bc59138dc\nauthor DanGould <d@ngould.dev> 1714705162 -0400\ncommitter DanGould <d@ngould.dev> 1715032845 -0400\n\nfixup: Format and spell check\n\nCo-authored-by: spacebear <144076611+grizznaut@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjlTEwAKCRA4cTNWCSIP\nWaBPAP9yDbAusiVla5wscf7/93Q4V9MIdU5eA2txzjnLdBERZQD+I1xo6xm8vXn0\nlJp3PqNWJSsoY6306uVTZTmQeBp6Fws=\n=zarg\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3c1629bb2361aa229adbde36527b7e1bc59138dc",
          "sha": "3c1629bb2361aa229adbde36527b7e1bc59138dc",
          "html_url": "https://github.com/bitcoin/bips/commit/3c1629bb2361aa229adbde36527b7e1bc59138dc"
        }
      ],
      "message": "fixup: Format and spell check\n\nCo-authored-by: spacebear <144076611+grizznaut@users.noreply.github.com>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T22:00:45Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T02:59:22Z"
      },
      "sha": "a0d365447129ffa31aca98ef84f54eaf6641b08d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI3NTgzMTFiYTZmZDRkMDFjYzM4NGIwNDBkMTJhMWMyNmI0ZjU0OTc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b758311ba6fd4d01cc384b040d12a1c26b4f5497",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b758311ba6fd4d01cc384b040d12a1c26b4f5497",
      "tree": {
        "sha": "28977d760b427b4199d346b4af723849b1dee19d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/28977d760b427b4199d346b4af723849b1dee19d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 28977d760b427b4199d346b4af723849b1dee19d\nparent a0d365447129ffa31aca98ef84f54eaf6641b08d\nauthor DanGould <d@ngould.dev> 1714705684 -0400\ncommitter DanGould <d@ngould.dev> 1715032851 -0400\n\nAdd BIP 77 to README\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjlTEwAKCRA4cTNWCSIP\nWbthAP9/OK5lc6k1yBDGQh+4LVomR3W9gAeyC7bEGtZf3X4AxwD/Wy4DKV1oEhTu\nlseSf11jfb3aotpWbZsjkyqxslGLDA8=\n=FJ6J\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a0d365447129ffa31aca98ef84f54eaf6641b08d",
          "sha": "a0d365447129ffa31aca98ef84f54eaf6641b08d",
          "html_url": "https://github.com/bitcoin/bips/commit/a0d365447129ffa31aca98ef84f54eaf6641b08d"
        }
      ],
      "message": "Add BIP 77 to README",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T22:00:51Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:08:04Z"
      },
      "sha": "b758311ba6fd4d01cc384b040d12a1c26b4f5497"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk1YTNiMTRiODE3ZjU3NDYxZjA1ZTlhMGI0MTNkM2EzZjkyZDAyNzk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/95a3b14b817f57461f05e9a0b413d3a3f92d0279",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/95a3b14b817f57461f05e9a0b413d3a3f92d0279",
      "tree": {
        "sha": "249fa9b548afb0cf80e57c2560b4a69c947c534c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/249fa9b548afb0cf80e57c2560b4a69c947c534c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 249fa9b548afb0cf80e57c2560b4a69c947c534c\nparent b758311ba6fd4d01cc384b040d12a1c26b4f5497\nauthor DanGould <d@ngould.dev> 1714769371 -0400\ncommitter DanGould <d@ngould.dev> 1715032851 -0400\n\nAdd Payjoin V2 overview diagram\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjlTEwAKCRA4cTNWCSIP\nWTPXAQDeYrvFASDQ+HNvkBe9hzzWSpkyRJ3ZqqhYXQ4O4erFpgEA9rt1U/YzTf/2\nQ8bHeidjgM6qFyevDg8CwZRFM9ipzQo=\n=TrMA\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b758311ba6fd4d01cc384b040d12a1c26b4f5497",
          "sha": "b758311ba6fd4d01cc384b040d12a1c26b4f5497",
          "html_url": "https://github.com/bitcoin/bips/commit/b758311ba6fd4d01cc384b040d12a1c26b4f5497"
        }
      ],
      "message": "Add Payjoin V2 overview diagram",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T22:00:51Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T20:49:31Z"
      },
      "sha": "95a3b14b817f57461f05e9a0b413d3a3f92d0279"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDY2NDZlOTkwOGM3ZTdkZDE0NDI2NTgyYmU2M2EzNDE1MTljMzVkNTA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6646e9908c7e7dd14426582be63a341519c35d50",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6646e9908c7e7dd14426582be63a341519c35d50",
      "tree": {
        "sha": "87f7a843b68640a3a6ad1442806f7bda669e5358",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/87f7a843b68640a3a6ad1442806f7bda669e5358"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 87f7a843b68640a3a6ad1442806f7bda669e5358\nparent 95a3b14b817f57461f05e9a0b413d3a3f92d0279\nauthor DanGould <d@ngould.dev> 1714957104 -0400\ncommitter DanGould <d@ngould.dev> 1715032851 -0400\n\nAdd Oblivious HTTP Sequence Diagram\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjlTEwAKCRA4cTNWCSIP\nWfJJAQC9lh3T7rnQ06upv5bBkb/UFZ+OMyLUFV5SCfk9SwrYwwEAmkBk0vs7evRn\nvlfc9+I8GZCQoD8D+8vD94BhZdznYgk=\n=Q0ZW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/95a3b14b817f57461f05e9a0b413d3a3f92d0279",
          "sha": "95a3b14b817f57461f05e9a0b413d3a3f92d0279",
          "html_url": "https://github.com/bitcoin/bips/commit/95a3b14b817f57461f05e9a0b413d3a3f92d0279"
        }
      ],
      "message": "Add Oblivious HTTP Sequence Diagram",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T22:00:51Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T00:58:24Z"
      },
      "sha": "6646e9908c7e7dd14426582be63a341519c35d50"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12720995821,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL2Ov3t",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12720995821",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T22:00:57Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDVmZjViN2FlNzc2YWU4ZTllMTYwY2VkOThkY2UxYWIxMGU5MDE5ZGY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "tree": {
        "sha": "8ad57b1ca9437f3919ec9aec29e2ee750acd6f6e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8ad57b1ca9437f3919ec9aec29e2ee750acd6f6e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8ad57b1ca9437f3919ec9aec29e2ee750acd6f6e\nparent 6646e9908c7e7dd14426582be63a341519c35d50\nauthor DanGould <d@ngould.dev> 1715032786 -0400\ncommitter DanGould <d@ngould.dev> 1715033033 -0400\n\nCorrect links and spelling\n\nCo-authored-by: thebrandonlucas <38222767+thebrandonlucas@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjlTygAKCRA4cTNWCSIP\nWRVAAQD3Y+a16FLjrRBXipspT+SJ+VfRuP0zT7env+r23gjGWQD/c4W0MjwHWhmL\nBbCICz8tTmcv1dZFbQA6M6uqwSpQmw4=\n=xBVv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6646e9908c7e7dd14426582be63a341519c35d50",
          "sha": "6646e9908c7e7dd14426582be63a341519c35d50",
          "html_url": "https://github.com/bitcoin/bips/commit/6646e9908c7e7dd14426582be63a341519c35d50"
        }
      ],
      "message": "Correct links and spelling\n\nCo-authored-by: thebrandonlucas <38222767+thebrandonlucas@users.noreply.github.com>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T22:03:53Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T21:59:46Z"
      },
      "sha": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12721019297,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL2O1mh",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12721019297",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T22:03:55Z"
    },
    {
      "event": "reviewed",
      "id": 2041919837,
      "node_id": "PRR_kwDOAN28mc55tTld",
      "url": null,
      "actor": null,
      "commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2041919837",
      "submitted_at": "2024-05-07T01:48:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2041927205,
      "node_id": "PRR_kwDOAN28mc55tVYl",
      "url": null,
      "actor": null,
      "commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2041927205",
      "submitted_at": "2024-05-07T01:54:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGNlNjYwNDdkZWRkZWUzZDUzYzY0OGM0OTQ3ODMyY2NmYjcyNDQ0NzU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ce66047deddee3d53c648c4947832ccfb7244475",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ce66047deddee3d53c648c4947832ccfb7244475",
      "tree": {
        "sha": "f35d27a66785107de3dadaf8092e8eb994e4d3f1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f35d27a66785107de3dadaf8092e8eb994e4d3f1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f35d27a66785107de3dadaf8092e8eb994e4d3f1\nparent 5ff5b7ae776ae8e9e160ced98dce1ab10e9019df\nauthor DanGould <d@ngould.dev> 1715113409 -0400\ncommitter DanGould <d@ngould.dev> 1715113409 -0400\n\nWrap <code> blocks\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjqNwQAKCRA4cTNWCSIP\nWV7nAP47pxrlDtju9lIrrDYGJCyGiX2ZN1vafsjZEeqFviEF6QEAtB3Kd0Dty+zW\n90TeCPSZuDdKCE1OWMxfTBY8ovek8gw=\n=F2mi\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
          "sha": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
          "html_url": "https://github.com/bitcoin/bips/commit/5ff5b7ae776ae8e9e160ced98dce1ab10e9019df"
        }
      ],
      "message": "Wrap <code> blocks",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:23:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:23:29Z"
      },
      "sha": "ce66047deddee3d53c648c4947832ccfb7244475"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDA3ZGI1NTM2Njg0YjJjMTExZjRiZmEwZTQ2OGQzYTVlZTE0NzNjODg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/07db5536684b2c111f4bfa0e468d3a5ee1473c88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/07db5536684b2c111f4bfa0e468d3a5ee1473c88",
      "tree": {
        "sha": "c3101c8742fa59fee6592f69dd558e8d020fc390",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c3101c8742fa59fee6592f69dd558e8d020fc390"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c3101c8742fa59fee6592f69dd558e8d020fc390\nparent ce66047deddee3d53c648c4947832ccfb7244475\nauthor DanGould <d@ngould.dev> 1715113521 -0400\ncommitter DanGould <d@ngould.dev> 1715113521 -0400\n\nFix basic scheme actors\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjqOMQAKCRA4cTNWCSIP\nWQ32AP9A5z2tXRtSPzBgf6CL/159txAF7hBDt+PPIFQB9uAvGQEA8mdW5rz3wn5l\nvstVL+4LmW78I5xzTZWgGiihQhJ1Kwg=\n=Loyx\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ce66047deddee3d53c648c4947832ccfb7244475",
          "sha": "ce66047deddee3d53c648c4947832ccfb7244475",
          "html_url": "https://github.com/bitcoin/bips/commit/ce66047deddee3d53c648c4947832ccfb7244475"
        }
      ],
      "message": "Fix basic scheme actors",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:25:21Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:25:21Z"
      },
      "sha": "07db5536684b2c111f4bfa0e468d3a5ee1473c88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI2OTNmYjlhMmVlMTkxNzVmZGM5YTlmNDIyNzFjMmVhYjE0MDMwODY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b693fb9a2ee19175fdc9a9f42271c2eab1403086",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b693fb9a2ee19175fdc9a9f42271c2eab1403086",
      "tree": {
        "sha": "40dec78ca5ffbb89605c39d32aa6242b8a7ef297",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/40dec78ca5ffbb89605c39d32aa6242b8a7ef297"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 40dec78ca5ffbb89605c39d32aa6242b8a7ef297\nparent 07db5536684b2c111f4bfa0e468d3a5ee1473c88\nauthor DanGould <d@ngould.dev> 1715113697 -0400\ncommitter DanGould <d@ngould.dev> 1715113697 -0400\n\nFix dead samourai links\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZjqO4QAKCRA4cTNWCSIP\nWaryAQCcLQPUxWyTz8JnFIPPht5dTWLqShADd+D8qOxJRA4vCQD/Ws2UA+FqDazJ\nPnMHsgjkFOE15flKPRwMSKjuuIyIZQo=\n=W4x/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/07db5536684b2c111f4bfa0e468d3a5ee1473c88",
          "sha": "07db5536684b2c111f4bfa0e468d3a5ee1473c88",
          "html_url": "https://github.com/bitcoin/bips/commit/07db5536684b2c111f4bfa0e468d3a5ee1473c88"
        }
      ],
      "message": "Fix dead samourai links",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:28:17Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:28:17Z"
      },
      "sha": "b693fb9a2ee19175fdc9a9f42271c2eab1403086"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGY5YjRiOTExZWRhNGYwMTU0ZWUyZmZjODVjZjQwMzdmNTdmZDBhYjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f9b4b911eda4f0154ee2ffc85cf4037f57fd0ab3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f9b4b911eda4f0154ee2ffc85cf4037f57fd0ab3",
      "tree": {
        "sha": "7737fb27959cab4ddbb1e291e0b51783a85c4fe8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7737fb27959cab4ddbb1e291e0b51783a85c4fe8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7737fb27959cab4ddbb1e291e0b51783a85c4fe8\nparent b693fb9a2ee19175fdc9a9f42271c2eab1403086\nauthor DanGould <d@ngould.dev> 1715372007 -0400\ncommitter DanGould <d@ngould.dev> 1715372007 -0400\n\nOrient motivation around a problem\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZj5/5wAKCRA4cTNWCSIP\nWR9TAQDMBFLPlysdoLXh9Ozw2HbVelfddF1SpXDELZAnoD1TIwEA+59NJlpxXdSH\nZZdnkEWmncebqV6H59vC82dCXIyF9gA=\n=faq3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b693fb9a2ee19175fdc9a9f42271c2eab1403086",
          "sha": "b693fb9a2ee19175fdc9a9f42271c2eab1403086",
          "html_url": "https://github.com/bitcoin/bips/commit/b693fb9a2ee19175fdc9a9f42271c2eab1403086"
        }
      ],
      "message": "Orient motivation around a problem",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-10T20:13:27Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-10T20:13:27Z"
      },
      "sha": "f9b4b911eda4f0154ee2ffc85cf4037f57fd0ab3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGJjMzEyM2UxZGFiMWM1YjA4ZDZmOTM0YjExYjRkNzQxMTA3YWMzODY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "tree": {
        "sha": "020cbdfc89fd20501f38038a0268b2b60d3c9262",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/020cbdfc89fd20501f38038a0268b2b60d3c9262"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 020cbdfc89fd20501f38038a0268b2b60d3c9262\nparent f9b4b911eda4f0154ee2ffc85cf4037f57fd0ab3\nauthor DanGould <d@ngould.dev> 1715373147 -0400\ncommitter DanGould <d@ngould.dev> 1715373147 -0400\n\nfix links\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZj6EWwAKCRA4cTNWCSIP\nWX3kAPwIOOelfuyALaTunf4wCjsQbF43qcmRWhFM2AtePdKkNAEAmHUPFZmSxCxF\n9Zny5J/uNmksf+ioMGKfFFSTBnhhXwA=\n=HJNK\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f9b4b911eda4f0154ee2ffc85cf4037f57fd0ab3",
          "sha": "f9b4b911eda4f0154ee2ffc85cf4037f57fd0ab3",
          "html_url": "https://github.com/bitcoin/bips/commit/f9b4b911eda4f0154ee2ffc85cf4037f57fd0ab3"
        }
      ],
      "message": "fix links",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-10T20:32:27Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-10T20:32:27Z"
      },
      "sha": "bc3123e1dab1c5b08d6f934b11b4d741107ac386"
    },
    {
      "event": "reviewed",
      "id": 2051527351,
      "node_id": "PRR_kwDOAN28mc56R9K3",
      "url": null,
      "actor": null,
      "commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2051527351",
      "submitted_at": "2024-05-13T00:56:56Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM1ZWJhZDhlYTJiZDUxZmVkOWE3OTZkYTVmMTZhNmY2MmM1ZTRhYTY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/35ebad8ea2bd51fed9a796da5f16a6f62c5e4aa6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/35ebad8ea2bd51fed9a796da5f16a6f62c5e4aa6",
      "tree": {
        "sha": "dadebaea9dd5bd8966d6119338d32685a97dbc3d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dadebaea9dd5bd8966d6119338d32685a97dbc3d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dadebaea9dd5bd8966d6119338d32685a97dbc3d\nparent bc3123e1dab1c5b08d6f934b11b4d741107ac386\nauthor DanGould <d@ngould.dev> 1716304625 -0400\ncommitter DanGould <d@ngould.dev> 1716304625 -0400\n\nKeyconfig s/should/must/ be provided\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZky68QAKCRA4cTNWCSIP\nWYDZAP9Xc21t67ZEH5VhLyEx/oKtZXCRlLAGgsSVRlJQu6PGCwEAnCeESN9CPrga\nyDGaVNt/aToSwLzJj/JMWj8jxk+vcgc=\n=AlV5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bc3123e1dab1c5b08d6f934b11b4d741107ac386",
          "sha": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
          "html_url": "https://github.com/bitcoin/bips/commit/bc3123e1dab1c5b08d6f934b11b4d741107ac386"
        }
      ],
      "message": "Keyconfig s/should/must/ be provided",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:17:05Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:17:05Z"
      },
      "sha": "35ebad8ea2bd51fed9a796da5f16a6f62c5e4aa6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDIyNDIwOGMyNzBjZGI0MGY5NDVhZjgyNjI1M2JhYTljZjRkYTg2MTQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/224208c270cdb40f945af826253baa9cf4da8614",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/224208c270cdb40f945af826253baa9cf4da8614",
      "tree": {
        "sha": "1e8b89f924969640995d87c3039485105e8dffdc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1e8b89f924969640995d87c3039485105e8dffdc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1e8b89f924969640995d87c3039485105e8dffdc\nparent 35ebad8ea2bd51fed9a796da5f16a6f62c5e4aa6\nauthor DanGould <d@ngould.dev> 1716304931 -0400\ncommitter DanGould <d@ngould.dev> 1716304947 -0400\n\nFix typos\n\nCo-authored-by: thebrandonlucas <38222767+thebrandonlucas@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZky8OAAKCRA4cTNWCSIP\nWSQmAQDAWoSyyloCoDrWukXtwn0s2N8QU9WF/mMNKPKb6Amw7AD8D5VYJlJ1mIZ8\nAB8eLYeIjmfhB8CXZBIq3ExMYkqeHA8=\n=xWoG\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/35ebad8ea2bd51fed9a796da5f16a6f62c5e4aa6",
          "sha": "35ebad8ea2bd51fed9a796da5f16a6f62c5e4aa6",
          "html_url": "https://github.com/bitcoin/bips/commit/35ebad8ea2bd51fed9a796da5f16a6f62c5e4aa6"
        }
      ],
      "message": "Fix typos\n\nCo-authored-by: thebrandonlucas <38222767+thebrandonlucas@users.noreply.github.com>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:22:27Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:22:11Z"
      },
      "sha": "224208c270cdb40f945af826253baa9cf4da8614"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ3ZmZhZDgxZTYwNWU5NThkY2Y3YzJhZTFmNGM3OTdhODYzMWYxNDY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "tree": {
        "sha": "f7be1ac966639dfb3a5b90e800cf799220c4dd0f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f7be1ac966639dfb3a5b90e800cf799220c4dd0f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f7be1ac966639dfb3a5b90e800cf799220c4dd0f\nparent 224208c270cdb40f945af826253baa9cf4da8614\nauthor DanGould <d@ngould.dev> 1716304997 -0400\ncommitter DanGould <d@ngould.dev> 1716304997 -0400\n\ns/pubkey/public key\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZky8ZQAKCRA4cTNWCSIP\nWZGcAQCUIkCfzCw2oBGtk0qeUTw9aVL0G3nObTlRqGsSkDhUbwD8Cxw1bT+xppAY\nnaS/mRtPbqtHZnrBlu+zM9odChEoxQk=\n=k6Wt\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/224208c270cdb40f945af826253baa9cf4da8614",
          "sha": "224208c270cdb40f945af826253baa9cf4da8614",
          "html_url": "https://github.com/bitcoin/bips/commit/224208c270cdb40f945af826253baa9cf4da8614"
        }
      ],
      "message": "s/pubkey/public key",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:23:17Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:23:17Z"
      },
      "sha": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146"
    },
    {
      "event": "reviewed",
      "id": 2072406420,
      "node_id": "PRR_kwDOAN28mc57hmmU",
      "url": null,
      "actor": null,
      "commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Midway through a first (non-technical) review pass. Once at the end, will read through BIP78 and then do a more technical review.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2072406420",
      "submitted_at": "2024-05-23T00:23:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNiODYzYTQwMmUwMjUwNjU4OTg1ZjA4YTQ1NWE2Y2QxMDNlMjY5ZTU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3b863a402e0250658985f08a455a6cd103e269e5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3b863a402e0250658985f08a455a6cd103e269e5",
      "tree": {
        "sha": "d38efeb43a3f7e8362d809a4fd27acb5f4d9bf12",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d38efeb43a3f7e8362d809a4fd27acb5f4d9bf12"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d38efeb43a3f7e8362d809a4fd27acb5f4d9bf12\nparent d7ffad81e605e958dcf7c2ae1f4c797a8631f146\nauthor DanGould <d@ngould.dev> 1717352857 -0400\ncommitter DanGould <d@ngould.dev> 1717352857 -0400\n\nIncorporate jonatack's suggestions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZly5mQAKCRA4cTNWCSIP\nWTMCAPsEYXjcJcVzdbAOhr8Ekd2+/qhr0mT5lmkQf8cElgZ8ZgD/bRZ/RRalZM5V\naFsrtcAJBbBt/imO6/1xuhg0sui9hAs=\n=WaEt\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
          "sha": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
          "html_url": "https://github.com/bitcoin/bips/commit/d7ffad81e605e958dcf7c2ae1f4c797a8631f146"
        }
      ],
      "message": "Incorporate jonatack's suggestions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-06-02T18:27:37Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-06-02T18:27:37Z"
      },
      "sha": "3b863a402e0250658985f08a455a6cd103e269e5"
    },
    {
      "event": "commented",
      "id": 2143981635,
      "node_id": "IC_kwDOAN28mc5_ypBD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2143981635",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-02T18:38:58Z",
      "updated_at": "2024-07-15T17:02:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonatack Thank you for the review and implicit advice about how to clarify technical specifications such as this one with even small changes like using explicit subjects. Your patient, thorough contribution moves the needle toward production readiness and helps me reflect on the parts of the spec that are most lacking to correct them.\r\n\r\nIn incorporating your fresh perspective, I see a few issues remaining that I'll outline as a note for myself to correct:\r\n\r\n- [x] Revise document to describe Payjoin \"sessions\" instead of directory \"enrollment\". e.g.: \"The payjoin version 2 protocol uses per-[session] public keys\"\r\n- [ ] Replacethe `Authenticate: <token>` messaging with a mask on eligible OHTTP relay addresses that start with \"pay\" domains. Avoid using identifying protocols like authentication tokens to preserve privacy. The goal is to make free access to these servers while by limiting their capability to preventing DoS vectors or misuse.\r\n- [ ] Either include PSBTv2 in the reference implementation or remove it from the bip77 spec",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2143981635",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 13012737826,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAAMHnp8i",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13012737826",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-02T18:39:00Z"
    },
    {
      "event": "subscribed",
      "id": 13012737834,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAMHnp8q",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13012737834",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-02T18:39:00Z"
    },
    {
      "event": "reviewed",
      "id": 2126619359,
      "node_id": "PRR_kwDOAN28mc5-waLf",
      "url": null,
      "actor": null,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Review pass of the latest changes in 3b863a402e0250658985f08a455a6cd103e269e5.\r\n\r\nNote to self: continue original review pass from line 180 to the end.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2126619359",
      "submitted_at": "2024-06-18T22:15:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2126694296,
      "node_id": "PRR_kwDOAN28mc5-wseY",
      "url": null,
      "actor": null,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> continue original review pass from line 180 to the end\r\n\r\nDone (for the initial proofreading pass)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2126694296",
      "submitted_at": "2024-06-18T23:55:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2149540099,
      "node_id": "PRR_kwDOAN28mc6AH2ED",
      "url": null,
      "actor": null,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "5twelve",
        "id": 97030944,
        "node_id": "U_kgDOBciTIA",
        "avatar_url": "https://avatars.githubusercontent.com/u/97030944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/5twelve",
        "html_url": "https://github.com/5twelve",
        "followers_url": "https://api.github.com/users/5twelve/followers",
        "following_url": "https://api.github.com/users/5twelve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/5twelve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/5twelve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/5twelve/subscriptions",
        "organizations_url": "https://api.github.com/users/5twelve/orgs",
        "repos_url": "https://api.github.com/users/5twelve/repos",
        "events_url": "https://api.github.com/users/5twelve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/5twelve/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2149540099",
      "submitted_at": "2024-06-29T10:47:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2159134367,
      "node_id": "PRR_kwDOAN28mc6Ascaf",
      "url": null,
      "actor": null,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2159134367",
      "submitted_at": "2024-07-04T20:18:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2209530281,
      "node_id": "IC_kwDOAN28mc6DssGp",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2209530281",
      "actor": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T20:22:01Z",
      "updated_at": "2024-07-04T20:22:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "I really enjoyed reading this :) Well done! Dropped some comments on mainly nit related suggestions, but there were a few places where I left comments seeking clarification.",
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2209530281",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGY4NmZlNDE1MGJhNmJmZTk2MjJmZjM2Zjk4OWRlMWMxNWU1MmZjYzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f86fe4150ba6bfe9622ff36f989de1c15e52fcc4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f86fe4150ba6bfe9622ff36f989de1c15e52fcc4",
      "tree": {
        "sha": "e9356b2255db989958c64a8d504de990c0667fb1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e9356b2255db989958c64a8d504de990c0667fb1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e9356b2255db989958c64a8d504de990c0667fb1\nparent 3b863a402e0250658985f08a455a6cd103e269e5\nauthor DanGould <d@ngould.dev> 1720283979 -0400\ncommitter DanGould <d@ngould.dev> 1720283979 -0400\n\nIncorporate more jonatack suggestions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHQEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZolzSwAKCRA4cTNWCSIP\nWU/NAQCk7UW0F9jzslbBb9dHc9cgiWKVoQv9hkj8kGBg1vqrgQD451u/iBoGEyvx\nCf0miis3iGzmPX3jmmNeIWyzsYXCDg==\n=rSVL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3b863a402e0250658985f08a455a6cd103e269e5",
          "sha": "3b863a402e0250658985f08a455a6cd103e269e5",
          "html_url": "https://github.com/bitcoin/bips/commit/3b863a402e0250658985f08a455a6cd103e269e5"
        }
      ],
      "message": "Incorporate more jonatack suggestions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-06T16:39:39Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-06T16:39:39Z"
      },
      "sha": "f86fe4150ba6bfe9622ff36f989de1c15e52fcc4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDVjNjVjMjEyMGUwZGRjMTE0NWFlMDY1Yjc4YWQ0NTczYTNhM2I1MmU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5c65c2120e0ddc1145ae065b78ad4573a3a3b52e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5c65c2120e0ddc1145ae065b78ad4573a3a3b52e",
      "tree": {
        "sha": "41d633531fd5187084c63b770311f114c8e8173a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/41d633531fd5187084c63b770311f114c8e8173a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 41d633531fd5187084c63b770311f114c8e8173a\nparent f86fe4150ba6bfe9622ff36f989de1c15e52fcc4\nauthor DanGould <d@ngould.dev> 1720310101 -0400\ncommitter DanGould <d@ngould.dev> 1720310101 -0400\n\nIncorporate satsie's suggesetions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZonZVQAKCRA4cTNWCSIP\nWfKhAP9hv8rtBtTJBpHQW9UvW6xWmX//4vXSbAf0r98eMGXy7AEAq6ZvorTp/pKO\nxitsbX5TBGku2SVKOG8Lvni3LXaRzw8=\n=6o2n\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f86fe4150ba6bfe9622ff36f989de1c15e52fcc4",
          "sha": "f86fe4150ba6bfe9622ff36f989de1c15e52fcc4",
          "html_url": "https://github.com/bitcoin/bips/commit/f86fe4150ba6bfe9622ff36f989de1c15e52fcc4"
        }
      ],
      "message": "Incorporate satsie's suggesetions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-06T23:55:01Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-06T23:55:01Z"
      },
      "sha": "5c65c2120e0ddc1145ae065b78ad4573a3a3b52e"
    },
    {
      "event": "labeled",
      "id": 13426373892,
      "node_id": "LE_lADOAN28mc5uKfAvzwAAAAMgRjUE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13426373892",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T16:02:01Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "renamed",
      "id": 13507528290,
      "node_id": "RTE_lADOAN28mc5uKfAvzwAAAAMlHIZi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13507528290",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-15T15:37:12Z",
      "rename": {
        "from": "BIP 77: Payjoin Version 2: Serverless Payjoin",
        "to": "BIP 77: Payjoin Version 2 â€” Async Payjoin"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI3MDFhZGVhNTA2ZDY1Y2RjOWY2MjJiYzE3MzM3Y2JkZGZiNmMwNWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b701adea506d65cdc9f622bc17337cbddfb6c05d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b701adea506d65cdc9f622bc17337cbddfb6c05d",
      "tree": {
        "sha": "e310f0c40911f76894cd7e753f87d0f39233b48f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e310f0c40911f76894cd7e753f87d0f39233b48f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e310f0c40911f76894cd7e753f87d0f39233b48f\nparent 5c65c2120e0ddc1145ae065b78ad4573a3a3b52e\nauthor DanGould <d@ngould.dev> 1721011793 -0400\ncommitter DanGould <d@ngould.dev> 1721077416 -0400\n\nRename \"Async Payjoin\"\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZpWOqQAKCRA4cTNWCSIP\nWZ0GAQDRcz7P+gzQC3NC8eyPi5+VqQTP2S2VTZyEBGka97NTdgD/UVwB7uUAQAlw\no5US506nClVCtv6hDsjYspbwGlfiGQE=\n=vPOx\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5c65c2120e0ddc1145ae065b78ad4573a3a3b52e",
          "sha": "5c65c2120e0ddc1145ae065b78ad4573a3a3b52e",
          "html_url": "https://github.com/bitcoin/bips/commit/5c65c2120e0ddc1145ae065b78ad4573a3a3b52e"
        }
      ],
      "message": "Rename \"Async Payjoin\"",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T21:03:36Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T02:49:53Z"
      },
      "sha": "b701adea506d65cdc9f622bc17337cbddfb6c05d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDkzYjFlNjBkOGEyYjZjODc5YTM3ZDYxMWE1OTFkNTk5NjEyYjFmZGU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/93b1e60d8a2b6c879a37d611a591d599612b1fde",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/93b1e60d8a2b6c879a37d611a591d599612b1fde",
      "tree": {
        "sha": "9e75bdaab9bfea6a9a51b57e9f8dc9d47bb7bf23",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9e75bdaab9bfea6a9a51b57e9f8dc9d47bb7bf23"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9e75bdaab9bfea6a9a51b57e9f8dc9d47bb7bf23\nparent b701adea506d65cdc9f622bc17337cbddfb6c05d\nauthor DanGould <d@ngould.dev> 1721057891 -0400\ncommitter DanGould <d@ngould.dev> 1721077419 -0400\n\nReplace BIP21 params with fragment params\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZpWOqwAKCRA4cTNWCSIP\nWYu1AP9OeWvlJSjCD0ZTvO4AzNIB1rkL2w2EEq0qoqbKqEQZggD/RIYuA/htu8YT\no3nS4HIusGGTA+3ql9BZ/1QDgcsnxAA=\n=CEEC\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b701adea506d65cdc9f622bc17337cbddfb6c05d",
          "sha": "b701adea506d65cdc9f622bc17337cbddfb6c05d",
          "html_url": "https://github.com/bitcoin/bips/commit/b701adea506d65cdc9f622bc17337cbddfb6c05d"
        }
      ],
      "message": "Replace BIP21 params with fragment params",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T21:03:39Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T15:38:11Z"
      },
      "sha": "93b1e60d8a2b6c879a37d611a591d599612b1fde"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDdlN2IzYjRiYWM5M2EzMDAwY2ZiZjU1MTU2MTIyNDgyMjgzY2M4NzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7e7b3b4bac93a3000cfbf55156122482283cc872",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7e7b3b4bac93a3000cfbf55156122482283cc872",
      "tree": {
        "sha": "0f57b3bef0f6ff5e5be005ea3bbecd1a59745bde",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0f57b3bef0f6ff5e5be005ea3bbecd1a59745bde"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0f57b3bef0f6ff5e5be005ea3bbecd1a59745bde\nparent 93b1e60d8a2b6c879a37d611a591d599612b1fde\nauthor DanGould <d@ngould.dev> 1721062719 -0400\ncommitter DanGould <d@ngould.dev> 1721077419 -0400\n\nRevise document to describe Payjoin Sessions\n\nEnrollment was a less clear than sessions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZpWOqwAKCRA4cTNWCSIP\nWTsKAQDu9Ub1LThW/0UeL9yIQ2jXnrY7XObE2EY3CCJdRJM5AQD/eQxE0aum3eZ6\nK+49Guh2Mg513d+EaPi3M0FrwQvxOwo=\n=n7LB\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/93b1e60d8a2b6c879a37d611a591d599612b1fde",
          "sha": "93b1e60d8a2b6c879a37d611a591d599612b1fde",
          "html_url": "https://github.com/bitcoin/bips/commit/93b1e60d8a2b6c879a37d611a591d599612b1fde"
        }
      ],
      "message": "Revise document to describe Payjoin Sessions\n\nEnrollment was a less clear than sessions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T21:03:39Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T16:58:39Z"
      },
      "sha": "7e7b3b4bac93a3000cfbf55156122482283cc872"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRmM2JkNTIzOWIyMGE5MTgzZDI0ZDI3YzBkMWQ0NmRhMzY3YTUyNjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/df3bd5239b20a9183d24d27c0d1d46da367a5262",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/df3bd5239b20a9183d24d27c0d1d46da367a5262",
      "tree": {
        "sha": "a6ddb8e2f241dc041707cdc78f7a998428c45261",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a6ddb8e2f241dc041707cdc78f7a998428c45261"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a6ddb8e2f241dc041707cdc78f7a998428c45261\nparent 7e7b3b4bac93a3000cfbf55156122482283cc872\nauthor DanGould <d@ngould.dev> 1721062810 -0400\ncommitter DanGould <d@ngould.dev> 1721077419 -0400\n\nRevise Sequence Diagram\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZpWOqwAKCRA4cTNWCSIP\nWRQQAP4xXgMZpV5yg2n6u9ppSXcFn/Hy9qVb8I2Q14dsWidihAEA3bXkC3NFZKWY\neIeIHMQUV9maLfHkdI9laTenwND9Gg4=\n=synM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7e7b3b4bac93a3000cfbf55156122482283cc872",
          "sha": "7e7b3b4bac93a3000cfbf55156122482283cc872",
          "html_url": "https://github.com/bitcoin/bips/commit/7e7b3b4bac93a3000cfbf55156122482283cc872"
        }
      ],
      "message": "Revise Sequence Diagram",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T21:03:39Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T17:00:10Z"
      },
      "sha": "df3bd5239b20a9183d24d27c0d1d46da367a5262"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13511076658,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAMlUqsy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13511076658",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-15T21:03:41Z"
    },
    {
      "event": "reviewed",
      "id": 2246701892,
      "node_id": "PRR_kwDOAN28mc6F6fNE",
      "url": null,
      "actor": null,
      "commit_id": "df3bd5239b20a9183d24d27c0d1d46da367a5262",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2246701892",
      "submitted_at": "2024-08-19T23:26:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2374455885,
      "node_id": "IC_kwDOAN28mc6Nh1JN",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2374455885",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-25T15:42:52Z",
      "updated_at": "2024-09-25T15:42:52Z",
      "author_association": "MEMBER",
      "body": "Hi @DanGould, want to update here?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2374455885",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 14401465003,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAANaZOqr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14401465003",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-25T15:42:55Z"
    },
    {
      "event": "subscribed",
      "id": 14401465017,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAANaZOq5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14401465017",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-25T15:42:55Z"
    },
    {
      "event": "commented",
      "id": 2377653576,
      "node_id": "IC_kwDOAN28mc6NuB1I",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2377653576",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T18:29:16Z",
      "updated_at": "2024-09-26T18:29:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Hi @DanGould, want to update here?\r\n\r\nSince the last review I have made breaking changes, which I'll apply with an update now. I think we're at the point where each design decision I'm aware of is deliberate. I'll take it out of draft once the new update is pushed.",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2377653576",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 14420949929,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAANbjjup",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14420949929",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T18:29:18Z"
    },
    {
      "event": "subscribed",
      "id": 14420949952,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAANbjjvA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14420949952",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T18:29:18Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRjNGE5NzU3MzQzYTg0NDllZTNjODIzOWRiNTNmYmRjMTgwYzgzNGI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dc4a9757343a8449ee3c8239db53fbdc180c834b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/dc4a9757343a8449ee3c8239db53fbdc180c834b",
      "tree": {
        "sha": "46485889d69c557c611fa3cad8e05e0d7c6de209",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/46485889d69c557c611fa3cad8e05e0d7c6de209"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 46485889d69c557c611fa3cad8e05e0d7c6de209\nparent df3bd5239b20a9183d24d27c0d1d46da367a5262\nauthor DanGould <d@ngould.dev> 1727375435 -0400\ncommitter DanGould <d@ngould.dev> 1727375435 -0400\n\nSpell initialize\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZvWoSwAKCRA4cTNWCSIP\nWSQzAQDlHUdk1Zzsn3NdFL5FfjE9+NVEdIoIWJkZddnvkSdS3gEAuO6Ys7fQshrM\nf3m388sr8W7r26K4PiAGMZk02Yz6PwY=\n=sQlL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/df3bd5239b20a9183d24d27c0d1d46da367a5262",
          "sha": "df3bd5239b20a9183d24d27c0d1d46da367a5262",
          "html_url": "https://github.com/bitcoin/bips/commit/df3bd5239b20a9183d24d27c0d1d46da367a5262"
        }
      ],
      "message": "Spell initialize",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T18:30:35Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T18:30:35Z"
      },
      "sha": "dc4a9757343a8449ee3c8239db53fbdc180c834b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg3Zjg5MmRjZTYxNDY2MDU4NDJkMjVkNGM5MWJjNjQxMmQyZjc4Y2Q",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/87f892dce6146605842d25d4c91bc6412d2f78cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/87f892dce6146605842d25d4c91bc6412d2f78cd",
      "tree": {
        "sha": "c2e5558fa01788565e7ffdfdbb6b91fadcb31b47",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c2e5558fa01788565e7ffdfdbb6b91fadcb31b47"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c2e5558fa01788565e7ffdfdbb6b91fadcb31b47\nparent dc4a9757343a8449ee3c8239db53fbdc180c834b\nauthor DanGould <d@ngould.dev> 1727378739 -0400\ncommitter DanGould <d@ngould.dev> 1727378807 -0400\n\nUpdate the bip to represent the stable protocol\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZvW1eAAKCRA4cTNWCSIP\nWYg2AQC+3hMSuOcWdL6X7vYSLY20icuZwbmugKR7sboVIsEqcQD/Xn2gALsslfRK\nlt63oNLHE5OQcZTzVtbtcYKeNUg1AQk=\n=GEdY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dc4a9757343a8449ee3c8239db53fbdc180c834b",
          "sha": "dc4a9757343a8449ee3c8239db53fbdc180c834b",
          "html_url": "https://github.com/bitcoin/bips/commit/dc4a9757343a8449ee3c8239db53fbdc180c834b"
        }
      ],
      "message": "Update the bip to represent the stable protocol",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T19:26:47Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T19:25:39Z"
      },
      "sha": "87f892dce6146605842d25d4c91bc6412d2f78cd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDExYjFiODNkYjY5OWU4ZjZmNjhlNzA4YjZlM2IxZmEyNThiMDNlN2Q",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/11b1b83db699e8f6f68e708b6e3b1fa258b03e7d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/11b1b83db699e8f6f68e708b6e3b1fa258b03e7d",
      "tree": {
        "sha": "13ed16f230be7f4532cf32ec8dbfbb9a79dc5eea",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/13ed16f230be7f4532cf32ec8dbfbb9a79dc5eea"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 13ed16f230be7f4532cf32ec8dbfbb9a79dc5eea\nparent 87f892dce6146605842d25d4c91bc6412d2f78cd\nauthor DanGould <d@ngould.dev> 1727383769 -0400\ncommitter DanGould <d@ngould.dev> 1727383769 -0400\n\nSpell according to Type Checks's job\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZvXI2QAKCRA4cTNWCSIP\nWawMAQCyoO/N5+NofvhSVgiNuneeKE7ALi9O7bu+g2kdzR2ATgD/bAwuOuqnvzou\n3VuwhDcr7+DyB5ftM0ycAKP6xQWVmwM=\n=zXJS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/87f892dce6146605842d25d4c91bc6412d2f78cd",
          "sha": "87f892dce6146605842d25d4c91bc6412d2f78cd",
          "html_url": "https://github.com/bitcoin/bips/commit/87f892dce6146605842d25d4c91bc6412d2f78cd"
        }
      ],
      "message": "Spell according to Type Checks's job",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T20:49:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T20:49:29Z"
      },
      "sha": "11b1b83db699e8f6f68e708b6e3b1fa258b03e7d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGU0NGY3NDhmNmEyNzMyMTk0NjJhOTcwNThhMDY0ZGIwYjcwZDJkYWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e44f748f6a273219462a97058a064db0b70d2dab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e44f748f6a273219462a97058a064db0b70d2dab",
      "tree": {
        "sha": "4ddcf17430b147acae7399463cab84e0b3db8dae",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4ddcf17430b147acae7399463cab84e0b3db8dae"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4ddcf17430b147acae7399463cab84e0b3db8dae\nparent 11b1b83db699e8f6f68e708b6e3b1fa258b03e7d\nauthor DanGould <d@ngould.dev> 1727384686 -0400\ncommitter DanGould <d@ngould.dev> 1727384686 -0400\n\nMention the format of the ohttp fragment\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZvXMbgAKCRA4cTNWCSIP\nWY6QAQD0XYbzyIypab+Gq5S8LE92xyGluEch+MF+0xNGjOAqewD9EgsDTI3P15hK\nGvfCnD/zmohU3yk2+icT9hAqcpHPXww=\n=+9zh\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/11b1b83db699e8f6f68e708b6e3b1fa258b03e7d",
          "sha": "11b1b83db699e8f6f68e708b6e3b1fa258b03e7d",
          "html_url": "https://github.com/bitcoin/bips/commit/11b1b83db699e8f6f68e708b6e3b1fa258b03e7d"
        }
      ],
      "message": "Mention the format of the ohttp fragment",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T21:04:46Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T21:04:46Z"
      },
      "sha": "e44f748f6a273219462a97058a064db0b70d2dab"
    },
    {
      "event": "commented",
      "id": 2377935683,
      "node_id": "IC_kwDOAN28mc6NvGtD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2377935683",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T21:05:00Z",
      "updated_at": "2024-09-26T21:05:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "The main changes from the last review are that\r\n\r\n- HTTP request methods (POST, GET, PUT) control the flow of the protocol rather than further path subdiretories\r\n- bip21 parameters (pj subdirectory and ohttp key config) serialize as compressed public keys to shorten the URI\r\n- Use PSBTv0 since PSBTv2 support is still very limited\r\n- explicitly mention the format of the `ohttp` KeyConfiguration URL fragment",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2377935683",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "ready_for_review",
      "id": 14422580022,
      "node_id": "RFRE_lADOAN28mc5uKfAvzwAAAANbpxs2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14422580022",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T21:05:20Z"
    },
    {
      "event": "reviewed",
      "id": 2353089756,
      "node_id": "PRR_kwDOAN28mc6MQUzc",
      "url": null,
      "actor": null,
      "commit_id": "e44f748f6a273219462a97058a064db0b70d2dab",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2353089756",
      "submitted_at": "2024-10-07T23:09:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGY3YTVkMjViNTIyZGNiMDMwNGUwZjQ0NDQyNjQwM2YzZGQ5MzA0NjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f7a5d25b522dcb0304e0f444426403f3dd930462",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f7a5d25b522dcb0304e0f444426403f3dd930462",
      "tree": {
        "sha": "fbe28e25f1114c9ca546420d5ade9d18369389c2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fbe28e25f1114c9ca546420d5ade9d18369389c2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fbe28e25f1114c9ca546420d5ade9d18369389c2\nparent e44f748f6a273219462a97058a064db0b70d2dab\nauthor DanGould <d@ngould.dev> 1728361078 -0400\ncommitter DanGould <d@ngould.dev> 1728361078 -0400\n\nReference BIP 78 attack vectors\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZwSydgAKCRA4cTNWCSIP\nWcbTAP922v0iyKBtVM5fLmoAVOT9ODHUTA8omuf8BZgweprbXgEA2MtZK0hipbbk\nt6uAka+PjTEOrku1garaio9gaHIdlQk=\n=NXJE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e44f748f6a273219462a97058a064db0b70d2dab",
          "sha": "e44f748f6a273219462a97058a064db0b70d2dab",
          "html_url": "https://github.com/bitcoin/bips/commit/e44f748f6a273219462a97058a064db0b70d2dab"
        }
      ],
      "message": "Reference BIP 78 attack vectors",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-08T04:17:58Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-08T04:17:58Z"
      },
      "sha": "f7a5d25b522dcb0304e0f444426403f3dd930462"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNiN2JlOGNmMThlNjBjY2Y0ZjUxNmNhMDJkYjUwYzhiYTJkMWNkMjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
      "tree": {
        "sha": "7158ad42fce9b9a679a4eebd7089abf8d0a84bca",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7158ad42fce9b9a679a4eebd7089abf8d0a84bca"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7158ad42fce9b9a679a4eebd7089abf8d0a84bca\nparent f7a5d25b522dcb0304e0f444426403f3dd930462\nauthor DanGould <d@ngould.dev> 1728411467 -0400\ncommitter DanGould <d@ngould.dev> 1728411467 -0400\n\nRemove straggling text\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZwV3SwAKCRA4cTNWCSIP\nWWneAQCAgXsSxEia4zWdHldfZMdZH96/AkVMGeSeH37r218ljQD/UFgPaH1b8yls\nMC2E1lCwwoyQP9zfXIEjMWp5cnHpuAI=\n=FEiB\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f7a5d25b522dcb0304e0f444426403f3dd930462",
          "sha": "f7a5d25b522dcb0304e0f444426403f3dd930462",
          "html_url": "https://github.com/bitcoin/bips/commit/f7a5d25b522dcb0304e0f444426403f3dd930462"
        }
      ],
      "message": "Remove straggling text",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-08T18:17:47Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-08T18:17:47Z"
      },
      "sha": "3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22"
    },
    {
      "event": "reviewed",
      "id": 2355215628,
      "node_id": "PRR_kwDOAN28mc6MYb0M",
      "url": null,
      "actor": null,
      "commit_id": "f7a5d25b522dcb0304e0f444426403f3dd930462",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "NACK\r\n\r\nThis BIP is bad for privacy and lacks details in \"attack vectors\" section. Please be careful while implementing.\r\n\r\n",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2355215628",
      "submitted_at": "2024-10-08T18:19:04Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2400541911,
      "node_id": "IC_kwDOAN28mc6PFVzX",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2400541911",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T18:26:25Z",
      "updated_at": "2024-10-08T18:26:25Z",
      "author_association": "MEMBER",
      "body": "> NACK\r\n\r\n> This BIP is bad for privacy\r\n\r\nCan you provide the reasoning, please?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2400541911",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "commented",
      "id": 2400557444,
      "node_id": "IC_kwDOAN28mc6PFZmE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2400557444",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T18:35:12Z",
      "updated_at": "2024-10-11T12:56:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "> > NACK\r\n> \r\n> > This BIP is bad for privacy\r\n> \r\n> Can you provide the reasoning, please?\r\n\r\nRisks with accepting donations using payjoin:\r\n\r\n- Probing: Already mentioned in BIP 78 but BIP 77 \r\n- Small donations: Best form of attack in which FBI donates some sats to support their work and know all the UTXOs in the wallet",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2400557444",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "commented",
      "id": 2400561766,
      "node_id": "IC_kwDOAN28mc6PFapm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2400561766",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T18:37:22Z",
      "updated_at": "2024-10-08T18:37:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Example: https://hrf.org/payjoin ",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2400561766",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "commented",
      "id": 2400610172,
      "node_id": "IC_kwDOAN28mc6PFmd8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2400610172",
      "actor": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T19:04:22Z",
      "updated_at": "2024-10-08T19:04:22Z",
      "author_association": "NONE",
      "body": "> Risks with accepting donations using payjoin:\r\n> \r\n> * Probing: Already mentioned in BIP 78 but BIP 77 author too emotional to accept it\r\n> * Small donations: Best form of attack in which FBI donates some sats to support their work and know all the UTXOs in the wallet\r\n\r\n@1440000bytes Your first point has already been addressed and he has added a link to the attack vectors section on BIP-78. No one is \"not accepting\" anything. Are you asking that the full explanation given on probing attacks in BIP-78 be redundantly added here? What exactly is your criticism?\r\n\r\nYour second point has already been addressed in BIP-78, here is what the link that you suggested be added says:\r\n```\r\nWhile we cannot prevent this type of attack entirely, we implemented the following mitigations:\r\n\r\n- When the receiver detects an original transaction being broadcast, or if the receiver detects that the original transaction has been double spent, then they will reuse the UTXO that was exposed for the next payjoin.\r\n- While the exposed UTXO will be reused in priority to not leak other UTXOs, there is no strong guarantee about it. This prevents the attacker from detecting with certainty the next payjoin of the merchant to another peer.\r\n```\r\n\r\nBIP-78 already explains what can be done to mitigate this, and fully acknowledges this tradeoff.\r\nCan you explain, in terms of probing attacks, how BIP-77 would be _worse_ for privacy than the already accepted BIP-78?",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2400610172",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 14561624858,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAANj8MMa",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14561624858",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T19:04:25Z"
    },
    {
      "event": "subscribed",
      "id": 14561624879,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAANj8MMv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14561624879",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T19:04:25Z"
    },
    {
      "event": "reviewed",
      "id": 2355668363,
      "node_id": "PRR_kwDOAN28mc6MaKWL",
      "url": null,
      "actor": null,
      "commit_id": "3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2355668363",
      "submitted_at": "2024-10-08T22:48:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2401109899,
      "node_id": "IC_kwDOAN28mc6PHgeL",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2401109899",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T01:47:00Z",
      "updated_at": "2024-10-09T01:47:00Z",
      "author_association": "NONE",
      "body": "The sender could first register an additional session subdirectory for the response, and include the associated public key along with the original PSBT when posting to the receiver's subdirectory. The sender would then respond in the sender's subdirectory.\r\n\r\nEliminating the request/response distinction would avoid a metadata leak, namely whether or not the payjoin flow was completed, since requests and responses would be indistinguishable.\r\n\r\nA followup suggestion would be removing explicit session initialization. Incidentally in the reference directory it appears that since `post_session` is stateless, calling it before other operations is indeed not enforced. GET & POST handlers do appear to validate the `id` path component, but if they did then the first successful request would indicate to either party that the subdirectory ID is valid (or perhaps arbitrary IDs were allowed by design?)\r\n\r\nTiming analysis of subdirectory polling could still leak information about which payjoin requests were responded to, but aggressive clients could mitigate this by maintaining a pool of pre-allocated and randomly polled subdirectories ahead of time, and by responding to themselves in some of them with dummy payloads to generate random cover traffic.",
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2401109899",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "commented",
      "id": 2401274780,
      "node_id": "IC_kwDOAN28mc6PIIuc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2401274780",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T04:14:47Z",
      "updated_at": "2024-10-09T05:00:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "@nothingmuch I'll write up your suggestions to simplify the protocol. It makes the directory implementation simpler, requires fewer protocol message types, and even reduces bandwidth. wowza\r\n\r\n> The sender could first register an additional session subdirectory ... and include the associated public key along with the original PSBT\r\n\r\nHPKE E2EE deployed in this application in Authenticated mode (akin to Noise Framework's IK model) already requires the sender to include their session public key as associated data, so this is an pretty darn easy change to make. The change not only simplifies the protocol messaging, but as you say eliminates a metadata leak. I'm a big fan.\r\n\r\n> A followup suggestion would be removing explicit session initialization\r\n\r\nThis makes sense too. Creating separate subdirectory resources for either sender or receiver on POST then GETting updates to replace the repeated sender POST polling reduces bandwidth too, since the GET request doesn't contain that repeat POST body.\r\n\r\nEven without aggressive client mitigation of the remaining client leaks subject to timing analysis assuming this suggestion is put in place, your new design deletes complexity and improves efficiency.\r\n\r\nI'll update the BIP to the best of my understanding based on your comment and link it to a `rust-payjoin` issue to implement. This spec has already made some breaking changes since the last directory release, so it's a good time for another one since we won't break production implementations other than our own.\r\n\r\nEdit: Is there a potential authorization issue now that the sender POSTs first? In the current design of the protocol, only the receiver might need authorization from the directory in order to initialize a session subdirectory, and having knowledge of a session public key was sufficient for the sender to use an initialized subdirectory. Now, the sender would also need to obtain authorization somehow, since the directory doesn't yet know about the session the receiver has implicitly initiated by communicating directly with the sender, out of band from the directory. We'll have to work out how this might affect the expiration mechanic as well.",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2401274780",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 14565608275,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAANkLYtT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14565608275",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T04:14:48Z"
    },
    {
      "event": "subscribed",
      "id": 14565608281,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAANkLYtZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14565608281",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T04:14:48Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDY2NDU3YTAxMTE4NmIwMTc1ZjdmMDI3ZDhjMjI2ZTA3ZTdmZDhhYTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/66457a011186b0175f7f027d8c226e07e7fd8aa9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/66457a011186b0175f7f027d8c226e07e7fd8aa9",
      "tree": {
        "sha": "69cadf5581837920eaa5582e0a916f26b09dbc66",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/69cadf5581837920eaa5582e0a916f26b09dbc66"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 69cadf5581837920eaa5582e0a916f26b09dbc66\nparent 3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22\nauthor DanGould <d@ngould.dev> 1728450729 -0400\ncommitter DanGould <d@ngould.dev> 1728492720 -0400\n\nSpecify authorization mechanism\n\nThe specifics of a credential issuance are left out, however\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZwa0sAAKCRA4cTNWCSIP\nWdfPAQD5vR/srKnNLIUBFI7w1uKfvE8I07Zzr6GLcHekOOKeyQEAtssgwFNpT0Ev\nE7jEQnTtqLPdnLWRulP/E0CPeKhZ3A0=\n=TBaS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
          "sha": "3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
          "html_url": "https://github.com/bitcoin/bips/commit/3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22"
        }
      ],
      "message": "Specify authorization mechanism\n\nThe specifics of a credential issuance are left out, however",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-09T16:52:00Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-09T05:12:09Z"
      },
      "sha": "66457a011186b0175f7f027d8c226e07e7fd8aa9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM5MTdlYWI3ZThkMmM0Y2Q3MmI1MGJiNmRiODc3YTE3MWZmY2QwMzc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c917eab7e8d2c4cd72b50bb6db877a171ffcd037",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c917eab7e8d2c4cd72b50bb6db877a171ffcd037",
      "tree": {
        "sha": "7960907c7b14d71e547bda8856372c3f7669421b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7960907c7b14d71e547bda8856372c3f7669421b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7960907c7b14d71e547bda8856372c3f7669421b\nparent 66457a011186b0175f7f027d8c226e07e7fd8aa9\nauthor DanGould <d@ngould.dev> 1728450087 -0400\ncommitter DanGould <d@ngould.dev> 1728492854 -0400\n\nUse implicit session initialization\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCZwa1NwAKCRA4cTNWCSIP\nWWVHAQCwdkefzErUbutF2/WlpjE792Nhc71xEwK7GyprXNWWuQD/Rf5SUE6vkVjs\nc/2Pql7kWkAUAvyI7J+HbWVvUacWcgc=\n=UQaH\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/66457a011186b0175f7f027d8c226e07e7fd8aa9",
          "sha": "66457a011186b0175f7f027d8c226e07e7fd8aa9",
          "html_url": "https://github.com/bitcoin/bips/commit/66457a011186b0175f7f027d8c226e07e7fd8aa9"
        }
      ],
      "message": "Use implicit session initialization",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-09T16:54:14Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-09T05:01:27Z"
      },
      "sha": "c917eab7e8d2c4cd72b50bb6db877a171ffcd037"
    },
    {
      "event": "unlabeled",
      "id": 14612261385,
      "node_id": "UNLE_lADOAN28mc5uKfAvzwAAAANm9WoJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14612261385",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-11T17:24:33Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "reviewed",
      "id": 2373349802,
      "node_id": "PRR_kwDOAN28mc6NdnGq",
      "url": null,
      "actor": null,
      "commit_id": "c917eab7e8d2c4cd72b50bb6db877a171ffcd037",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2373349802",
      "submitted_at": "2024-10-16T18:35:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDMwNDY1MjBlYmFmNDgxZmE3N2UwZTg4N2JiYjJiZTI5ZjE5NjE4MzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3046520ebaf481fa77e0e887bbb2be29f1961832",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3046520ebaf481fa77e0e887bbb2be29f1961832",
      "tree": {
        "sha": "92936c41e19ea8e7b08ec4d9ef0e7e81362d8f87",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/92936c41e19ea8e7b08ec4d9ef0e7e81362d8f87"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 92936c41e19ea8e7b08ec4d9ef0e7e81362d8f87\nparent c917eab7e8d2c4cd72b50bb6db877a171ffcd037\nauthor Dan Gould <d@ngould.dev> 1729106842 -0400\ncommitter GitHub <noreply@github.com> 1729106842 -0400\n\nSpecify cryptographic handshake based on Noise IK\n\nCo-authored-by: Yuval Kogman <nothingmuch@woobling.org>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJnEBOaCRC1aQ7uu5UhlAAAia0QAFl5A+gId9TP5+p7gfaHV/Dc\nQ91dz3bsHCg6z4daxrmuByRAvSjMnMuzCVPPoR+N8H527Ar5zMZiW33ctpABAANG\nSVzWCSjlch2aWDmDm9Q85DQbacV6TjTbYY0slo8LDE10CqLrJMy+IOoqIYiqZGMI\nBRA2joBcq8+soAALTjK4HaJfRJpcnFY4c7PYbHE0IbnAZs+kr427U/5xnXXoEkr5\nvs/pgesUSQbPy8kXIoJR5q/asttexByAuDzGa2dSG4+BZJZvh09l3pkGOyI8yeRu\nO9EflwVIzDyf6ffKoBTLumuIvQD5FCZRwfyRsFGuwxHtxNg3kdiz+CLlaqfoW8fI\noExniN75i3GBWzpM5esQzaINLXpGjBgFa9XbKYmSlxr3Rmp4TMhXwoelvINIvSIe\nkDlNlaO73vCfWohE09aZ5pz0XR5kKw66CaoFh28eOaxBnR8kUVJd6ruxbVQygiep\nPkJSUv7OWexYJjGrGfOsJBv6iYHukqmsgMaDV2t7ab8lDnrMmxQ28LG5UwlNg2xh\n/zRuMJp3K/sOhlGh57imdQ7X9/3L7DV8/NmcmgZY+uNgO1J+iDAPlPLLPaGc31gW\nipwOTKXp/IJXOOcTEa2rx8X+NcW0CQI04rlvFNDYBWB9KiWHOz3A9YmTOinSBDMW\njRyAtL+VXIMI5KHqlNKd\n=8jfC\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c917eab7e8d2c4cd72b50bb6db877a171ffcd037",
          "sha": "c917eab7e8d2c4cd72b50bb6db877a171ffcd037",
          "html_url": "https://github.com/bitcoin/bips/commit/c917eab7e8d2c4cd72b50bb6db877a171ffcd037"
        }
      ],
      "message": "Specify cryptographic handshake based on Noise IK\n\nCo-authored-by: Yuval Kogman <nothingmuch@woobling.org>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2024-10-16T19:27:22Z"
      },
      "author": {
        "name": "Dan Gould",
        "email": "d@ngould.dev",
        "date": "2024-10-16T19:27:22Z"
      },
      "sha": "3046520ebaf481fa77e0e887bbb2be29f1961832"
    },
    {
      "event": "reviewed",
      "id": 2373985813,
      "node_id": "PRR_kwDOAN28mc6NgCYV",
      "url": null,
      "actor": null,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Some minor clarifications following the \"original\"/\"proposal\" payjoin PSBT terminology established in BIP78. ",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2373985813",
      "submitted_at": "2024-10-17T02:02:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588415643",
      "pull_request_review_id": 2036951404,
      "id": 1588415643,
      "node_id": "PRRC_kwDOAN28mc5erUyb",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 26,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nVersion 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\r\n```",
      "created_at": "2024-05-02T21:21:55Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588415643",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588415643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588418927",
      "pull_request_review_id": 2036951404,
      "id": 1588418927,
      "node_id": "PRRC_kwDOAN28mc5erVlv",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\r\n```",
      "created_at": "2024-05-02T21:23:42Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588418927",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588418927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588420870",
      "pull_request_review_id": 2036951404,
      "id": 1588420870,
      "node_id": "PRRC_kwDOAN28mc5erWEG",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 42,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\r\n```",
      "created_at": "2024-05-02T21:24:57Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588420870",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588420870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588421358",
      "pull_request_review_id": 2036951404,
      "id": 1588421358,
      "node_id": "PRRC_kwDOAN28mc5erWLu",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 48,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nPayjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\r\n```",
      "created_at": "2024-05-02T21:25:16Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588421358",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588421358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588448910",
      "pull_request_review_id": 2036951404,
      "id": 1588448910,
      "node_id": "PRRC_kwDOAN28mc5erc6O",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 74,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For some reason these Markdown lists aren't rendering properly on the GitHub file view.\r\n\r\n<img width=\"1010\" alt=\"Screenshot 2024-05-02 at 17 40 26\" src=\"https://github.com/bitcoin/bips/assets/144076611/3acaf8f2-e1a5-4d8e-a925-9d2d0c07a5a9\">\r\n\r\n```suggestion\r\n* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\r\n* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\r\n* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\r\n* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\r\n* The request is stored in the subdirectory.\r\n* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\r\n* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\r\n* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\r\n* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\r\n```",
      "created_at": "2024-05-02T21:41:19Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588448910",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588448910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588449650",
      "pull_request_review_id": 2036951404,
      "id": 1588449650,
      "node_id": "PRRC_kwDOAN28mc5erdFy",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 82,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Include complete UTXO data.\r\n* Be signed.\r\n* Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\r\n* Set input and output Transaction Modifiable Flags to 1\r\n* Be broadcastable.\r\n```",
      "created_at": "2024-05-02T21:41:47Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588449650",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588449650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 78,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588450458",
      "pull_request_review_id": 2036951404,
      "id": 1588450458,
      "node_id": "PRRC_kwDOAN28mc5erdSa",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Include outputs unrelated to the sender-receiver transfer for batching purposes.\r\n* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\r\n```",
      "created_at": "2024-05-02T21:42:23Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588450458",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588450458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451222",
      "pull_request_review_id": 2036951404,
      "id": 1588451222,
      "node_id": "PRRC_kwDOAN28mc5erdeW",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 93,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Include all inputs from the Original PSBT.\r\n* Include all outputs which do not belong to the receiver from the Original PSBT.\r\n* Include complete UTXO data.\r\n```",
      "created_at": "2024-05-02T21:43:01Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451222",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451382",
      "pull_request_review_id": 2036951404,
      "id": 1588451382,
      "node_id": "PRRC_kwDOAN28mc5erdg2",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 97,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\r\n```",
      "created_at": "2024-05-02T21:43:08Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451382",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451790",
      "pull_request_review_id": 2036951404,
      "id": 1588451790,
      "node_id": "PRRC_kwDOAN28mc5erdnO",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 102,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\r\n* Decrease the absolute fee of the original transaction.\r\n```",
      "created_at": "2024-05-02T21:43:29Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451790",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588458495",
      "pull_request_review_id": 2036951404,
      "id": 1588458495,
      "node_id": "PRRC_kwDOAN28mc5erfP_",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. ",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 106,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This sentence seems malformed. Did you mean \"to *get* a subdirectory allocated\"?",
      "created_at": "2024-05-02T21:49:22Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588458495",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588458495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468349",
      "pull_request_review_id": 2036951404,
      "id": 1588468349,
      "node_id": "PRRC_kwDOAN28mc5erhp9",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\r\n* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchronous execution of the protocol, like automated payment processors.\r\n```",
      "created_at": "2024-05-02T22:02:10Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588468349",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 150,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468857",
      "pull_request_review_id": 2036951404,
      "id": 1588468857,
      "node_id": "PRRC_kwDOAN28mc5erhx5",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\r\n```",
      "created_at": "2024-05-02T22:02:49Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588468857",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588472886",
      "pull_request_review_id": 2036951404,
      "id": 1588472886,
      "node_id": "PRRC_kwDOAN28mc5eriw2",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 appication specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 185,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nHybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\r\n```",
      "created_at": "2024-05-02T22:08:44Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588472886",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588472886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588476142",
      "pull_request_review_id": 2036951404,
      "id": 1588476142,
      "node_id": "PRRC_kwDOAN28mc5erjju",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 appication specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols|zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html|Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/|IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5|base64URL]] encoding as a subdirectory of the directory server in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html|Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305|algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439|RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki|BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy=== \n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may aditionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory with without OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 217,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nUnlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory with without OHTTP.\r\n```",
      "created_at": "2024-05-02T22:13:33Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588476142",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588476142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588495570",
      "pull_request_review_id": 2037072195,
      "id": 1588495570,
      "node_id": "PRRC_kwDOAN28mc5eroTS",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 8,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't think this really replaces BIP78 since it's intended to be backwards-compatible?",
      "created_at": "2024-05-02T22:30:15Z",
      "updated_at": "2024-05-02T22:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588495570",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588495570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588624994",
      "pull_request_review_id": 2037262652,
      "id": 1588624994,
      "node_id": "PRRC_kwDOAN28mc5esH5i",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. ",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 106,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": 1588458495,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes.",
      "created_at": "2024-05-03T03:09:43Z",
      "updated_at": "2024-05-03T03:09:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588624994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588624994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590473525",
      "pull_request_review_id": 2039869772,
      "id": 1590473525,
      "node_id": "PRRC_kwDOAN28mc5ezLM1",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 47,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Grammar error?\r\n\r\n```suggestion\r\nPayjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\r\n```",
      "created_at": "2024-05-06T01:41:39Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590473525",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590473525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590475825",
      "pull_request_review_id": 2039869772,
      "id": 1590475825,
      "node_id": "PRRC_kwDOAN28mc5ezLwx",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 179,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "At different times, \"directory\", \"directory server\", and \"payjoin directory\" (sometimes capitalized) are used to refer to the same thing. It may be useful to standardize the usage of this terminology throughout for clarity, or use an acronym where the term is defined.",
      "created_at": "2024-05-06T01:51:41Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590475825",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590475825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590479014",
      "pull_request_review_id": 2039869772,
      "id": 1590479014,
      "node_id": "PRRC_kwDOAN28mc5ezMim",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 175,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Link leads to 404. I think this was meant to lead [here?](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist)\r\n```suggestion\r\nThe version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist|the BIP 78 sender checklist]] with the exception that it expects ALL UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\r\n```",
      "created_at": "2024-05-06T02:05:50Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590479014",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590479014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590480647",
      "pull_request_review_id": 2039869772,
      "id": 1590480647,
      "node_id": "PRRC_kwDOAN28mc5ezM8H",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 107,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Where is \"receiver directory enrollment\" supposed to link to? [here?](https://github.com/bitcoin/bips/blob/7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0/bip-0077.mediawiki#enroll-messaging)",
      "created_at": "2024-05-06T02:12:37Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590480647",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590480647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482357",
      "pull_request_review_id": 2039869772,
      "id": 1590482357,
      "node_id": "PRRC_kwDOAN28mc5ezNW1",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Where is \"Original PSBT Request\" supposed to link to?",
      "created_at": "2024-05-06T02:19:28Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590482357",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482520",
      "pull_request_review_id": 2039869772,
      "id": 1590482520,
      "node_id": "PRRC_kwDOAN28mc5ezNZY",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nPayjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to facilitate PSBT mutation.\r\n```",
      "created_at": "2024-05-06T02:20:02Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590482520",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482781",
      "pull_request_review_id": 2039869772,
      "id": 1590482781,
      "node_id": "PRRC_kwDOAN28mc5ezNdd",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 143,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "We're referring to the `Original PSBT` here, yes?\r\n\r\n```suggestion\r\n* Decrease the absolute fee of the Original PSBT.\r\n```",
      "created_at": "2024-05-06T02:21:08Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590482781",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482843",
      "pull_request_review_id": 2039869772,
      "id": 1590482843,
      "node_id": "PRRC_kwDOAN28mc5ezNeb",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols|zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html|Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/|IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5|base64URL]] encoding as a subdirectory of the directory server in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html|Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305|algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439|RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki|BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory with without OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 263,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nUnlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\r\n```",
      "created_at": "2024-05-06T02:21:28Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590482843",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591601267",
      "pull_request_review_id": 2041750450,
      "id": 1591601267,
      "node_id": "PRRC_kwDOAN28mc5e3ehz",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 175,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": 1590479014,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It turned out bar is used for links inside the repo and spaces should be used for external links. So I've adjusted them all accordingly. Nice catches.",
      "created_at": "2024-05-06T22:02:14Z",
      "updated_at": "2024-05-06T22:02:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591601267",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591601267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591602470",
      "pull_request_review_id": 2041752231,
      "id": 1591602470,
      "node_id": "PRRC_kwDOAN28mc5e3e0m",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 179,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": 1590475825,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've changed this to use either \"directory\" as shorthand or \" and only once \"payjoin directory server\" to introduce the fact that it is in fact a server. Un-capitalized to be consistent.\r\n\r\nIf you think this is still too varied, please let me know.",
      "created_at": "2024-05-06T22:04:03Z",
      "updated_at": "2024-05-06T22:04:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591602470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591602470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715112",
      "pull_request_review_id": 2041919837,
      "id": 1591715112,
      "node_id": "PRRC_kwDOAN28mc5e36Uo",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 112,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\r\n```",
      "created_at": "2024-05-07T01:42:32Z",
      "updated_at": "2024-05-07T01:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591715112",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715266",
      "pull_request_review_id": 2041919837,
      "id": 1591715266,
      "node_id": "PRRC_kwDOAN28mc5e36XC",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01 OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 165,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\r\n```",
      "created_at": "2024-05-07T01:42:54Z",
      "updated_at": "2024-05-07T01:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591715266",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715384",
      "pull_request_review_id": 2041919837,
      "id": 1591715384,
      "node_id": "PRRC_kwDOAN28mc5e36Y4",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01 OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 167,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nOnce an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\r\n```",
      "created_at": "2024-05-07T01:43:09Z",
      "updated_at": "2024-05-07T01:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591715384",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591717712",
      "pull_request_review_id": 2041919837,
      "id": 1591717712,
      "node_id": "PRRC_kwDOAN28mc5e369Q",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 53,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint\r\n\r\nShould this say \"from the directory to receiver\"? IIUC the sender is not involved yet at this stage",
      "created_at": "2024-05-07T01:47:58Z",
      "updated_at": "2024-05-07T01:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591717712",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591717712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591720176",
      "pull_request_review_id": 2041927205,
      "id": 1591720176,
      "node_id": "PRRC_kwDOAN28mc5e37jw",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 41,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The samourai links are dead :/",
      "created_at": "2024-05-07T01:53:11Z",
      "updated_at": "2024-05-07T01:54:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591720176",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591720176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1593046275",
      "pull_request_review_id": 2044134742,
      "id": 1593046275,
      "node_id": "PRRC_kwDOAN28mc5e8_UD",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 53,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": 1591717712,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes",
      "created_at": "2024-05-07T20:28:24Z",
      "updated_at": "2024-05-07T20:28:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1593046275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1593046275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597767546",
      "pull_request_review_id": 2051527351,
      "id": 1597767546,
      "node_id": "PRRC_kwDOAN28mc5fO_96",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased the opportunity to batch payments and and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfuihjknhoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 27,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nVersion 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\r\n```",
      "created_at": "2024-05-13T00:55:15Z",
      "updated_at": "2024-05-13T00:56:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1597767546",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597767546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597767650",
      "pull_request_review_id": 2051527351,
      "id": 1597767650,
      "node_id": "PRRC_kwDOAN28mc5fO__i",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased the opportunity to batch payments and and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 25,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\r\n```",
      "created_at": "2024-05-13T00:55:35Z",
      "updated_at": "2024-05-13T00:56:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1597767650",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597767650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597768122",
      "pull_request_review_id": 2051527351,
      "id": 1597768122,
      "node_id": "PRRC_kwDOAN28mc5fPAG6",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased the opportunity to batch payments and and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfuihjknhoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* Out of band, the receiver of the payment shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter with the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\r\n```",
      "created_at": "2024-05-13T00:56:44Z",
      "updated_at": "2024-05-13T00:56:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1597768122",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597768122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608525206",
      "pull_request_review_id": 2068950086,
      "id": 1608525206,
      "node_id": "PRRC_kwDOAN28mc5f4CWW",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased the opportunity to batch payments and and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfuihjknhoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "in_reply_to_id": 1597768122,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I rewrote the sentence and believe I fixed the core issue",
      "created_at": "2024-05-21T15:24:14Z",
      "updated_at": "2024-05-21T15:24:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1608525206",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608525206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610673352",
      "pull_request_review_id": 2072406420,
      "id": 1610673352,
      "node_id": "PRRC_kwDOAN28mc5gAOzI",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 15,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(\"which\" is followed by a comma; \"that\" is not)\r\n\r\n```suggestion\r\nThis document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\r\n```",
      "created_at": "2024-05-22T21:27:47Z",
      "updated_at": "2024-05-23T00:23:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610673352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610673352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610677653",
      "pull_request_review_id": 2072406420,
      "id": 1610677653,
      "node_id": "PRRC_kwDOAN28mc5gAP2V",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 27,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nPayjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or a Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\r\n```",
      "created_at": "2024-05-22T21:33:13Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610677653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610677653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610707499",
      "pull_request_review_id": 2072406420,
      "id": 1610707499,
      "node_id": "PRRC_kwDOAN28mc5gAXIr",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\r\n```",
      "created_at": "2024-05-22T21:49:39Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610707499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610707499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610750410",
      "pull_request_review_id": 2072406420,
      "id": 1610750410,
      "node_id": "PRRC_kwDOAN28mc5gAhnK",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\r\n```\r\n\r\nAlso, perhaps mention/link to BIP 370 here when mentioning PSBT v2 for the first time in the document.",
      "created_at": "2024-05-22T22:41:27Z",
      "updated_at": "2024-05-23T00:24:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610750410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610750410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610760238",
      "pull_request_review_id": 2072406420,
      "id": 1610760238,
      "node_id": "PRRC_kwDOAN28mc5gAkAu",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 39,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\r\n```",
      "created_at": "2024-05-22T22:47:09Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610760238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610760238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610772621",
      "pull_request_review_id": 2072406420,
      "id": 1610772621,
      "node_id": "PRRC_kwDOAN28mc5gAnCN",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 43,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78 and this work may produce batched transactions with many outputs.\r\n```",
      "created_at": "2024-05-22T23:08:09Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610772621",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610772621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610778275",
      "pull_request_review_id": 2072406420,
      "id": 1610778275,
      "node_id": "PRRC_kwDOAN28mc5gAoaj",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggest prefixing the first mention of `ohttp` in this document with Oblivious HTTP. Some other suggestions:\r\n\r\n```suggestion\r\nRather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```",
      "created_at": "2024-05-22T23:17:27Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610778275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610778275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610778808",
      "pull_request_review_id": 2072406420,
      "id": 1610778808,
      "node_id": "PRRC_kwDOAN28mc5gAoi4",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 57,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Consistent naming\r\n\r\n```suggestion\r\nThe sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\r\n```",
      "created_at": "2024-05-22T23:18:25Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610778808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610778808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610780974",
      "pull_request_review_id": 2072406420,
      "id": 1610780974,
      "node_id": "PRRC_kwDOAN28mc5gApEu",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"PSBT mutation\" -> it may be helpful to link here to the **PSBT Version 2** section below.",
      "created_at": "2024-05-22T23:22:48Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610780974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610780974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610781472",
      "pull_request_review_id": 2072406420,
      "id": 1610781472,
      "node_id": "PRRC_kwDOAN28mc5gApMg",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"It may go offline\" -> can you clarify what \"It\" is (the receiver)?\r\n\r\n```suggestion\r\n* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\r\n```",
      "created_at": "2024-05-22T23:23:49Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610781472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610781472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610785958",
      "pull_request_review_id": 2072406420,
      "id": 1610785958,
      "node_id": "PRRC_kwDOAN28mc5gAqSm",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggest adding the explanatory link for base64url encoding here, as it is the first time it is used, in addition to line 235 below: `The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64URL]] encoding` \r\n\r\nAlso (nit) suggest writing each instance of it as `base64url`, as done in RFC4648.\r\n\r\nA few further suggestions here:\r\n\r\n```suggestion\r\n* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is a base64url encoded public key. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url \"Key Config\" must also be provided.\r\n```\r\n",
      "created_at": "2024-05-22T23:32:54Z",
      "updated_at": "2024-05-23T00:25:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610785958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610785958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610793401",
      "pull_request_review_id": 2072406420,
      "id": 1610793401,
      "node_id": "PRRC_kwDOAN28mc5gAsG5",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 114,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "- Maybe link `/receive` to the `Receive Messaging` section below.\r\n\r\n- \"which\" needs to be followed by a comma\r\n\r\n```suggestion\r\n* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\r\n```",
      "created_at": "2024-05-22T23:47:53Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610793401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610793401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610794770",
      "pull_request_review_id": 2072406420,
      "id": 1610794770,
      "node_id": "PRRC_kwDOAN28mc5gAscS",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 116,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do both words \"it\" here mean the same thing (what)?\r\n",
      "created_at": "2024-05-22T23:50:35Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610794770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610794770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610795021",
      "pull_request_review_id": 2072406420,
      "id": 1610795021,
      "node_id": "PRRC_kwDOAN28mc5gAsgN",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 124,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Here and line 130, to be like the other entries.\r\n\r\n```suggestion\r\n* Set input and output Transaction Modifiable Flags to 1.\r\n```",
      "created_at": "2024-05-22T23:51:16Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610795021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610795021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610795246",
      "pull_request_review_id": 2072406420,
      "id": 1610795246,
      "node_id": "PRRC_kwDOAN28mc5gAsju",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should this line be removed, per your comment?",
      "created_at": "2024-05-22T23:51:47Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610795246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610795246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610796092",
      "pull_request_review_id": 2072406420,
      "id": 1610796092,
      "node_id": "PRRC_kwDOAN28mc5gAsw8",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 149,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nReceivers must enroll with a directory to have a subdirectory allocated to them, as follows:\r\n```",
      "created_at": "2024-05-22T23:53:28Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610796092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610796092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610798059",
      "pull_request_review_id": 2072406420,
      "id": 1610798059,
      "node_id": "PRRC_kwDOAN28mc5gAtPr",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 155,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nOptionally, before returning the uri, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\r\n```",
      "created_at": "2024-05-22T23:57:10Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610798059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610798059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610798555",
      "pull_request_review_id": 2072406420,
      "id": 1610798555,
      "node_id": "PRRC_kwDOAN28mc5gAtXb",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nIf a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\r\n```",
      "created_at": "2024-05-22T23:58:06Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610798555",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610798555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610799771",
      "pull_request_review_id": 2072406420,
      "id": 1610799771,
      "node_id": "PRRC_kwDOAN28mc5gAtqb",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 161,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"it\" and \"It\" in this paragraph would be clearer if replaced by the actual subject.",
      "created_at": "2024-05-23T00:00:47Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610799771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610799771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610800050",
      "pull_request_review_id": 2072406420,
      "id": 1610800050,
      "node_id": "PRRC_kwDOAN28mc5gAtuy",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 163,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\r\n```",
      "created_at": "2024-05-23T00:01:23Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610800050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610800050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610800617",
      "pull_request_review_id": 2072406420,
      "id": 1610800617,
      "node_id": "PRRC_kwDOAN28mc5gAt3p",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 167,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received a request from the sender.\r\n```",
      "created_at": "2024-05-23T00:02:31Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610800617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610800617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610801119",
      "pull_request_review_id": 2072406420,
      "id": 1610801119,
      "node_id": "PRRC_kwDOAN28mc5gAt_f",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 169,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"it\" and \"It\" in this paragraph would be clearer if replaced by the actual subject.\r\n",
      "created_at": "2024-05-23T00:03:33Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610801119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610801119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610801227",
      "pull_request_review_id": 2072406420,
      "id": 1610801227,
      "node_id": "PRRC_kwDOAN28mc5gAuBL",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 173,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nOther than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\r\n```",
      "created_at": "2024-05-23T00:03:49Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610801227",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610801227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610802175",
      "pull_request_review_id": 2072406420,
      "id": 1610802175,
      "node_id": "PRRC_kwDOAN28mc5gAuP_",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 177,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which caused issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\r\n```",
      "created_at": "2024-05-23T00:05:52Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610802175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610802175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803229",
      "pull_request_review_id": 2072406420,
      "id": 1610803229,
      "node_id": "PRRC_kwDOAN28mc5gAugd",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 181,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps replace the 3 \"it\" words in this paragraph with the actual subject.",
      "created_at": "2024-05-23T00:08:24Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610803229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803375",
      "pull_request_review_id": 2072406420,
      "id": 1610803375,
      "node_id": "PRRC_kwDOAN28mc5gAuiv",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 185,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nEach receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\r\n```",
      "created_at": "2024-05-23T00:08:47Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610803375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803976",
      "pull_request_review_id": 2072406420,
      "id": 1610803976,
      "node_id": "PRRC_kwDOAN28mc5gAusI",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64URL encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 198,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nWhen the payjoin sender posts the original PSBT to the receiver, the sender can optionally specify the following HTTP query string parameters:\r\n```",
      "created_at": "2024-05-23T00:09:57Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610803976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610804914",
      "pull_request_review_id": 2072406420,
      "id": 1610804914,
      "node_id": "PRRC_kwDOAN28mc5gAu6y",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64URL encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 210,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\r\n```",
      "created_at": "2024-05-23T00:12:00Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610804914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610804914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610805774",
      "pull_request_review_id": 2072406420,
      "id": 1610805774,
      "node_id": "PRRC_kwDOAN28mc5gAvIO",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64URL encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 214,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If I understand your meaning correctly; `protection from Oblivious HTTP` seems odd here, as the latter is providing protection and not causing the need for it.\r\n\r\n```suggestion\r\nHTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\r\n```",
      "created_at": "2024-05-23T00:13:48Z",
      "updated_at": "2024-05-23T00:28:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610805774",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610805774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610807554",
      "pull_request_review_id": 2072406420,
      "id": 1610807554,
      "node_id": "PRRC_kwDOAN28mc5gAvkC",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64URL encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 218,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Either \"with specific IP addresses\", or \"with a specific IP address\"\r\n\r\n```suggestion\r\nOHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\r\n```",
      "created_at": "2024-05-23T00:17:38Z",
      "updated_at": "2024-05-23T00:26:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610807554",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610807554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610970913",
      "pull_request_review_id": 2072824280,
      "id": 1610970913,
      "node_id": "PRRC_kwDOAN28mc5gBXch",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 15,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": 1610673352,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "TIL about restrictive vs non-restrictive clauses",
      "created_at": "2024-05-23T04:51:20Z",
      "updated_at": "2024-05-23T04:51:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610970913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610970913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1623630215",
      "pull_request_review_id": 2092587393,
      "id": 1623630215,
      "node_id": "PRRC_kwDOAN28mc5gxqGH",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": 1610795246,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because [PSBTv2 support is not yet merged in even bitcoin core](https://github.com/bitcoin/bitcoin/pull/21283), I plan to revert this BIP to using PSBTv0 in order to be compatible with wallets of today, as is done in the reference implementation, so I'll leave the comment until either the reference implementation uses PSBTv2 or the entire doc is reverted to PSBTv0",
      "created_at": "2024-06-02T18:23:12Z",
      "updated_at": "2024-06-02T18:24:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1623630215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1623630215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645140509",
      "pull_request_review_id": 2126619359,
      "id": 1645140509,
      "node_id": "PRRC_kwDOAN28mc5iDtod",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 161,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string is encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\r\n```\r\n\r\n- missing verb? (i.e. \"is\")\r\n\r\n- \"on a new line\" applies to the quary param only? If yes, consider `s/base64/base64,`",
      "created_at": "2024-06-18T21:53:25Z",
      "updated_at": "2024-06-18T22:15:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645140509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645140509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645143237",
      "pull_request_review_id": 2126619359,
      "id": 1645143237,
      "node_id": "PRRC_kwDOAN28mc5iDuTF",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 168,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe receiver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\r\n```",
      "created_at": "2024-06-18T21:57:07Z",
      "updated_at": "2024-06-18T22:15:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645143237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645143237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645146302",
      "pull_request_review_id": 2126619359,
      "id": 1645146302,
      "node_id": "PRRC_kwDOAN28mc5iDvC-",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 163,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe directory's OHTTP Gateway decapsulates the OHTTP request and handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway awaits a request from the receiver to the subdirectory endpoint and responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\r\n```\r\n\r\n(Not sure what the latest version of this sentence intends to say; it is a bit confusing, so my suggested edits are likely to be incorrect.)",
      "created_at": "2024-06-18T22:00:28Z",
      "updated_at": "2024-06-18T22:22:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645146302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645146302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645151610",
      "pull_request_review_id": 2126619359,
      "id": 1645151610,
      "node_id": "PRRC_kwDOAN28mc5iDwV6",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 178,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\r\n```",
      "created_at": "2024-06-18T22:08:17Z",
      "updated_at": "2024-06-18T22:15:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645151610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645151610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645192877",
      "pull_request_review_id": 2126694296,
      "id": 1645192877,
      "node_id": "PRRC_kwDOAN28mc5iD6at",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 201,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggest writing all 3 params (2 receiver, 1 sender) either followed by a colon, or by no colon.",
      "created_at": "2024-06-18T22:53:47Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645192877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645192877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645196253",
      "pull_request_review_id": 2126694296,
      "id": 1645196253,
      "node_id": "PRRC_kwDOAN28mc5iD7Pd",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 209,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggestion: link here to where BIP 78 recommends this.",
      "created_at": "2024-06-18T23:00:00Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645196253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645196253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645197148",
      "pull_request_review_id": 2126694296,
      "id": 1645197148,
      "node_id": "PRRC_kwDOAN28mc5iD7dc",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 211,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"I also like to for timeout\" -> unclear",
      "created_at": "2024-06-18T23:01:34Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645197148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645197148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645199123",
      "pull_request_review_id": 2126694296,
      "id": 1645199123,
      "node_id": "PRRC_kwDOAN28mc5iD78T",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 236,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only [be valid? be used?] for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\r\n```\r\n\r\n- \"Static keys shared in URIs must only for a single session\" -> missing verb\r\n\r\n- (no strong opinion about \"BIP21\", but you wrote \"BIP 21\" with a space throughout this draft)",
      "created_at": "2024-06-18T23:05:06Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645199123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645199123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645201454",
      "pull_request_review_id": 2126694296,
      "id": 1645201454,
      "node_id": "PRRC_kwDOAN28mc5iD8gu",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 234,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nHybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\r\n```",
      "created_at": "2024-06-18T23:09:20Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645201454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645201454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645202278",
      "pull_request_review_id": 2126694296,
      "id": 1645202278,
      "node_id": "PRRC_kwDOAN28mc5iD8tm",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 244,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThis authenticated encryption with additional data (AEAD) [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented in Bitcoin Core [optionally could link here to https://github.com/bitcoin/bitcoin/pull/15649] as specified in [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\r\n```",
      "created_at": "2024-06-18T23:10:54Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645202278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645202278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645205179",
      "pull_request_review_id": 2126694296,
      "id": 1645205179,
      "node_id": "PRRC_kwDOAN28mc5iD9a7",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 252,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a workaround where a new PSBT is created by the receiver instead of mutating it. This can cause strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\r\n```",
      "created_at": "2024-06-18T23:16:22Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645205179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645205179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645206007",
      "pull_request_review_id": 2126694296,
      "id": 1645206007,
      "node_id": "PRRC_kwDOAN28mc5iD9n3",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 256,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Perhaps explain further how/why these attacks are possible.\r\n\r\n```suggestion\r\nSince directories store arbitrary encrypted payloads, they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a subdirectory to receivers.\r\n```",
      "created_at": "2024-06-18T23:17:54Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645206007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645206007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645207872",
      "pull_request_review_id": 2126694296,
      "id": 1645207872,
      "node_id": "PRRC_kwDOAN28mc5iD-FA",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 260,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this paragraph could be clearer/better written.\r\n\r\n```suggestion\r\nSince the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\r\n```",
      "created_at": "2024-06-18T23:21:30Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645207872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645207872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645208130",
      "pull_request_review_id": 2126694296,
      "id": 1645208130,
      "node_id": "PRRC_kwDOAN28mc5iD-JC",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 264,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nOblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\r\n```",
      "created_at": "2024-06-18T23:22:03Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645208130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645208130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645209350",
      "pull_request_review_id": 2126694296,
      "id": 1645209350,
      "node_id": "PRRC_kwDOAN28mc5iD-cG",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 266,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nUnlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\r\n```",
      "created_at": "2024-06-18T23:23:29Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645209350",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645209350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645209930",
      "pull_request_review_id": 2126694296,
      "id": 1645209930,
      "node_id": "PRRC_kwDOAN28mc5iD-lK",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 270,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\r\n```",
      "created_at": "2024-06-18T23:24:32Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645209930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645209930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645212021",
      "pull_request_review_id": 2126694296,
      "id": 1645212021,
      "node_id": "PRRC_kwDOAN28mc5iD_F1",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. ",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 272,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nSenders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel payjoin. \r\n```\r\n\r\nWhat must occur if `req-pj` is advertised by the receiver, but the sender doesn't support payjoin? Perhaps confirm here if it \"MUST consider the entire URI invalid\" per BIP 21, if that is the case.",
      "created_at": "2024-06-18T23:27:51Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645212021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645212021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645217985",
      "pull_request_review_id": 2126694296,
      "id": 1645217985,
      "node_id": "PRRC_kwDOAN28mc5iEAjB",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nReceivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution (since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks, otherwise). The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds.\r\n```\r\n- break up the long run-on sentence\r\n- \"to respond to the sender's request\" at the end seems a little redundant.",
      "created_at": "2024-06-18T23:39:42Z",
      "updated_at": "2024-06-19T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645217985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645217985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645218766",
      "pull_request_review_id": 2126694296,
      "id": 1645218766,
      "node_id": "PRRC_kwDOAN28mc5iEAvO",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 278,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nA production reference implementation client can be found at [https://crates.io/crates/payjoin-cli](https://crates.io/crates/payjoin-cli). Source code for the clients, the payjoin directory, and the development kit may be found here: [https://github.com/payjoin/rust-payjoin](https://github.com/payjoin/rust-payjoin). Source code for an Oblivous HTTP relay implementation may be found here [https://github.com/payjoin/ohttp-relay](https://github.com/payjoin/ohttp-relay). The reference implementation implements an asynchronous payment flow using HTTP and PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:\r\n```\r\n\r\nThere may be a more idiomatic way to do it, but it seems best to remove the trailing `.` from each link so that they function.\r\n\r\nIdem for the two links afterward and the other links in this BIP that otherwise would contain a trailing period.\r\n",
      "created_at": "2024-06-18T23:41:15Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645218766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645218766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645228301",
      "pull_request_review_id": 2126694296,
      "id": 1645228301,
      "node_id": "PRRC_kwDOAN28mc5iEDEN",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:\n+\n+A payjoin directory is run by the Payjoin Dev Kit team on https://payjo.in.\n+\n+Independent Oblivious HTTP relays are run by Obscura VPN at https://ohttp-relay.obscuravpn.io/payjoin and by BOB Spaces at https://pj.bobspacebkk.com.\n+\n+==Acknowledgements==\n+\n+Thank you to  OpenSats for funding this pursuit, to Human Rights Foundation for putting a bounty on it and funding invaluable BOB Space support, who I owe a thank you to as well. Thank you to Ethan Heilman, Nicolas Dorier, Kukks, nopara73, Kristaps Kaupe, Kixunil, /dev/fd0/, Craig Raw, Mike Schmidt, Murch, DÃ¡vid MolnÃ¡r, Lucas Ontiviero, Waxwing, Christopher Allen, Symphonic, Steve Meyers, Sjors Provost, Ava Chow, jbesraa, and countless plebs for feedback that has turned this idea from concept into draft, to Mike Jarmuz for suggesting that I write a BIP, and to Satsie for writing the \"All About BIPS\" zine which I've referenced a number of times in the drafting process. Thanks to Armin Sabouri, Ron Stoner, and Johns Beharry for hacking on the first iOS Payjoin receiver and uncovering the problem that this solves in the first place.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 286,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThank you to OpenSats for funding this pursuit, to the Human Rights Foundation for putting a bounty on it and funding invaluable BOB Space support, who I owe a thank you to as well. Thank you to Ethan Heilman, Nicolas Dorier, Kukks, nopara73, Kristaps Kaupe, Kixunil, /dev/fd0/, Craig Raw, Mike Schmidt, Murch, DÃ¡vid MolnÃ¡r, Lucas Ontiviero, Waxwing, Christopher Allen, Symphonic, Steve Meyers, Sjors Provost, Ava Chow, jbesraa, and countless plebs for feedback that has turned this idea from concept into draft, to Mike Jarmuz for suggesting that I write a BIP, and to Satsie (Stacy Waleyko) for writing the \"All About BIPS\" zine which I've referenced a number of times in the drafting process. Thanks to Armin Sabouri, Ron Stoner, and Johns Beharry for hacking on the first iOS Payjoin receiver and uncovering the problem that this solves in the first place.\r\n```\r\n\r\nI don't know if people like Murch, Waxwing, and Stacie would prefer to have their real names written in addition to their nickname, e.g. Mark \"Murch\" Erhardt, Waxwing (Adam Gibson), Satsie (Stacie Waleyko), etc.",
      "created_at": "2024-06-18T23:51:13Z",
      "updated_at": "2024-06-18T23:58:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645228301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645228301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1661026239",
      "pull_request_review_id": 2151346139,
      "id": 1661026239,
      "node_id": "PRRC_kwDOAN28mc5jAT-_",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:\n+\n+A payjoin directory is run by the Payjoin Dev Kit team on https://payjo.in.\n+\n+Independent Oblivious HTTP relays are run by Obscura VPN at https://ohttp-relay.obscuravpn.io/payjoin and by BOB Spaces at https://pj.bobspacebkk.com.\n+\n+==Acknowledgements==\n+\n+Thank you to  OpenSats for funding this pursuit, to Human Rights Foundation for putting a bounty on it and funding invaluable BOB Space support, who I owe a thank you to as well. Thank you to Ethan Heilman, Nicolas Dorier, Kukks, nopara73, Kristaps Kaupe, Kixunil, /dev/fd0/, Craig Raw, Mike Schmidt, Murch, DÃ¡vid MolnÃ¡r, Lucas Ontiviero, Waxwing, Christopher Allen, Symphonic, Steve Meyers, Sjors Provost, Ava Chow, jbesraa, and countless plebs for feedback that has turned this idea from concept into draft, to Mike Jarmuz for suggesting that I write a BIP, and to Satsie for writing the \"All About BIPS\" zine which I've referenced a number of times in the drafting process. Thanks to Armin Sabouri, Ron Stoner, and Johns Beharry for hacking on the first iOS Payjoin receiver and uncovering the problem that this solves in the first place.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 286,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1645228301,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Just Murch is fine with me.",
      "created_at": "2024-07-01T13:05:52Z",
      "updated_at": "2024-07-01T13:05:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1661026239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1661026239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1664980223",
      "pull_request_review_id": 2157755256,
      "id": 1664980223,
      "node_id": "PRRC_kwDOAN28mc5jPZT_",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:\n+\n+A payjoin directory is run by the Payjoin Dev Kit team on https://payjo.in.\n+\n+Independent Oblivious HTTP relays are run by Obscura VPN at https://ohttp-relay.obscuravpn.io/payjoin and by BOB Spaces at https://pj.bobspacebkk.com.\n+\n+==Acknowledgements==\n+\n+Thank you to  OpenSats for funding this pursuit, to Human Rights Foundation for putting a bounty on it and funding invaluable BOB Space support, who I owe a thank you to as well. Thank you to Ethan Heilman, Nicolas Dorier, Kukks, nopara73, Kristaps Kaupe, Kixunil, /dev/fd0/, Craig Raw, Mike Schmidt, Murch, DÃ¡vid MolnÃ¡r, Lucas Ontiviero, Waxwing, Christopher Allen, Symphonic, Steve Meyers, Sjors Provost, Ava Chow, jbesraa, and countless plebs for feedback that has turned this idea from concept into draft, to Mike Jarmuz for suggesting that I write a BIP, and to Satsie for writing the \"All About BIPS\" zine which I've referenced a number of times in the drafting process. Thanks to Armin Sabouri, Ron Stoner, and Johns Beharry for hacking on the first iOS Payjoin receiver and uncovering the problem that this solves in the first place.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 286,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1645228301,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "EDIT: after reading the rest of the paragraph, I like the consistency and am fine staying as \"Satsie\" :)",
      "created_at": "2024-07-04T01:57:32Z",
      "updated_at": "2024-07-04T20:14:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1664980223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1664980223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665832890",
      "pull_request_review_id": 2159134367,
      "id": 1665832890,
      "node_id": "PRRC_kwDOAN28mc5jSpe6",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 27,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: there is a mix of \"V1\" and \"version 1\" phrasing used, specifically in this paragraph, but I have seen it in other parts of the doc. \"version 1\" seems to be favored. This also applies to a few instances of \"V2\"/\"version 2\".",
      "created_at": "2024-07-04T15:07:55Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665832890",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665832890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665961643",
      "pull_request_review_id": 2159134367,
      "id": 1665961643,
      "node_id": "PRRC_kwDOAN28mc5jTI6r",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nRather than hosting a public server, the receiver starts an HTTP client session with the directory server to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```\r\n\r\nIt might be helpful to specify a bit more about the session, since that can be a pretty general term. I'm not sure if my suggestion here is the best, but you get the idea.",
      "created_at": "2024-07-04T17:45:53Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665961643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665961643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665964747",
      "pull_request_review_id": 2159134367,
      "id": 1665964747,
      "node_id": "PRRC_kwDOAN28mc5jTJrL",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nRather than hosting a public server, the receiver starts a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```\r\n\r\nThis suggestion is kind of related to my previous comment. I read it as you start a session because you plan to receive messages, as well as allocate your subdirectory. However, when I initially read this sentence I questioned if the subdirectory was something local because I thought allocating the subdirectory was a separate, unrelated action from receiving messages. Since the session is to the directory server (specifying that is what my previous comment suggests), changing \"allocates\" to \"allocate\" (so that it matches the tense of \"receive\") allows the sentence to imply that the subdirectory is indeed part of the directory server.",
      "created_at": "2024-07-04T17:51:27Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665964747",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665964747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665980530",
      "pull_request_review_id": 2159134367,
      "id": 1665980530,
      "node_id": "PRRC_kwDOAN28mc5jTNhy",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This part reads a little strange. Would either of these suggestions be an improvement?\r\n\r\n```suggestion\r\nRather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as the subdirectory identifier. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```\r\n\r\n```suggestion\r\nRather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key identifying the subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```",
      "created_at": "2024-07-04T18:05:37Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665980530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665980530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665983993",
      "pull_request_review_id": 2159134367,
      "id": 1665983993,
      "node_id": "PRRC_kwDOAN28mc5jTOX5",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Want to make sure I'm reading this correctly, this is when the requester starts polling for the Original PSBT, right? Before I saw the key down below for the line types, I got confused that the sender had not yet posted the original PSBT",
      "created_at": "2024-07-04T18:11:50Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665983993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665983993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665989802",
      "pull_request_review_id": 2159134367,
      "id": 1665989802,
      "node_id": "PRRC_kwDOAN28mc5jTPyq",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit : Another example of mixed \"V2\" / \"version 2\" usage. I personally lean towards V2, but it I think this doc favors \"version 2\". ",
      "created_at": "2024-07-04T18:24:15Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665989802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665989802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665991932",
      "pull_request_review_id": 2159134367,
      "id": 1665991932,
      "node_id": "PRRC_kwDOAN28mc5jTQT8",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 219,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nOHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\r\n```\r\n\r\nnit: moving the word \"from\" allows the two phrases \"from one another\" and \"from the directory\" to match/be consistent with the usage of \"from\"",
      "created_at": "2024-07-04T18:28:41Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665991932",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665991932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665998609",
      "pull_request_review_id": 2159134367,
      "id": 1665998609,
      "node_id": "PRRC_kwDOAN28mc5jTR8R",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Re: the last sentence, so enrollment is idempotent, right? Not sure if adding that that term would be helpful or confusing to readers :smile: ",
      "created_at": "2024-07-04T18:43:08Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665998609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665998609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665999486",
      "pull_request_review_id": 2159134367,
      "id": 1665999486,
      "node_id": "PRRC_kwDOAN28mc5jTSJ-",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nPayjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\r\n```\r\n\r\nnit: Do you want \"url\" to be lowercase or all caps? This is the only occurence of it by itself (as opposed to \"base64url\"). At first I wasn't going to mention anything but I saw that \"URI\" was capitalized throughout the doc.",
      "created_at": "2024-07-04T18:45:14Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665999486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665999486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666011281",
      "pull_request_review_id": 2159134367,
      "id": 1666011281,
      "node_id": "PRRC_kwDOAN28mc5jTVCR",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is the \"session public key\" the same as the public key being referred to in the previous bullet point? (Line 109)",
      "created_at": "2024-07-04T19:06:52Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666011281",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666011281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666017032",
      "pull_request_review_id": 2159134367,
      "id": 1666017032,
      "node_id": "PRRC_kwDOAN28mc5jTWcI",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |",
      "path": "bip-0077.mediawiki",
      "position": 89,
      "original_position": 90,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Does the sender poll for the Payjoin PSBT?",
      "created_at": "2024-07-04T19:19:45Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666017032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666017032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666020327",
      "pull_request_review_id": 2159134367,
      "id": 1666020327,
      "node_id": "PRRC_kwDOAN28mc5jTXPn",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 174,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: the rest of the doc refers to it as \"PSBT version 2\" (and not PSBTv2)\r\n\r\nI saw your comment about changing this BIP to use \"PSBTv0\", is that what it is called? Or is it PSBT version 1?",
      "created_at": "2024-07-04T19:26:05Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666020327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666020327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666023054",
      "pull_request_review_id": 2159134367,
      "id": 1666023054,
      "node_id": "PRRC_kwDOAN28mc5jTX6O",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 182,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What are the rules for capitalizing \"Payjoin\" and leaving it lowercase? One thing I noticed is \"Payjoin PSBT\" is capitalized since it's treated like proper noun so by that reasoning I understand why \"Payjoin payloads\" is capitalized. Not sure about something like \"Payjoin version 2\" since it is lowercase in other parts of this doc.",
      "created_at": "2024-07-04T19:32:17Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666023054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666023054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666025477",
      "pull_request_review_id": 2159134367,
      "id": 1666025477,
      "node_id": "PRRC_kwDOAN28mc5jTYgF",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 209,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are the \"request PSBTs\" the same as Original PSBTs? If so, I prefer the \"Orignial PSBT\" terminology since it is the same term that is used in the sequence diagram.",
      "created_at": "2024-07-04T19:38:04Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666025477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666025477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666028072",
      "pull_request_review_id": 2159134367,
      "id": 1666028072,
      "node_id": "PRRC_kwDOAN28mc5jTZIo",
      "diff_hunk": "",
      "path": "bip-0077/oblivious-http-sequence.png",
      "position": 1,
      "original_position": 1,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How easy is it for you to update this diagram? If it's within reason I'd consider doing the following:\r\n\r\n- Use an italic, bold, or underline font for \"Relay Request\", \"Gateway Request\", \"Gateway Response\", and \"Relay Response\" so that it is clear these are titles of the messages.\r\n\r\nFor consistency,\r\n- Add \"TO: Relay IP\" to the Gateway Response\r\n- Add \"TO: Client IP\" to the Relay Response",
      "created_at": "2024-07-04T19:43:00Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666028072",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666028072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666029471",
      "pull_request_review_id": 2159134367,
      "id": 1666029471,
      "node_id": "PRRC_kwDOAN28mc5jTZef",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 230,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is \"transaction PSBTs\" redundant? Or does \"transaction\" not refer to a Bitcoin transaction?",
      "created_at": "2024-07-04T19:46:30Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666029471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666029471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666029695",
      "pull_request_review_id": 2159134367,
      "id": 1666029695,
      "node_id": "PRRC_kwDOAN28mc5jTZh_",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 230,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Are you able to provide a link to where the 7168 number comes from?",
      "created_at": "2024-07-04T19:47:02Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666029695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666029695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666035584",
      "pull_request_review_id": 2159134367,
      "id": 1666035584,
      "node_id": "PRRC_kwDOAN28mc5jTa-A",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "After reading the full BIP I've come to understand that the public key is specific to a session. It might be worth mentioning this up here at the top of the doc so that later when \"public key\" and \"session public key\" are used, there isn't a question on if these are separate things.",
      "created_at": "2024-07-04T19:59:33Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666035584",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666035584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666036895",
      "pull_request_review_id": 2159134367,
      "id": 1666036895,
      "node_id": "PRRC_kwDOAN28mc5jTbSf",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 258,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nSince we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\r\n```",
      "created_at": "2024-07-04T20:02:56Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666036895",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666036895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666037862",
      "pull_request_review_id": 2159134367,
      "id": 1666037862,
      "node_id": "PRRC_kwDOAN28mc5jTbhm",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 264,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nOblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\r\n```\r\n\r\nI'm only 80% sure of this grammar correction :laughing: ",
      "created_at": "2024-07-04T20:05:17Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666037862",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666037862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667390307",
      "pull_request_review_id": 2161551250,
      "id": 1667390307,
      "node_id": "PRRC_kwDOAN28mc5jYltj",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 278,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1645218766,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Huh, I thought they were working in the previewer. I think the idiomatic way to do it is to surround links with double square brackets `[[ ]]` so I'll do that.",
      "created_at": "2024-07-06T16:30:34Z",
      "updated_at": "2024-07-06T16:30:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667390307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667390307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402201",
      "pull_request_review_id": 2161560962,
      "id": 1667402201,
      "node_id": "PRRC_kwDOAN28mc5jYonZ",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1665983993,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes indeed. If you think there might be a better way to express such a diagram I am open to suggestions.\r\n\r\nI can put the key on the top to help.",
      "created_at": "2024-07-06T18:11:51Z",
      "updated_at": "2024-07-06T18:11:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402201",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402391",
      "pull_request_review_id": 2161561150,
      "id": 1667402391,
      "node_id": "PRRC_kwDOAN28mc5jYoqX",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1665989802,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The document is titled PSBT Version 2 so I'll put \"BIP 370: PSBT Version 2 (PSBTv2)\" to enable the latter usage elsewhere",
      "created_at": "2024-07-06T18:13:46Z",
      "updated_at": "2024-07-06T18:13:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402566",
      "pull_request_review_id": 2161561359,
      "id": 1667402566,
      "node_id": "PRRC_kwDOAN28mc5jYotG",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666011281,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "yes, I'll clarify.",
      "created_at": "2024-07-06T18:16:02Z",
      "updated_at": "2024-07-06T18:16:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402644",
      "pull_request_review_id": 2161561418,
      "id": 1667402644,
      "node_id": "PRRC_kwDOAN28mc5jYouU",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |",
      "path": "bip-0077.mediawiki",
      "position": 89,
      "original_position": 90,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666017032,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It does poll for the Payjoin PSBT by sending a payload containing the Original PSBT",
      "created_at": "2024-07-06T18:16:38Z",
      "updated_at": "2024-07-06T18:16:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402721",
      "pull_request_review_id": 2161561491,
      "id": 1667402721,
      "node_id": "PRRC_kwDOAN28mc5jYovh",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 174,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666020327,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "PSBTv0 == BIP 174. There is no version 1 because an upgrade from version 0 to version 1 was considered too confusing.",
      "created_at": "2024-07-06T18:17:27Z",
      "updated_at": "2024-07-06T18:17:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402721",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667405025",
      "pull_request_review_id": 2161563457,
      "id": 1667405025,
      "node_id": "PRRC_kwDOAN28mc5jYpTh",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 182,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666023054,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm making anywhere Payjoin x is used as a proper noun capitalized, and anywhere it serves as a single transaction or adjective or verb lowercase.",
      "created_at": "2024-07-06T18:28:36Z",
      "updated_at": "2024-07-06T18:28:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667405025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667405025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667409921",
      "pull_request_review_id": 2161572971,
      "id": 1667409921,
      "node_id": "PRRC_kwDOAN28mc5jYqgB",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1665983993,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ok cool. No I don't have any suggestions :laughing:. If this were something richer than an ASCII diagram I'd suggest making the two types of lines more obviously different but I'm not sure if there's much you can do about it in this format. \r\n\r\nI think it's normal/fine to leave the key at the bottom.",
      "created_at": "2024-07-06T18:58:34Z",
      "updated_at": "2024-07-06T18:58:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667409921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667409921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667410260",
      "pull_request_review_id": 2161573424,
      "id": 1667410260,
      "node_id": "PRRC_kwDOAN28mc5jYqlU",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |",
      "path": "bip-0077.mediawiki",
      "position": 89,
      "original_position": 90,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666017032,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Got it. I might consider adding a footnote for that. The way the diagram is, it looks like the directory pushes a Payjoin PSBT to the sender. But I also think you are quite limited by what you can do with this format so instead of complicating the diagram, it may just be something that could be mentioned at the bottom.",
      "created_at": "2024-07-06T19:02:26Z",
      "updated_at": "2024-07-06T19:02:26Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667410260",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667410260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1722503510",
      "pull_request_review_id": 2246701892,
      "id": 1722503510,
      "node_id": "PRRC_kwDOAN28mc5mq1FW",
      "diff_hunk": "@@ -0,0 +1,288 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to a public key. This key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. The response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint using the public key as a subdirectory identifier. Once a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin version 2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370: PSBT Version 2]] (PSBTv2) format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialilze a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "df3bd5239b20a9183d24d27c0d1d46da367a5262",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nA receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\r\n```",
      "created_at": "2024-08-19T23:26:07Z",
      "updated_at": "2024-08-19T23:26:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1722503510",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1722503510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1790987558",
      "pull_request_review_id": 2353089756,
      "id": 1790987558,
      "node_id": "PRRC_kwDOAN28mc5qwE0m",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to the HPKE using a shared secret derived from a newly generated Payjoin Session keypair public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway awaits a request from the receiver to the Payjoin Session subdirectory endpoint and responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by. This request is encapsulated in OHTTP.\n+The receiver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, and otherwise continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a PUT message to the subdirectory.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender posts an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Payjoin PSBT and wait for a signature once a Payjoin PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 258,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "e44f748f6a273219462a97058a064db0b70d2dab",
      "in_reply_to_id": null,
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can add a link to attack vectors shared in BIP 78 as they apply to BIP 77 as well and mention that it should not be used for accepting donations: https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors",
      "created_at": "2024-10-07T23:09:51Z",
      "updated_at": "2024-10-07T23:09:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1790987558",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1790987558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 252,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1791154881",
      "pull_request_review_id": 2353336935,
      "id": 1791154881,
      "node_id": "PRRC_kwDOAN28mc5qwtrB",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to the HPKE using a shared secret derived from a newly generated Payjoin Session keypair public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway awaits a request from the receiver to the Payjoin Session subdirectory endpoint and responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by. This request is encapsulated in OHTTP.\n+The receiver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, and otherwise continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a PUT message to the subdirectory.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender posts an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Payjoin PSBT and wait for a signature once a Payjoin PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 258,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "e44f748f6a273219462a97058a064db0b70d2dab",
      "in_reply_to_id": 1790987558,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've now referenced the BIP 78 attack vectors thanks to your recommendation.\r\n\r\nWhy not use Payjoin to accept donations?",
      "created_at": "2024-10-08T04:19:00Z",
      "updated_at": "2024-10-08T04:19:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1791154881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1791154881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 252,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792305935",
      "pull_request_review_id": 2355197174,
      "id": 1792305935,
      "node_id": "PRRC_kwDOAN28mc5q1GsP",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to the HPKE using a shared secret derived from a newly generated Payjoin Session keypair public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway awaits a request from the receiver to the Payjoin Session subdirectory endpoint and responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by. This request is encapsulated in OHTTP.\n+The receiver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, and otherwise continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a PUT message to the subdirectory.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender posts an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Payjoin PSBT and wait for a signature once a Payjoin PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 258,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "e44f748f6a273219462a97058a064db0b70d2dab",
      "in_reply_to_id": 1790987558,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> mention that it should not be used for accepting donations\r\n\r\n> for the benefit of users\r\n\r\nI think that would need a rationale to be helpful to users.",
      "created_at": "2024-10-08T18:10:46Z",
      "updated_at": "2024-10-08T18:10:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1792305935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792305935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 252,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792591720",
      "pull_request_review_id": 2355668363,
      "id": 1792591720,
      "node_id": "PRRC_kwDOAN28mc5q2Mdo",
      "diff_hunk": "@@ -0,0 +1,282 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
      "in_reply_to_id": null,
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "1. shouldn't the directory indicate to the receiver that authorization is required using a 401 response?\r\n\r\n2. wouldn't an `Authorization` header be more appropriate? Specifically RFC 6750? the wording \"required to submit an `Authenticate: <token>`\" doesn't indicate how it's to be submitted (seems to imply that it's as a header but closest is `WWW-Authenticate` which is a response header used in 40{1,7} responses)\r\n\r\n4. instead of \"should be anonymous credentials\", if a token is used maybe it's better to specify that it \"must be unlinkable\"?",
      "created_at": "2024-10-08T22:48:58Z",
      "updated_at": "2024-10-08T22:51:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1792591720",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792591720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 151,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792831942",
      "pull_request_review_id": 2356005927,
      "id": 1792831942,
      "node_id": "PRRC_kwDOAN28mc5q3HHG",
      "diff_hunk": "@@ -0,0 +1,282 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
      "in_reply_to_id": 1792591720,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> * shouldn't the directory indicate to the receiver that authorization is required using a 401 response?\r\n\r\nYes, that's proper HTTP semantics\r\n\r\n> * wouldn't an `Authorization` header be more appropriate? Specifically RFC 6750? the wording \"required to submit an `Authenticate: <token>`\" doesn't indicate how it's to be submitted (seems to imply that it's as a header but closest is `WWW-Authenticate` which is a response header used in 40{1,7} responses)\r\n\r\nYes\r\n\r\n> * instead of \"should be anonymous credentials\", if a token is used maybe it's better to specify that it \"must be unlinkable\"?\r\n\r\nYes\r\n\r\nTODO\r\n\r\n",
      "created_at": "2024-10-09T04:44:11Z",
      "updated_at": "2024-10-09T04:44:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1792831942",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792831942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 151,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1803615647",
      "pull_request_review_id": 2373349802,
      "id": 1803615647,
      "node_id": "PRRC_kwDOAN28mc5rgP2f",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+\n+The receiver encrypts the <code>Payjoin PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 236,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "c917eab7e8d2c4cd72b50bb6db877a171ffcd037",
      "in_reply_to_id": null,
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\r\n```",
      "created_at": "2024-10-16T18:35:11Z",
      "updated_at": "2024-10-16T18:35:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1803615647",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1803615647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003314",
      "pull_request_review_id": 2373985813,
      "id": 1804003314,
      "node_id": "PRRC_kwDOAN28mc5rhufy",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.",
      "path": "bip-0077.mediawiki",
      "position": 154,
      "original_position": 154,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\r\n```",
      "created_at": "2024-10-17T01:56:32Z",
      "updated_at": "2024-10-17T02:02:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804003314",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 154,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003590",
      "pull_request_review_id": 2373985813,
      "id": 1804003590,
      "node_id": "PRRC_kwDOAN28mc5rhukG",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].",
      "path": "bip-0077.mediawiki",
      "position": 160,
      "original_position": 160,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nUpon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Original PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\r\n```",
      "created_at": "2024-10-17T01:56:56Z",
      "updated_at": "2024-10-17T02:02:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804003590",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 160,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003720",
      "pull_request_review_id": 2373985813,
      "id": 1804003720,
      "node_id": "PRRC_kwDOAN28mc5rhumI",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": 162,
      "original_position": 162,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\r\n```",
      "created_at": "2024-10-17T01:57:10Z",
      "updated_at": "2024-10-17T02:02:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804003720",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 162,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804004419",
      "pull_request_review_id": 2373985813,
      "id": 1804004419,
      "node_id": "PRRC_kwDOAN28mc5rhuxD",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+\n+The receiver encrypts the <code>Payjoin PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.",
      "path": "bip-0077.mediawiki",
      "position": 164,
      "original_position": 164,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nThe receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\r\n```",
      "created_at": "2024-10-17T01:58:27Z",
      "updated_at": "2024-10-17T02:02:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804004419",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804004419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 164,
      "original_line": 164,
      "side": "RIGHT"
    }
  ]
}