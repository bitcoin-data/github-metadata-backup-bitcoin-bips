{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1972",
    "id": 2842818355,
    "node_id": "PR_kwDOAN28mc6pcfcz",
    "html_url": "https://github.com/bitcoin/bips/pull/1972",
    "diff_url": "https://github.com/bitcoin/bips/pull/1972.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1972.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1972",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1972/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1972/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1972/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/4ce0258973040d09c7cd2009869e723c8ef39b94",
    "number": 1972,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "[guardian] Add wallet behaviour draft BIP",
    "user": {
      "login": "bitcoinguardian",
      "id": 215255061,
      "node_id": "U_kgDODNSIFQ",
      "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bitcoinguardian",
      "html_url": "https://github.com/bitcoinguardian",
      "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
      "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
      "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
      "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
      "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "Implements wallet behaviour for the Guardian Address proposal.\r\n\r\nThe source code for the wallet implementation is available at https://github.com/bitcoinguardian/electrum. This serves as a model for self-custodial wallets, while custodial services may adapt the protocol to their infrastructure.\r\n\r\nGuardian Signal tooling is available at https://github.com/bitcoinguardian/GASPv1-draft\r\n\r\nA demo with testnet transactions and Guardian integration is available at https://github.com/bitcoinguardian/electrum/tree/master/demo",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2025-09-19T07:26:18Z",
    "updated_at": "2025-10-08T13:37:37Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "772b15a4e1ab0fa7fc440428e49cc4b29df86b3e",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "bitcoinguardian:guardian-wallet",
      "ref": "guardian-wallet",
      "sha": "4ce0258973040d09c7cd2009869e723c8ef39b94",
      "user": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 1059956423,
        "node_id": "R_kgDOPy2mxw",
        "name": "bips",
        "full_name": "bitcoinguardian/bips",
        "owner": {
          "login": "bitcoinguardian",
          "id": 215255061,
          "node_id": "U_kgDODNSIFQ",
          "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoinguardian",
          "html_url": "https://github.com/bitcoinguardian",
          "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
          "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
          "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
          "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoinguardian/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/bitcoinguardian/bips",
        "archive_url": "https://api.github.com/repos/bitcoinguardian/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoinguardian/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoinguardian/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoinguardian/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoinguardian/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoinguardian/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoinguardian/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoinguardian/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoinguardian/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoinguardian/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoinguardian/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoinguardian/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoinguardian/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoinguardian/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoinguardian/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoinguardian/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoinguardian/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoinguardian/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoinguardian/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoinguardian/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoinguardian/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoinguardian/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoinguardian/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoinguardian/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoinguardian/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoinguardian/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoinguardian/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoinguardian/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoinguardian/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoinguardian/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoinguardian/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoinguardian/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoinguardian/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoinguardian/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoinguardian/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoinguardian/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoinguardian/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoinguardian/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoinguardian/bips/hooks",
        "svn_url": "https://github.com/bitcoinguardian/bips",
        "homepage": "",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 17240,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-08T07:01:43Z",
        "created_at": "2025-09-19T07:23:36Z",
        "updated_at": "2025-09-19T07:23:36Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "6730ee8a1e767ccc5594938f8a73aca8a639a1cf",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5782,
        "stargazers_count": 10241,
        "watchers_count": 10241,
        "size": 16702,
        "default_branch": "master",
        "open_issues_count": 53,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-10-06T21:38:45Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-10-08T13:58:40Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 316,
    "deletions": 0,
    "changed_files": 3,
    "commits": 10,
    "review_comments": 7,
    "comments": 2
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZhOWNlNTkxNzQ3OWNjOWZmYzM1ZDAwYzdiNmQ5MGU5YmUxNzhhZTI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2",
      "tree": {
        "sha": "513dc723afd680157e341ce14b4939bc2f236584",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/513dc723afd680157e341ce14b4939bc2f236584"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6730ee8a1e767ccc5594938f8a73aca8a639a1cf",
          "sha": "6730ee8a1e767ccc5594938f8a73aca8a639a1cf",
          "html_url": "https://github.com/bitcoin/bips/commit/6730ee8a1e767ccc5594938f8a73aca8a639a1cf"
        }
      ],
      "message": "[guardian] Add wallet behaviour draft bip",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-09-19T07:17:27Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-09-19T07:17:27Z"
      },
      "sha": "fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2"
    },
    {
      "event": "labeled",
      "id": 19800820187,
      "node_id": "LE_lADOAN28mc7Mor6-zwAAAAScOInb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/19800820187",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-09-19T14:23:25Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDhkZjNhM2ZhNzA0YTM1MjBjMjUyY2Y5Yzg4ZTQ3OWM1YWY4OWExYzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "tree": {
        "sha": "3030a60f73d2f01a325ca3c054b865376f115e2c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3030a60f73d2f01a325ca3c054b865376f115e2c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2",
          "sha": "fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2",
          "html_url": "https://github.com/bitcoin/bips/commit/fa9ce5917479cc9ffc35d00c7b6d90e9be178ae2"
        }
      ],
      "message": "[guardian] Add ack",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-09-19T15:51:01Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-09-19T15:51:01Z"
      },
      "sha": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4"
    },
    {
      "event": "reviewed",
      "id": 3306286307,
      "node_id": "PRR_kwDOAN28mc7FEezj",
      "url": null,
      "actor": null,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "commit_url": null,
      "created_at": null,
      "updated_at": "2025-10-06T18:35:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "The described signaling mechanism is expensive and unreliable, and adds overhead to the setup. It is likely incompatible with basic security practices like airgap setups as it relies on the wallet to be synchronized with the mempool and blockchain. The motivating scenarios sound implausible. The proposal comes across as fairly convoluted, a simple 2FA co-signer or a multisig setup with distributed signers both seem superior.\r\n\r\nI’m not convinced it works at all, as per the described scenario, the attacker gains physical access to the unlocked wallet and therefore could tweak the firmware to make it ignore the Guardian signal, or extract the key material and create the transaction with different software. Relying on the software of a compromised device to enforce security is not reasonable.\r\n\r\nI’m not convinced this proposal is a net improvement, nor that it is technically sound.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1972#pullrequestreview-3306286307",
      "submitted_at": "2025-10-06T18:32:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
    },
    {
      "event": "commented",
      "id": 3375484894,
      "node_id": "IC_kwDOAN28mc7JMc_e",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3375484894",
      "actor": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T07:04:07Z",
      "updated_at": "2025-10-07T10:57:44Z",
      "author_association": "NONE",
      "body": "@murchandamus \r\n\r\nThank you for the detailed technical review. You've identified legitimate limitations that I should address more explicitly in the BIP and refine. Let me respond to your specific concerns:\r\n\r\n**On Compromised Device Security**\r\n\r\nYou're correct that Guardian Address cannot protect against sophisticated attackers who can extract keys from memory or modify wallet software. However, this criticism applies equally to any software based security mechanism including password managers, hardware wallet interfaces, and even multisig coordinators running on compromised devices.\r\n\r\nGuardian Address doesn't claim to be a cryptographic guarantee. It's a coordination protocol that provides defence in depth for realistic threat scenarios:\r\n\r\nUser's phone is stolen while unlocked, but the user escapes and can signal from elsewhere using a pre-signed transaction\r\n\r\nEven if an attacker compromises a self-custody wallet, the same Guardian signal simultaneously freezes exchange accounts, triggers security team alerts, and locks other services\r\n\r\nMany services have withdrawal delays, 2FA verification, or identity checks that create windows where Guardian signalling is effective\r\n\r\nThe threat model is not \"attacker has root access to device and unlimited time\" - it's \"attacker has temporary access and must navigate multiple services with their own security layers.\"\r\n\r\nGuardians are another layer of defence.\r\n\r\n**On Scenario Plausibility**\r\n\r\nThe example scenario describes device theft, not sustained physical coercion. Realistic cases include:\r\n\r\n- Phone pickpocketed while unlocked at a cafe\r\n- Mugging where victim unlocks device under duress, then escapes\r\n- Border seizure of devices with active sessions\r\n- Remote compromise where \"unlocked\" means authenticated web sessions, not physical device control\r\n\r\nAdditionally, bitcoin services often have anti-theft delays: exchanges require email 2FA, impose withdrawal windows, or require video verification for large amounts. These create realistic timeframes where Guardian signalling provides protection even when the attacker has initial access.\r\n\r\n**On Cost**\r\n\r\nYou characterise the mechanism as \"expensive.\" A Guardian lock signal transaction costs under $1 at current fee rates (2.31 sat/vB as of today) or approximately $5 at the BIP recommended 20 sat/vB for reliable confirmation during higher network activity. For an emergency security mechanism that can coordinate lockdown across multiple services and protect potentially significant holdings, this is not expensive.\r\n\r\nTo put this in perspective, a typical bitcoin transaction costs the same or more as a Guardian signal. Users routinely pay higher fees for routine transactions and the cost is less than a cup of coffee for a mechanism that could protect thousands or millions of dollars in fiat terms.\r\n\r\nThe cost is actually a feature, not a bug. It prevents spam while remaining accessible for legitimate emergency use. Characterising sub $5 on-chain signalling as \"expensive\" would similarly apply to any bitcoin transaction based protocol.\r\n\r\n**On Mempool Propagation**\r\n\r\nYou're right that mempool propagation is best effort.\r\n\r\nHowever wallets already monitor mempools for incoming payments, RBF detection, and fee estimation. This isn't introducing new requirements.\r\n\r\nFinality provides signal confirmation, while mempool visibility enables rapid response (often critical in emergency scenarios), the protocol requires honouring confirmed signals, making the security guarantee time bounded rather than absent.\r\n\r\nMultiple broadcast paths mitigate propagation issues. Users can broadcast through multiple RPC nodes or services simultaneously. If you check out the [PoC signal tooling this is the example behaviour.](https://github.com/bitcoinguardian/GASPv1-draft/blob/main/guardian_signal.py#L220) Requiring confirmation means 10+ minute delays that reduce the emergency response effectiveness.\r\n\r\nThe question isn't \"is this perfect?\" but \"is this better than having no emergency signalling mechanism?\" I believe imperfect propagation with 30 second to 10 minute response time is substantially better than the status quo of no signals. Guardian signals were detected and applied within seconds in my [Electrum fork and testnet3 implementation](https://github.com/bitcoinguardian/electrum).\r\n\r\n**On Airgap Compatibility**\r\n\r\nYou note that the proposal is \"likely incompatible with basic security practices like airgap setups.\" This limitation is already documented in the BIP section \"Threat Model and Limitations\":\r\n\r\n\"Guardian Addresses will not protect wallets that are airgapped or otherwise unable to query address state from the latest block height.\"\r\n\r\nThis is an acknowledged tradeoff. The protocol serves the majority of Bitcoin users who operate hot wallets, mobile wallets, or desktop wallets with Internet connectivity. For users who prioritise airgap security above emergency coordination capabilities, Guardian Address is not the appropriate tool and the BIP states this explicitly.\r\n\r\n**On Comparison with Multisig**\r\n\r\nMultisig and Guardian Address solve orthogonal problems:\r\n\r\n- **Multisig provides**: Distributed authorisation for spending (requires multiple parties to approve)\r\n- **Guardian Address provides**: Emergency lockdown coordination (one party can freeze across services)\r\n\r\nKey differences:\r\n\r\n| Capability | Multisig | Guardian Address |\r\n|------------|----------|------------------|\r\n| Retrofit existing wallets | No | Yes |\r\n| Emergency lockdown without all signers | No | Yes |\r\n| Coordinate across custodial services | No | Yes |\r\n| Prevent spending when attacker has M-of-N devices | No | Yes (if signal sent first) |\r\n| Cryptographic spending constraints | Yes | No |\r\n\r\nA sophisticated user should use both; multisig for spending authorisation, Guardian Address for emergency coordination. They're complementary, not competing.\r\n\r\nThe value proposition that no other BIP addresses is cross-service emergency coordination via a single on-chain signal that can simultaneously:\r\n\r\n- Lock self-custody wallets\r\n- Freeze exchange/custodial accounts\r\n- Alert security monitoring services\r\n- Trigger incident response procedures\r\n- Notify emergency contacts or insurance providers\r\n\r\n**On Physical Security Response Coordination**\r\n\r\nBeyond digital wallet locks Guardian Address enables a broader security response dimension that no other bitcoin protocol provides:\r\n\r\n**Deterrence through uncertainty:** An attacker who gains device access faces fundamental uncertainty - they don't know if a Guardian lock has already been broadcast, how many services monitor it, what physical security response may be underway, or whether law enforcement has been alerted. This uncertainty itself has protective value, potentially causing attackers to abandon attempts rather than risk detection and apprehension. This significantly changes game theory outcomes by adjusting the risk/reward balance to favour the defender.\r\n\r\n**Immediate stakeholder notification:** Security monitoring services, family members, business partners, or legal counsel can monitor the Guardian Address and receive instant alerts when a lock signal appears on-chain, enabling coordinated response before an attacker can complete theft.\r\n\r\n**Law enforcement coordination:** Guardian signals provide timestamped, cryptographically verifiable evidence of theft attempts. A broadcast lock signal creates an immutable blockchain record that the wallet owner has declared their holdings under threat, which can be critical for investigations and prosecutions.\r\n\r\n**Insurance claim substantiation:** For users with custody insurance or institutional policies, Guardian signals provide irrefutable proof of when control of assets was lost, simplifying claims and establishing clear timelines that satisfy insurers' evidentiary requirements.\r\n\r\n**Time buying for physical intervention:** Even a 10 minute delay from digital Guardian locks allows critical time for contacting authorities, alerting building security, reaching physical safety, or coordinating with security teams. The Guardian signal serves as a self-sovereign \"panic button\" that buys time when every second matters.\r\n\r\nThis physical-digital coordination capability is unique to Guardian Addresses. Multisig requires coordinating multiple parties to act (slow and requires consensus), while timelocks operate on fixed schedules (inflexible and can't respond to emergencies). Guardian provides near instant, unilateral emergency coordination across both digital services and physical security response, which is a capability gap that no existing bitcoin protocol addresses.\r\n\r\n**On \"Not Technically Sound\"**\r\n\r\nI respectfully disagree with this characterisation. The technical criticisms you've raised are:\r\n\r\nExpensive - At under $1 (current rates) to $5 (recommended rate), this is trivial for an emergency mechanism protecting significant holdings.\r\n\r\nBest effort mempool propagation - Acknowledged. This is a tradeoff for rapid response. Imperfect ≠ unsound.\r\n\r\nAirgap incompatibility - Already documented in the Threat Model section. The protocol serves connected wallets (the majority use case).\r\n\r\nAttacker can modify software - This applies to any software security and doesn't make the protocol unsound.\r\n\r\nThe protocol is technically sound in that:\r\n\r\n- The ABNF grammar is formally specified\r\n- The state machine is defined with clear semantics\r\n- The blockchain interaction is straightforward. Working implementation exists (Electrum fork with testnet demo)\r\n- The signalling mechanism is cryptographically verifiable\r\n\r\nWhether the security benefit justifies adoption is debatable, but the technical specification itself is sound.\r\n\r\n**Proposed Revisions**\r\n\r\nBased on your feedback, I'll revise the BIP to:\r\n\r\nLead with threat model clarity. Explicitly state upfront what attacks this does and doesn't protect against\r\n\r\nEmphasise cross-service coordination rather than device compromise protection as the primary benefit.\r\n\r\nStrengthen abstract/motivation: I submitted this proposal to the bitcoin-dev mailing list with a comprehensive abstract/motivation with more detail, but made more generic in the BIP.\r\n\r\nAdd comparison table to show how Guardian Address complements (not replaces) multisig, timelocks, and vaults.\r\n\r\nWhile airgap incompatibility is documented, I'll make this more prominent by improving limitations visibility. \r\n\r\n**Request for Specific Guidance**\r\n\r\nTo move this forward:\r\n\r\n- If the concern is primarily about overstated claims, would you find the proposal acceptable with more conservative framing and explicit threat model boundaries?\r\n- Are there specific technical changes to the protocol itself that would address your concerns, or is this primarily about positioning/motivation?\r\n\r\nI believe there's genuine value in standardising an emergency coordination mechanism that works across both self-custody and custodial environments. I'm committed to revising the BIP to address legitimate concerns while preserving that core utility.\r\n\r\nApologies for the formatting issues, this is my first BIP and I'll get this resolved!",
      "user": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1972#issuecomment-3375484894",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1972"
    },
    {
      "event": "mentioned",
      "id": 20133542568,
      "node_id": "MEE_lADOAN28mc7Mor6-zwAAAASwDXqo",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20133542568",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T07:04:08Z"
    },
    {
      "event": "subscribed",
      "id": 20133542607,
      "node_id": "SE_lADOAN28mc7Mor6-zwAAAASwDXrP",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20133542607",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T07:04:08Z"
    },
    {
      "event": "commented",
      "id": 3375492939,
      "node_id": "IC_kwDOAN28mc7JMe9L",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3375492939",
      "actor": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T07:07:10Z",
      "updated_at": "2025-10-07T07:07:10Z",
      "author_association": "NONE",
      "body": "Since these two BIPs build heavily on the work by Jameson Lopp, I'm interested in his thoughts too @jlopp ",
      "user": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1972#issuecomment-3375492939",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1972"
    },
    {
      "event": "mentioned",
      "id": 20133588992,
      "node_id": "MEE_lADOAN28mc7Mor6-zwAAAASwDjAA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20133588992",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T07:07:11Z"
    },
    {
      "event": "subscribed",
      "id": 20133589046,
      "node_id": "SE_lADOAN28mc7Mor6-zwAAAASwDjA2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20133589046",
      "actor": {
        "login": "jlopp",
        "id": 288011,
        "node_id": "MDQ6VXNlcjI4ODAxMQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/288011?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jlopp",
        "html_url": "https://github.com/jlopp",
        "followers_url": "https://api.github.com/users/jlopp/followers",
        "following_url": "https://api.github.com/users/jlopp/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jlopp/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jlopp/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jlopp/subscriptions",
        "organizations_url": "https://api.github.com/users/jlopp/orgs",
        "repos_url": "https://api.github.com/users/jlopp/repos",
        "events_url": "https://api.github.com/users/jlopp/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jlopp/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T07:07:11Z"
    },
    {
      "event": "review_requested",
      "id": 20133883178,
      "node_id": "RRE_lADOAN28mc7Mor6-zwAAAASwEq0q",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/20133883178",
      "actor": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-10-07T07:23:32Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDA4YzdkNTY4ZTM0NGVlZDU1ZjcyNzM1ZDhiMTBlYTBmNTM3NDhhYjQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/08c7d568e344eed55f72735d8b10ea0f53748ab4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/08c7d568e344eed55f72735d8b10ea0f53748ab4",
      "tree": {
        "sha": "32ae24b0a99c2886ce4699d602e9088f9c8f95e6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/32ae24b0a99c2886ce4699d602e9088f9c8f95e6"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
          "sha": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
          "html_url": "https://github.com/bitcoin/bips/commit/8df3a3fa704a3520c252cf9c88e479c5af89a1c4"
        }
      ],
      "message": "[guardian] Update Abstract & Motivation",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T09:49:07Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T09:49:07Z"
      },
      "sha": "08c7d568e344eed55f72735d8b10ea0f53748ab4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQ5YmUxZmNlODYwNTVlODdkYjVlZGE2NmI4MDRhZDE2MDZmNGU1NDA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/49be1fce86055e87db5eda66b804ad1606f4e540",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/49be1fce86055e87db5eda66b804ad1606f4e540",
      "tree": {
        "sha": "338728ce34757604ea42caed07c8eccab433088c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/338728ce34757604ea42caed07c8eccab433088c"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/08c7d568e344eed55f72735d8b10ea0f53748ab4",
          "sha": "08c7d568e344eed55f72735d8b10ea0f53748ab4",
          "html_url": "https://github.com/bitcoin/bips/commit/08c7d568e344eed55f72735d8b10ea0f53748ab4"
        }
      ],
      "message": "[guardian] Update reference",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T09:52:06Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T09:52:06Z"
      },
      "sha": "49be1fce86055e87db5eda66b804ad1606f4e540"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJkZmI0ZjkyYmFiMjZjODUwZmE5NjRkNjQ0NGM3MTEyMzFkMzcxNTQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2dfb4f92bab26c850fa964d6444c711231d37154",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2dfb4f92bab26c850fa964d6444c711231d37154",
      "tree": {
        "sha": "a8f1668f7bc1020823a9e486890a2917ab2c0a70",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a8f1668f7bc1020823a9e486890a2917ab2c0a70"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/49be1fce86055e87db5eda66b804ad1606f4e540",
          "sha": "49be1fce86055e87db5eda66b804ad1606f4e540",
          "html_url": "https://github.com/bitcoin/bips/commit/49be1fce86055e87db5eda66b804ad1606f4e540"
        }
      ],
      "message": "[guardian] Update threat model to render better on Mediawiki",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T10:03:38Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T10:03:38Z"
      },
      "sha": "2dfb4f92bab26c850fa964d6444c711231d37154"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGU2OWM4MWZjNWU1NzQ4N2EzYjUzZGQwMzJmZDI3ODMxN2JjNmQ1NDc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e69c81fc5e57487a3b53dd032fd278317bc6d547",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e69c81fc5e57487a3b53dd032fd278317bc6d547",
      "tree": {
        "sha": "6db813870bd723cf2668931f01e231e57c8bc012",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6db813870bd723cf2668931f01e231e57c8bc012"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2dfb4f92bab26c850fa964d6444c711231d37154",
          "sha": "2dfb4f92bab26c850fa964d6444c711231d37154",
          "html_url": "https://github.com/bitcoin/bips/commit/2dfb4f92bab26c850fa964d6444c711231d37154"
        }
      ],
      "message": "[guardian] Update formatting",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:05:03Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:05:03Z"
      },
      "sha": "e69c81fc5e57487a3b53dd032fd278317bc6d547"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM2MTA3M2M4MGE1MDU0NjkxYmE2ZDlhZThjMzgyYzE3NTBmZjQ2NWM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c61073c80a5054691ba6d9ae8c382c1750ff465c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c61073c80a5054691ba6d9ae8c382c1750ff465c",
      "tree": {
        "sha": "bb6265aba6f5e3f645d72ad5d269153722438227",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bb6265aba6f5e3f645d72ad5d269153722438227"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e69c81fc5e57487a3b53dd032fd278317bc6d547",
          "sha": "e69c81fc5e57487a3b53dd032fd278317bc6d547",
          "html_url": "https://github.com/bitcoin/bips/commit/e69c81fc5e57487a3b53dd032fd278317bc6d547"
        }
      ],
      "message": "[guardian] More format fixes",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:16:20Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:16:20Z"
      },
      "sha": "c61073c80a5054691ba6d9ae8c382c1750ff465c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGIyZTdiNjY2MzM2ODk3YzBhNGFiZTUwNjgwMDAyMDRiOTFlZWMwM2U",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b2e7b666336897c0a4abe5068000204b91eec03e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b2e7b666336897c0a4abe5068000204b91eec03e",
      "tree": {
        "sha": "036b172227f9d4ef48d1a54690ac532504761211",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/036b172227f9d4ef48d1a54690ac532504761211"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c61073c80a5054691ba6d9ae8c382c1750ff465c",
          "sha": "c61073c80a5054691ba6d9ae8c382c1750ff465c",
          "html_url": "https://github.com/bitcoin/bips/commit/c61073c80a5054691ba6d9ae8c382c1750ff465c"
        }
      ],
      "message": "[guardian] Mediawiki fixes",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:30:31Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:30:31Z"
      },
      "sha": "b2e7b666336897c0a4abe5068000204b91eec03e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGMyMmYzZDgxNzY1YzA4YWU3OGVhMWM2ZTAzODUzMThiMTEzN2VjZjU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c22f3d81765c08ae78ea1c6e0385318b1137ecf5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c22f3d81765c08ae78ea1c6e0385318b1137ecf5",
      "tree": {
        "sha": "5f5a1a947f1825592454933f669e594da461977f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5f5a1a947f1825592454933f669e594da461977f"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b2e7b666336897c0a4abe5068000204b91eec03e",
          "sha": "b2e7b666336897c0a4abe5068000204b91eec03e",
          "html_url": "https://github.com/bitcoin/bips/commit/b2e7b666336897c0a4abe5068000204b91eec03e"
        }
      ],
      "message": "[guardian] Fix indentation",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:33:38Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:33:38Z"
      },
      "sha": "c22f3d81765c08ae78ea1c6e0385318b1137ecf5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDRjZTAyNTg5NzMwNDBkMDljN2NkMjAwOTg2OWU3MjNjOGVmMzliOTQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4ce0258973040d09c7cd2009869e723c8ef39b94",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4ce0258973040d09c7cd2009869e723c8ef39b94",
      "tree": {
        "sha": "fb2ec317be9e9c4167a6c591083eef32e69d818d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fb2ec317be9e9c4167a6c591083eef32e69d818d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c22f3d81765c08ae78ea1c6e0385318b1137ecf5",
          "sha": "c22f3d81765c08ae78ea1c6e0385318b1137ecf5",
          "html_url": "https://github.com/bitcoin/bips/commit/c22f3d81765c08ae78ea1c6e0385318b1137ecf5"
        }
      ],
      "message": "[guardian] Remove line",
      "committer": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:36:57Z"
      },
      "author": {
        "name": "Bitcoin Guardian",
        "email": "bitcoinguardian@proton.me",
        "date": "2025-10-07T12:36:57Z"
      },
      "sha": "4ce0258973040d09c7cd2009869e723c8ef39b94"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407679923",
      "pull_request_review_id": 3306286307,
      "id": 2407679923,
      "node_id": "PRRC_kwDOAN28mc6Pgkez",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 1,
      "original_position": 28,
      "commit_id": "2dfb4f92bab26c850fa964d6444c711231d37154",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This appears to be Markdown syntax, but you are using a MediaWiki file. This is how your document renders:\n\n<img width=\"765\" height=\"253\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/8b54df06-0ead-44b9-8a29-38ffb57264d4\" />",
      "created_at": "2025-10-06T17:48:32Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407679923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407679923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": 24,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 28,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407707655",
      "pull_request_review_id": 3306286307,
      "id": 2407707655,
      "node_id": "PRRC_kwDOAN28mc6PgrQH",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 1,
      "original_position": 20,
      "commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The Motivation section is too generic and fails to motivate why this design should be adopted specifically.",
      "created_at": "2025-10-06T17:54:30Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407707655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407707655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 20,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407724974",
      "pull_request_review_id": 3306286307,
      "id": 2407724974,
      "node_id": "PRRC_kwDOAN28mc6Pgveu",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 117,
      "original_position": 97,
      "commit_id": "4ce0258973040d09c7cd2009869e723c8ef39b94",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Propagation of unconfirmed transactions is best effort. There is no guarantee that transactions will be seen by all nodes before they are confirmed.",
      "created_at": "2025-10-06T17:57:55Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407724974",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407724974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 117,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407732173",
      "pull_request_review_id": 3306286307,
      "id": 2407732173,
      "node_id": "PRRC_kwDOAN28mc6PgxPN",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.\n+* If such a signal later disappears (due to eviction, replacement, or block reorg), wallets MUST retain the resulting state until a higher nonce signal is observed. This ensures wallets are locked in adversarial mempool conditions. Store a local `signal_observed` record that includes `txid`, `nonce`, `observed_time`, and `state` (`Lock`/`Unlock`) so users can audit why the wallet Guardian state has changed.\n+* Wallets MUST NOT revert to an earlier state purely because the mempool transaction disappeared.\n+* To mitigate censorship, users SHOULD broadcast signals to multiple mining pools.\n+\n+**Latest State Selection**\n+\n+* At any given evaluation, the signal with the highest valid nonce MUST be interpreted as the latest Guardian state, regardless of confirmation status.\n+* Signals MUST be processed in ascending nonce order to ensure sequential evaluation.\n+* If there is a state delta between the received signal and local storage, wallets MUST transition with the highest nonce signal to the Guardian Lock Change substate.\n+* If there are no state changes, wallets MUST transition to Guardian Address Polling substate.\n+\n+### Guardian Lock Change\n+\n+* Wallets MUST update the Guardian lock state in local storage with the signal presented.\n+* Wallets MUST update the latest used Guardian nonce in local storage with the signal presented.\n+* Wallets MUST update the global Guardian lock state user interface and allow UTXOs in the wallet to be spent according to lock state. If the lock state is true, wallets MUST NOT allow UTXOs in the wallet to be spent.\n+* Wallets MUST NOT automatically unlock after any time period or modify state in local storage from sources other than signals from the configured Guardian Address.\n+* Wallets MAY provide the user a pathway to view funds and history, but MUST NOT broadcast new transactions if Guardian Locked.\n+* Wallets MUST transition into the Guardian Address Polling substate after the state change.\n+\n+### Guardian Removal\n+\n+* The Guardian Monitoring substate MUST currently be Guardian Address Polling.\n+* Wallets MUST validate the existing configured Guardian Address in local storage is unlocked.\n+* If the Guardian Address state is locked, wallets MUST NOT allow the removal of the Guardian configuration.\n+\n+### 2. Attack Scenarios\n+\n+#### Device Theft\n+\n+Alice the attacker. Bob the Bitcoin user. Alice coerces Bob under duress to login to his device and applications. Bob's device contains a self-hosted wallet, a Bitcoin exchange application, access to Bob's e-mails, and a two-factor authentication application. After forcing Bob to unlock the device and provide access, Alice takes the device and begins to attempt the Bitcoin theft.\n+\n+Prior to the attack, Bob configured a Guardian Address across all of his Bitcoin wallets. Though he no longer has his device as it has been stolen by Alice, Bob broadcasts a Guardian Lock message to the Bitcoin blockchain using a pre-signed transaction that he has available outside of the stolen device. Centralized services Bob uses have recognized the distress signal and accounts have been frozen. The self-hosted wallet is Guardian Locked and does not allow UTXOs to be spent. Despite having all the information to gain access to Bob's collective Bitcoin holdings, Alice's attack has not resulted in the loss of any Bitcoin.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 150,
      "original_position": 130,
      "commit_id": "4ce0258973040d09c7cd2009869e723c8ef39b94",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This scenario is unconvincing. Why would Alice release Bob from the duress before sending the transaction if the signer is already unlocked?",
      "created_at": "2025-10-06T17:59:27Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407732173",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407732173"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 150,
      "original_line": 130,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407742567",
      "pull_request_review_id": 3306286307,
      "id": 2407742567,
      "node_id": "PRRC_kwDOAN28mc6Pgzxn",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.\n+* If such a signal later disappears (due to eviction, replacement, or block reorg), wallets MUST retain the resulting state until a higher nonce signal is observed. This ensures wallets are locked in adversarial mempool conditions. Store a local `signal_observed` record that includes `txid`, `nonce`, `observed_time`, and `state` (`Lock`/`Unlock`) so users can audit why the wallet Guardian state has changed.\n+* Wallets MUST NOT revert to an earlier state purely because the mempool transaction disappeared.\n+* To mitigate censorship, users SHOULD broadcast signals to multiple mining pools.\n+\n+**Latest State Selection**\n+\n+* At any given evaluation, the signal with the highest valid nonce MUST be interpreted as the latest Guardian state, regardless of confirmation status.\n+* Signals MUST be processed in ascending nonce order to ensure sequential evaluation.\n+* If there is a state delta between the received signal and local storage, wallets MUST transition with the highest nonce signal to the Guardian Lock Change substate.\n+* If there are no state changes, wallets MUST transition to Guardian Address Polling substate.\n+\n+### Guardian Lock Change\n+\n+* Wallets MUST update the Guardian lock state in local storage with the signal presented.\n+* Wallets MUST update the latest used Guardian nonce in local storage with the signal presented.\n+* Wallets MUST update the global Guardian lock state user interface and allow UTXOs in the wallet to be spent according to lock state. If the lock state is true, wallets MUST NOT allow UTXOs in the wallet to be spent.\n+* Wallets MUST NOT automatically unlock after any time period or modify state in local storage from sources other than signals from the configured Guardian Address.\n+* Wallets MAY provide the user a pathway to view funds and history, but MUST NOT broadcast new transactions if Guardian Locked.\n+* Wallets MUST transition into the Guardian Address Polling substate after the state change.\n+\n+### Guardian Removal\n+\n+* The Guardian Monitoring substate MUST currently be Guardian Address Polling.\n+* Wallets MUST validate the existing configured Guardian Address in local storage is unlocked.\n+* If the Guardian Address state is locked, wallets MUST NOT allow the removal of the Guardian configuration.\n+\n+### 2. Attack Scenarios\n+\n+#### Device Theft\n+\n+Alice the attacker. Bob the Bitcoin user. Alice coerces Bob under duress to login to his device and applications. Bob's device contains a self-hosted wallet, a Bitcoin exchange application, access to Bob's e-mails, and a two-factor authentication application. After forcing Bob to unlock the device and provide access, Alice takes the device and begins to attempt the Bitcoin theft.\n+\n+Prior to the attack, Bob configured a Guardian Address across all of his Bitcoin wallets. Though he no longer has his device as it has been stolen by Alice, Bob broadcasts a Guardian Lock message to the Bitcoin blockchain using a pre-signed transaction that he has available outside of the stolen device. Centralized services Bob uses have recognized the distress signal and accounts have been frozen. The self-hosted wallet is Guardian Locked and does not allow UTXOs to be spent. Despite having all the information to gain access to Bob's collective Bitcoin holdings, Alice's attack has not resulted in the loss of any Bitcoin.\n+\n+After the attack is over and the threat has been mitigated, Bob is able to recover access to his wallets by broadcasting a Guardian Unlock transaction with the private key of the Guardian Address.\n+\n+If Bob regains the device, he is able to recover access to his wallet(s) by broadcasting a Guardian Unlock transaction with the private key of the Guardian Address. No UTXOs could be spent while the device was stolen since Bob locked the wallet(s). Now Bob has unlocked the wallet(s) he has the ability to spend UTXOs that were previously locked.\n+\n+#### Public Figure\n+\n+Alice the attacker. Bob the Bitcoin public figure. Bob's public status makes him a target for threat actors. Bob wants a balance between his own personal freedom and security from physical attacks. He keeps a private security team on response near his residence, but lives in his family house with privacy.\n+\n+Alice is an intruder that is attempting to break into the house to demand bitcoin be transferred. A security automation system recognises threat and locks wallets via broadcasting a pre-signed Guardian Lock transaction. This locks Bob's wallets and prevents spending of UTXOs through theft.\n+\n+The security team has also been alerted since they monitor the Guardian Address. They do not know which wallets belong to Bob, maintaining his privacy while keeping his bitcoin safe. His physical security has been protected with the response ensuring his family's safety.\n+\n+### 3. Threat Model and Limitations\n+\n+Guardian Addresses will not protect wallets that are airgapped or otherwise unable to query address state from the latest block height.\n+\n+If a Guardian Address key is lost or compromised, the user MUST rotate to a new Guardian Address. Wallet funds are unaffected since the Guardian cannot spend UTXOs, but monitoring and `Lock/Unlock` state depends on a secure Guardian.\n+\n+This mechanism provides resilience if Guardian keys or pre-signed transactions are not accessible under coercion. It does not protect if attackers demand Guardian material directly or prevent the broadcast of a lock signal.\n+\n+Guardian provides signaling and coordination, not enforceable spending constraints. It is therefore effective in some coercion or theft scenarios, but not all. The following table summarizes the expected impact of the Guardian Address mechanism under various threat scenarios, with and without external monitoring (e.g., security teams, automated alerts, or third-party services actively watching the Guardian Address for signals). External monitoring enhances deterrence by acting as a distress beacon, potentially triggering physical or operational responses that disrupt an attacker's plans.\n+\n+| Threat | Guardian Impact (No External Monitoring) | Guardian Impact (With External Monitoring) |\n+|----------------------------------------|------------------------------------------|------------------------------------------|",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 1,
      "original_position": 155,
      "commit_id": "49be1fce86055e87db5eda66b804ad1606f4e540",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "<img width=\"1047\" height=\"545\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/23744d34-7ee6-4b7c-8d1f-510e5d2ca4ad\" />",
      "created_at": "2025-10-06T18:01:47Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407742567",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407742567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407751220",
      "pull_request_review_id": 3306286307,
      "id": 2407751220,
      "node_id": "PRRC_kwDOAN28mc6Pg140",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.\n+* If such a signal later disappears (due to eviction, replacement, or block reorg), wallets MUST retain the resulting state until a higher nonce signal is observed. This ensures wallets are locked in adversarial mempool conditions. Store a local `signal_observed` record that includes `txid`, `nonce`, `observed_time`, and `state` (`Lock`/`Unlock`) so users can audit why the wallet Guardian state has changed.\n+* Wallets MUST NOT revert to an earlier state purely because the mempool transaction disappeared.\n+* To mitigate censorship, users SHOULD broadcast signals to multiple mining pools.\n+\n+**Latest State Selection**\n+\n+* At any given evaluation, the signal with the highest valid nonce MUST be interpreted as the latest Guardian state, regardless of confirmation status.\n+* Signals MUST be processed in ascending nonce order to ensure sequential evaluation.\n+* If there is a state delta between the received signal and local storage, wallets MUST transition with the highest nonce signal to the Guardian Lock Change substate.\n+* If there are no state changes, wallets MUST transition to Guardian Address Polling substate.\n+\n+### Guardian Lock Change\n+\n+* Wallets MUST update the Guardian lock state in local storage with the signal presented.\n+* Wallets MUST update the latest used Guardian nonce in local storage with the signal presented.\n+* Wallets MUST update the global Guardian lock state user interface and allow UTXOs in the wallet to be spent according to lock state. If the lock state is true, wallets MUST NOT allow UTXOs in the wallet to be spent.\n+* Wallets MUST NOT automatically unlock after any time period or modify state in local storage from sources other than signals from the configured Guardian Address.\n+* Wallets MAY provide the user a pathway to view funds and history, but MUST NOT broadcast new transactions if Guardian Locked.\n+* Wallets MUST transition into the Guardian Address Polling substate after the state change.\n+\n+### Guardian Removal\n+\n+* The Guardian Monitoring substate MUST currently be Guardian Address Polling.\n+* Wallets MUST validate the existing configured Guardian Address in local storage is unlocked.\n+* If the Guardian Address state is locked, wallets MUST NOT allow the removal of the Guardian configuration.\n+\n+### 2. Attack Scenarios\n+\n+#### Device Theft\n+\n+Alice the attacker. Bob the Bitcoin user. Alice coerces Bob under duress to login to his device and applications. Bob's device contains a self-hosted wallet, a Bitcoin exchange application, access to Bob's e-mails, and a two-factor authentication application. After forcing Bob to unlock the device and provide access, Alice takes the device and begins to attempt the Bitcoin theft.\n+\n+Prior to the attack, Bob configured a Guardian Address across all of his Bitcoin wallets. Though he no longer has his device as it has been stolen by Alice, Bob broadcasts a Guardian Lock message to the Bitcoin blockchain using a pre-signed transaction that he has available outside of the stolen device. Centralized services Bob uses have recognized the distress signal and accounts have been frozen. The self-hosted wallet is Guardian Locked and does not allow UTXOs to be spent. Despite having all the information to gain access to Bob's collective Bitcoin holdings, Alice's attack has not resulted in the loss of any Bitcoin.\n+\n+After the attack is over and the threat has been mitigated, Bob is able to recover access to his wallets by broadcasting a Guardian Unlock transaction with the private key of the Guardian Address.\n+\n+If Bob regains the device, he is able to recover access to his wallet(s) by broadcasting a Guardian Unlock transaction with the private key of the Guardian Address. No UTXOs could be spent while the device was stolen since Bob locked the wallet(s). Now Bob has unlocked the wallet(s) he has the ability to spend UTXOs that were previously locked.\n+\n+#### Public Figure\n+\n+Alice the attacker. Bob the Bitcoin public figure. Bob's public status makes him a target for threat actors. Bob wants a balance between his own personal freedom and security from physical attacks. He keeps a private security team on response near his residence, but lives in his family house with privacy.\n+\n+Alice is an intruder that is attempting to break into the house to demand bitcoin be transferred. A security automation system recognises threat and locks wallets via broadcasting a pre-signed Guardian Lock transaction. This locks Bob's wallets and prevents spending of UTXOs through theft.\n+\n+The security team has also been alerted since they monitor the Guardian Address. They do not know which wallets belong to Bob, maintaining his privacy while keeping his bitcoin safe. His physical security has been protected with the response ensuring his family's safety.\n+\n+### 3. Threat Model and Limitations\n+\n+Guardian Addresses will not protect wallets that are airgapped or otherwise unable to query address state from the latest block height.\n+\n+If a Guardian Address key is lost or compromised, the user MUST rotate to a new Guardian Address. Wallet funds are unaffected since the Guardian cannot spend UTXOs, but monitoring and `Lock/Unlock` state depends on a secure Guardian.\n+\n+This mechanism provides resilience if Guardian keys or pre-signed transactions are not accessible under coercion. It does not protect if attackers demand Guardian material directly or prevent the broadcast of a lock signal.\n+\n+Guardian provides signaling and coordination, not enforceable spending constraints. It is therefore effective in some coercion or theft scenarios, but not all. The following table summarizes the expected impact of the Guardian Address mechanism under various threat scenarios, with and without external monitoring (e.g., security teams, automated alerts, or third-party services actively watching the Guardian Address for signals). External monitoring enhances deterrence by acting as a distress beacon, potentially triggering physical or operational responses that disrupt an attacker's plans.\n+\n+| Threat | Guardian Impact (No External Monitoring) | Guardian Impact (With External Monitoring) |\n+|----------------------------------------|------------------------------------------|------------------------------------------|\n+| **Device Theft** (phone/laptop stolen) | ✅ Lock can be broadcast remotely, rendering the attacker’s copy of the wallet unusable. Funds remain safe until the user broadcasts an Unlock signal. | ✅ Same as without monitoring, plus external responders (e.g., security team) are alerted to the theft via the Lock signal, potentially enabling recovery efforts or tracking. |\n+| **Custodian Account Compromise** | ✅ Custodian may freeze withdrawals or require manual review upon Lock, limiting exposure for centralized accounts. | ✅ Enhanced by external monitoring, as custodians or third parties can act faster (e.g., freezing accounts or notifying authorities) upon seeing the Lock signal in the mempool. |\n+| **Travel in Unsafe Jurisdictions** | ✅ User may proactively Lock funds before exposure, reducing risk of forced spending. Pre-signed transactions enable rapid response without carrying keys. | ✅ Lock signal can alert local or remote responders (e.g., private security), increasing deterrence as attackers may fear intervention, especially in high-risk areas. |\n+| **Opportunistic Mugging** (“hand over your wallet now”) | ⚠️ A Lock may be triggered via voice/automation or pre-signed transaction if the user can safely broadcast it, but success is not guaranteed under immediate threat. Signal Boxes improve chances with diverse activation methods. | ⚠️/✅ External monitoring improves outcomes: the Lock signal could alert nearby responders (e.g., police or security), deterring the attacker if they suspect intervention. Success depends on response speed and attacker awareness. |\n+| **Sustained Coercion** (attacker controls victim) | ❌ Guardian cannot guarantee safety; an attacker may escalate threats to force disclosure of keys or prevent lock broadcast. Physical separation of pre-signed transactions mitigates but doesn’t eliminate risk. | ⚠️ Limited protection, but external monitoring may deter escalation if the attacker knows the Lock signal could trigger a physical response (e.g., police or security team arrival). Effectiveness depends on response speed and attacker’s knowledge of the Guardian. |\n+| **Loss or Theft of Guardian Key** | ⚠️ Wallet remains spendable; signaling is disabled until rotated to a new Guardian Address. A leaked pre-signed Lock transaction may cause a one-time griefing Lock, but is recoverable with an Unlock signal. | ⚠️ Same as without monitoring. External responders may still act on a griefing Lock, causing temporary inconvenience but not affecting fund security. Users must rotate the Guardian Address promptly. |\n+\n+Guardian Addresses should be considered an additional layer of defense against common theft and coercion scenarios. It MUST NOT be relied upon as complete protection against determined physical attacks. Users leveraging external monitoring (e.g., via APIs, watchtowers, or private security integrations) can enhance deterrence, as the Lock signal serves as a distress beacon, but success depends on the speed and reliability of the response mechanism.\n+\n+==Compatibility==\n+\n+The proposal is backwards compatible with existing wallets and Bitcoin nodes as it uses standard address formats and `OP_RETURN`. Non-cooperative wallets will ignore the signalling mechanism. This BIP does not attempt to cryptographically restrict spending conditions at the consensus layer.\n+\n+Vault and covenant constructions (e.g., pre-signed vaults, deleted key covenants, or future consensus changes such as `OP_VAULT` or `OP_CHECKTEMPLATEVERIFY`) provide enforceable spending constraints that protect coins even if signing keys are compromised. These tools are powerful for self custody, but they apply only to UTXOs that have been intentionally placed under covenant rules, and they cannot directly influence how centralized custodians manage user balances.\n+\n+The Guardian Address standard is intended to be complementary to spending rule mechanisms. It can operate across both self-hosted and custodial wallets, providing a uniform way to trigger emergency responses. This BIP requires no changes to Bitcoin consensus and can be deployed immediately by cooperating wallet software and service providers. It can be combined with vault implementations. For example, a Guardian Lock signal could trigger a watchtower or co-signer to broadcast a pre-signed re-vault transaction, or could instruct a custodian to freeze withdrawals pending further verification.\n+\n+In this layered model, spending rules provide strong technical enforcement, while the Guardian Address provides operational coordination and rapid signalling across diverse custody wallets. Spending rules and Guardian Addresses are synergistic in this respect.\n+\n+The minimum protocol signalling payload in an `OP_RETURN` output is 19 vBytes for a `Lock` and 20 vBytes for an `Unlock` in version 1 of the protocol. The transaction is built with 20 vBytes for the canonical identifier and operation, and 20 vBytes for the monotonic nonce. The protocol is lightweight enough to ensure Guardian signalling transactions will be relayed by nodes with a default maximum `OP_RETURN` transaction limit of 40 vBytes, such as some Bitcoin Knots deployments.\n+\n+==Security Considerations==\n+\n+This signalling mechanism is an application layer security feature and does not change consensus rules or script enforcement.\n+\n+A griefing vector exists where an unauthorized third party broadcasts a `Lock` signal from the Guardian Address. This could happen if the griefing attacker gains access to the pre-signed `Lock` signal transaction and broadcasts it to the mempool. However, this lockout is temporary, recoverable, and fully under the user’s control. A monotonic nonce is included in each protocol signal so that even if a pre-signed transaction is obtained and used by an attacker, it may only be used once, limiting the impact of this to a single occurrence. This griefing vector is further mitigated by user education of secure pre-signed transaction storage. The trade off favors wide usability and deployment over strict tamper resistance hardware requirments, since key material is not required to be carried by the user.\n+\n+Wallets will always retain the ability to reset their Guardian state by creating a new transaction with `Lock=false` signed by the same Guardian private key and the incrementing monotonic nonce.\n+\n+Users MUST ensure their pre-signed Lock transactions reference a stable UTXO. Wallets SHOULD warn users if the UTXO required for a pre-signed `Lock` transaction is no longer available.\n+\n+Non-RBF eliminates the ability to replace pre-signed `Lock` transactions with a tampered `OP_RETURN`, which is crucial for the signal integrity and nonce based replay protection.\n+\n+This design intentionally avoids requiring secure enclaves or hardware protected state. Instead, the device that triggers the lock stores only a pre-signed transaction and not signing material, reducing the risk of key material compromise while still enabling `Lock` activation.\n+\n+Users MAY use hardware for managing Guardian key signing with secure storage.\n+\n+A forced signalling attack occurs when an attacker coerces the victim to send an undesired signal. The key material for the Guardian Address must be physically unavailable to the user in a secure location to prevent this scenario.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 234,
      "original_position": 193,
      "commit_id": "4ce0258973040d09c7cd2009869e723c8ef39b94",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How would you compare your proposal to a multisig setup with signing devices in multiple locations?",
      "created_at": "2025-10-06T18:03:49Z",
      "updated_at": "2025-10-06T18:32:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2407751220",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2407751220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 234,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2413895454",
      "pull_request_review_id": 3314866094,
      "id": 2413895454,
      "node_id": "PRRC_kwDOAN28mc6P4R8e",
      "diff_hunk": "@@ -0,0 +1,275 @@\n+<pre>\n+  BIP: TBD\n+  Layer: Applications\n+  Title: Guardian Address Wallet Implementation\n+  Author: Bitcoin Guardian <bitcoinguardian@proton.me>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2025-09-19\n+  License: BSD-3-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This BIP defines the wallet implementation of Guardian Addresses, an application layer signaling mechanism that allows users to remotely lock or unlock their Bitcoin wallets via on-chain OP_RETURN signals. The specification standardizes how wallets configure, monitor, and enforce Guardian signals, ensuring consistent behavior across implementations while remaining backwards compatible with existing wallets and bitcoin nodes.\n+\n+==Motivation==\n+\n+Physical coercion and theft remain persistent risks for bitcoin users. Existing protections such as multisig or vault constructions are effective against key compromise but are limited in scenarios where attackers gain direct access to unlocked devices or custodial accounts. The Guardian Address standard provides a uniform, lightweight signalling channel that wallets can use to respond in real time to distress signals. By enabling rapid wallet lock and coordinated monitoring across both self-hosted and custodial environments, Guardian Addresses add an operational security layer that complements consensus layer protections and enhances user resilience under coercion or theft.\n+\n+==Specification==\n+\n+### 1. Wallet Behavior\n+\n+The wallet Guardian lifecycle has four distinct states as visualized in this finite state machine:\n+\n+![Guardian FSM](bip-XXXX/guardian-fsm.png)\n+\n+For each state, the order of operations MUST be adhered to as defined in this BIP.\n+\n+### No Guardian Configuration\n+\n+This is the state of an unconfigured Guardian Address in a wallet. No Guardian Addresses are monitored for protocol signals. No action will be taken in the wallet if any Guardian Address signals a state change. This is also the behavior of non-cooperating BIP wallets that do not implement the standard, ensuring this specification is kept optional and will not affect the operation of existing wallets or nodes.\n+\n+### Guardian Addition\n+\n+* Wallets MUST allow only one Guardian Address at a time. If one is already configured, wallets MUST require the user to remove it first (see Guardian Removal).\n+* Wallets MUST reject any address that matches a spending address managed by the wallet, to enforce key separation and accidental spending of the Guardian signal UTXO.\n+* Wallets MUST ensure that a Guardian Address maintains at least one reserved UTXO for signalling purposes.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - MUST Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII raw ≤40 bytes. Signals MUST match the grammar defined in BIP-A (note: placeholder until BIP assignment).\n+    - MUST Sort them by nonce in ascending order.\n+    - MUST Reject if no signals exist (address not instantiated) or if the highest nonce signal sets `Lock=true`. This prevents accidental locking of the wallet with a Guardian Address outside of the user's control.\n+    - MUST Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate a potential nonce exhaustion issue).\n+* If valid, store the address state and its current highest nonce locally.\n+* Wallets MUST transition to Guardian Monitoring if these operations complete.\n+\n+### Guardian Monitoring\n+\n+![Guardian Monitoring Substate](bip-XXXX/guardian-monitoring.png)\n+\n+**Guardian Address Polling**\n+\n+* If the previously checked block is not set (the wallet is polling the Guardian Address for the first time) wallets MUST poll the Guardian Address from activation block height 914021 onwards (note: placeholder block height will be updated if the BIP progresses to a future BIP assigned height). This is to prevent wallets from polling the entire chain history for the Guardian Address signals.\n+* The configured Guardian Address MUST be sourced from the same storage as used in the Guardian Addition.\n+* Addresses other than the configured Guardian Address MUST NOT be polled for Guardian Monitoring.\n+* The configured Guardian Address SHOULD be polled every 30 seconds. The lower the polling interval, the faster the wallet can respond to the user triggering the lock of the wallet.\n+* The configured Guardian Address MUST be checked every time a new block is created, even if the block is produced before the polling interval.\n+* The Guardian Address MUST be polled for transactions that are pending in the mempool.\n+* Signal transactions MUST be treated equally whether they are included in a block or still in the mempool.\n+* Wallets MUST warn users if the Guardian balance drops to zero or UTXOs are moved without a valid signal `OP_RETURN`.\n+* Wallets MUST validate the address by querying the blockchain and mempool for signals:\n+    - Collect all valid signals from the Guardian Address with an `OP_RETURN` signal matching the grammar: `guardv1.Lock=(true|false)#<nonce>`, case sensitive, ASCII, ≤40 bytes. Signals MUST match the grammar defined in BIP-A[^1] (note: placeholder until BIP assignment).\n+    - Sort them by nonce in ascending order.\n+    - Reject if the highest nonce is 0 (invalid instantiation) or exceeds a practical high value (e.g., >65,535; wallets SHOULD alert users for high values to indicate potential nonce exhaustion issues).\n+* Wallets MUST store the current block as the previously checked block. This optimizes for speed at wallet startup.\n+* Wallets MUST transition to Guardian State Evaluation if signals present.\n+* Wallets MUST wait for the polling interval before checking for new signals.\n+\n+### Guardian State Evaluation\n+\n+**Nonce Conflict Resolution**\n+\n+Guardian signals use a monotonic nonce to prevent replay attacks and ensure deterministic evaluation of the Guardian state. Wallets MUST resolve conflicts between signals using the following rules:\n+\n+**Monotonicity**\n+\n+* Nonces MUST be strictly greater than the last observed valid nonce.\n+* Wallets MUST ignore any signal with a nonce less than or equal to the locally stored nonce of the configured Guardian Address.\n+* Wallets MUST warn the user if a stale nonce is observed.\n+\n+**Duplicate Nonces**\n+\n+* If two signals share the same nonce and are both confirmed on-chain, the transaction included at the earliest block height MUST take precedence.\n+* If two signals share the same nonce and are both unconfirmed in the mempool, wallets MUST treat the first seen transaction (by mempool arrival time) as canonical until confirmation.\n+* Once one of the duplicates is confirmed, the confirmed transaction MUST override any unconfirmed duplicate. Local storage MUST be updated accordingly.\n+* Wallets MUST warn the user if duplicate nonce usage is detected with different payloads.\n+\n+**Invalid Nonces**\n+\n+* Nonces are 32 bit unsigned integers (0 ≤ nonce ≤ 2^32-1). Values outside this range MUST be rejected and MUST warn the user.\n+* Wallets SHOULD alert the user if the nonce exceeds a high value (e.g., 65,535) to indicate possible nonce exhaustion or misconfiguration.\n+\n+**Mempool Conditions**\n+\n+* Wallets MUST treat a signal as effective once it is visible in the mempool, without waiting for block inclusion.\n+* If such a signal later disappears (due to eviction, replacement, or block reorg), wallets MUST retain the resulting state until a higher nonce signal is observed. This ensures wallets are locked in adversarial mempool conditions. Store a local `signal_observed` record that includes `txid`, `nonce`, `observed_time`, and `state` (`Lock`/`Unlock`) so users can audit why the wallet Guardian state has changed.\n+* Wallets MUST NOT revert to an earlier state purely because the mempool transaction disappeared.\n+* To mitigate censorship, users SHOULD broadcast signals to multiple mining pools.\n+\n+**Latest State Selection**\n+\n+* At any given evaluation, the signal with the highest valid nonce MUST be interpreted as the latest Guardian state, regardless of confirmation status.\n+* Signals MUST be processed in ascending nonce order to ensure sequential evaluation.\n+* If there is a state delta between the received signal and local storage, wallets MUST transition with the highest nonce signal to the Guardian Lock Change substate.\n+* If there are no state changes, wallets MUST transition to Guardian Address Polling substate.\n+\n+### Guardian Lock Change\n+\n+* Wallets MUST update the Guardian lock state in local storage with the signal presented.\n+* Wallets MUST update the latest used Guardian nonce in local storage with the signal presented.\n+* Wallets MUST update the global Guardian lock state user interface and allow UTXOs in the wallet to be spent according to lock state. If the lock state is true, wallets MUST NOT allow UTXOs in the wallet to be spent.\n+* Wallets MUST NOT automatically unlock after any time period or modify state in local storage from sources other than signals from the configured Guardian Address.\n+* Wallets MAY provide the user a pathway to view funds and history, but MUST NOT broadcast new transactions if Guardian Locked.\n+* Wallets MUST transition into the Guardian Address Polling substate after the state change.\n+\n+### Guardian Removal\n+\n+* The Guardian Monitoring substate MUST currently be Guardian Address Polling.\n+* Wallets MUST validate the existing configured Guardian Address in local storage is unlocked.\n+* If the Guardian Address state is locked, wallets MUST NOT allow the removal of the Guardian configuration.\n+\n+### 2. Attack Scenarios\n+\n+#### Device Theft\n+\n+Alice the attacker. Bob the Bitcoin user. Alice coerces Bob under duress to login to his device and applications. Bob's device contains a self-hosted wallet, a Bitcoin exchange application, access to Bob's e-mails, and a two-factor authentication application. After forcing Bob to unlock the device and provide access, Alice takes the device and begins to attempt the Bitcoin theft.\n+\n+Prior to the attack, Bob configured a Guardian Address across all of his Bitcoin wallets. Though he no longer has his device as it has been stolen by Alice, Bob broadcasts a Guardian Lock message to the Bitcoin blockchain using a pre-signed transaction that he has available outside of the stolen device. Centralized services Bob uses have recognized the distress signal and accounts have been frozen. The self-hosted wallet is Guardian Locked and does not allow UTXOs to be spent. Despite having all the information to gain access to Bob's collective Bitcoin holdings, Alice's attack has not resulted in the loss of any Bitcoin.",
      "path": "bip-guardian-wallet.mediawiki",
      "position": 150,
      "original_position": 130,
      "commit_id": "4ce0258973040d09c7cd2009869e723c8ef39b94",
      "original_commit_id": "8df3a3fa704a3520c252cf9c88e479c5af89a1c4",
      "in_reply_to_id": 2407732173,
      "user": {
        "login": "bitcoinguardian",
        "id": 215255061,
        "node_id": "U_kgDODNSIFQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/215255061?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoinguardian",
        "html_url": "https://github.com/bitcoinguardian",
        "followers_url": "https://api.github.com/users/bitcoinguardian/followers",
        "following_url": "https://api.github.com/users/bitcoinguardian/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoinguardian/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoinguardian/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoinguardian/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoinguardian/orgs",
        "repos_url": "https://api.github.com/users/bitcoinguardian/repos",
        "events_url": "https://api.github.com/users/bitcoinguardian/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoinguardian/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I acknowledge that the scenario in the BIP may seem contrived, as it simplifies a complex threat model for illustrative purposes. The example was inspired by Satoshi Nakamoto’s philosophical question from August 2010: \"Imagine if gold turned to lead when stolen. If the thief gives it back, it turns to gold again.\" (https://satoshi.nakamotoinstitute.org/posts/bitcointalk/340/). While the Guardian Address protocol operates at the wallet/application layer rather than consensus, it aims to echo this concept by enabling a self-sovereign kill switch & emergency signal to protect assets across diverse custody environments.\r\n\r\nTo address your specific concern about the scenario’s plausibility (Alice releasing Bob before sending the transaction), the intent was to model a situation where temporary access to an unlocked device occurs, such as a stolen phone or brief duress, followed by the victim’s ability to act quickly. I’ve elaborated on this in my detailed response (https://github.com/bitcoin/bips/pull/1972#issuecomment-3375484894), but I’m happy to revise the scenario to better reflect realistic threat models, such as pickpocketing or remote session compromise, if that would clarify the BIP's motivation. ",
      "created_at": "2025-10-08T13:37:37Z",
      "updated_at": "2025-10-08T13:56:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1972#discussion_r2413895454",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2413895454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1972"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 150,
      "original_line": 130,
      "side": "RIGHT"
    }
  ]
}