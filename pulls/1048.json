{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1048",
    "id": 543527566,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTQzNTI3NTY2",
    "html_url": "https://github.com/bitcoin/bips/pull/1048",
    "diff_url": "https://github.com/bitcoin/bips/pull/1048.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1048.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1048/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1048/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1048/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/c624414119573e41466dcf407b3c53507624678f",
    "number": 1048,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "bip322: (another) significant overhaul",
    "user": {
      "login": "apoelstra",
      "id": 1351933,
      "node_id": "MDQ6VXNlcjEzNTE5MzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/apoelstra",
      "html_url": "https://github.com/apoelstra",
      "followers_url": "https://api.github.com/users/apoelstra/followers",
      "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
      "organizations_url": "https://api.github.com/users/apoelstra/orgs",
      "repos_url": "https://api.github.com/users/apoelstra/repos",
      "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/apoelstra/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Changes the validation rules to always require (script) standardness checks, except for checking NOPs and version numbers, where incorrect values result in \"inconclusive\" rather than \"invalid\". Allow validators to also return \"inconclusive\" when they encounter a script that they're unable to interpret.\r\n\r\nThis makes it possible to write a BIP-322 validator using Miniscript, and to write (say) a p2pkwh-only validator while remaining within spec. Both should encourage adoption.\r\n\r\nAlso removed the `to_spend` transaction from the wire serialization because it is a pure function of the address and message.\r\n\r\nMailing list discussion: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/thread.html",
    "labels": [],
    "created_at": "2020-12-21T14:49:53Z",
    "updated_at": "2021-03-16T01:58:33Z",
    "closed_at": "2021-02-03T23:01:15Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-02-03T23:01:15Z",
    "merge_commit_sha": "53b79a6f7824acac2f041d6e84a36e306515dd86",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "apoelstra:2020-12--bip322-overhaul",
      "ref": "2020-12--bip322-overhaul",
      "sha": "c624414119573e41466dcf407b3c53507624678f",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 23374783,
        "node_id": "MDEwOlJlcG9zaXRvcnkyMzM3NDc4Mw==",
        "name": "bips",
        "full_name": "apoelstra/bips",
        "owner": {
          "login": "apoelstra",
          "id": 1351933,
          "node_id": "MDQ6VXNlcjEzNTE5MzM=",
          "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/apoelstra",
          "html_url": "https://github.com/apoelstra",
          "followers_url": "https://api.github.com/users/apoelstra/followers",
          "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
          "organizations_url": "https://api.github.com/users/apoelstra/orgs",
          "repos_url": "https://api.github.com/users/apoelstra/repos",
          "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/apoelstra/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/apoelstra/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/apoelstra/bips",
        "archive_url": "https://api.github.com/repos/apoelstra/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/apoelstra/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/apoelstra/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/apoelstra/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/apoelstra/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/apoelstra/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/apoelstra/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/apoelstra/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/apoelstra/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/apoelstra/bips/contributors",
        "deployments_url": "https://api.github.com/repos/apoelstra/bips/deployments",
        "downloads_url": "https://api.github.com/repos/apoelstra/bips/downloads",
        "events_url": "https://api.github.com/repos/apoelstra/bips/events",
        "forks_url": "https://api.github.com/repos/apoelstra/bips/forks",
        "git_commits_url": "https://api.github.com/repos/apoelstra/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/apoelstra/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/apoelstra/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/apoelstra/bips.git",
        "issue_comment_url": "https://api.github.com/repos/apoelstra/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/apoelstra/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/apoelstra/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/apoelstra/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/apoelstra/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/apoelstra/bips/languages",
        "merges_url": "https://api.github.com/repos/apoelstra/bips/merges",
        "milestones_url": "https://api.github.com/repos/apoelstra/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/apoelstra/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/apoelstra/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/apoelstra/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:apoelstra/bips.git",
        "stargazers_url": "https://api.github.com/repos/apoelstra/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/apoelstra/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/apoelstra/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/apoelstra/bips/subscription",
        "tags_url": "https://api.github.com/repos/apoelstra/bips/tags",
        "teams_url": "https://api.github.com/repos/apoelstra/bips/teams",
        "trees_url": "https://api.github.com/repos/apoelstra/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/apoelstra/bips.git",
        "hooks_url": "https://api.github.com/repos/apoelstra/bips/hooks",
        "svn_url": "https://github.com/apoelstra/bips",
        "homepage": "bitcoin.org",
        "language": "Python",
        "forks_count": 0,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 8985,
        "default_branch": "master",
        "open_issues_count": 1,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-03-30T12:31:44Z",
        "created_at": "2014-08-27T02:52:55Z",
        "updated_at": "2023-02-17T06:52:36Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "cf0b529e78860fa2d4fe77944091aa98c5e04624",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5178,
        "stargazers_count": 8116,
        "watchers_count": 8116,
        "size": 13694,
        "default_branch": "master",
        "open_issues_count": 115,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-08T12:03:37Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-06-12T10:53:19Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 77,
    "deletions": 82,
    "changed_files": 1,
    "commits": 4,
    "review_comments": 15,
    "comments": 15
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 4137176509,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDEzNzE3NjUwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4137176509",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-21T18:35:43Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6Zjc3ODA5OGRlYmZiYzMxYTRjOThkYzU2OWZjOWNkNDA3YjY1NDA3YQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f778098debfbc31a4c98dc569fc9cd407b65407a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f778098debfbc31a4c98dc569fc9cd407b65407a",
      "tree": {
        "sha": "bc1e149df83a741ba203ed1c78812306ecdbc385",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bc1e149df83a741ba203ed1c78812306ecdbc385"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7e13d23d4339e5704f3c12d88704ee7520d16149",
          "sha": "7e13d23d4339e5704f3c12d88704ee7520d16149",
          "html_url": "https://github.com/bitcoin/bips/commit/7e13d23d4339e5704f3c12d88704ee7520d16149"
        }
      ],
      "message": "bip-0322: replace motivation, add myself to the \"thanks to\" list",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2020-12-23T15:39:45Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2020-12-23T15:39:45Z"
      },
      "sha": "f778098debfbc31a4c98dc569fc9cd407b65407a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZGJiODFiMzY1MjVhYWJmNGFlNWQwYWQwMTViNDg2NTQ5NGFlZDMzZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dbb81b36525aabf4ae5d0ad015b4865494aed33e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/dbb81b36525aabf4ae5d0ad015b4865494aed33e",
      "tree": {
        "sha": "bf3181885d1395c4465637392c16988fedfe8fca",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bf3181885d1395c4465637392c16988fedfe8fca"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f778098debfbc31a4c98dc569fc9cd407b65407a",
          "sha": "f778098debfbc31a4c98dc569fc9cd407b65407a",
          "html_url": "https://github.com/bitcoin/bips/commit/f778098debfbc31a4c98dc569fc9cd407b65407a"
        }
      ],
      "message": "bip-0322: move \"legacy\" section up, separate \"proof of funds\", summarize the signature types",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2020-12-23T15:45:59Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2020-12-23T15:42:41Z"
      },
      "sha": "dbb81b36525aabf4ae5d0ad015b4865494aed33e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6OWUxYmVlZjZhY2FiZmZkNGE1M2ZmMTM5NmI0Y2I0NTM2MTVkZTE5Zg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9e1beef6acabffd4a53ff1396b4cb453615de19f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9e1beef6acabffd4a53ff1396b4cb453615de19f",
      "tree": {
        "sha": "87ca4214e4ee312610dc87a75b1416507e43bb7d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/87ca4214e4ee312610dc87a75b1416507e43bb7d"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dbb81b36525aabf4ae5d0ad015b4865494aed33e",
          "sha": "dbb81b36525aabf4ae5d0ad015b4865494aed33e",
          "html_url": "https://github.com/bitcoin/bips/commit/dbb81b36525aabf4ae5d0ad015b4865494aed33e"
        }
      ],
      "message": "bip-0322: overhaul/rewrite verification rules",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2020-12-23T15:47:27Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2020-12-23T15:47:27Z"
      },
      "sha": "9e1beef6acabffd4a53ff1396b4cb453615de19f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzYyNDQxNDExOTU3M2U0MTQ2NmRjZjQwN2IzYzUzNTA3NjI0Njc4Zg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c624414119573e41466dcf407b3c53507624678f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c624414119573e41466dcf407b3c53507624678f",
      "tree": {
        "sha": "9c7953cf74bdf892af1664dcf8f32d8406e6dca9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9c7953cf74bdf892af1664dcf8f32d8406e6dca9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9e1beef6acabffd4a53ff1396b4cb453615de19f",
          "sha": "9e1beef6acabffd4a53ff1396b4cb453615de19f",
          "html_url": "https://github.com/bitcoin/bips/commit/9e1beef6acabffd4a53ff1396b4cb453615de19f"
        }
      ],
      "message": "bip-0322: remove the 'to_spend' transaction from serialization",
      "committer": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2020-12-23T15:48:08Z"
      },
      "author": {
        "name": "Andrew Poelstra",
        "email": "apoelstra@wpsoftware.net",
        "date": "2020-12-23T15:35:47Z"
      },
      "sha": "c624414119573e41466dcf407b3c53507624678f"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4144675995,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDE0NDY3NTk5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4144675995",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-23T15:49:21Z"
    },
    {
      "event": "reviewed",
      "id": 558310903,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MzEwOTAz",
      "url": null,
      "actor": null,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#pullrequestreview-558310903",
      "submitted_at": "2020-12-24T02:53:37Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
    },
    {
      "event": "commented",
      "id": 750816534,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDgxNjUzNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/750816534",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T09:10:21Z",
      "updated_at": "2020-12-24T09:47:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "The proposal requires the validator to be able to detect violations of standardness flags (`MINIMALDATA`, `STRICTENC`, `NULLFAIL`, etc). I thought that validators will be able to do verification by using `bitcoinconsensus` library. The problem is that the library explicitly disallows any standardness flags to be passed to it, only the flags related to consensus is allowed.\r\n\r\nWhile this issue is not directly related to the BIP essense, I think it makes implementation significantly harder, because now the implementors will need to either:\r\n\r\n1. Have their own script interpreter, that may happen to differ with the one from Core;\r\n2. Pluck script interpreter code out of Core into their own project, and not use libbitcoinconsensus (like `libbitcoin-consensus` does);\r\n3. Have their own interpreter, but cross-check with libbitcoinconsensus for consensus violations (still might differ from Core in standardness-related code);\r\n4. Use Core via rpc\r\n\r\nI think all these options may happen to be unsatisfactory for a standalone project due to added maintenance or dependency burden.\r\n\r\nThe inclusion of these checks into this BIP says that probably these rules *are* significant, not likely to change in the future, and it would be good to have an access to checking them with the code from Core, but without depending on whole bitcoind\r\n\r\nMaybe there should be an API to do standardness checks in libbitcoinconsensus, just as a different API function.\r\n\r\nRelated Core issue: https://github.com/bitcoin/bitcoin/issues/5779 and commit: https://github.com/bitcoin/bitcoin/commit/5ca8ef299a08aae91d5061750533694b58d810b2",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-750816534",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 750989081,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MDk4OTA4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/750989081",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T20:25:56Z",
      "updated_at": "2020-12-24T20:27:18Z",
      "author_association": "MEMBER",
      "body": "@dgpv I think this is exactly why @apoelstra is suggesting to permit validators to only implement a subset of script, and report inconclusive for others. This means a much smaller scope reimplementation is possible.\r\n\r\nYou do have a good point though, that the inclusion of these rules in the BIP make them sort of canonical. Perhaps there is a way to see it differently. It is not so much that such scripts are not relayed on the network, or even that they're intended for future extensions that matters - it is the fact that they are all effectively \"anyone can spend\" (as far as the verifier knows) - and thus a signature can't really have any meaning.\r\n\r\nCould the rule just be that any script that doesn't perform any signature check at all, is \"inconclusive\"? That's very concrete, not tied to policy on the network, and perhaps easier to have exported from libbitcoinconsensus too as it doesn't incur the risk of making people building things that depend on the network's policy rules.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-750989081",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "mentioned",
      "id": 4148006839,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE0ODAwNjgzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4148006839",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T20:25:57Z"
    },
    {
      "event": "subscribed",
      "id": 4148006841,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNDgwMDY4NDE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4148006841",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T20:25:57Z"
    },
    {
      "event": "mentioned",
      "id": 4148006842,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE0ODAwNjg0Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4148006842",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T20:25:57Z"
    },
    {
      "event": "subscribed",
      "id": 4148006843,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNDgwMDY4NDM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4148006843",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T20:25:57Z"
    },
    {
      "event": "commented",
      "id": 751132197,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTEzMjE5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751132197",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-24T23:59:36Z",
      "updated_at": "2020-12-24T23:59:36Z",
      "author_association": "CONTRIBUTOR",
      "body": "I agree that these checks are difficult to implement, but without them every BIP322 signature will be extremely malleable.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751132197",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751132318,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTEzMjMxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751132318",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T00:01:29Z",
      "updated_at": "2020-12-25T00:01:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "But I also agree that these rules are \"significant\", in the sense that in a perfect world they would have always been part of consensus, I can't imagine any reason they would ever be relaxed (indeed, in Taproot I think they have all made it into consensus), and I wish that libbitcoinconsensus exposed a way to enforce them. But that discussion would be much wider scope than this BIP..",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751132318",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751187872,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTE4Nzg3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751187872",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T06:42:25Z",
      "updated_at": "2020-12-25T06:45:33Z",
      "author_association": "CONTRIBUTOR",
      "body": "> I agree that these checks are difficult to implement, but without them every BIP322 signature will be extremely malleable.\r\n\r\nThey are difficult to implement and at the same time required by the spec (\"`If any of the above steps failed, the validator should stop and output the ''invalid'' state.`\"), making it difficult for implementation to conform to the spec at all. ",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751187872",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751265712,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTI2NTcxMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751265712",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T15:55:03Z",
      "updated_at": "2020-12-25T15:55:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "Well, for what it's worth, these rules are very easy to enforce for the common types of signatures that incomplete validators are likely to template-match on: for p2pkwh signatures it requires your scriptSig be empty and witness stack consist of a pubkey and valid signature and nothing else, etc.\r\n\r\nSo ironically, I think deliberately incomplete implementations will have an okay time of this, while people who try to implement complete validators will not.\r\n\r\nSemi-relatedly, I just realized that I dropped NULLDUMMY (extra CHECKMULTISIG stack item needs to be the empty push).",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751265712",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751265817,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTI2NTgxNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751265817",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T15:55:41Z",
      "updated_at": "2020-12-25T15:55:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "I wonder if, assuming this PR is accepted, Core would accept a PR to add a flag to libbitcoinconsensus specifically for BIP322 validation.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751265817",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751266800,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTI2NjgwMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751266800",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T16:05:08Z",
      "updated_at": "2020-12-25T16:05:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "> a flag to libbitcoinconsensus specifically for BIP322 validation.\r\n\r\nor a separate function, `verify_script_bip322` or the like, that could also take a version of bip322 as a paremeter, and set the flags for `VerifyScript` accordingly. This way, if the bip would ever be updated with new required flags, the version of the bip will need to be bumped and the `verify_script_bip322` function would recognize the new version and would choose the right combination of flags",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751266800",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751267408,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTI2NzQwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751267408",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T16:11:45Z",
      "updated_at": "2020-12-25T16:19:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "That assumes that the \"version of the combination of flags\" would be the part of the bip, of course. There might not ever be the need for this, but what if there are ? What if the need to enforce certain new flag will emerge ?\r\n\r\nOf course such version wouldn't be needed if the caller could just specify their combination of flags, and then would update their code after new flags are included in the BIP",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751267408",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751269332,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTI2OTMzMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751269332",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T16:32:19Z",
      "updated_at": "2020-12-25T16:32:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "What I wanted to say, if the \"bip322-related\" flags are bundled inside libbitcoinconsensus via a single \"bip322\" flag or inside a \"bip322-specific\" function, there could be a potential problem between the software that expects to verify with newer set of flags, and the library that bundles the old set of flags. Of course libbitcoinconsensus has an api version, but is the single added flag a good reason to bump it ? So either the flags shouldn't be bundled, or the bundling itself need to be versioned.\r\n\r\n(please excuse the slightly off-topic discussion, but since it may influence the BIP itself (adding version/revision ?), it may be relevant) ",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751269332",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751279497,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTI3OTQ5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751279497",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-25T18:25:32Z",
      "updated_at": "2020-12-25T18:25:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "Agreed on all counts.\r\n\r\nI think a \"reference implementation\" of this BIP should include (a) a patch to Bitcoin Core which adds sign/verify RPCs; (b) a patch to libbitcoinconsensus to add a verify_script_322 method; (c) a small C program which uses libbitcoinconsensus to sign and verify a message.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751279497",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 751453230,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MTQ1MzIzMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/751453230",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-27T10:58:34Z",
      "updated_at": "2020-12-27T10:58:34Z",
      "author_association": "MEMBER",
      "body": "Sounds good to me!",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-751453230",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "commented",
      "id": 753227966,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc1MzIyNzk2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/753227966",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T23:58:54Z",
      "updated_at": "2020-12-31T23:58:54Z",
      "author_association": "MEMBER",
      "body": "@luke-jr This is good to merge. It's been discussed on the ML and comments have been addressed.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-753227966",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "mentioned",
      "id": 4160481250,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDE2MDQ4MTI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4160481250",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T23:58:54Z"
    },
    {
      "event": "subscribed",
      "id": 4160481251,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQxNjA0ODEyNTE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4160481251",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-12-31T23:58:54Z"
    },
    {
      "event": "reviewed",
      "id": 560590950,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTkwOTUw",
      "url": null,
      "actor": null,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Partial review (ran out of time).",
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#pullrequestreview-560590950",
      "submitted_at": "2021-01-01T15:02:36Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
    },
    {
      "event": "reviewed",
      "id": 560596903,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwNTk2OTAz",
      "url": null,
      "actor": null,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "A couple comments and some nits.",
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#pullrequestreview-560596903",
      "submitted_at": "2021-01-01T18:13:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
    },
    {
      "event": "commented",
      "id": 770647818,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MDY0NzgxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/770647818",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T07:49:49Z",
      "updated_at": "2021-02-01T07:49:49Z",
      "author_association": "MEMBER",
      "body": "@apoelstra Did you get a chance to address feedback on this? Would love to get this merged so we avoid multiple specifications for too long (PR vs master).",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-770647818",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "mentioned",
      "id": 4272032314,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI3MjAzMjMxNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4272032314",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T07:49:49Z"
    },
    {
      "event": "subscribed",
      "id": 4272032323,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNzIwMzIzMjM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4272032323",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T07:49:49Z"
    },
    {
      "event": "merged",
      "id": 4287966463,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDI4Nzk2NjQ2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4287966463",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "53b79a6f7824acac2f041d6e84a36e306515dd86",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/53b79a6f7824acac2f041d6e84a36e306515dd86",
      "created_at": "2021-02-03T23:01:15Z"
    },
    {
      "event": "closed",
      "id": 4287966474,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDI4Nzk2NjQ3NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4287966474",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-03T23:01:16Z"
    },
    {
      "event": "commented",
      "id": 772937053,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MjkzNzA1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/772937053",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-04T00:43:35Z",
      "updated_at": "2021-02-04T00:43:35Z",
      "author_association": "CONTRIBUTOR",
      "body": "I did not but I'll try to open a followup PR in the next week.",
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#issuecomment-772937053",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1048"
    },
    {
      "event": "head_ref_deleted",
      "id": 4288274322,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQ0Mjg4Mjc0MzIy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4288274322",
      "actor": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-04T00:43:38Z"
    },
    {
      "event": "reviewed",
      "id": 612789782,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjEyNzg5Nzgy",
      "url": null,
      "actor": null,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1048#pullrequestreview-612789782",
      "submitted_at": "2021-03-16T01:58:33Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/548357690",
      "pull_request_review_id": 558310903,
      "id": 548357690,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM1NzY5MA==",
      "diff_hunk": "@@ -41,10 +61,9 @@ The \"to_spend\" transaction is:\n     vout[0].nValue = 0\n     vout[0].scriptPubKey = message_challenge\n \n-where message_hash is a BIP340-tagged hash of the message, i.e. sha256_tag(m), where tag = \"BIP0322-signed-message\", and message_challenge is the to be proven (public) key script.\n-For proving funds, message_challenge shall be simply OP_TRUE.\n+where <code>message_hash</code> is a BIP340-tagged hash of the message, i.e. sha256_tag(m), where tag = <code>BIP0322-signed-message</code>, and <code>message_challenge</code> is the to be proven (public) key script.",
      "path": "bip-0322.mediawiki",
      "position": 54,
      "original_position": 54,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nwhere <code>message_hash</code> is a BIP340-tagged hash of the message, i.e. sha256_tag(m), where tag = <code>\"BIP0322-signed-message\"</code>, and <code>message_challenge</code> is the to be proven (public) key script.\r\n```\r\n\r\n(It's a string literal, so I think quotes are good)",
      "created_at": "2020-12-24T02:46:41Z",
      "updated_at": "2020-12-24T02:53:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r548357690",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/548357690"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/548358670",
      "pull_request_review_id": 558310903,
      "id": 548358670,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM1ODY3MA==",
      "diff_hunk": "@@ -55,61 +74,69 @@ The \"to_sign\" transaction is:\n     vout[0].nValue = 0\n     vout[0].scriptPubKey = OP_RETURN\n \n-When a proof of funds is being created, additional inputs should be included for virtually spending transaction outputs of desired value.\n+A full signature consists of the base64-encoding of the <code>to_sign</code> transaction in standard network serialisation.\n \n-* All signatures must use the SIGHASH_ALL flag.\n-* The proof is considered valid, inconclusive, or invalid based on whether the to_sign transaction is a valid spend of the to_spend transaction or not, according to the rules specified in the \"Consensus and standard flags\" section below.\n-* Proofs of funds may be encumbered with the in_future flag, according to the rules specified in the \"Locktime and Sequence\" section below, in which case we refer to the result in text form as \"valid_in_future\", \"inconclusive_in_future\", etc.\n+=== Full (Proof of Funds) ===\n \n-Proofs of funds are the base64-encoding of the to_spend and to_sign transactions concatenated in standard network serialisation, and proofs without additional inputs or time locks (simple proofs) are the base64-encoding of the to_sign script witness.\n+A signer may construct a proof of funds, demonstrating control of a set of UTXOs, by constructing a full signature as above, with the following modifications.\n \n-A validator must verify it is valid and meets the description of virtual transactions as specified above. See \"Validation\" below.\n+* <code>message_challenge</code> is unused and shall be set to <code>OP_TRUE</code>\n+* Similarly, <code>message_signature</code> is then empty.\n+* All outputs that the signer wishes to demonstrate control of are included as additional inputs of <code>to_sign</code>, and their witness and scriptSig data should be set as though these outputs were actually being spent.\n \n-=== Validation ===\n+Unlike an ordinary signature, validators of a proof of funds need access to the current UTXO set, to learn that the claimed inputs exist on the blockchain, and to learn their scriptPubKeys.\n \n-To validate a simple proof, the following steps must be taken:\n+== Detailed Specification ==\n \n-# construct the to_spend and to_sign transactions, based on the specification above\n-# check the signature using consensus rules, then upgradable rules\n+For all signature types, except legacy, the <code>to_spend</code> and <code>to_sign</code> transactions must be valid transactions which pass all consensus checks, except of course that the output with prevout <code>000...000:FFFFFFFF</code> does not exist.\n \n-To validate a proof of funds, the following steps must be taken:\n+=== Verification ===\n \n-# deserialize the to_spend and to_sign transactions from the proof, and fail if the proof contains extraneous bytes\n-# verify that the to_sign transaction uses all inputs covered by the proof of funds, exactly once\n-# reconstruct the to_spend' and to_sign' transactions, based on the specification above, copying the version, lock time, and sequence values\n-# verify that to_spend = to_spend', that to_sign has at least 1 input, has exactly 1 output, and that to_sign.vin[0] = to_sign'.vin[0]\n-# set the \"in_future\" flag if the transaction's lock time is in the future according to consensus rules\n-# establish a \"coins map\", a mapping of outpoints (hash, vout) to coins (scriptPubKey, amount), initialized to coins_map(to_spend.txid, 0) = (to_spend.vout[0], 0)\n-# for each proof of fund input, set the corresponding values in the coins map; abort if the input cannot be found\n-# check the signature of each input using consensus rules, then upgradable rules\n+A validator is given as input an address ''A'' (which may be omitted in a proof-of-funds), signature ''s'' and message ''m'', and outputs one of three states\n+* ''valid at time T and age S'' indicates that the signature has set timelocks but is otherwise valid\n+* ''inconclusive'' means the validator was unable to check the scripts\n+* ''invalid'' means that some check failed\n \n-== Legacy format ==\n+==== Verification Process ====\n \n-New proofs should use the new format for all invoice address formats, including P2PKH.\n+Validation consists of the following steps:\n \n-The legacy format MAY be used, but must be restricted to the legacy P2PKH invoice address format.\n+# Basic validation\n+## Compute the transaction <code>to_spend</code> from ''m'' and ''A''\n+## Decode ''s'' as the transaction <code>to_sign</code>\n+## If ''s'' was a full transaction, confirm all fields are set as specified above; in particular that\n+##* <code>to_sign</code> has at least one input and its first input spends the output of </code>to_spend</code>\n+##* <code>to_sign</code> has exactly one output, as specified above\n+## Confirm that the two transactions together satisfy all consensus rules, except for <code>to_spend</code>'s missing input, and except that ''nSequence'' of <code>to_sign</code>'s first input and ''nLockTime'' of <code>to_sign</code> are not checked.\n+# (Optional) If the validator does not have a full script interpreter, it should check that it understands all scripts being satisfied. If not, it should stop here and output ''inconclusive''.\n+# Check the **required rules**:\n+## All signatures must use the SIGHASH_ALL flag.\n+## The use of <code>CODESEPARATOR</code> or <code>FindAndDelete</code> is forbidden.\n+## <code>LOW_S</code>, <code>STRICTENC</code> and <code>NULLFAIL</code>: valid ECDSA signatures must be strictly DER-encoded and have a low-S value; invalid ECDSA signature must be the empty push",
      "path": "bip-0322.mediawiki",
      "position": 125,
      "original_position": 125,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n## <code>LOW_S</code>, <code>STRICTENC</code> and <code>NULLFAIL</code>: valid ECDSA signatures must be strictly DER-encoded and have a low-S value; invalid ECDSA signatures must be the empty push\r\n```",
      "created_at": "2020-12-24T02:51:18Z",
      "updated_at": "2020-12-24T02:53:37Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r548358670",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/548358670"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 115,
      "original_line": 115,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550776233",
      "pull_request_review_id": 560590950,
      "id": 550776233,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc3NjIzMw==",
      "diff_hunk": "@@ -17,19 +17,39 @@ A standard for interoperable signed messages based on the Bitcoin Script format,\n \n == Motivation ==\n \n-The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This approach minimizes the burden for implementers as message signing can be expected to be part of a library or project that includes Bitcoin Script interpreters already.\n+The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This ensures that any coins, no matter what script they are controlled by, can in-principle be signed for. For easy interoperability with existing signing hardware, we also define a signature message format which resembles a Bitcoin transaction (except that it contains an invalid input, so it cannot be spent on any real network).\n \n-Additionally, the current message signing only proves that the message has been committed to by the recipient of a given invoice address.\n-It does not prove anything about the invoice address itself, nor that the signer has access to the private keys used to implement this invoice.\n-More importantly, it does not prove ownership nor access to any funds, even if the same private key would be a valid signer for spending them - and this is a commonly desired use case.\n+Additionally, the current message signature format uses ECDSA signatures which do not commit to the public key, meaning that they do not actually prove knowledge of any secret keys. (Indeed, valid signatures can be tweaked by 3rd parties to become valid signatures on certain related keys.)\n \n-== Specification ==\n+Ultimately no message signing protocol can actually prove control of funds, both because a signature is obsolete as soon as it is created, and because the possessor of a secret key may be willing to sign messages on others' behalf even if it would not sign actual transactions. No signmessage protocol can fix these limitations.\n \n-This BIP follows the specification of BIP-325 challenges and solutions (see Signet comparison below).\n+== Types of Signatures ==\n \n-Let there be two virtual transactions to_spend and to_sign.\n+This BIP specifies three formats for signing messages: ''legacy'', ''simple'' and ''full''. Additionally, a variant of the ''full'' format can be used to demonstrate control over a set of UTXOs.\n \n-The \"to_spend\" transaction is:\n+=== Legacy ===\n+\n+New proofs should use the new format for all invoice address formats, including P2PKH.",
      "path": "bip-0322.mediawiki",
      "position": 24,
      "original_position": 24,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This recommendation seems to needlessly create compatibility issues similar to those in @kallewoof's original PR for generic signmessage: https://github.com/bitcoin/bitcoin/pull/16440#pullrequestreview-267525062\r\n\r\nIf the default is to create legacy proofs for P2PKH, then it's possible to implement BIP322 as a simple backwards-compatible extension to existing interfaces like Bitcoin Core's `signmessage` RPC and GUI window.  But, if devs adopt the recommendation here to default to using the new proof format, then they'll need to deprecate the old RPC default for P2PKH output and add a checkbox to the GUI for legacy vs new (like is done for selecting between legacy/bech32 addresses).\r\n\r\n[Edited to correct attribution]",
      "created_at": "2021-01-01T15:01:22Z",
      "updated_at": "2021-01-01T16:47:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r550776233",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550776233"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550779224",
      "pull_request_review_id": 560592366,
      "id": 550779224,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc3OTIyNA==",
      "diff_hunk": "@@ -17,19 +17,39 @@ A standard for interoperable signed messages based on the Bitcoin Script format,\n \n == Motivation ==\n \n-The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This approach minimizes the burden for implementers as message signing can be expected to be part of a library or project that includes Bitcoin Script interpreters already.\n+The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This ensures that any coins, no matter what script they are controlled by, can in-principle be signed for. For easy interoperability with existing signing hardware, we also define a signature message format which resembles a Bitcoin transaction (except that it contains an invalid input, so it cannot be spent on any real network).\n \n-Additionally, the current message signing only proves that the message has been committed to by the recipient of a given invoice address.\n-It does not prove anything about the invoice address itself, nor that the signer has access to the private keys used to implement this invoice.\n-More importantly, it does not prove ownership nor access to any funds, even if the same private key would be a valid signer for spending them - and this is a commonly desired use case.\n+Additionally, the current message signature format uses ECDSA signatures which do not commit to the public key, meaning that they do not actually prove knowledge of any secret keys. (Indeed, valid signatures can be tweaked by 3rd parties to become valid signatures on certain related keys.)\n \n-== Specification ==\n+Ultimately no message signing protocol can actually prove control of funds, both because a signature is obsolete as soon as it is created, and because the possessor of a secret key may be willing to sign messages on others' behalf even if it would not sign actual transactions. No signmessage protocol can fix these limitations.\n \n-This BIP follows the specification of BIP-325 challenges and solutions (see Signet comparison below).\n+== Types of Signatures ==\n \n-Let there be two virtual transactions to_spend and to_sign.\n+This BIP specifies three formats for signing messages: ''legacy'', ''simple'' and ''full''. Additionally, a variant of the ''full'' format can be used to demonstrate control over a set of UTXOs.\n \n-The \"to_spend\" transaction is:\n+=== Legacy ===\n+\n+New proofs should use the new format for all invoice address formats, including P2PKH.",
      "path": "bip-0322.mediawiki",
      "position": 24,
      "original_position": 24,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": 550776233,
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Wrong Kalle I guess. But always flattering to be mistaken for @kallewoof ",
      "created_at": "2021-01-01T15:36:44Z",
      "updated_at": "2021-01-01T15:36:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r550779224",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550779224"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550788740",
      "pull_request_review_id": 560596903,
      "id": 550788740,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4ODc0MA==",
      "diff_hunk": "@@ -17,19 +17,39 @@ A standard for interoperable signed messages based on the Bitcoin Script format,\n \n == Motivation ==\n \n-The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This approach minimizes the burden for implementers as message signing can be expected to be part of a library or project that includes Bitcoin Script interpreters already.\n+The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This ensures that any coins, no matter what script they are controlled by, can in-principle be signed for. For easy interoperability with existing signing hardware, we also define a signature message format which resembles a Bitcoin transaction (except that it contains an invalid input, so it cannot be spent on any real network).\n \n-Additionally, the current message signing only proves that the message has been committed to by the recipient of a given invoice address.\n-It does not prove anything about the invoice address itself, nor that the signer has access to the private keys used to implement this invoice.\n-More importantly, it does not prove ownership nor access to any funds, even if the same private key would be a valid signer for spending them - and this is a commonly desired use case.\n+Additionally, the current message signature format uses ECDSA signatures which do not commit to the public key, meaning that they do not actually prove knowledge of any secret keys. (Indeed, valid signatures can be tweaked by 3rd parties to become valid signatures on certain related keys.)\n \n-== Specification ==\n+Ultimately no message signing protocol can actually prove control of funds, both because a signature is obsolete as soon as it is created, and because the possessor of a secret key may be willing to sign messages on others' behalf even if it would not sign actual transactions. No signmessage protocol can fix these limitations.\n \n-This BIP follows the specification of BIP-325 challenges and solutions (see Signet comparison below).\n+== Types of Signatures ==\n \n-Let there be two virtual transactions to_spend and to_sign.\n+This BIP specifies three formats for signing messages: ''legacy'', ''simple'' and ''full''. Additionally, a variant of the ''full'' format can be used to demonstrate control over a set of UTXOs.\n \n-The \"to_spend\" transaction is:\n+=== Legacy ===\n+\n+New proofs should use the new format for all invoice address formats, including P2PKH.\n+\n+The legacy format MAY be used, but must be restricted to the legacy P2PKH invoice address format.\n+\n+=== Simple ===",
      "path": "bip-0322.mediawiki",
      "position": 28,
      "original_position": 28,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: I think I'd find this document easier to follow if the *Simple* section followed the *Full (proof of funds)* section.  It's not possible to understand what *Simple* is doing until you've learned about the fields described in *Full*.",
      "created_at": "2021-01-01T17:33:19Z",
      "updated_at": "2021-01-01T18:13:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r550788740",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550788740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 36,
      "original_line": 36,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550789318",
      "pull_request_review_id": 560596903,
      "id": 550789318,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4OTMxOA==",
      "diff_hunk": "@@ -17,19 +17,39 @@ A standard for interoperable signed messages based on the Bitcoin Script format,\n \n == Motivation ==\n \n-The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This approach minimizes the burden for implementers as message signing can be expected to be part of a library or project that includes Bitcoin Script interpreters already.\n+The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This ensures that any coins, no matter what script they are controlled by, can in-principle be signed for. For easy interoperability with existing signing hardware, we also define a signature message format which resembles a Bitcoin transaction (except that it contains an invalid input, so it cannot be spent on any real network).\n \n-Additionally, the current message signing only proves that the message has been committed to by the recipient of a given invoice address.\n-It does not prove anything about the invoice address itself, nor that the signer has access to the private keys used to implement this invoice.\n-More importantly, it does not prove ownership nor access to any funds, even if the same private key would be a valid signer for spending them - and this is a commonly desired use case.\n+Additionally, the current message signature format uses ECDSA signatures which do not commit to the public key, meaning that they do not actually prove knowledge of any secret keys. (Indeed, valid signatures can be tweaked by 3rd parties to become valid signatures on certain related keys.)\n \n-== Specification ==\n+Ultimately no message signing protocol can actually prove control of funds, both because a signature is obsolete as soon as it is created, and because the possessor of a secret key may be willing to sign messages on others' behalf even if it would not sign actual transactions. No signmessage protocol can fix these limitations.\n \n-This BIP follows the specification of BIP-325 challenges and solutions (see Signet comparison below).\n+== Types of Signatures ==\n \n-Let there be two virtual transactions to_spend and to_sign.\n+This BIP specifies three formats for signing messages: ''legacy'', ''simple'' and ''full''. Additionally, a variant of the ''full'' format can be used to demonstrate control over a set of UTXOs.\n \n-The \"to_spend\" transaction is:\n+=== Legacy ===\n+\n+New proofs should use the new format for all invoice address formats, including P2PKH.\n+\n+The legacy format MAY be used, but must be restricted to the legacy P2PKH invoice address format.\n+\n+=== Simple ===\n+\n+A ''simple'' signature consists of a witness stack, consensus encoded as a vector of vectors of bytes, and base64-encoded. Validators should construct <code>to_spend</code> and <code>to_sign</code> as defined below, with default values for all fields except that\n+\n+* <code>message_hash</code> is a BIP340-tagged hash of the message, as specified below\n+* <code>message_challenge</code> in <code>to_spend</code> is set to the scriptPubKey being signed with\n+* <code>message_signature</code> in <code>to_sign</code> is set to the provided simple signature.\n+\n+and then proceed as they would for a full signature.\n+\n+=== Full ===\n+\n+Full signatures follow an analogous specification to the BIP-325 challenges and solutions used by Signet.",
      "path": "bip-0322.mediawiki",
      "position": 40,
      "original_position": 40,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit: this is the only case in the document where the format \"BIP-nnn\" is used.  In the rest of the paragraph text, \"BIPnnn\" is used.",
      "created_at": "2021-01-01T17:39:39Z",
      "updated_at": "2021-01-01T18:13:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r550789318",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550789318"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 48,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550789551",
      "pull_request_review_id": 560596903,
      "id": 550789551,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc4OTU1MQ==",
      "diff_hunk": "@@ -41,10 +61,9 @@ The \"to_spend\" transaction is:\n     vout[0].nValue = 0\n     vout[0].scriptPubKey = message_challenge\n \n-where message_hash is a BIP340-tagged hash of the message, i.e. sha256_tag(m), where tag = \"BIP0322-signed-message\", and message_challenge is the to be proven (public) key script.\n-For proving funds, message_challenge shall be simply OP_TRUE.\n+where <code>message_hash</code> is a BIP340-tagged hash of the message, i.e. sha256_tag(m), where tag = <code>BIP0322-signed-message</code>, and <code>message_challenge</code> is the to be proven (public) key script.",
      "path": "bip-0322.mediawiki",
      "position": 54,
      "original_position": 54,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nit not introduced in this patch: 2/3 items in this list are introduced by \"where\".  It would be better to use *where* either 1/3 or 3/3 times.",
      "created_at": "2021-01-01T17:43:28Z",
      "updated_at": "2021-01-01T18:13:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r550789551",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550789551"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 64,
      "original_line": 64,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550790918",
      "pull_request_review_id": 560596903,
      "id": 550790918,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MDkxOA==",
      "diff_hunk": "@@ -55,61 +74,69 @@ The \"to_sign\" transaction is:\n     vout[0].nValue = 0\n     vout[0].scriptPubKey = OP_RETURN\n \n-When a proof of funds is being created, additional inputs should be included for virtually spending transaction outputs of desired value.\n+A full signature consists of the base64-encoding of the <code>to_sign</code> transaction in standard network serialisation.\n \n-* All signatures must use the SIGHASH_ALL flag.\n-* The proof is considered valid, inconclusive, or invalid based on whether the to_sign transaction is a valid spend of the to_spend transaction or not, according to the rules specified in the \"Consensus and standard flags\" section below.\n-* Proofs of funds may be encumbered with the in_future flag, according to the rules specified in the \"Locktime and Sequence\" section below, in which case we refer to the result in text form as \"valid_in_future\", \"inconclusive_in_future\", etc.\n+=== Full (Proof of Funds) ===\n \n-Proofs of funds are the base64-encoding of the to_spend and to_sign transactions concatenated in standard network serialisation, and proofs without additional inputs or time locks (simple proofs) are the base64-encoding of the to_sign script witness.\n+A signer may construct a proof of funds, demonstrating control of a set of UTXOs, by constructing a full signature as above, with the following modifications.\n \n-A validator must verify it is valid and meets the description of virtual transactions as specified above. See \"Validation\" below.\n+* <code>message_challenge</code> is unused and shall be set to <code>OP_TRUE</code>\n+* Similarly, <code>message_signature</code> is then empty.\n+* All outputs that the signer wishes to demonstrate control of are included as additional inputs of <code>to_sign</code>, and their witness and scriptSig data should be set as though these outputs were actually being spent.\n \n-=== Validation ===\n+Unlike an ordinary signature, validators of a proof of funds need access to the current UTXO set, to learn that the claimed inputs exist on the blockchain, and to learn their scriptPubKeys.\n \n-To validate a simple proof, the following steps must be taken:\n+== Detailed Specification ==\n \n-# construct the to_spend and to_sign transactions, based on the specification above\n-# check the signature using consensus rules, then upgradable rules\n+For all signature types, except legacy, the <code>to_spend</code> and <code>to_sign</code> transactions must be valid transactions which pass all consensus checks, except of course that the output with prevout <code>000...000:FFFFFFFF</code> does not exist.\n \n-To validate a proof of funds, the following steps must be taken:\n+=== Verification ===\n \n-# deserialize the to_spend and to_sign transactions from the proof, and fail if the proof contains extraneous bytes\n-# verify that the to_sign transaction uses all inputs covered by the proof of funds, exactly once\n-# reconstruct the to_spend' and to_sign' transactions, based on the specification above, copying the version, lock time, and sequence values\n-# verify that to_spend = to_spend', that to_sign has at least 1 input, has exactly 1 output, and that to_sign.vin[0] = to_sign'.vin[0]\n-# set the \"in_future\" flag if the transaction's lock time is in the future according to consensus rules\n-# establish a \"coins map\", a mapping of outpoints (hash, vout) to coins (scriptPubKey, amount), initialized to coins_map(to_spend.txid, 0) = (to_spend.vout[0], 0)\n-# for each proof of fund input, set the corresponding values in the coins map; abort if the input cannot be found\n-# check the signature of each input using consensus rules, then upgradable rules\n+A validator is given as input an address ''A'' (which may be omitted in a proof-of-funds), signature ''s'' and message ''m'', and outputs one of three states\n+* ''valid at time T and age S'' indicates that the signature has set timelocks but is otherwise valid\n+* ''inconclusive'' means the validator was unable to check the scripts\n+* ''invalid'' means that some check failed\n \n-== Legacy format ==\n+==== Verification Process ====\n \n-New proofs should use the new format for all invoice address formats, including P2PKH.\n+Validation consists of the following steps:\n \n-The legacy format MAY be used, but must be restricted to the legacy P2PKH invoice address format.\n+# Basic validation\n+## Compute the transaction <code>to_spend</code> from ''m'' and ''A''\n+## Decode ''s'' as the transaction <code>to_sign</code>\n+## If ''s'' was a full transaction, confirm all fields are set as specified above; in particular that\n+##* <code>to_sign</code> has at least one input and its first input spends the output of </code>to_spend</code>\n+##* <code>to_sign</code> has exactly one output, as specified above\n+## Confirm that the two transactions together satisfy all consensus rules, except for <code>to_spend</code>'s missing input, and except that ''nSequence'' of <code>to_sign</code>'s first input and ''nLockTime'' of <code>to_sign</code> are not checked.\n+# (Optional) If the validator does not have a full script interpreter, it should check that it understands all scripts being satisfied. If not, it should stop here and output ''inconclusive''.\n+# Check the **required rules**:\n+## All signatures must use the SIGHASH_ALL flag.\n+## The use of <code>CODESEPARATOR</code> or <code>FindAndDelete</code> is forbidden.\n+## <code>LOW_S</code>, <code>STRICTENC</code> and <code>NULLFAIL</code>: valid ECDSA signatures must be strictly DER-encoded and have a low-S value; invalid ECDSA signature must be the empty push\n+## <code>MINIMALDATA</code>: all pushes must be minimally encoded\n+## <code>CLEANSTACK</code>: require that only a single stack element remains after evaluation\n+## <code>MINIMALIF</code>: the argument of <code>IF</code>/<code>NOTIF</code> must be exactly 0x01 or empty push\n+## If any of the above steps failed, the validator should stop and output the ''invalid'' state.\n+# Check the **upgradeable rules**\n+## The version of <code>to_sign</code> must be 0 or 2.\n+## The use of NOPs reserved for upgrades is forbidden.\n+## The use of segwit versions greater than 0 are forbidden.\n+## If any of the above steps failed, the validator should stop and output the ''inconclusive'' state.\n+# Let ''T'' by the nLockTime of <code>to_sign</code> and ''S'' be the nSequence of the first input of <code>to_sign</code>. Output the state ''valid at time T and age S''.",
      "path": "bip-0322.mediawiki",
      "position": 135,
      "original_position": 135,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Is it actually supposed to say \"at time T and age S\" if no locktime was used?  E.g., if the case of `nLockTime = 0; nSequence = 0xffffffff`, is it supposed to say \"valid at time *block 0* and age *same block as parent*\"?",
      "created_at": "2021-01-01T17:59:31Z",
      "updated_at": "2021-01-01T18:13:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r550790918",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550790918"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550791946",
      "pull_request_review_id": 560596903,
      "id": 550791946,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDc5MTk0Ng==",
      "diff_hunk": "@@ -55,61 +74,69 @@ The \"to_sign\" transaction is:\n     vout[0].nValue = 0\n     vout[0].scriptPubKey = OP_RETURN\n \n-When a proof of funds is being created, additional inputs should be included for virtually spending transaction outputs of desired value.\n+A full signature consists of the base64-encoding of the <code>to_sign</code> transaction in standard network serialisation.\n \n-* All signatures must use the SIGHASH_ALL flag.\n-* The proof is considered valid, inconclusive, or invalid based on whether the to_sign transaction is a valid spend of the to_spend transaction or not, according to the rules specified in the \"Consensus and standard flags\" section below.\n-* Proofs of funds may be encumbered with the in_future flag, according to the rules specified in the \"Locktime and Sequence\" section below, in which case we refer to the result in text form as \"valid_in_future\", \"inconclusive_in_future\", etc.\n+=== Full (Proof of Funds) ===\n \n-Proofs of funds are the base64-encoding of the to_spend and to_sign transactions concatenated in standard network serialisation, and proofs without additional inputs or time locks (simple proofs) are the base64-encoding of the to_sign script witness.\n+A signer may construct a proof of funds, demonstrating control of a set of UTXOs, by constructing a full signature as above, with the following modifications.\n \n-A validator must verify it is valid and meets the description of virtual transactions as specified above. See \"Validation\" below.\n+* <code>message_challenge</code> is unused and shall be set to <code>OP_TRUE</code>\n+* Similarly, <code>message_signature</code> is then empty.\n+* All outputs that the signer wishes to demonstrate control of are included as additional inputs of <code>to_sign</code>, and their witness and scriptSig data should be set as though these outputs were actually being spent.\n \n-=== Validation ===\n+Unlike an ordinary signature, validators of a proof of funds need access to the current UTXO set, to learn that the claimed inputs exist on the blockchain, and to learn their scriptPubKeys.\n \n-To validate a simple proof, the following steps must be taken:\n+== Detailed Specification ==\n \n-# construct the to_spend and to_sign transactions, based on the specification above\n-# check the signature using consensus rules, then upgradable rules\n+For all signature types, except legacy, the <code>to_spend</code> and <code>to_sign</code> transactions must be valid transactions which pass all consensus checks, except of course that the output with prevout <code>000...000:FFFFFFFF</code> does not exist.\n \n-To validate a proof of funds, the following steps must be taken:\n+=== Verification ===\n \n-# deserialize the to_spend and to_sign transactions from the proof, and fail if the proof contains extraneous bytes\n-# verify that the to_sign transaction uses all inputs covered by the proof of funds, exactly once\n-# reconstruct the to_spend' and to_sign' transactions, based on the specification above, copying the version, lock time, and sequence values\n-# verify that to_spend = to_spend', that to_sign has at least 1 input, has exactly 1 output, and that to_sign.vin[0] = to_sign'.vin[0]\n-# set the \"in_future\" flag if the transaction's lock time is in the future according to consensus rules\n-# establish a \"coins map\", a mapping of outpoints (hash, vout) to coins (scriptPubKey, amount), initialized to coins_map(to_spend.txid, 0) = (to_spend.vout[0], 0)\n-# for each proof of fund input, set the corresponding values in the coins map; abort if the input cannot be found\n-# check the signature of each input using consensus rules, then upgradable rules\n+A validator is given as input an address ''A'' (which may be omitted in a proof-of-funds), signature ''s'' and message ''m'', and outputs one of three states\n+* ''valid at time T and age S'' indicates that the signature has set timelocks but is otherwise valid\n+* ''inconclusive'' means the validator was unable to check the scripts\n+* ''invalid'' means that some check failed\n \n-== Legacy format ==\n+==== Verification Process ====\n \n-New proofs should use the new format for all invoice address formats, including P2PKH.\n+Validation consists of the following steps:\n \n-The legacy format MAY be used, but must be restricted to the legacy P2PKH invoice address format.\n+# Basic validation\n+## Compute the transaction <code>to_spend</code> from ''m'' and ''A''\n+## Decode ''s'' as the transaction <code>to_sign</code>\n+## If ''s'' was a full transaction, confirm all fields are set as specified above; in particular that\n+##* <code>to_sign</code> has at least one input and its first input spends the output of </code>to_spend</code>\n+##* <code>to_sign</code> has exactly one output, as specified above\n+## Confirm that the two transactions together satisfy all consensus rules, except for <code>to_spend</code>'s missing input, and except that ''nSequence'' of <code>to_sign</code>'s first input and ''nLockTime'' of <code>to_sign</code> are not checked.\n+# (Optional) If the validator does not have a full script interpreter, it should check that it understands all scripts being satisfied. If not, it should stop here and output ''inconclusive''.\n+# Check the **required rules**:\n+## All signatures must use the SIGHASH_ALL flag.\n+## The use of <code>CODESEPARATOR</code> or <code>FindAndDelete</code> is forbidden.\n+## <code>LOW_S</code>, <code>STRICTENC</code> and <code>NULLFAIL</code>: valid ECDSA signatures must be strictly DER-encoded and have a low-S value; invalid ECDSA signature must be the empty push\n+## <code>MINIMALDATA</code>: all pushes must be minimally encoded\n+## <code>CLEANSTACK</code>: require that only a single stack element remains after evaluation\n+## <code>MINIMALIF</code>: the argument of <code>IF</code>/<code>NOTIF</code> must be exactly 0x01 or empty push\n+## If any of the above steps failed, the validator should stop and output the ''invalid'' state.\n+# Check the **upgradeable rules**\n+## The version of <code>to_sign</code> must be 0 or 2.\n+## The use of NOPs reserved for upgrades is forbidden.\n+## The use of segwit versions greater than 0 are forbidden.\n+## If any of the above steps failed, the validator should stop and output the ''inconclusive'' state.\n+# Let ''T'' by the nLockTime of <code>to_sign</code> and ''S'' be the nSequence of the first input of <code>to_sign</code>. Output the state ''valid at time T and age S''.",
      "path": "bip-0322.mediawiki",
      "position": 135,
      "original_position": 135,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": 550790918,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Also, I just realized that the default here is for nSequence to be `0` in both psuedo-transactions instead of the usual wallet default for nSequence to be set to its `IsFinal()` value of `0xffffffff`.  Since `version >= 2` is required to get BIP68 behavior, that seems fine, but I don't know if it could cause a problem for any PSBT signers (e.g. my Trezor model T warns me about the non-zero nLockTimes created by Bitcoin Core's anti-fee sniping; I don't know how it handles nSequences below `0xfffffffe`).",
      "created_at": "2021-01-01T18:12:56Z",
      "updated_at": "2021-01-01T18:13:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r550791946",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/550791946"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/551518974",
      "pull_request_review_id": 561281799,
      "id": 551518974,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxODk3NA==",
      "diff_hunk": "@@ -17,19 +17,39 @@ A standard for interoperable signed messages based on the Bitcoin Script format,\n \n == Motivation ==\n \n-The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This approach minimizes the burden for implementers as message signing can be expected to be part of a library or project that includes Bitcoin Script interpreters already.\n+The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This ensures that any coins, no matter what script they are controlled by, can in-principle be signed for. For easy interoperability with existing signing hardware, we also define a signature message format which resembles a Bitcoin transaction (except that it contains an invalid input, so it cannot be spent on any real network).\n \n-Additionally, the current message signing only proves that the message has been committed to by the recipient of a given invoice address.\n-It does not prove anything about the invoice address itself, nor that the signer has access to the private keys used to implement this invoice.\n-More importantly, it does not prove ownership nor access to any funds, even if the same private key would be a valid signer for spending them - and this is a commonly desired use case.\n+Additionally, the current message signature format uses ECDSA signatures which do not commit to the public key, meaning that they do not actually prove knowledge of any secret keys. (Indeed, valid signatures can be tweaked by 3rd parties to become valid signatures on certain related keys.)\n \n-== Specification ==\n+Ultimately no message signing protocol can actually prove control of funds, both because a signature is obsolete as soon as it is created, and because the possessor of a secret key may be willing to sign messages on others' behalf even if it would not sign actual transactions. No signmessage protocol can fix these limitations.\n \n-This BIP follows the specification of BIP-325 challenges and solutions (see Signet comparison below).\n+== Types of Signatures ==\n \n-Let there be two virtual transactions to_spend and to_sign.\n+This BIP specifies three formats for signing messages: ''legacy'', ''simple'' and ''full''. Additionally, a variant of the ''full'' format can be used to demonstrate control over a set of UTXOs.\n \n-The \"to_spend\" transaction is:\n+=== Legacy ===\n+\n+New proofs should use the new format for all invoice address formats, including P2PKH.",
      "path": "bip-0322.mediawiki",
      "position": 24,
      "original_position": 24,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": 550776233,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yeah I think this is reasonable.\r\n\r\nMy personal preference *would* be to deprecate the old base64 signmessage format but it's needlessly breaking to recommend people shift away from it for pkh addresses (which I'd also like to see go away :))",
      "created_at": "2021-01-04T19:26:06Z",
      "updated_at": "2021-01-04T19:26:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r551518974",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/551518974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/551519826",
      "pull_request_review_id": 561282867,
      "id": 551519826,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUxOTgyNg==",
      "diff_hunk": "@@ -55,61 +74,69 @@ The \"to_sign\" transaction is:\n     vout[0].nValue = 0\n     vout[0].scriptPubKey = OP_RETURN\n \n-When a proof of funds is being created, additional inputs should be included for virtually spending transaction outputs of desired value.\n+A full signature consists of the base64-encoding of the <code>to_sign</code> transaction in standard network serialisation.\n \n-* All signatures must use the SIGHASH_ALL flag.\n-* The proof is considered valid, inconclusive, or invalid based on whether the to_sign transaction is a valid spend of the to_spend transaction or not, according to the rules specified in the \"Consensus and standard flags\" section below.\n-* Proofs of funds may be encumbered with the in_future flag, according to the rules specified in the \"Locktime and Sequence\" section below, in which case we refer to the result in text form as \"valid_in_future\", \"inconclusive_in_future\", etc.\n+=== Full (Proof of Funds) ===\n \n-Proofs of funds are the base64-encoding of the to_spend and to_sign transactions concatenated in standard network serialisation, and proofs without additional inputs or time locks (simple proofs) are the base64-encoding of the to_sign script witness.\n+A signer may construct a proof of funds, demonstrating control of a set of UTXOs, by constructing a full signature as above, with the following modifications.\n \n-A validator must verify it is valid and meets the description of virtual transactions as specified above. See \"Validation\" below.\n+* <code>message_challenge</code> is unused and shall be set to <code>OP_TRUE</code>\n+* Similarly, <code>message_signature</code> is then empty.\n+* All outputs that the signer wishes to demonstrate control of are included as additional inputs of <code>to_sign</code>, and their witness and scriptSig data should be set as though these outputs were actually being spent.\n \n-=== Validation ===\n+Unlike an ordinary signature, validators of a proof of funds need access to the current UTXO set, to learn that the claimed inputs exist on the blockchain, and to learn their scriptPubKeys.\n \n-To validate a simple proof, the following steps must be taken:\n+== Detailed Specification ==\n \n-# construct the to_spend and to_sign transactions, based on the specification above\n-# check the signature using consensus rules, then upgradable rules\n+For all signature types, except legacy, the <code>to_spend</code> and <code>to_sign</code> transactions must be valid transactions which pass all consensus checks, except of course that the output with prevout <code>000...000:FFFFFFFF</code> does not exist.\n \n-To validate a proof of funds, the following steps must be taken:\n+=== Verification ===\n \n-# deserialize the to_spend and to_sign transactions from the proof, and fail if the proof contains extraneous bytes\n-# verify that the to_sign transaction uses all inputs covered by the proof of funds, exactly once\n-# reconstruct the to_spend' and to_sign' transactions, based on the specification above, copying the version, lock time, and sequence values\n-# verify that to_spend = to_spend', that to_sign has at least 1 input, has exactly 1 output, and that to_sign.vin[0] = to_sign'.vin[0]\n-# set the \"in_future\" flag if the transaction's lock time is in the future according to consensus rules\n-# establish a \"coins map\", a mapping of outpoints (hash, vout) to coins (scriptPubKey, amount), initialized to coins_map(to_spend.txid, 0) = (to_spend.vout[0], 0)\n-# for each proof of fund input, set the corresponding values in the coins map; abort if the input cannot be found\n-# check the signature of each input using consensus rules, then upgradable rules\n+A validator is given as input an address ''A'' (which may be omitted in a proof-of-funds), signature ''s'' and message ''m'', and outputs one of three states\n+* ''valid at time T and age S'' indicates that the signature has set timelocks but is otherwise valid\n+* ''inconclusive'' means the validator was unable to check the scripts\n+* ''invalid'' means that some check failed\n \n-== Legacy format ==\n+==== Verification Process ====\n \n-New proofs should use the new format for all invoice address formats, including P2PKH.\n+Validation consists of the following steps:\n \n-The legacy format MAY be used, but must be restricted to the legacy P2PKH invoice address format.\n+# Basic validation\n+## Compute the transaction <code>to_spend</code> from ''m'' and ''A''\n+## Decode ''s'' as the transaction <code>to_sign</code>\n+## If ''s'' was a full transaction, confirm all fields are set as specified above; in particular that\n+##* <code>to_sign</code> has at least one input and its first input spends the output of </code>to_spend</code>\n+##* <code>to_sign</code> has exactly one output, as specified above\n+## Confirm that the two transactions together satisfy all consensus rules, except for <code>to_spend</code>'s missing input, and except that ''nSequence'' of <code>to_sign</code>'s first input and ''nLockTime'' of <code>to_sign</code> are not checked.\n+# (Optional) If the validator does not have a full script interpreter, it should check that it understands all scripts being satisfied. If not, it should stop here and output ''inconclusive''.\n+# Check the **required rules**:\n+## All signatures must use the SIGHASH_ALL flag.\n+## The use of <code>CODESEPARATOR</code> or <code>FindAndDelete</code> is forbidden.\n+## <code>LOW_S</code>, <code>STRICTENC</code> and <code>NULLFAIL</code>: valid ECDSA signatures must be strictly DER-encoded and have a low-S value; invalid ECDSA signature must be the empty push\n+## <code>MINIMALDATA</code>: all pushes must be minimally encoded\n+## <code>CLEANSTACK</code>: require that only a single stack element remains after evaluation\n+## <code>MINIMALIF</code>: the argument of <code>IF</code>/<code>NOTIF</code> must be exactly 0x01 or empty push\n+## If any of the above steps failed, the validator should stop and output the ''invalid'' state.\n+# Check the **upgradeable rules**\n+## The version of <code>to_sign</code> must be 0 or 2.\n+## The use of NOPs reserved for upgrades is forbidden.\n+## The use of segwit versions greater than 0 are forbidden.\n+## If any of the above steps failed, the validator should stop and output the ''inconclusive'' state.\n+# Let ''T'' by the nLockTime of <code>to_sign</code> and ''S'' be the nSequence of the first input of <code>to_sign</code>. Output the state ''valid at time T and age S''.",
      "path": "bip-0322.mediawiki",
      "position": 135,
      "original_position": 135,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": 550790918,
      "user": {
        "login": "apoelstra",
        "id": 1351933,
        "node_id": "MDQ6VXNlcjEzNTE5MzM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1351933?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/apoelstra",
        "html_url": "https://github.com/apoelstra",
        "followers_url": "https://api.github.com/users/apoelstra/followers",
        "following_url": "https://api.github.com/users/apoelstra/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/apoelstra/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/apoelstra/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/apoelstra/subscriptions",
        "organizations_url": "https://api.github.com/users/apoelstra/orgs",
        "repos_url": "https://api.github.com/users/apoelstra/repos",
        "events_url": "https://api.github.com/users/apoelstra/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/apoelstra/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Ah! Yes, I forgot that `nSequence` has non-timelock values. I will update the text to reflect this.",
      "created_at": "2021-01-04T19:27:45Z",
      "updated_at": "2021-01-04T19:27:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r551519826",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/551519826"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 125,
      "original_line": 125,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/553109606",
      "pull_request_review_id": 563211012,
      "id": 553109606,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzEwOTYwNg==",
      "diff_hunk": "@@ -17,19 +17,39 @@ A standard for interoperable signed messages based on the Bitcoin Script format,\n \n == Motivation ==\n \n-The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This approach minimizes the burden for implementers as message signing can be expected to be part of a library or project that includes Bitcoin Script interpreters already.\n+The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This ensures that any coins, no matter what script they are controlled by, can in-principle be signed for. For easy interoperability with existing signing hardware, we also define a signature message format which resembles a Bitcoin transaction (except that it contains an invalid input, so it cannot be spent on any real network).\n \n-Additionally, the current message signing only proves that the message has been committed to by the recipient of a given invoice address.\n-It does not prove anything about the invoice address itself, nor that the signer has access to the private keys used to implement this invoice.\n-More importantly, it does not prove ownership nor access to any funds, even if the same private key would be a valid signer for spending them - and this is a commonly desired use case.\n+Additionally, the current message signature format uses ECDSA signatures which do not commit to the public key, meaning that they do not actually prove knowledge of any secret keys. (Indeed, valid signatures can be tweaked by 3rd parties to become valid signatures on certain related keys.)\n \n-== Specification ==\n+Ultimately no message signing protocol can actually prove control of funds, both because a signature is obsolete as soon as it is created, and because the possessor of a secret key may be willing to sign messages on others' behalf even if it would not sign actual transactions. No signmessage protocol can fix these limitations.\n \n-This BIP follows the specification of BIP-325 challenges and solutions (see Signet comparison below).\n+== Types of Signatures ==\n \n-Let there be two virtual transactions to_spend and to_sign.\n+This BIP specifies three formats for signing messages: ''legacy'', ''simple'' and ''full''. Additionally, a variant of the ''full'' format can be used to demonstrate control over a set of UTXOs.\n \n-The \"to_spend\" transaction is:\n+=== Legacy ===\n+\n+New proofs should use the new format for all invoice address formats, including P2PKH.",
      "path": "bip-0322.mediawiki",
      "position": 24,
      "original_position": 24,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": 550776233,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "FWIW, I chose to be backwards compatible, but later several people suggested we should recommend using the new format so we can sunset the old one at some point.",
      "created_at": "2021-01-07T04:58:58Z",
      "updated_at": "2021-01-07T04:58:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r553109606",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/553109606"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/554662302",
      "pull_request_review_id": 564935595,
      "id": 554662302,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDY2MjMwMg==",
      "diff_hunk": "@@ -17,19 +17,39 @@ A standard for interoperable signed messages based on the Bitcoin Script format,\n \n == Motivation ==\n \n-The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This approach minimizes the burden for implementers as message signing can be expected to be part of a library or project that includes Bitcoin Script interpreters already.\n+The current message signing standard only works for P2PKH (1...) invoice addresses. We propose to extend and generalize the standard by using a Bitcoin Script based approach. This ensures that any coins, no matter what script they are controlled by, can in-principle be signed for. For easy interoperability with existing signing hardware, we also define a signature message format which resembles a Bitcoin transaction (except that it contains an invalid input, so it cannot be spent on any real network).\n \n-Additionally, the current message signing only proves that the message has been committed to by the recipient of a given invoice address.\n-It does not prove anything about the invoice address itself, nor that the signer has access to the private keys used to implement this invoice.\n-More importantly, it does not prove ownership nor access to any funds, even if the same private key would be a valid signer for spending them - and this is a commonly desired use case.\n+Additionally, the current message signature format uses ECDSA signatures which do not commit to the public key, meaning that they do not actually prove knowledge of any secret keys. (Indeed, valid signatures can be tweaked by 3rd parties to become valid signatures on certain related keys.)\n \n-== Specification ==\n+Ultimately no message signing protocol can actually prove control of funds, both because a signature is obsolete as soon as it is created, and because the possessor of a secret key may be willing to sign messages on others' behalf even if it would not sign actual transactions. No signmessage protocol can fix these limitations.\n \n-This BIP follows the specification of BIP-325 challenges and solutions (see Signet comparison below).\n+== Types of Signatures ==\n \n-Let there be two virtual transactions to_spend and to_sign.\n+This BIP specifies three formats for signing messages: ''legacy'', ''simple'' and ''full''. Additionally, a variant of the ''full'' format can be used to demonstrate control over a set of UTXOs.\n \n-The \"to_spend\" transaction is:\n+=== Legacy ===\n+\n+New proofs should use the new format for all invoice address formats, including P2PKH.",
      "path": "bip-0322.mediawiki",
      "position": 24,
      "original_position": 24,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": 550776233,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@kallewoof legacy format will be automatically sunset when almost nobody uses P2PKH any more.  At that point, it won't be disruptive to deprecate legacy proof generation and verification code.  Until then, I think BIP322 needs all the support it can get and maintaining backwards compatibility with the tools people already use is one way to attract support.",
      "created_at": "2021-01-11T02:23:23Z",
      "updated_at": "2021-01-11T02:23:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r554662302",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/554662302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 32,
      "original_line": 32,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/594806216",
      "pull_request_review_id": 612789782,
      "id": 594806216,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDgwNjIxNg==",
      "diff_hunk": "@@ -55,61 +74,69 @@ The \"to_sign\" transaction is:\n     vout[0].nValue = 0\n     vout[0].scriptPubKey = OP_RETURN\n \n-When a proof of funds is being created, additional inputs should be included for virtually spending transaction outputs of desired value.\n+A full signature consists of the base64-encoding of the <code>to_sign</code> transaction in standard network serialisation.\n \n-* All signatures must use the SIGHASH_ALL flag.\n-* The proof is considered valid, inconclusive, or invalid based on whether the to_sign transaction is a valid spend of the to_spend transaction or not, according to the rules specified in the \"Consensus and standard flags\" section below.\n-* Proofs of funds may be encumbered with the in_future flag, according to the rules specified in the \"Locktime and Sequence\" section below, in which case we refer to the result in text form as \"valid_in_future\", \"inconclusive_in_future\", etc.\n+=== Full (Proof of Funds) ===\n \n-Proofs of funds are the base64-encoding of the to_spend and to_sign transactions concatenated in standard network serialisation, and proofs without additional inputs or time locks (simple proofs) are the base64-encoding of the to_sign script witness.\n+A signer may construct a proof of funds, demonstrating control of a set of UTXOs, by constructing a full signature as above, with the following modifications.\n \n-A validator must verify it is valid and meets the description of virtual transactions as specified above. See \"Validation\" below.\n+* <code>message_challenge</code> is unused and shall be set to <code>OP_TRUE</code>\n+* Similarly, <code>message_signature</code> is then empty.\n+* All outputs that the signer wishes to demonstrate control of are included as additional inputs of <code>to_sign</code>, and their witness and scriptSig data should be set as though these outputs were actually being spent.\n \n-=== Validation ===\n+Unlike an ordinary signature, validators of a proof of funds need access to the current UTXO set, to learn that the claimed inputs exist on the blockchain, and to learn their scriptPubKeys.\n \n-To validate a simple proof, the following steps must be taken:\n+== Detailed Specification ==\n \n-# construct the to_spend and to_sign transactions, based on the specification above\n-# check the signature using consensus rules, then upgradable rules\n+For all signature types, except legacy, the <code>to_spend</code> and <code>to_sign</code> transactions must be valid transactions which pass all consensus checks, except of course that the output with prevout <code>000...000:FFFFFFFF</code> does not exist.\n \n-To validate a proof of funds, the following steps must be taken:\n+=== Verification ===\n \n-# deserialize the to_spend and to_sign transactions from the proof, and fail if the proof contains extraneous bytes\n-# verify that the to_sign transaction uses all inputs covered by the proof of funds, exactly once\n-# reconstruct the to_spend' and to_sign' transactions, based on the specification above, copying the version, lock time, and sequence values\n-# verify that to_spend = to_spend', that to_sign has at least 1 input, has exactly 1 output, and that to_sign.vin[0] = to_sign'.vin[0]\n-# set the \"in_future\" flag if the transaction's lock time is in the future according to consensus rules\n-# establish a \"coins map\", a mapping of outpoints (hash, vout) to coins (scriptPubKey, amount), initialized to coins_map(to_spend.txid, 0) = (to_spend.vout[0], 0)\n-# for each proof of fund input, set the corresponding values in the coins map; abort if the input cannot be found\n-# check the signature of each input using consensus rules, then upgradable rules\n+A validator is given as input an address ''A'' (which may be omitted in a proof-of-funds), signature ''s'' and message ''m'', and outputs one of three states\n+* ''valid at time T and age S'' indicates that the signature has set timelocks but is otherwise valid\n+* ''inconclusive'' means the validator was unable to check the scripts\n+* ''invalid'' means that some check failed\n \n-== Legacy format ==\n+==== Verification Process ====\n \n-New proofs should use the new format for all invoice address formats, including P2PKH.\n+Validation consists of the following steps:\n \n-The legacy format MAY be used, but must be restricted to the legacy P2PKH invoice address format.\n+# Basic validation\n+## Compute the transaction <code>to_spend</code> from ''m'' and ''A''\n+## Decode ''s'' as the transaction <code>to_sign</code>",
      "path": "bip-0322.mediawiki",
      "position": 116,
      "original_position": 116,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think this needs the following note:\r\n\"In case of p2sh wrapped segwit scripts, the validator should compute the scriptsig based on witness script\" ",
      "created_at": "2021-03-16T01:52:15Z",
      "updated_at": "2021-03-16T01:58:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r594806216",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/594806216"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 106,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/594808237",
      "pull_request_review_id": 612789782,
      "id": 594808237,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDgwODIzNw==",
      "diff_hunk": "@@ -55,61 +74,69 @@ The \"to_sign\" transaction is:\n     vout[0].nValue = 0\n     vout[0].scriptPubKey = OP_RETURN\n \n-When a proof of funds is being created, additional inputs should be included for virtually spending transaction outputs of desired value.\n+A full signature consists of the base64-encoding of the <code>to_sign</code> transaction in standard network serialisation.\n \n-* All signatures must use the SIGHASH_ALL flag.\n-* The proof is considered valid, inconclusive, or invalid based on whether the to_sign transaction is a valid spend of the to_spend transaction or not, according to the rules specified in the \"Consensus and standard flags\" section below.\n-* Proofs of funds may be encumbered with the in_future flag, according to the rules specified in the \"Locktime and Sequence\" section below, in which case we refer to the result in text form as \"valid_in_future\", \"inconclusive_in_future\", etc.\n+=== Full (Proof of Funds) ===\n \n-Proofs of funds are the base64-encoding of the to_spend and to_sign transactions concatenated in standard network serialisation, and proofs without additional inputs or time locks (simple proofs) are the base64-encoding of the to_sign script witness.\n+A signer may construct a proof of funds, demonstrating control of a set of UTXOs, by constructing a full signature as above, with the following modifications.\n \n-A validator must verify it is valid and meets the description of virtual transactions as specified above. See \"Validation\" below.\n+* <code>message_challenge</code> is unused and shall be set to <code>OP_TRUE</code>\n+* Similarly, <code>message_signature</code> is then empty.\n+* All outputs that the signer wishes to demonstrate control of are included as additional inputs of <code>to_sign</code>, and their witness and scriptSig data should be set as though these outputs were actually being spent.\n \n-=== Validation ===\n+Unlike an ordinary signature, validators of a proof of funds need access to the current UTXO set, to learn that the claimed inputs exist on the blockchain, and to learn their scriptPubKeys.\n \n-To validate a simple proof, the following steps must be taken:\n+== Detailed Specification ==\n \n-# construct the to_spend and to_sign transactions, based on the specification above\n-# check the signature using consensus rules, then upgradable rules\n+For all signature types, except legacy, the <code>to_spend</code> and <code>to_sign</code> transactions must be valid transactions which pass all consensus checks, except of course that the output with prevout <code>000...000:FFFFFFFF</code> does not exist.\n \n-To validate a proof of funds, the following steps must be taken:\n+=== Verification ===\n \n-# deserialize the to_spend and to_sign transactions from the proof, and fail if the proof contains extraneous bytes\n-# verify that the to_sign transaction uses all inputs covered by the proof of funds, exactly once\n-# reconstruct the to_spend' and to_sign' transactions, based on the specification above, copying the version, lock time, and sequence values\n-# verify that to_spend = to_spend', that to_sign has at least 1 input, has exactly 1 output, and that to_sign.vin[0] = to_sign'.vin[0]\n-# set the \"in_future\" flag if the transaction's lock time is in the future according to consensus rules\n-# establish a \"coins map\", a mapping of outpoints (hash, vout) to coins (scriptPubKey, amount), initialized to coins_map(to_spend.txid, 0) = (to_spend.vout[0], 0)\n-# for each proof of fund input, set the corresponding values in the coins map; abort if the input cannot be found\n-# check the signature of each input using consensus rules, then upgradable rules\n+A validator is given as input an address ''A'' (which may be omitted in a proof-of-funds), signature ''s'' and message ''m'', and outputs one of three states\n+* ''valid at time T and age S'' indicates that the signature has set timelocks but is otherwise valid\n+* ''inconclusive'' means the validator was unable to check the scripts\n+* ''invalid'' means that some check failed\n \n-== Legacy format ==\n+==== Verification Process ====\n \n-New proofs should use the new format for all invoice address formats, including P2PKH.\n+Validation consists of the following steps:\n \n-The legacy format MAY be used, but must be restricted to the legacy P2PKH invoice address format.\n+# Basic validation\n+## Compute the transaction <code>to_spend</code> from ''m'' and ''A''\n+## Decode ''s'' as the transaction <code>to_sign</code>\n+## If ''s'' was a full transaction, confirm all fields are set as specified above; in particular that\n+##* <code>to_sign</code> has at least one input and its first input spends the output of </code>to_spend</code>\n+##* <code>to_sign</code> has exactly one output, as specified above",
      "path": "bip-0322.mediawiki",
      "position": 119,
      "original_position": 119,
      "commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "original_commit_id": "c624414119573e41466dcf407b3c53507624678f",
      "in_reply_to_id": null,
      "user": {
        "login": "sanket1729",
        "id": 6881849,
        "node_id": "MDQ6VXNlcjY4ODE4NDk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/6881849?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sanket1729",
        "html_url": "https://github.com/sanket1729",
        "followers_url": "https://api.github.com/users/sanket1729/followers",
        "following_url": "https://api.github.com/users/sanket1729/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sanket1729/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sanket1729/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sanket1729/subscriptions",
        "organizations_url": "https://api.github.com/users/sanket1729/orgs",
        "repos_url": "https://api.github.com/users/sanket1729/repos",
        "events_url": "https://api.github.com/users/sanket1729/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sanket1729/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This would not work for covenants because fixed validation rules like input spent must be at index 0 etc. \r\n\r\nAll we really care about is that we are spending the input, we don't really care about the position of the input and output. This is futuristic but worth highlighting and not complicated to implement.",
      "created_at": "2021-03-16T01:58:29Z",
      "updated_at": "2021-03-16T01:58:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1048#discussion_r594808237",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/594808237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1048"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 109,
      "original_line": 109,
      "side": "RIGHT"
    }
  ]
}