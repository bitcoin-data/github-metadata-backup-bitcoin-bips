{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1056",
    "id": 557148659,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTU3MTQ4NjU5",
    "html_url": "https://github.com/bitcoin/bips/pull/1056",
    "diff_url": "https://github.com/bitcoin/bips/pull/1056.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1056.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1056",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1056/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1056/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1056/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/6446f2af0a75e513a0c4bad0ddaad8d798bd5e2d",
    "number": 1056,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Add BIP 350 (bech32m)",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "See mailinglist discussion here: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018338.html",
    "labels": [],
    "created_at": "2021-01-19T03:56:00Z",
    "updated_at": "2021-02-03T22:58:31Z",
    "closed_at": "2021-02-03T22:58:31Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-02-03T22:58:31Z",
    "merge_commit_sha": "ab14d17218dd363c69653c3d13a8d5c16b2a8b7e",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "sipa:bip-bech32m",
      "ref": "bip-bech32m",
      "sha": "6446f2af0a75e513a0c4bad0ddaad8d798bd5e2d",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 15477215,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTQ3NzIxNQ==",
        "name": "bips",
        "full_name": "sipa/bips",
        "owner": {
          "login": "sipa",
          "id": 548488,
          "node_id": "MDQ6VXNlcjU0ODQ4OA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/sipa",
          "html_url": "https://github.com/sipa",
          "followers_url": "https://api.github.com/users/sipa/followers",
          "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
          "organizations_url": "https://api.github.com/users/sipa/orgs",
          "repos_url": "https://api.github.com/users/sipa/repos",
          "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/sipa/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/sipa/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/sipa/bips",
        "archive_url": "https://api.github.com/repos/sipa/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/sipa/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/sipa/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/sipa/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/sipa/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/sipa/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/sipa/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/sipa/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/sipa/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/sipa/bips/contributors",
        "deployments_url": "https://api.github.com/repos/sipa/bips/deployments",
        "downloads_url": "https://api.github.com/repos/sipa/bips/downloads",
        "events_url": "https://api.github.com/repos/sipa/bips/events",
        "forks_url": "https://api.github.com/repos/sipa/bips/forks",
        "git_commits_url": "https://api.github.com/repos/sipa/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/sipa/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/sipa/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/sipa/bips.git",
        "issue_comment_url": "https://api.github.com/repos/sipa/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/sipa/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/sipa/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/sipa/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/sipa/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/sipa/bips/languages",
        "merges_url": "https://api.github.com/repos/sipa/bips/merges",
        "milestones_url": "https://api.github.com/repos/sipa/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/sipa/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/sipa/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/sipa/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:sipa/bips.git",
        "stargazers_url": "https://api.github.com/repos/sipa/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/sipa/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/sipa/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/sipa/bips/subscription",
        "tags_url": "https://api.github.com/repos/sipa/bips/tags",
        "teams_url": "https://api.github.com/repos/sipa/bips/teams",
        "trees_url": "https://api.github.com/repos/sipa/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/sipa/bips.git",
        "hooks_url": "https://api.github.com/repos/sipa/bips/hooks",
        "svn_url": "https://github.com/sipa/bips",
        "homepage": "bitcoin.org",
        "language": "Wikitext",
        "forks_count": 45,
        "stargazers_count": 141,
        "watchers_count": 141,
        "size": 13960,
        "default_branch": "bip-taproot",
        "open_issues_count": 8,
        "is_template": false,
        "topics": [],
        "has_issues": true,
        "has_projects": false,
        "has_wiki": false,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-04-20T20:01:44Z",
        "created_at": "2013-12-27T16:12:37Z",
        "updated_at": "2023-07-02T01:14:29Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "cf0b529e78860fa2d4fe77944091aa98c5e04624",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5535,
        "stargazers_count": 8220,
        "watchers_count": 8220,
        "size": 13787,
        "default_branch": "master",
        "open_issues_count": 112,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T12:09:15Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-08-01T09:08:43Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1056"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 340,
    "deletions": 0,
    "changed_files": 2,
    "commits": 4,
    "review_comments": 3,
    "comments": 3
  },
  "events": [
    {
      "event": "commented",
      "id": 765029718,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2NTAyOTcxOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/765029718",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T00:29:39Z",
      "updated_at": "2021-01-22T00:29:39Z",
      "author_association": "MEMBER",
      "body": "@luke-jr Can I have a BIP number?",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1056#issuecomment-765029718",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1056"
    },
    {
      "event": "mentioned",
      "id": 4236197847,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDIzNjE5Nzg0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4236197847",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T00:29:39Z"
    },
    {
      "event": "subscribed",
      "id": 4236197849,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyMzYxOTc4NDk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4236197849",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-22T00:29:39Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4263227699,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI2MzIyNzY5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4263227699",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T21:10:03Z"
    },
    {
      "event": "renamed",
      "id": 4263229416,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDI2MzIyOTQxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4263229416",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T21:10:22Z",
      "rename": {
        "from": "Add bip-bech32m",
        "to": "Add BIP 350 (bech32m)"
      }
    },
    {
      "event": "commented",
      "id": 769397381,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc2OTM5NzM4MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/769397381",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T21:10:48Z",
      "updated_at": "2021-01-28T21:10:48Z",
      "author_association": "MEMBER",
      "body": "```\r\n12:12:19 < luke-jr> sipa: I guess use 350\r\n```\r\n",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1056#issuecomment-769397381",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1056"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4263234985,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI2MzIzNDk4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4263234985",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T21:11:30Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-28T21:31:03Z",
      "updated_at": "2021-01-28T21:31:03Z",
      "source": {
        "issue": {
          "id": 779616653,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTQ5NTcxMTAw",
          "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20861",
          "repository_url": "https://api.github.com/repos/bitcoin/bitcoin",
          "labels_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20861/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20861/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/20861/events",
          "html_url": "https://github.com/bitcoin/bitcoin/pull/20861",
          "number": 20861,
          "state": "closed",
          "state_reason": null,
          "title": "BIP 350: Implement Bech32m and use it for v1+ segwit addresses",
          "body": "This implements [BIP 350](https://github.com/bitcoin/bips/blob/master/bip-0350.mediawiki):\r\n* For segwit v1+ addresses, a new checksum algorithm called Bech32m is used.\r\n* Segwit v0 address keep using Bech32 as specified in [BIP 173](https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki).\r\n",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 241832923,
              "node_id": "MDU6TGFiZWwyNDE4MzI5MjM=",
              "url": "https://api.github.com/repos/bitcoin/bitcoin/labels/Utils/log/libs",
              "name": "Utils/log/libs",
              "description": "",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": true,
          "active_lock_reason": "resolved",
          "comments": 28,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/20861",
            "html_url": "https://github.com/bitcoin/bitcoin/pull/20861",
            "diff_url": "https://github.com/bitcoin/bitcoin/pull/20861.diff",
            "patch_url": "https://github.com/bitcoin/bitcoin/pull/20861.patch"
          },
          "closed_at": "2021-03-18T19:37:48Z",
          "created_at": "2021-01-05T21:43:26Z",
          "updated_at": "2022-08-18T18:29:00Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4264422673,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI2NDQyMjY3Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4264422673",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T05:09:41Z"
    },
    {
      "event": "reviewed",
      "id": 579414609,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5NDE0NjA5",
      "url": null,
      "actor": null,
      "commit_id": "ee35873d393d62601872fc26effa04e28ae021e1",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1056#pullrequestreview-579414609",
      "submitted_at": "2021-01-29T16:27:03Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1056"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4267721696,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI2NzcyMTY5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4267721696",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T19:38:13Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjEyOGE3YmNiNjBhZTJlY2EyNDYxY2NiMTdkMjliNTE4NmQxMzgyMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6128a7bcb60ae2eca2461ccb17d29b5186d13820",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6128a7bcb60ae2eca2461ccb17d29b5186d13820",
      "tree": {
        "sha": "a0cf0cdd038fd72cadcb71be0dcb69f88f22fc6a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a0cf0cdd038fd72cadcb71be0dcb69f88f22fc6a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/cf0b529e78860fa2d4fe77944091aa98c5e04624",
          "sha": "cf0b529e78860fa2d4fe77944091aa98c5e04624",
          "html_url": "https://github.com/bitcoin/bips/commit/cf0b529e78860fa2d4fe77944091aa98c5e04624"
        }
      ],
      "message": "Add BIP 350 (bech32m)",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-29T21:41:08Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2020-12-24T22:37:19Z"
      },
      "sha": "6128a7bcb60ae2eca2461ccb17d29b5186d13820"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZTE5Mjk4M2Y1YjFmYzdhMmEwNzM5OTA2MTAzZmQ2ZWQ4ZjM4M2M4ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e192983f5b1fc7a2a0739906103fd6ed8f383c8d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e192983f5b1fc7a2a0739906103fd6ed8f383c8d",
      "tree": {
        "sha": "69ffbbceb868723adec5d493a2ec5e0ef7b4b4a3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/69ffbbceb868723adec5d493a2ec5e0ef7b4b4a3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6128a7bcb60ae2eca2461ccb17d29b5186d13820",
          "sha": "6128a7bcb60ae2eca2461ccb17d29b5186d13820",
          "html_url": "https://github.com/bitcoin/bips/commit/6128a7bcb60ae2eca2461ccb17d29b5186d13820"
        }
      ],
      "message": "Update bip-0350.mediawiki\n\nCo-authored-by: andrewtoth <andrewstoth@gmail.com>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-29T21:41:08Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-29T19:33:20Z"
      },
      "sha": "e192983f5b1fc7a2a0739906103fd6ed8f383c8d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDM4NzRmZjNlYzBjYTA5MGExMmEwZjQ4NTYwZjNkODE5ZDliZWUxMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d3874ff3ec0ca090a12a0f48560f3d819d9bee10",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d3874ff3ec0ca090a12a0f48560f3d819d9bee10",
      "tree": {
        "sha": "d39cb3ce0cc1f2e1f97891dd37e638f0afb82bf2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d39cb3ce0cc1f2e1f97891dd37e638f0afb82bf2"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e192983f5b1fc7a2a0739906103fd6ed8f383c8d",
          "sha": "e192983f5b1fc7a2a0739906103fd6ed8f383c8d",
          "html_url": "https://github.com/bitcoin/bips/commit/e192983f5b1fc7a2a0739906103fd6ed8f383c8d"
        }
      ],
      "message": "Update bip-0350.mediawiki\n\nCo-authored-by: andrewtoth <andrewstoth@gmail.com>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-29T21:41:08Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-29T19:33:27Z"
      },
      "sha": "d3874ff3ec0ca090a12a0f48560f3d819d9bee10"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NjQ0NmYyYWYwYTc1ZTUxM2EwYzRiYWQwZGRhYWQ4ZDc5OGJkNWUyZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6446f2af0a75e513a0c4bad0ddaad8d798bd5e2d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6446f2af0a75e513a0c4bad0ddaad8d798bd5e2d",
      "tree": {
        "sha": "fdff43ff76b9662fdcaf940bcd1758067b0da130",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fdff43ff76b9662fdcaf940bcd1758067b0da130"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d3874ff3ec0ca090a12a0f48560f3d819d9bee10",
          "sha": "d3874ff3ec0ca090a12a0f48560f3d819d9bee10",
          "html_url": "https://github.com/bitcoin/bips/commit/d3874ff3ec0ca090a12a0f48560f3d819d9bee10"
        }
      ],
      "message": "Update bip-0350.mediawiki\n\nCo-authored-by: andrewtoth <andrewstoth@gmail.com>",
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-29T21:41:08Z"
      },
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter@wuille.net",
        "date": "2021-01-29T19:33:33Z"
      },
      "sha": "6446f2af0a75e513a0c4bad0ddaad8d798bd5e2d"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4268152920,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDI2ODE1MjkyMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4268152920",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-01-29T21:41:29Z"
    },
    {
      "event": "commented",
      "id": 771049448,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MTA0OTQ0OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/771049448",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T18:10:36Z",
      "updated_at": "2021-02-01T18:10:36Z",
      "author_association": "MEMBER",
      "body": "@luke-jr Ready for merge, I believe.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1056#issuecomment-771049448",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1056"
    },
    {
      "event": "mentioned",
      "id": 4275187987,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDI3NTE4Nzk4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4275187987",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T18:10:36Z"
    },
    {
      "event": "subscribed",
      "id": 4275187990,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQyNzUxODc5OTA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4275187990",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-01T18:10:36Z"
    },
    {
      "event": "merged",
      "id": 4287957767,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDI4Nzk1Nzc2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4287957767",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ab14d17218dd363c69653c3d13a8d5c16b2a8b7e",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/ab14d17218dd363c69653c3d13a8d5c16b2a8b7e",
      "created_at": "2021-02-03T22:58:31Z"
    },
    {
      "event": "closed",
      "id": 4287957776,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDI4Nzk1Nzc3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4287957776",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-03T22:58:31Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-04T00:26:17Z",
      "updated_at": "2021-02-04T00:26:17Z",
      "source": {
        "issue": {
          "id": 800818823,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NTY3MjQ0MDQ1",
          "url": "https://api.github.com/repos/bitcoin/bips/issues/1062",
          "repository_url": "https://api.github.com/repos/bitcoin/bips",
          "labels_url": "https://api.github.com/repos/bitcoin/bips/issues/1062/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1062/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bips/issues/1062/events",
          "html_url": "https://github.com/bitcoin/bips/pull/1062",
          "number": 1062,
          "state": "closed",
          "state_reason": null,
          "title": "A few lost improvements to BIP350",
          "body": "These are edits that I had when #1056 was first opened, but apparently got lost when updated it to include the BIP number. Add them back.",
          "user": {
            "login": "sipa",
            "id": 548488,
            "node_id": "MDQ6VXNlcjU0ODQ4OA==",
            "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/sipa",
            "html_url": "https://github.com/sipa",
            "followers_url": "https://api.github.com/users/sipa/followers",
            "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
            "organizations_url": "https://api.github.com/users/sipa/orgs",
            "repos_url": "https://api.github.com/users/sipa/repos",
            "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/sipa/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [],
          "assignees": [],
          "author_association": "MEMBER",
          "locked": false,
          "comments": 2,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bips/pulls/1062",
            "html_url": "https://github.com/bitcoin/bips/pull/1062",
            "diff_url": "https://github.com/bitcoin/bips/pull/1062.diff",
            "patch_url": "https://github.com/bitcoin/bips/pull/1062.patch"
          },
          "closed_at": "2021-02-09T22:04:17Z",
          "created_at": "2021-02-04T00:26:17Z",
          "updated_at": "2021-02-09T22:04:17Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/566938856",
      "pull_request_review_id": 579414609,
      "id": 566938856,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjkzODg1Ng==",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+<pre>\n+  BIP: 350\n+  Layer: Applications\n+  Title: Bech32m format for v1+ witness addresses\n+  Author: Pieter Wuille <pieter@wuille.net>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standard\n+  Created: 2020-12-16\n+  License: BSD-2-Clause\n+  Replaces: 173\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document defines an improved variant of Bech32 called '''Bech32m''', and amends BIP173 to use Bech32m for native segregated witness outputs of version 1 and later. Bech32 remains in use for segregated witness outputs of version 0.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+[[bip-0173.mediawiki|BIP173]] defined a generic checksummed base 32 encoded format called Bech32. It is in use for segregated witness outputs of version 0 (P2WPKH and P2WSH, see [[bip-0141.mediawiki|BIP141]]), and other applications.\n+\n+Bech32 has an unexpected [https://github.com/sipa/bech32/issues/51 weakness]: whenever the final character is a 'p', inserting or deleting any number of 'q' characters immediately preceding it does not invalidate the checksum. This does not affect existing uses of witness version 0 BIP173 addresses due to their restriction to two specific lengths, but may affect future uses and/or other applications using the Bech32 encoding.\n+\n+This document addresses that by specifying Bech32m, a variant of Bech32 that mitigates this insertion weakness and related issues.\n+\n+==Specification==\n+\n+We first specify the new checksum algorithm, and then document how it should be used for future Bitcoin addresses.\n+\n+===Bech32m===\n+\n+Bech32m modifies the checksum of the Bech32 specification, replacing the constant ''1'' that is xored into the checksum at the end with ''0x2bc830a3''. The resulting checksum verification and creation algorithm (in Python, cf. the code in [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32|BIP173 Bech32 section]):\n+\n+<pre>\n+BECH32M_CONST = 0x2bc830a3\n+\n+def bech32m_polymod(values):\n+  GEN = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n+  chk = 1\n+  for v in values:\n+    b = (chk >> 25)\n+    chk = (chk & 0x1ffffff) << 5 ^ v\n+    for i in range(5):\n+      chk ^= GEN[i] if ((b >> i) & 1) else 0\n+  return chk\n+\n+def bech32m_hrp_expand(s):\n+  return [ord(x) >> 5 for x in s] + [0] + [ord(x) & 31 for x in s]\n+\n+def bech32m_verify_checksum(hrp, data):\n+  return bech32m_polymod(bech32m_hrp_expand(hrp) + data) == BECH32M_CONST\n+\n+def bech32m_create_checksum(hrp, data):\n+  values = bech32m_hrp_expand(hrp) + data\n+  polymod = bech32m_polymod(values + [0,0,0,0,0,0]) ^ BECH32M_CONST\n+  return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n+</pre>\n+\n+All other aspects of Bech32 remain unchanged, including its human-readable parts (HRPs).\n+\n+A combined function to decode both Bech32 and Bech32m simultaneously could be written using:\n+\n+<pre>\n+class Encoding(Enum):\n+    BECH32 = 1\n+    BECH32M = 2\n+\n+def bech32_bech32m_verify_checksum(hrp, data):\n+    check = bech32_polymod(bech32_hrp_expand(hrp) + data)\n+    if check == 1:\n+        return Encoding.BECH32\n+    if const == BECH32M_CONST:\n+        return Encoding.BECH32M\n+    return None\n+</pre>\n+\n+which returns either None for failure, or one of the BECH32 / BECH32M enumeration values to indicate successful decoding according to the respective standard.\n+\n+===Addresses for segregated witness outputs===\n+\n+Version 0 outputs (specifically, P2WPKH and P2WSH addresses) continue to use Bech32<ref>'''Why not permit both Bech32 and Bech32m for v0 addresses?''' Permitting both encodings reduces the error detection capabilities (it makes it equivalent to only have 29 bits of checksum).</ref> as specified in BIP173. Addresses for segregated witness outputs version 1 through 16 use Bech32m. Again, all other aspects of the encoding remain the same, including the 'bc' HRP.\n+\n+To generate an address for a segregated witness output:\n+\n+* If its witness version is 0, encode it using Bech32.\n+* If its witness version is 1 or higher, encode it using Bech32m.\n+\n+To decode an address, client software should either decode with both a Bech32 and a Bech32m decoder<ref>'''Can a single string simultaneously be valid as Bech32 and Bech32m?''' No, a valid Bech32 and Bech32m string will always differ by at least 3 characters if they are the same length.</ref>, or use a decoder that supports both simultaneously. In both cases, the address decoder has to verify that the encoding matches what is expected for the decoded witness version (Bech32 for version 0, Bech32m for others).\n+\n+The following code demonstrates the checks that need to be performed. Refer to the Python code linked in the reference implementation section below for full details of the called functions.\n+\n+<pre>\n+def decode(hrp, addr):\n+    hrpgot, data, spec = bech32_decode(addr)\n+    if hrpgot != hrp:\n+        return (None, None)\n+    decoded = convertbits(data[1:], 5, 8, False)\n+    # Witness programs are between 2 and 40 bytes in length.\n+    if decoded is None or len(decoded) < 2 or len(decoded) > 40:\n+        return (None, None)\n+    # Witness versions are in range 0..16.\n+    if data[0] > 16:\n+        return (None, None)\n+    # Witness v0 programs must be exactly length 20 or 32.\n+    if data[0] == 0 and len(decoded) != 20 and len(decoded) != 32:\n+        return (None, None)\n+    # Witness v0 uses Bech32; v1 through v16 use Bech32m.\n+    if data[0] == 0 and spec != Encoding.BECH32 or data[0] != 0 and spec != Encoding.BECH32M:\n+        return (None, None)\n+    # Success.\n+    return (data[0], decoded)\n+</pre>\n+\n+'''Error locating'''\n+\n+Bech32m, like Bech32m, does support locating<ref>'''What about error correction?''' As explained in BIP173, introducing error correction reduces the ability to detect errors. While it is technically possible to correct a small number of errors due to Bech32(m)'s nature as a BCH code, implementations should refrain from using this for more than indicating where an error may be present.</ref> the positions of a few substitution errors. To combine this functionality with",
      "path": "bip-0350.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "6446f2af0a75e513a0c4bad0ddaad8d798bd5e2d",
      "original_commit_id": "ee35873d393d62601872fc26effa04e28ae021e1",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nBech32m, like Bech32, does support locating<ref>'''What about error correction?''' As explained in BIP173, introducing error correction reduces the ability to detect errors. While it is technically possible to correct a small number of errors due to Bech32(m)'s nature as a BCH code, implementations should refrain from using this for more than indicating where an error may be present.</ref> the positions of a few substitution errors. To combine this functionality with\r\n```",
      "created_at": "2021-01-29T16:24:49Z",
      "updated_at": "2021-01-29T21:41:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1056#discussion_r566938856",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/566938856"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1056"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/566939396",
      "pull_request_review_id": 579414609,
      "id": 566939396,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjkzOTM5Ng==",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+<pre>\n+  BIP: 350\n+  Layer: Applications\n+  Title: Bech32m format for v1+ witness addresses\n+  Author: Pieter Wuille <pieter@wuille.net>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standard\n+  Created: 2020-12-16\n+  License: BSD-2-Clause\n+  Replaces: 173\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document defines an improved variant of Bech32 called '''Bech32m''', and amends BIP173 to use Bech32m for native segregated witness outputs of version 1 and later. Bech32 remains in use for segregated witness outputs of version 0.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+[[bip-0173.mediawiki|BIP173]] defined a generic checksummed base 32 encoded format called Bech32. It is in use for segregated witness outputs of version 0 (P2WPKH and P2WSH, see [[bip-0141.mediawiki|BIP141]]), and other applications.\n+\n+Bech32 has an unexpected [https://github.com/sipa/bech32/issues/51 weakness]: whenever the final character is a 'p', inserting or deleting any number of 'q' characters immediately preceding it does not invalidate the checksum. This does not affect existing uses of witness version 0 BIP173 addresses due to their restriction to two specific lengths, but may affect future uses and/or other applications using the Bech32 encoding.\n+\n+This document addresses that by specifying Bech32m, a variant of Bech32 that mitigates this insertion weakness and related issues.\n+\n+==Specification==\n+\n+We first specify the new checksum algorithm, and then document how it should be used for future Bitcoin addresses.\n+\n+===Bech32m===\n+\n+Bech32m modifies the checksum of the Bech32 specification, replacing the constant ''1'' that is xored into the checksum at the end with ''0x2bc830a3''. The resulting checksum verification and creation algorithm (in Python, cf. the code in [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32|BIP173 Bech32 section]):\n+\n+<pre>\n+BECH32M_CONST = 0x2bc830a3\n+\n+def bech32m_polymod(values):\n+  GEN = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n+  chk = 1\n+  for v in values:\n+    b = (chk >> 25)\n+    chk = (chk & 0x1ffffff) << 5 ^ v\n+    for i in range(5):\n+      chk ^= GEN[i] if ((b >> i) & 1) else 0\n+  return chk\n+\n+def bech32m_hrp_expand(s):\n+  return [ord(x) >> 5 for x in s] + [0] + [ord(x) & 31 for x in s]\n+\n+def bech32m_verify_checksum(hrp, data):\n+  return bech32m_polymod(bech32m_hrp_expand(hrp) + data) == BECH32M_CONST\n+\n+def bech32m_create_checksum(hrp, data):\n+  values = bech32m_hrp_expand(hrp) + data\n+  polymod = bech32m_polymod(values + [0,0,0,0,0,0]) ^ BECH32M_CONST\n+  return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n+</pre>\n+\n+All other aspects of Bech32 remain unchanged, including its human-readable parts (HRPs).\n+\n+A combined function to decode both Bech32 and Bech32m simultaneously could be written using:\n+\n+<pre>\n+class Encoding(Enum):\n+    BECH32 = 1\n+    BECH32M = 2\n+\n+def bech32_bech32m_verify_checksum(hrp, data):\n+    check = bech32_polymod(bech32_hrp_expand(hrp) + data)\n+    if check == 1:\n+        return Encoding.BECH32\n+    if const == BECH32M_CONST:\n+        return Encoding.BECH32M\n+    return None\n+</pre>\n+\n+which returns either None for failure, or one of the BECH32 / BECH32M enumeration values to indicate successful decoding according to the respective standard.\n+\n+===Addresses for segregated witness outputs===\n+\n+Version 0 outputs (specifically, P2WPKH and P2WSH addresses) continue to use Bech32<ref>'''Why not permit both Bech32 and Bech32m for v0 addresses?''' Permitting both encodings reduces the error detection capabilities (it makes it equivalent to only have 29 bits of checksum).</ref> as specified in BIP173. Addresses for segregated witness outputs version 1 through 16 use Bech32m. Again, all other aspects of the encoding remain the same, including the 'bc' HRP.\n+\n+To generate an address for a segregated witness output:\n+\n+* If its witness version is 0, encode it using Bech32.\n+* If its witness version is 1 or higher, encode it using Bech32m.\n+\n+To decode an address, client software should either decode with both a Bech32 and a Bech32m decoder<ref>'''Can a single string simultaneously be valid as Bech32 and Bech32m?''' No, a valid Bech32 and Bech32m string will always differ by at least 3 characters if they are the same length.</ref>, or use a decoder that supports both simultaneously. In both cases, the address decoder has to verify that the encoding matches what is expected for the decoded witness version (Bech32 for version 0, Bech32m for others).\n+\n+The following code demonstrates the checks that need to be performed. Refer to the Python code linked in the reference implementation section below for full details of the called functions.\n+\n+<pre>\n+def decode(hrp, addr):\n+    hrpgot, data, spec = bech32_decode(addr)\n+    if hrpgot != hrp:\n+        return (None, None)\n+    decoded = convertbits(data[1:], 5, 8, False)\n+    # Witness programs are between 2 and 40 bytes in length.\n+    if decoded is None or len(decoded) < 2 or len(decoded) > 40:\n+        return (None, None)\n+    # Witness versions are in range 0..16.\n+    if data[0] > 16:\n+        return (None, None)\n+    # Witness v0 programs must be exactly length 20 or 32.\n+    if data[0] == 0 and len(decoded) != 20 and len(decoded) != 32:\n+        return (None, None)\n+    # Witness v0 uses Bech32; v1 through v16 use Bech32m.\n+    if data[0] == 0 and spec != Encoding.BECH32 or data[0] != 0 and spec != Encoding.BECH32M:\n+        return (None, None)\n+    # Success.\n+    return (data[0], decoded)\n+</pre>\n+\n+'''Error locating'''\n+\n+Bech32m, like Bech32m, does support locating<ref>'''What about error correction?''' As explained in BIP173, introducing error correction reduces the ability to detect errors. While it is technically possible to correct a small number of errors due to Bech32(m)'s nature as a BCH code, implementations should refrain from using this for more than indicating where an error may be present.</ref> the positions of a few substitution errors. To combine this functionality with\n+the segregated witness addresses proposed by this document, simply try locating errors for both Bech32 and Bech32m. If only one finds error locations, report that one. If both do (which should be very rare),\n+there are a number of options:\n+* Report the one that needs fewer corrections (if they differ).\n+* Eliminate the response(s) that are inconsistent. Any symbol that isn't on an error location can be checked. For example, if the witness version symbol is not an error location, and it doesn't correspond to the specification used (0 for Bech32, 1+ for Bech32m), that response can be eliminated.\n+\n+See the fancy Javascript decoder below for example of the above.\n+\n+==Compatibility==\n+\n+This document introduces a new encoding for v1 segregated witness outputs and higher versions. There should not be any compatibility issues on the receiver side; no wallets are creating v1 segregated witness addresses yet, as the output type is not usable on mainnet.\n+\n+On the other hand, the Bech32m proposal breaks forward-compatibility for sending to v1 and higher version segregated witness addresses. This incompatibility is [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-October/018236.html intentional]. An alternative design was [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-November/017460.html considered] where Bech32 remained in use for certain subsets of future addresses, but ultimately [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/018293.html discarded]. By introducing a clean break, we protect not only new software but also existing senders from the mutation issue, as new addresses will be incompatible with the existing Bech32 address validation. [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-November/018268.html Experiments] by Taproot proponents had shown that hardly any wallets and services supported sending to higher segregated witness output versions, so little is lost by [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/018298.html breaking] forward-compatibility. Furthermore, those experiments identified cases in which segregated witness implementations would have caused wallets to burn funds when sending to version 1 addresses. In case it is still in use, the chosen approach will prevent such software from destroying funds when attempting to send to a Bech32m address.\n+\n+==Reference implementations==\n+\n+* Reference encoder and decoder:\n+** [https://github.com/sipa/bech32/tree/bech32m/ref/python Reference Python implementation]\n+** [https://github.com/sipa/bech32/tree/bech32m/ref/c Reference C implementation]\n+** [https://github.com/sipa/bech32/tree/bech32m/ref/c++ Reference C++ implementation]\n+** [https://github.com/bitcoin/bitcoin/pull/20861 Bitcoin Core C++ implementation]\n+** [https://github.com/sipa/bech32/tree/bech32m/ref/javascript Reference Javascript implementation]\n+\n+* Fancy decoder that localizes errors:\n+** [https://github.com/sipa/bech32/tree/bech32m/ecc/javascript For JavaScript] ([http://bitcoin.sipa.be/bech32/demo/demo.html demo website])\n+\n+==Test vectors==\n+\n+'''Implementation advice''' Experiments testing BIP173 implementations found that many wallets and services did not support sending to higher version segregated witness outputs. In anticipation of the proposed [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki Taproot] soft fork introducing v1 segregated witness outputs on the network, we emphatically recommend employing the complete set of test vectors provided below as well as ensuring that your implementation supports sending to v1 '''and higher versions'''. All higher versions of native segregated witness outputs should be recognized as valid recipients. As higher versions are not defined on the network, no wallet should ever create them and no recipient should ever provide them to a sender. Nor should a recipient ever want to falsely provide them as the recipient would simply see a payment intended to themselves burned instead. However, by defining higher versions as valid recipients now, future soft forks introducing higher versions of native segwit outputs will be forward-compatible to all wallets correctly implementing the Bech32m specification.\n+\n+===Test vectors for Bech32m===\n+\n+The following strings are valid Bech32m:\n+* <tt>A1LQFN3A</tt>\n+* <tt>a1lqfn3a</tt>\n+* <tt>an83characterlonghumanreadablepartthatcontainsthetheexcludedcharactersbioandnumber11sg7hg6</tt>\n+* <tt>abcdef1l7aum6echk45nj3s0wdvt2fg8x9yrzpqzd3ryx</tt>\n+* <tt>11llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllludsr8</tt>\n+* <tt>split1checkupstagehandshakeupstreamerranterredcaperredlc445v</tt>\n+* <tt>?1v759aa</tt>\n+\n+No string can be simultaneously valid Bech32 and Bech32m, so the above examples also serve as invalid test vectors for Bech32.\n+\n+The following string are not valid Bech32m (with reason for invalidity):\n+* 0x20 + <tt>1xj0phk</tt>: HRP character out of range\n+* 0x7F + <tt>1g6xzxy</tt>: HRP character out of range\n+* 0x80 + <tt>1vctc34</tt>: HRP character out of range\n+* <tt>an84characterslonghumanreadablepartthatcontainsthetheexcludedcharactersbioandnumber11d6pts4</tt>: overall max length exceeded\n+* <tt>qyrz8wqd2c9m</tt>: No separator character\n+* <tt>1qyrz8wqd2c9m</tt>: Empty HRP\n+* <tt>y1b0jsk6g</tt>: Invalid data character\n+* <tt>lt1igcx5c0</tt>: Invalid data character\n+* <tt>in1muywd</tt>: Too short checksum\n+* <tt>mm1crxm3i</tt>: Invalid character in checksum\n+* <tt>au1s5cgom</tt>: Invalid character in checksum\n+* <tt>M1VUXWEZ</tt>: checksum calculated with uppercase form of HRP\n+* <tt>16plkw9</tt>: empty HRP\n+* <tt>1p2gdwpf</tt>: empty HRP\n+\n+===Test vectors for v0-v16 native segregated witness addresses===\n+\n+The following list gives valid segwit addresses and the scriptPubKey that they\n+translate to in hex.\n+* <tt>BC1QW508D6QEJXTDG4Y5R3ZARVARY0C5XW7KV8F3T4</tt>: <tt>0014751e76e8199196d454941c45d1b3a323f1433bd6</tt>\n+* <tt>tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7</tt>: <tt>00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262</tt>\n+* <tt>bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kt5nd6y</tt>: <tt>5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6</tt>\n+* <tt>BC1SW50QGDZ25J</tt>: <tt>6002751e</tt>\n+* <tt>bc1zw508d6qejxtdg4y5r3zarvaryvaxxpcs</tt>: <tt>5210751e76e8199196d454941c45d1b3a323</tt>\n+* <tt>tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy</tt>: <tt>0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433</tt>\n+* <tt>tb1pqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesf3hn0c</tt>: <tt>5120000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433</tt>\n+* <tt>bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqzk5jj0</tt>: <tt>512079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</tt>\n+\n+The following list gives invalid segwit addresses and the reason for\n+their invalidity.\n+* <tt>tc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vq5zuyut</tt>: Invalid human-readable part\n+* <tt>bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqh2y7hd</tt>: Invalid checksum (Bech32 instead of Bech32m)\n+* <tt>tb1z0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqglt7rf</tt>: Invalid checksum (Bech32 instead of Bech32m)\n+* <tt>BC1S0XLXVLHEMJA6C4DQV22UAPCTQUPFHLXM9H8Z3K2E72Q4K9HCZ7VQ54WELL</tt>: Invalid checksum (Bech32 instead of Bech32m)\n+* <tt>bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kemeawh</tt>: Invalid checksum (Bech32m instead of Bech32)\n+* <tt>tb1q0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vq24jc47</tt>: Invalid checksum (Bech32m instead of Bech32)\n+* <tt>bc1p38j9r5y49hruaue7wxjce0updqjuyyx0kh56v8s25huc6995vvpql3jow4</tt>: Invalid character in checksum\n+* <tt>BC130XLXVLHEMJA6C4DQV22UAPCTQUPFHLXM9H8Z3K2E72Q4K9HCZ7VQ7ZWS8R</tt>: Invalid witness version\n+* <tt>bc1pw5dgrnzv</tt>: Invalid program length (1 byte)\n+* <tt>bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7v8n0nx0muaewav253zgeav</tt>: Invalid program length (41 bytes)\n+* <tt>BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P</tt>: Invalid program length for witness version 0 (per BIP141)\n+* <tt>tb1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vq47Zagq</tt>: Mixed case\n+* <tt>bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7v07qwwzcrf</tt>: zero padding of more than 4 bits\n+* <tt>tb1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vpggkg4j</tt>: Non-zero padding in 8-to-5 conversion\n+* <tt>bc1gmk9yu</tt>: Empty data section\n+\n+\n+==Appendix: checksum design & properties==\n+\n+Checksums are used to detect errors introduced into data during transfer. A hash function-based checksum such as Base58Check detects any type of error uniformly, but not all classes of errors are equally likely to occur in practice. Bech32 prioritizes detection of substitution errors, but improving detection of one error class inevitably worsens detection of other error classes. During the design of Bech32, it was assumed that other simple error patterns beside substitutions would have a similar detection rate as in a hash function-based design, and detection would only be worse for complex, impractical errors. The discovered insertion weakness shows that this is not the case.\n+\n+For Bech32m, we aim to retain Bech32's guarantees for substitution errors, but make sure that other common errors don't perform worse than a hash function-based checksum would. To make sure the new standard is easy to implement, we restrict the design space to only amending the final constant that is xored in, as it was [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-December/017521.html observed] that that is sufficient to mitigate the 'q' insertion issue while retaining the intended substitution error detection. In what follows, we explain how the new constant ''0x2bc830a3'' was chosen.\n+\n+===Error patterns & detection probability===\n+\n+We define an error pattern as a sequence of first one or more deletions, then swaps of adjacent characters, followed by substitutions, insertions, and duplications, in that order, all in specific positions, applied to a string with valid checksum that is otherwise randomly chosen. For insertions and substitutions we assume a uniformly random new character. For example, \"delete the 17th character, swap the 11th character with the 12th character, and insert a random character in the 24th position\" is an error pattern. \"Replace the 43th through 48th character with 'aardvark'\" is not a valid error pattern, because the new characters are not random and there is no reason why this particular string is more likely than any other to be substituted.",
      "path": "bip-0350.mediawiki",
      "position": null,
      "original_position": 222,
      "commit_id": "6446f2af0a75e513a0c4bad0ddaad8d798bd5e2d",
      "original_commit_id": "ee35873d393d62601872fc26effa04e28ae021e1",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\nWe define an error pattern as a sequence of first one or more deletions, then swaps of adjacent characters, followed by substitutions, insertions, and duplications, in that order, all in specific positions, applied to a string with valid checksum that is otherwise randomly chosen. For insertions and substitutions we assume a uniformly random new character. For example, \"delete the 17th character, swap the 11th character with the 12th character, and insert a random character in the 24th position\" is an error pattern. \"Replace the 43rd through 48th character with 'aardvark'\" is not a valid error pattern, because the new characters are not random and there is no reason why this particular string is more likely than any other to be substituted.\r\n```",
      "created_at": "2021-01-29T16:25:38Z",
      "updated_at": "2021-01-29T21:41:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1056#discussion_r566939396",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/566939396"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1056"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 222,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/566939743",
      "pull_request_review_id": 579414609,
      "id": 566939743,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjkzOTc0Mw==",
      "diff_hunk": "@@ -0,0 +1,332 @@\n+<pre>\n+  BIP: 350\n+  Layer: Applications\n+  Title: Bech32m format for v1+ witness addresses\n+  Author: Pieter Wuille <pieter@wuille.net>\n+  Comments-Summary: No comments yet.\n+  Comments-URI:\n+  Status: Draft\n+  Type: Standard\n+  Created: 2020-12-16\n+  License: BSD-2-Clause\n+  Replaces: 173\n+</pre>\n+\n+==Introduction==\n+\n+===Abstract===\n+\n+This document defines an improved variant of Bech32 called '''Bech32m''', and amends BIP173 to use Bech32m for native segregated witness outputs of version 1 and later. Bech32 remains in use for segregated witness outputs of version 0.\n+\n+===Copyright===\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+===Motivation===\n+\n+[[bip-0173.mediawiki|BIP173]] defined a generic checksummed base 32 encoded format called Bech32. It is in use for segregated witness outputs of version 0 (P2WPKH and P2WSH, see [[bip-0141.mediawiki|BIP141]]), and other applications.\n+\n+Bech32 has an unexpected [https://github.com/sipa/bech32/issues/51 weakness]: whenever the final character is a 'p', inserting or deleting any number of 'q' characters immediately preceding it does not invalidate the checksum. This does not affect existing uses of witness version 0 BIP173 addresses due to their restriction to two specific lengths, but may affect future uses and/or other applications using the Bech32 encoding.\n+\n+This document addresses that by specifying Bech32m, a variant of Bech32 that mitigates this insertion weakness and related issues.\n+\n+==Specification==\n+\n+We first specify the new checksum algorithm, and then document how it should be used for future Bitcoin addresses.\n+\n+===Bech32m===\n+\n+Bech32m modifies the checksum of the Bech32 specification, replacing the constant ''1'' that is xored into the checksum at the end with ''0x2bc830a3''. The resulting checksum verification and creation algorithm (in Python, cf. the code in [https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32|BIP173 Bech32 section]):\n+\n+<pre>\n+BECH32M_CONST = 0x2bc830a3\n+\n+def bech32m_polymod(values):\n+  GEN = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3]\n+  chk = 1\n+  for v in values:\n+    b = (chk >> 25)\n+    chk = (chk & 0x1ffffff) << 5 ^ v\n+    for i in range(5):\n+      chk ^= GEN[i] if ((b >> i) & 1) else 0\n+  return chk\n+\n+def bech32m_hrp_expand(s):\n+  return [ord(x) >> 5 for x in s] + [0] + [ord(x) & 31 for x in s]\n+\n+def bech32m_verify_checksum(hrp, data):\n+  return bech32m_polymod(bech32m_hrp_expand(hrp) + data) == BECH32M_CONST\n+\n+def bech32m_create_checksum(hrp, data):\n+  values = bech32m_hrp_expand(hrp) + data\n+  polymod = bech32m_polymod(values + [0,0,0,0,0,0]) ^ BECH32M_CONST\n+  return [(polymod >> 5 * (5 - i)) & 31 for i in range(6)]\n+</pre>\n+\n+All other aspects of Bech32 remain unchanged, including its human-readable parts (HRPs).\n+\n+A combined function to decode both Bech32 and Bech32m simultaneously could be written using:\n+\n+<pre>\n+class Encoding(Enum):\n+    BECH32 = 1\n+    BECH32M = 2\n+\n+def bech32_bech32m_verify_checksum(hrp, data):\n+    check = bech32_polymod(bech32_hrp_expand(hrp) + data)\n+    if check == 1:\n+        return Encoding.BECH32\n+    if const == BECH32M_CONST:\n+        return Encoding.BECH32M\n+    return None\n+</pre>\n+\n+which returns either None for failure, or one of the BECH32 / BECH32M enumeration values to indicate successful decoding according to the respective standard.\n+\n+===Addresses for segregated witness outputs===\n+\n+Version 0 outputs (specifically, P2WPKH and P2WSH addresses) continue to use Bech32<ref>'''Why not permit both Bech32 and Bech32m for v0 addresses?''' Permitting both encodings reduces the error detection capabilities (it makes it equivalent to only have 29 bits of checksum).</ref> as specified in BIP173. Addresses for segregated witness outputs version 1 through 16 use Bech32m. Again, all other aspects of the encoding remain the same, including the 'bc' HRP.\n+\n+To generate an address for a segregated witness output:\n+\n+* If its witness version is 0, encode it using Bech32.\n+* If its witness version is 1 or higher, encode it using Bech32m.\n+\n+To decode an address, client software should either decode with both a Bech32 and a Bech32m decoder<ref>'''Can a single string simultaneously be valid as Bech32 and Bech32m?''' No, a valid Bech32 and Bech32m string will always differ by at least 3 characters if they are the same length.</ref>, or use a decoder that supports both simultaneously. In both cases, the address decoder has to verify that the encoding matches what is expected for the decoded witness version (Bech32 for version 0, Bech32m for others).\n+\n+The following code demonstrates the checks that need to be performed. Refer to the Python code linked in the reference implementation section below for full details of the called functions.\n+\n+<pre>\n+def decode(hrp, addr):\n+    hrpgot, data, spec = bech32_decode(addr)\n+    if hrpgot != hrp:\n+        return (None, None)\n+    decoded = convertbits(data[1:], 5, 8, False)\n+    # Witness programs are between 2 and 40 bytes in length.\n+    if decoded is None or len(decoded) < 2 or len(decoded) > 40:\n+        return (None, None)\n+    # Witness versions are in range 0..16.\n+    if data[0] > 16:\n+        return (None, None)\n+    # Witness v0 programs must be exactly length 20 or 32.\n+    if data[0] == 0 and len(decoded) != 20 and len(decoded) != 32:\n+        return (None, None)\n+    # Witness v0 uses Bech32; v1 through v16 use Bech32m.\n+    if data[0] == 0 and spec != Encoding.BECH32 or data[0] != 0 and spec != Encoding.BECH32M:\n+        return (None, None)\n+    # Success.\n+    return (data[0], decoded)\n+</pre>\n+\n+'''Error locating'''\n+\n+Bech32m, like Bech32m, does support locating<ref>'''What about error correction?''' As explained in BIP173, introducing error correction reduces the ability to detect errors. While it is technically possible to correct a small number of errors due to Bech32(m)'s nature as a BCH code, implementations should refrain from using this for more than indicating where an error may be present.</ref> the positions of a few substitution errors. To combine this functionality with\n+the segregated witness addresses proposed by this document, simply try locating errors for both Bech32 and Bech32m. If only one finds error locations, report that one. If both do (which should be very rare),\n+there are a number of options:\n+* Report the one that needs fewer corrections (if they differ).\n+* Eliminate the response(s) that are inconsistent. Any symbol that isn't on an error location can be checked. For example, if the witness version symbol is not an error location, and it doesn't correspond to the specification used (0 for Bech32, 1+ for Bech32m), that response can be eliminated.\n+\n+See the fancy Javascript decoder below for example of the above.\n+\n+==Compatibility==\n+\n+This document introduces a new encoding for v1 segregated witness outputs and higher versions. There should not be any compatibility issues on the receiver side; no wallets are creating v1 segregated witness addresses yet, as the output type is not usable on mainnet.\n+\n+On the other hand, the Bech32m proposal breaks forward-compatibility for sending to v1 and higher version segregated witness addresses. This incompatibility is [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-October/018236.html intentional]. An alternative design was [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-November/017460.html considered] where Bech32 remained in use for certain subsets of future addresses, but ultimately [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/018293.html discarded]. By introducing a clean break, we protect not only new software but also existing senders from the mutation issue, as new addresses will be incompatible with the existing Bech32 address validation. [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-November/018268.html Experiments] by Taproot proponents had shown that hardly any wallets and services supported sending to higher segregated witness output versions, so little is lost by [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-December/018298.html breaking] forward-compatibility. Furthermore, those experiments identified cases in which segregated witness implementations would have caused wallets to burn funds when sending to version 1 addresses. In case it is still in use, the chosen approach will prevent such software from destroying funds when attempting to send to a Bech32m address.\n+\n+==Reference implementations==\n+\n+* Reference encoder and decoder:\n+** [https://github.com/sipa/bech32/tree/bech32m/ref/python Reference Python implementation]\n+** [https://github.com/sipa/bech32/tree/bech32m/ref/c Reference C implementation]\n+** [https://github.com/sipa/bech32/tree/bech32m/ref/c++ Reference C++ implementation]\n+** [https://github.com/bitcoin/bitcoin/pull/20861 Bitcoin Core C++ implementation]\n+** [https://github.com/sipa/bech32/tree/bech32m/ref/javascript Reference Javascript implementation]\n+\n+* Fancy decoder that localizes errors:\n+** [https://github.com/sipa/bech32/tree/bech32m/ecc/javascript For JavaScript] ([http://bitcoin.sipa.be/bech32/demo/demo.html demo website])\n+\n+==Test vectors==\n+\n+'''Implementation advice''' Experiments testing BIP173 implementations found that many wallets and services did not support sending to higher version segregated witness outputs. In anticipation of the proposed [https://github.com/bitcoin/bips/blob/master/bip-0341.mediawiki Taproot] soft fork introducing v1 segregated witness outputs on the network, we emphatically recommend employing the complete set of test vectors provided below as well as ensuring that your implementation supports sending to v1 '''and higher versions'''. All higher versions of native segregated witness outputs should be recognized as valid recipients. As higher versions are not defined on the network, no wallet should ever create them and no recipient should ever provide them to a sender. Nor should a recipient ever want to falsely provide them as the recipient would simply see a payment intended to themselves burned instead. However, by defining higher versions as valid recipients now, future soft forks introducing higher versions of native segwit outputs will be forward-compatible to all wallets correctly implementing the Bech32m specification.\n+\n+===Test vectors for Bech32m===\n+\n+The following strings are valid Bech32m:\n+* <tt>A1LQFN3A</tt>\n+* <tt>a1lqfn3a</tt>\n+* <tt>an83characterlonghumanreadablepartthatcontainsthetheexcludedcharactersbioandnumber11sg7hg6</tt>\n+* <tt>abcdef1l7aum6echk45nj3s0wdvt2fg8x9yrzpqzd3ryx</tt>\n+* <tt>11llllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllludsr8</tt>\n+* <tt>split1checkupstagehandshakeupstreamerranterredcaperredlc445v</tt>\n+* <tt>?1v759aa</tt>\n+\n+No string can be simultaneously valid Bech32 and Bech32m, so the above examples also serve as invalid test vectors for Bech32.\n+\n+The following string are not valid Bech32m (with reason for invalidity):\n+* 0x20 + <tt>1xj0phk</tt>: HRP character out of range\n+* 0x7F + <tt>1g6xzxy</tt>: HRP character out of range\n+* 0x80 + <tt>1vctc34</tt>: HRP character out of range\n+* <tt>an84characterslonghumanreadablepartthatcontainsthetheexcludedcharactersbioandnumber11d6pts4</tt>: overall max length exceeded\n+* <tt>qyrz8wqd2c9m</tt>: No separator character\n+* <tt>1qyrz8wqd2c9m</tt>: Empty HRP\n+* <tt>y1b0jsk6g</tt>: Invalid data character\n+* <tt>lt1igcx5c0</tt>: Invalid data character\n+* <tt>in1muywd</tt>: Too short checksum\n+* <tt>mm1crxm3i</tt>: Invalid character in checksum\n+* <tt>au1s5cgom</tt>: Invalid character in checksum\n+* <tt>M1VUXWEZ</tt>: checksum calculated with uppercase form of HRP\n+* <tt>16plkw9</tt>: empty HRP\n+* <tt>1p2gdwpf</tt>: empty HRP\n+\n+===Test vectors for v0-v16 native segregated witness addresses===\n+\n+The following list gives valid segwit addresses and the scriptPubKey that they\n+translate to in hex.\n+* <tt>BC1QW508D6QEJXTDG4Y5R3ZARVARY0C5XW7KV8F3T4</tt>: <tt>0014751e76e8199196d454941c45d1b3a323f1433bd6</tt>\n+* <tt>tb1qrp33g0q5c5txsp9arysrx4k6zdkfs4nce4xj0gdcccefvpysxf3q0sl5k7</tt>: <tt>00201863143c14c5166804bd19203356da136c985678cd4d27a1b8c6329604903262</tt>\n+* <tt>bc1pw508d6qejxtdg4y5r3zarvary0c5xw7kw508d6qejxtdg4y5r3zarvary0c5xw7kt5nd6y</tt>: <tt>5128751e76e8199196d454941c45d1b3a323f1433bd6751e76e8199196d454941c45d1b3a323f1433bd6</tt>\n+* <tt>BC1SW50QGDZ25J</tt>: <tt>6002751e</tt>\n+* <tt>bc1zw508d6qejxtdg4y5r3zarvaryvaxxpcs</tt>: <tt>5210751e76e8199196d454941c45d1b3a323</tt>\n+* <tt>tb1qqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesrxh6hy</tt>: <tt>0020000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433</tt>\n+* <tt>tb1pqqqqp399et2xygdj5xreqhjjvcmzhxw4aywxecjdzew6hylgvsesf3hn0c</tt>: <tt>5120000000c4a5cad46221b2a187905e5266362b99d5e91c6ce24d165dab93e86433</tt>\n+* <tt>bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqzk5jj0</tt>: <tt>512079be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798</tt>\n+\n+The following list gives invalid segwit addresses and the reason for\n+their invalidity.\n+* <tt>tc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vq5zuyut</tt>: Invalid human-readable part\n+* <tt>bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqh2y7hd</tt>: Invalid checksum (Bech32 instead of Bech32m)\n+* <tt>tb1z0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vqglt7rf</tt>: Invalid checksum (Bech32 instead of Bech32m)\n+* <tt>BC1S0XLXVLHEMJA6C4DQV22UAPCTQUPFHLXM9H8Z3K2E72Q4K9HCZ7VQ54WELL</tt>: Invalid checksum (Bech32 instead of Bech32m)\n+* <tt>bc1qw508d6qejxtdg4y5r3zarvary0c5xw7kemeawh</tt>: Invalid checksum (Bech32m instead of Bech32)\n+* <tt>tb1q0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vq24jc47</tt>: Invalid checksum (Bech32m instead of Bech32)\n+* <tt>bc1p38j9r5y49hruaue7wxjce0updqjuyyx0kh56v8s25huc6995vvpql3jow4</tt>: Invalid character in checksum\n+* <tt>BC130XLXVLHEMJA6C4DQV22UAPCTQUPFHLXM9H8Z3K2E72Q4K9HCZ7VQ7ZWS8R</tt>: Invalid witness version\n+* <tt>bc1pw5dgrnzv</tt>: Invalid program length (1 byte)\n+* <tt>bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7v8n0nx0muaewav253zgeav</tt>: Invalid program length (41 bytes)\n+* <tt>BC1QR508D6QEJXTDG4Y5R3ZARVARYV98GJ9P</tt>: Invalid program length for witness version 0 (per BIP141)\n+* <tt>tb1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vq47Zagq</tt>: Mixed case\n+* <tt>bc1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7v07qwwzcrf</tt>: zero padding of more than 4 bits\n+* <tt>tb1p0xlxvlhemja6c4dqv22uapctqupfhlxm9h8z3k2e72q4k9hcz7vpggkg4j</tt>: Non-zero padding in 8-to-5 conversion\n+* <tt>bc1gmk9yu</tt>: Empty data section\n+\n+\n+==Appendix: checksum design & properties==\n+\n+Checksums are used to detect errors introduced into data during transfer. A hash function-based checksum such as Base58Check detects any type of error uniformly, but not all classes of errors are equally likely to occur in practice. Bech32 prioritizes detection of substitution errors, but improving detection of one error class inevitably worsens detection of other error classes. During the design of Bech32, it was assumed that other simple error patterns beside substitutions would have a similar detection rate as in a hash function-based design, and detection would only be worse for complex, impractical errors. The discovered insertion weakness shows that this is not the case.\n+\n+For Bech32m, we aim to retain Bech32's guarantees for substitution errors, but make sure that other common errors don't perform worse than a hash function-based checksum would. To make sure the new standard is easy to implement, we restrict the design space to only amending the final constant that is xored in, as it was [https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2019-December/017521.html observed] that that is sufficient to mitigate the 'q' insertion issue while retaining the intended substitution error detection. In what follows, we explain how the new constant ''0x2bc830a3'' was chosen.\n+\n+===Error patterns & detection probability===\n+\n+We define an error pattern as a sequence of first one or more deletions, then swaps of adjacent characters, followed by substitutions, insertions, and duplications, in that order, all in specific positions, applied to a string with valid checksum that is otherwise randomly chosen. For insertions and substitutions we assume a uniformly random new character. For example, \"delete the 17th character, swap the 11th character with the 12th character, and insert a random character in the 24th position\" is an error pattern. \"Replace the 43th through 48th character with 'aardvark'\" is not a valid error pattern, because the new characters are not random and there is no reason why this particular string is more likely than any other to be substituted.\n+\n+A hash function-based checksum design with a 30-bit hash would have a probability of incorrectly accepting equal to ''2<sup>-30</sup>'', for every error pattern. Bech32 has a probability of 0 to incorrectly accept error patterns consisting of up to 4 substitutions—they are always detected. The 'q'-insertion issue shows that for Bech32 a simple error pattern (\"insert a random character in the penultimate position\") with probability ''2<sup>-10</sup>'' exists: it requires the final character to be 'p' (leaving only  1 in 32 strings), and requires the inserted character to be 'q' (permitting only 1 of 32 possible inserted characters).\n+\n+Note that the choice of ''what'' the error pattern is (which types of errors, and where) isn't part of our probabilities: we try to make sure that ''every'' pattern behaves well, not just randomly chosen ones, because presumably humans\n+make some kinds of errors more than others, and we cannot easily model which ones.\n+\n+===Detection properties of Bech32m===\n+\n+The table below shows the error detection properties of Bech32m, and a comparison with Bech32. The code used for this analysis can be found [https://gist.github.com/sipa/14c248c288c3880a3b191f978a34508e#file-const_analysis-cpp here]. Every row specifies one error pattern via the constraints in the left four columns. The remaining columns report what percentage of those patterns have certain probabilities of not being detected. The columns are:\n+\n+* '''errors''' The maximum number of individual errors considered\n+* '''of type''' What type of errors are considered (either \"subst. only\" for just substitutions, or \"any\" to also include deletions, swaps, insertions, and duplications)\n+* '''window''' The maximum size of the window in which the errors have to occur<ref>'''What is an error pattern’s window size?''' The window size of an error pattern is the length of the smallest consecutive range of characters that contains all modified characters (on input or output; whichever is larger). For example, an error pattern that turns \"abcdef\" into \"accdbef\" has a window size of 4, as it is replacing \"bcd\" with \"ccdb\", a 4 character string. Window size is only meaningful when the pattern consists of two or more errors.</ref>\n+* '''code/verifier''' Whether it about Bech32 or Bech32m encoded strings, and whether they are evaluated regarding their probability of being accepted by either a Bech32 or a Bech32m verifier.<ref>'''Why do we care about probability of accepting Bech32m strings in Bech32 verifiers?''' For applications where Bech32m replaces an existing use of Bech32 (such as segregated witness addresses), we want to make sure that a Bech32m string created by new software won’t be erroneously accepted by old software that assumes Bech32 - even when a small number of errors were introduced as well.</ref><ref>'''Should we also take into account failures that occur due to taking a valid Bech32m string, and after errors it becoming acceptable to a Bech32 verifier?''' This situation may in theory occur for segregated witness addresses when errors occur that change the version number in a v1+ address to v0. Due to the specificity of this type of error, plus the additional constraints that apply for v0 addresses, this is both unlikely and hard to analyze.</ref>",
      "path": "bip-0350.mediawiki",
      "position": null,
      "original_position": 236,
      "commit_id": "6446f2af0a75e513a0c4bad0ddaad8d798bd5e2d",
      "original_commit_id": "ee35873d393d62601872fc26effa04e28ae021e1",
      "in_reply_to_id": null,
      "user": {
        "login": "andrewtoth",
        "id": 237213,
        "node_id": "MDQ6VXNlcjIzNzIxMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/237213?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andrewtoth",
        "html_url": "https://github.com/andrewtoth",
        "followers_url": "https://api.github.com/users/andrewtoth/followers",
        "following_url": "https://api.github.com/users/andrewtoth/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/andrewtoth/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/andrewtoth/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/andrewtoth/subscriptions",
        "organizations_url": "https://api.github.com/users/andrewtoth/orgs",
        "repos_url": "https://api.github.com/users/andrewtoth/repos",
        "events_url": "https://api.github.com/users/andrewtoth/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/andrewtoth/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "```suggestion\r\n* '''code/verifier''' Whether it is about Bech32 or Bech32m encoded strings, and whether they are evaluated regarding their probability of being accepted by either a Bech32 or a Bech32m verifier.<ref>'''Why do we care about probability of accepting Bech32m strings in Bech32 verifiers?''' For applications where Bech32m replaces an existing use of Bech32 (such as segregated witness addresses), we want to make sure that a Bech32m string created by new software won’t be erroneously accepted by old software that assumes Bech32 - even when a small number of errors were introduced as well.</ref><ref>'''Should we also take into account failures that occur due to taking a valid Bech32m string, and after errors it becoming acceptable to a Bech32 verifier?''' This situation may in theory occur for segregated witness addresses when errors occur that change the version number in a v1+ address to v0. Due to the specificity of this type of error, plus the additional constraints that apply for v0 addresses, this is both unlikely and hard to analyze.</ref>\r\n```",
      "created_at": "2021-01-29T16:26:07Z",
      "updated_at": "2021-01-29T21:41:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1056#discussion_r566939743",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/566939743"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1056"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    }
  ]
}