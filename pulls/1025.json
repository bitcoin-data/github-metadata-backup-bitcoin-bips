{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1025",
    "id": 510007688,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NTEwMDA3Njg4",
    "html_url": "https://github.com/bitcoin/bips/pull/1025",
    "diff_url": "https://github.com/bitcoin/bips/pull/1025.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1025.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1025/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/abc113edd4bc2339c6b64689c0b33635615c297e",
    "number": 1025,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "BIP 88: Templates for Hierarchical Deterministic derivation paths",
    "user": {
      "login": "dgpv",
      "id": 43240089,
      "node_id": "MDQ6VXNlcjQzMjQwMDg5",
      "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgpv",
      "html_url": "https://github.com/dgpv",
      "followers_url": "https://api.github.com/users/dgpv/followers",
      "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
      "organizations_url": "https://api.github.com/users/dgpv/orgs",
      "repos_url": "https://api.github.com/users/dgpv/repos",
      "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/dgpv/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Was first announced in https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2020-July/018024.html\r\n\r\nMotivation and descriptions of usecases are given in the BIP draft, in the mailing-list post, and expanded in the replies to this mailing-list post and in [Bitcoin Optech newsletter 105](https://bitcoinops.org/en/newsletters/2020/07/08/).\r\n\r\nWhile this draft BIP did not receive extensive public discussions, it did not receive any rejections or criticism either. Within private or semi-private discussions, people said that they like the idea, noted the usefulness of this format and having it standardized. I attribute the lack of public discussions to the template format being boring but practical, and thus uncontroversial. I think that having this as a formal standard will be a benefit to the Bitcoin-related software and hardware ecosystem. I hope that submitting this as PR will bring more discussion and comments.\r\n\r\nThere are three implementations, including two reference implementations: in C and in Python (that is also compatible with micropython to be suitable for embedded applications). The implementations are thoroughly tested with the test data generated from the formal specification, and thus their behaviour follows the formal spec closely.\r\n\r\nMy thanks to @Enegnei for the help in fixing grammatical and punctuation errors in the early draft.\r\n\r\n",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2020-10-26T12:52:52Z",
    "updated_at": "2021-05-18T07:52:12Z",
    "closed_at": "2021-05-17T23:20:21Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-05-17T23:20:21Z",
    "merge_commit_sha": "868c4f8ada28385f331c41725308177398b4e222",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "dgpv:bip-path-templates",
      "ref": "bip-path-templates",
      "sha": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 152310957,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTIzMTA5NTc=",
        "name": "bips",
        "full_name": "dgpv/bips",
        "owner": {
          "login": "dgpv",
          "id": 43240089,
          "node_id": "MDQ6VXNlcjQzMjQwMDg5",
          "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/dgpv",
          "html_url": "https://github.com/dgpv",
          "followers_url": "https://api.github.com/users/dgpv/followers",
          "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
          "organizations_url": "https://api.github.com/users/dgpv/orgs",
          "repos_url": "https://api.github.com/users/dgpv/repos",
          "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/dgpv/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/dgpv/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/dgpv/bips",
        "archive_url": "https://api.github.com/repos/dgpv/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/dgpv/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/dgpv/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/dgpv/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/dgpv/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/dgpv/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/dgpv/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/dgpv/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/dgpv/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/dgpv/bips/contributors",
        "deployments_url": "https://api.github.com/repos/dgpv/bips/deployments",
        "downloads_url": "https://api.github.com/repos/dgpv/bips/downloads",
        "events_url": "https://api.github.com/repos/dgpv/bips/events",
        "forks_url": "https://api.github.com/repos/dgpv/bips/forks",
        "git_commits_url": "https://api.github.com/repos/dgpv/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/dgpv/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/dgpv/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/dgpv/bips.git",
        "issue_comment_url": "https://api.github.com/repos/dgpv/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/dgpv/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/dgpv/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/dgpv/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/dgpv/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/dgpv/bips/languages",
        "merges_url": "https://api.github.com/repos/dgpv/bips/merges",
        "milestones_url": "https://api.github.com/repos/dgpv/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/dgpv/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/dgpv/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/dgpv/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:dgpv/bips.git",
        "stargazers_url": "https://api.github.com/repos/dgpv/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/dgpv/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/dgpv/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/dgpv/bips/subscription",
        "tags_url": "https://api.github.com/repos/dgpv/bips/tags",
        "teams_url": "https://api.github.com/repos/dgpv/bips/teams",
        "trees_url": "https://api.github.com/repos/dgpv/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/dgpv/bips.git",
        "hooks_url": "https://api.github.com/repos/dgpv/bips/hooks",
        "svn_url": "https://github.com/dgpv/bips",
        "homepage": "bitcoin.org",
        "language": "Python",
        "forks_count": 0,
        "stargazers_count": 1,
        "watchers_count": 1,
        "size": 10318,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2021-05-26T12:35:17Z",
        "created_at": "2018-10-09T19:42:29Z",
        "updated_at": "2021-05-18T07:44:55Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "5bbfab9c565b6d2acd60446b913eb32a510709a7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5535,
        "stargazers_count": 8220,
        "watchers_count": 8220,
        "size": 13787,
        "default_branch": "master",
        "open_issues_count": 112,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T12:09:15Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-08-01T09:08:43Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 236,
    "deletions": 0,
    "changed_files": 2,
    "commits": 8,
    "review_comments": 21,
    "comments": 30
  },
  "events": [
    {
      "event": "mentioned",
      "id": 3920538433,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzkyMDUzODQzMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3920538433",
      "actor": {
        "login": "Enegnei",
        "id": 15363282,
        "node_id": "MDQ6VXNlcjE1MzYzMjgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/15363282?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Enegnei",
        "html_url": "https://github.com/Enegnei",
        "followers_url": "https://api.github.com/users/Enegnei/followers",
        "following_url": "https://api.github.com/users/Enegnei/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Enegnei/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Enegnei/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Enegnei/subscriptions",
        "organizations_url": "https://api.github.com/users/Enegnei/orgs",
        "repos_url": "https://api.github.com/users/Enegnei/repos",
        "events_url": "https://api.github.com/users/Enegnei/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Enegnei/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-26T12:52:52Z"
    },
    {
      "event": "subscribed",
      "id": 3920538438,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM5MjA1Mzg0Mzg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3920538438",
      "actor": {
        "login": "Enegnei",
        "id": 15363282,
        "node_id": "MDQ6VXNlcjE1MzYzMjgy",
        "avatar_url": "https://avatars.githubusercontent.com/u/15363282?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Enegnei",
        "html_url": "https://github.com/Enegnei",
        "followers_url": "https://api.github.com/users/Enegnei/followers",
        "following_url": "https://api.github.com/users/Enegnei/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Enegnei/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Enegnei/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Enegnei/subscriptions",
        "organizations_url": "https://api.github.com/users/Enegnei/orgs",
        "repos_url": "https://api.github.com/users/Enegnei/repos",
        "events_url": "https://api.github.com/users/Enegnei/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Enegnei/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-26T12:52:53Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3923799237,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkyMzc5OTIzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3923799237",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-27T03:54:02Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3923802891,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzkyMzgwMjg5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3923802891",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-27T03:56:07Z"
    },
    {
      "event": "commented",
      "id": 772853807,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3Mjg1MzgwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/772853807",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-03T22:01:50Z",
      "updated_at": "2021-02-03T22:01:50Z",
      "author_association": "MEMBER",
      "body": "Missing a backward compatibility section",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-772853807",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "labeled",
      "id": 4287765868,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDQyODc3NjU4Njg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4287765868",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-03T22:01:56Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 773115461,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzExNTQ2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/773115461",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-04T08:07:27Z",
      "updated_at": "2021-02-04T08:13:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "IIUC, backward compatibility applies if there's a prior standard or software that implements some prior (maybe de-facto) standard. I am not aware of any prior standard or any software that implements BIP32 path templates beyond the software that is linked in the BIP text (and that linked software is compatible with the spec).\r\n\r\nThe  https://walletsrecovery.org/ website uses their own format to describe derivation paths, but it seems to me the format they use is intended for illustration rather than being processed by software. The format https://walletsrecovery.org/ uses to illustrate paths is obviously not compatible, but it was not a \"previous spec\" to this spec in any way, and I doubt that this fact need to be explicitly stated in the BIP.\r\n\r\nBIP2 says \"Motivation and backward compatibility (when applicable) must be addressed\". Since there's no prior specs or implementation, it seems to me that backward compatibility is not applicable here.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-773115461",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 773118206,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3MzExODIwNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/773118206",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-04T08:12:46Z",
      "updated_at": "2021-02-04T08:16:11Z",
      "author_association": "CONTRIBUTOR",
      "body": "If needed, I can add a note after the link to walletrecovery.org saying that their format is not compatible. But as the website is not a static document like the BIP, they can change their format at any time, and this would mean the information in the BIP may become out of date.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-773118206",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 778465815,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3ODQ2NTgxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/778465815",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-12T21:30:51Z",
      "updated_at": "2021-02-12T21:30:51Z",
      "author_association": "MEMBER",
      "body": "Sounds like a plan. Maybe just reference their current thing?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-778465815",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4330739002,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzMDczOTAwMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4330739002",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T09:31:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4330743241,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzMDc0MzI0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4330743241",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T09:32:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4330766234,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzMDc2NjIzNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4330766234",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T09:37:10Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4330770976,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzMDc3MDk3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4330770976",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T09:38:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4330784454,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzMDc4NDQ1NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4330784454",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T09:40:56Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4330788763,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDMzMDc4ODc2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4330788763",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T09:41:50Z"
    },
    {
      "event": "commented",
      "id": 779097024,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc3OTA5NzAyNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/779097024",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-15T09:42:53Z",
      "updated_at": "2021-02-15T09:42:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Added the \"Known solutions\" section to \"Motivation\" part.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-779097024",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 781572939,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTU3MjkzOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/781572939",
      "actor": {
        "login": "dr-orlovsky",
        "id": 372034,
        "node_id": "MDQ6VXNlcjM3MjAzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/372034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dr-orlovsky",
        "html_url": "https://github.com/dr-orlovsky",
        "followers_url": "https://api.github.com/users/dr-orlovsky/followers",
        "following_url": "https://api.github.com/users/dr-orlovsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dr-orlovsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dr-orlovsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dr-orlovsky/subscriptions",
        "organizations_url": "https://api.github.com/users/dr-orlovsky/orgs",
        "repos_url": "https://api.github.com/users/dr-orlovsky/repos",
        "events_url": "https://api.github.com/users/dr-orlovsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dr-orlovsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-18T19:12:10Z",
      "updated_at": "2021-02-18T19:14:17Z",
      "author_association": "CONTRIBUTOR",
      "body": "The proposed encoding for the index ranges will not work very well with current way how descriptors are structured in Bitcoin Core and rust-miniscript. In particular, square bracket notation `[...]` is already widely used in these implementation (and in many other software) for introducing public keys (`XpubIndetifirer`, fingerprints, extended private and public keys etc). So I proposet:\r\n\r\n1. Avoid square brackets for index paths and use simple ranges (like `m/5-16'/..` etc). \r\n2. Allow embedding a public key information into derivation paths as already done by Bitcoin Core descriptors and miniscript using squared box notation. If a public key is given inside the path, use `=` separator (`m/47'/5'=[xpubkey]/0-1/*`)\r\n\r\nWith this such a BIP will be more interoperable with existing software and will allow keeping track of derivation paths which can be used without knowledge of extended private keys (when the last hardened index is provided with corresponding extended public key).\r\n\r\nI have a reference Rust implementation for the format above here: https://github.com/LNP-BP/descriptor-wallet/tree/master/src/bip32 (`path.rs`, `range.rs` and `xpubref.rs` files). It is  rust-miniscript compatible already used in the software: \r\n- Bitcoin Pro (tool for work with descriptors etc) https://github.com/pandoracore/bitcoin-pro\r\n- MyCitadel Wallet https://github.com/mycitadel/mycitadel-node\r\n",
      "user": {
        "login": "dr-orlovsky",
        "id": 372034,
        "node_id": "MDQ6VXNlcjM3MjAzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/372034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dr-orlovsky",
        "html_url": "https://github.com/dr-orlovsky",
        "followers_url": "https://api.github.com/users/dr-orlovsky/followers",
        "following_url": "https://api.github.com/users/dr-orlovsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dr-orlovsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dr-orlovsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dr-orlovsky/subscriptions",
        "organizations_url": "https://api.github.com/users/dr-orlovsky/orgs",
        "repos_url": "https://api.github.com/users/dr-orlovsky/repos",
        "events_url": "https://api.github.com/users/dr-orlovsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dr-orlovsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-781572939",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 781938154,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTkzODE1NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/781938154",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T09:04:47Z",
      "updated_at": "2021-02-19T09:04:47Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Avoid square brackets for index paths and use simple ranges (like m/5-16'/.. etc).\r\n\r\nBrackets were added for better visual identification of ranges, for readability and less ambiguity.\r\n\r\nI think that `m/[5-16]'/0'/[1,2]'` or `m/{5-16}'/0'/{1,2}'` is easier to parse for human brain than `m/5-16'/0'/1,2'`, and there's no ambiguity that the hardened marker `'` applies to the range and not only to the index 16 or 2. Of course for software this might not matter, but for humans working with ranges IMO this will matter. Also there's no confusion of how you should write `/1',2'/` or `1,2'` - while for software 'hardened marker is at the end of the range' is unambiguous, for humans it will be more confusing. Allowing to write this both ways means that the formal spec and therefore correct implementations will be more complex.\r\n\r\n> Allow embedding a public key information into derivation paths as already done by Bitcoin Core descriptors and miniscript using squared box notation. If a public key is given inside the path, use = separator (m/47'/5'=[xpubkey]/0-1/*)\r\n\r\nThis will complicate the formal spec by requiring to either add xpub parsing or at least maintaining additional storage for arbitrary strings found between `[` and `]`. The goal of this BIP is to be complete and unambiguous, adding complexity means that the spec will grow and will be much harder to analyze (the number of states in FSM grows very fast when adding complexity)\r\n\r\nAFAIK squared box notation is only used by Core in descriptors to denote master key fingerprints, not xpubs. The miniscript spec at http://bitcoin.sipa.be/miniscript/ also does not have any usage of square brackets to delimit keys.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-781938154",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 781977214,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MTk3NzIxNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/781977214",
      "actor": {
        "login": "dr-orlovsky",
        "id": 372034,
        "node_id": "MDQ6VXNlcjM3MjAzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/372034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dr-orlovsky",
        "html_url": "https://github.com/dr-orlovsky",
        "followers_url": "https://api.github.com/users/dr-orlovsky/followers",
        "following_url": "https://api.github.com/users/dr-orlovsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dr-orlovsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dr-orlovsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dr-orlovsky/subscriptions",
        "organizations_url": "https://api.github.com/users/dr-orlovsky/orgs",
        "repos_url": "https://api.github.com/users/dr-orlovsky/repos",
        "events_url": "https://api.github.com/users/dr-orlovsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dr-orlovsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T10:13:31Z",
      "updated_at": "2021-02-19T10:14:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "Well, it's not about convenience, it is mostly about compatibility. Bitcoin Core currently use square brackets for xpub identifiers and fingerprints, so this renders standard already incompatible. Rust miniscript implementation uses them even more widely (not the site, but the rust code which is already part of Square Crypto BDK) – and I know about ongoing work of making that part of Bitcoin Core as well. So without this this standard will be just another standard contradicting existing \"de facto\" standards, not used by anybody other than author.\r\n\r\nWithout this compatibility I am concept NACK it",
      "user": {
        "login": "dr-orlovsky",
        "id": 372034,
        "node_id": "MDQ6VXNlcjM3MjAzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/372034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dr-orlovsky",
        "html_url": "https://github.com/dr-orlovsky",
        "followers_url": "https://api.github.com/users/dr-orlovsky/followers",
        "following_url": "https://api.github.com/users/dr-orlovsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dr-orlovsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dr-orlovsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dr-orlovsky/subscriptions",
        "organizations_url": "https://api.github.com/users/dr-orlovsky/orgs",
        "repos_url": "https://api.github.com/users/dr-orlovsky/repos",
        "events_url": "https://api.github.com/users/dr-orlovsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dr-orlovsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-781977214",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 782002770,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjAwMjc3MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782002770",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T11:01:20Z",
      "updated_at": "2021-02-19T11:01:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "The square brackets can be replaced with curly brackets without problem, I think. In https://github.com/bitcoin/bitcoin/issues/17190 curly brackets were used, for example.\r\n\r\nThe spec won't be any more complex without brackets at all. But I think that visually, bracket-less templates are more confusing. Having explicit grouping is better for UX when working with templates. This might be just my perception, though. Would be great to have more opinions on this.\r\n\r\nIncluding 'correct xpubs' is out of the question, because this means that the formal spec will either be incomplete, or very complex. It might be useful and relatively simple spec-wise to allow arbitrary strings (with limited charset), and then xpubs or other interpretations of these strings might be defined in a separate BIP. Might be useful for labels/comments, for example: `m/{44,49,84}'=@purpose/0'=xpubABCDEF/0'/{0-1}/{0-50000}=@should_be_enough`. The parsing algorithm will then produce label=>position mapping like `\"@purpose\": 0, \"xpubABCDEF\": 1, \"@should_be_enough\": 4`. For the spec, these will be just arbitrary strings with limited charset starting from `=` and ending at `/` ",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782002770",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 782004958,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjAwNDk1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782004958",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T11:05:22Z",
      "updated_at": "2021-02-19T11:05:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "Adding these arbitrary strings will increase the number of states to check when running TLC with the formal spec, and the amount of generated test data for comprehensive tests, so I'm not sure if it is worth it.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782004958",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 782024047,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjAyNDA0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782024047",
      "actor": {
        "login": "dr-orlovsky",
        "id": 372034,
        "node_id": "MDQ6VXNlcjM3MjAzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/372034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dr-orlovsky",
        "html_url": "https://github.com/dr-orlovsky",
        "followers_url": "https://api.github.com/users/dr-orlovsky/followers",
        "following_url": "https://api.github.com/users/dr-orlovsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dr-orlovsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dr-orlovsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dr-orlovsky/subscriptions",
        "organizations_url": "https://api.github.com/users/dr-orlovsky/orgs",
        "repos_url": "https://api.github.com/users/dr-orlovsky/repos",
        "events_url": "https://api.github.com/users/dr-orlovsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dr-orlovsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T11:43:22Z",
      "updated_at": "2021-02-19T11:43:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "I am fine with curly (or any other) brackets unless they are squared, which breaks compatibility :) Let's hear other opinions.\r\n\r\nAs for the annotations, I doubt that we need arbitrary strings. We need to standardize already present `[fingerprint]` and `[xpubid]` in bitcoin core and it will be nice to extend it with a single (standard) encoding of full xpub data. Not sure why it will  be hard to make formal: we just reference encoding from BIP-32.",
      "user": {
        "login": "dr-orlovsky",
        "id": 372034,
        "node_id": "MDQ6VXNlcjM3MjAzNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/372034?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dr-orlovsky",
        "html_url": "https://github.com/dr-orlovsky",
        "followers_url": "https://api.github.com/users/dr-orlovsky/followers",
        "following_url": "https://api.github.com/users/dr-orlovsky/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dr-orlovsky/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dr-orlovsky/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dr-orlovsky/subscriptions",
        "organizations_url": "https://api.github.com/users/dr-orlovsky/orgs",
        "repos_url": "https://api.github.com/users/dr-orlovsky/repos",
        "events_url": "https://api.github.com/users/dr-orlovsky/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dr-orlovsky/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782024047",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 782027195,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjAyNzE5NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782027195",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T11:50:27Z",
      "updated_at": "2021-02-19T14:18:32Z",
      "author_association": "CONTRIBUTOR",
      "body": "> why it will be hard to make formal:\r\n\r\nformal in the sense of using a formal specification language, in this case TLA+ (the spec is referenced in the BIP text: https://github.com/dgpv/bip32_template_parse_tplaplus_spec)",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782027195",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 782077397,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjA3NzM5Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782077397",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T13:32:21Z",
      "updated_at": "2021-02-19T13:33:04Z",
      "author_association": "CONTRIBUTOR",
      "body": "Right now the prose spec (the BIP) corresponds to the TLA+ spec, and generated test data from the run of TLC on the TLA+ spec can be used to comprehensively test the reference implementations. If the notion of xpub is added and it is stated that it should be the correct xpub, the prose/formal spec correspondence will not be complete, because it is infeasible to implement a formal spec of xpub format for this purpose. The formal spec will either need to ignore the xpub part (and the comprehensiveness of the tests for reference implementations will be diminished), or have a simplified version - that is, the 'arbitrary string of a limited charset'.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782077397",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 782086846,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjA4Njg0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782086846",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T13:49:42Z",
      "updated_at": "2021-02-19T13:50:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thank you @dgpv for bringing this BIP effort up again. We already use your proposal in Trezor for internal purposes: https://github.com/trezor/trezor-firmware/blob/master/core/src/apps/common/paths.py\r\n\r\nWe use almost exactly the same syntax with one extension:\r\n\r\n```\r\n    - m/* can be followed by any number of _unhardened_ path components\r\n    - m/*' can be followed by any number of _hardened_ path components\r\n    - m/** can be followed by any number of _any_ path components\r\n```",
      "user": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782086846",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "mentioned",
      "id": 4352237807,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM1MjIzNzgwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4352237807",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T13:49:42Z"
    },
    {
      "event": "subscribed",
      "id": 4352237824,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzNTIyMzc4MjQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4352237824",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T13:49:42Z"
    },
    {
      "event": "commented",
      "id": 782095087,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjA5NTA4Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782095087",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T14:04:02Z",
      "updated_at": "2021-02-19T14:20:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think that\r\n\r\n> any number of path components\r\n\r\nis dangerous when using it for path restrictions (as 'can we allow a change output to go to this path') because it creates a possibility of some arbitrary paths to pass the 'filter' of the template, and create a situation where change amount can be held ransom, for example. Because of this, I made decision to use `*` to denote only a range of indexes at one level, rather than 'any path with matching prefix'.\r\n\r\nWhat is the usecase for allowing an arbitrary-length path tail ? Is it justified vs the dangers it can enable ? Can it be substituted with just using different match functions (full_match vs prefix_match) ?",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782095087",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 782096475,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjA5NjQ3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782096475",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-19T14:06:28Z",
      "updated_at": "2021-02-19T14:06:28Z",
      "author_association": "CONTRIBUTOR",
      "body": "edited the above comment: 'can we allow to sign for this path' -> 'can we allow a change output to go to this path' because that's what I meant actually.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782096475",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 782821493,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjgyMTQ5Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782821493",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-21T08:46:07Z",
      "updated_at": "2021-02-21T08:47:41Z",
      "author_association": "CONTRIBUTOR",
      "body": "@prusnak what do you think about switching from square brackets to curly brackets to denote index ranges ? (on the reason that square brackets are used for other purposes in descriptors)",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782821493",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "mentioned",
      "id": 4356117444,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM1NjExNzQ0NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4356117444",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-21T08:46:08Z"
    },
    {
      "event": "subscribed",
      "id": 4356117446,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzNTYxMTc0NDY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4356117446",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-21T08:46:08Z"
    },
    {
      "event": "commented",
      "id": 782833974,
      "node_id": "MDEyOklzc3VlQ29tbWVudDc4MjgzMzk3NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/782833974",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-21T10:24:19Z",
      "updated_at": "2021-02-21T10:24:19Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @prusnak what do you think about switching from square brackets to curly brackets to denote index ranges ? (on the reason that square brackets are used for other purposes in descriptors)\r\n\r\nI don't mind this",
      "user": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-782833974",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "mentioned",
      "id": 4356193166,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDM1NjE5MzE2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4356193166",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-21T10:24:19Z"
    },
    {
      "event": "subscribed",
      "id": 4356193167,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQzNTYxOTMxNjc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4356193167",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-02-21T10:24:19Z"
    },
    {
      "event": "commented",
      "id": 826374660,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgyNjM3NDY2MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/826374660",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T19:12:23Z",
      "updated_at": "2021-04-25T19:12:23Z",
      "author_association": "MEMBER",
      "body": "@dgpv Were you going to add a bit on compatibility?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-826374660",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "mentioned",
      "id": 4641533183,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDY0MTUzMzE4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4641533183",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T19:12:23Z"
    },
    {
      "event": "subscribed",
      "id": 4641533185,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ2NDE1MzMxODU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4641533185",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-04-25T19:12:23Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4725940975,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDcyNTk0MDk3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4725940975",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T10:33:01Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T12:39:16Z",
      "updated_at": "2021-05-11T12:39:16Z",
      "source": {
        "issue": {
          "id": 850130092,
          "node_id": "MDExOlB1bGxSZXF1ZXN0NjA4NzQ5MjUx",
          "url": "https://api.github.com/repos/bitcoin/bips/issues/1097",
          "repository_url": "https://api.github.com/repos/bitcoin/bips",
          "labels_url": "https://api.github.com/repos/bitcoin/bips/issues/1097/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1097/comments",
          "events_url": "https://api.github.com/repos/bitcoin/bips/issues/1097/events",
          "html_url": "https://github.com/bitcoin/bips/pull/1097",
          "number": 1097,
          "state": "closed",
          "state_reason": null,
          "title": "BIP 129: Bitcoin Secure Multisig Setup (BSMS)",
          "body": "This PR proposes a standardized process for setting up Bitcoin multisig wallets securely.\r\n\r\nOriginal mailing list discussion: https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-February/018385.html\r\nOriginal draft PR: https://github.com/nunchuk-io/bips/pull/1",
          "user": {
            "login": "hugohn",
            "id": 4769925,
            "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
            "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/hugohn",
            "html_url": "https://github.com/hugohn",
            "followers_url": "https://api.github.com/users/hugohn/followers",
            "following_url": "https://api.github.com/users/hugohn/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/hugohn/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/hugohn/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
            "organizations_url": "https://api.github.com/users/hugohn/orgs",
            "repos_url": "https://api.github.com/users/hugohn/repos",
            "events_url": "https://api.github.com/users/hugohn/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/hugohn/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 275845989,
              "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
              "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
              "name": "New BIP",
              "color": "5319e7",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "CONTRIBUTOR",
          "locked": false,
          "comments": 32,
          "pull_request": {
            "url": "https://api.github.com/repos/bitcoin/bips/pulls/1097",
            "html_url": "https://github.com/bitcoin/bips/pull/1097",
            "diff_url": "https://github.com/bitcoin/bips/pull/1097.diff",
            "patch_url": "https://github.com/bitcoin/bips/pull/1097.patch"
          },
          "closed_at": "2021-05-15T04:29:03Z",
          "created_at": "2021-04-05T06:49:28Z",
          "updated_at": "2021-10-31T18:25:06Z"
        },
        "type": "issue"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4727033660,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDcyNzAzMzY2MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4727033660",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T12:46:00Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4727050170,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDcyNzA1MDE3MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4727050170",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T12:47:54Z"
    },
    {
      "event": "commented",
      "id": 838414111,
      "node_id": "MDEyOklzc3VlQ29tbWVudDgzODQxNDExMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/838414111",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-11T12:48:05Z",
      "updated_at": "2021-05-15T06:15:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "Changed the chars to describe ranges from `{}` to `[]`: https://github.com/dgpv/bips/commit/4af4299ba286acb953a0adad7f2a9c9137376ce9\r\n\r\nAdded the description of Wildcard range (`\"*\"`): https://github.com/dgpv/bips/commit/a3204d41a57b0e24d8b40b27c560e1b37f3c7b1d\r\n\r\nAdded Compatibility section: https://github.com/dgpv/bips/commit/56de314913351c61d0e255197a0d046564f27a33",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-838414111",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "renamed",
      "id": 4749234201,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50NDc0OTIzNDIwMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749234201",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-14T22:55:42Z",
      "rename": {
        "from": "Add BIP draft for BIP32 path templates",
        "to": "BIP 88: Templates for Hierarchical Deterministic derivation paths"
      }
    },
    {
      "event": "commented",
      "id": 841540238,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTU0MDIzOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841540238",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-14T22:55:57Z",
      "updated_at": "2021-05-14T22:55:57Z",
      "author_association": "MEMBER",
      "body": "Assigned BIP number 88. Please rename & update README",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-841540238",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4749625608,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc0OTYyNTYwOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749625608",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T06:13:19Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4749628062,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc0OTYyODA2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749628062",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T06:17:37Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjMwNWM1YmRhNmEyYTdjYmNiOTQ4ZWI2YzU4MzhmMzlkYjRmZTRmYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2305c5bda6a2a7cbcb948eb6c5838f39db4fe4fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2305c5bda6a2a7cbcb948eb6c5838f39db4fe4fc",
      "tree": {
        "sha": "1f098ac3c3159dd749fca5c6f0d754431e602474",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1f098ac3c3159dd749fca5c6f0d754431e602474"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1f098ac3c3159dd749fca5c6f0d754431e602474\nparent 5bbfab9c565b6d2acd60446b913eb32a510709a7\nauthor Dmitry Petukhov <dp@simplexum.com> 1603715432 +0500\ncommitter Dmitry Petukhov <dp@simplexum.com> 1621059876 +0500\n\nAdd BIP draft for BIP32 path templates\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEsXo1u6GHOVeE4qazIwHSa9wVFg0FAmCfaSQRHGRwQHNpbXBs\nZXh1bS5jb20ACgkQIwHSa9wVFg3UeRAAoOdIw0q9K1bDPSbFn+OmVC/AyofD0mkJ\nViATnfYxAfMUhspcsveqZTBUUJ8S4du4g7VQ1FHTEST/Zwo4wgh2h0wfn1P/KslF\nFTUPfGHgsbZNbgOKagGvjyneWQwBzzytL/JAZ4yxG8SemSiGy2fQ0qmRBHJ6T/Nk\npxCmlU1ezvokQsZLNWWgDes/tFtd77v9m+hpTrnkCUGC0veloGgCqMV6pwHJjS43\nl+rJoNC42Z+9Y4SLKO1BzoI1kXtG6Kc3qF08l+dgObGlNlKDAGbyVl3TkvP+MlM6\nUW4My+LzQSXo5ZlScfZO4XzG0Uzc6P8sV8GcAQT59teBAjNxVLXCgmsH/1KSun0T\ncbfE75C2bZFb6c2a4EGBBlG5BKbhbtCC9Z2/zZqJN70f03UTzxCKyVQfkoDYyPGY\nSIlprQC27ZvJXznSkb6YU+uV98Tz2UfgHLTk51fBdO7ctulePEJyRcz8i0WDadco\nstFl7f7Is5G4i1FzH4T+3j9s6rF+NMtXltjAmTnpQxX0Al7xz7ErRPIWGpuMI/Wq\nzOPretL6f4Gv7HpRNHqx1Ib6LtgoFPBmxYhxdqr5XO3CeYxc3ugG263mcYPQfUtc\nyqHaUblrpoN/yRewhAb4pLegspfL0BzMd1QELWfLOJVlYXLW7PO9vJRqObR1LsJy\n4qsHwphwlhE=\n=W66p\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5bbfab9c565b6d2acd60446b913eb32a510709a7",
          "sha": "5bbfab9c565b6d2acd60446b913eb32a510709a7",
          "html_url": "https://github.com/bitcoin/bips/commit/5bbfab9c565b6d2acd60446b913eb32a510709a7"
        }
      ],
      "message": "Add BIP draft for BIP32 path templates",
      "committer": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-15T06:24:36Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2020-10-26T12:30:32Z"
      },
      "sha": "2305c5bda6a2a7cbcb948eb6c5838f39db4fe4fc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NmZmYzM1NDJmOGI4YTM2YjM0NTJmNzdmNjdiZDhlMjg5Yjg2NzcyYQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6ffc3542f8b8a36b3452f77f67bd8e289b86772a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6ffc3542f8b8a36b3452f77f67bd8e289b86772a",
      "tree": {
        "sha": "36e63e0ece7a86b64f8d264c8a946dba45e5ad59",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/36e63e0ece7a86b64f8d264c8a946dba45e5ad59"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 36e63e0ece7a86b64f8d264c8a946dba45e5ad59\nparent 2305c5bda6a2a7cbcb948eb6c5838f39db4fe4fc\nauthor Dmitry Petukhov <dp@simplexum.com> 1620723309 +0500\ncommitter Dmitry Petukhov <dp@simplexum.com> 1621059877 +0500\n\nbip-path-templates: Change chars for ranges from \"[]\" to \"{}\"\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEsXo1u6GHOVeE4qazIwHSa9wVFg0FAmCfaSURHGRwQHNpbXBs\nZXh1bS5jb20ACgkQIwHSa9wVFg18RRAAlDM1luH36jdE6TS5SxA1DY4edKpnSks/\nSMWqyDdZ1DhS7FSrjazfKGVhsVjIxy55t1g3p0hBjm+sGarA+CHWpfqaSI+VWJB6\ndfHrhEwSTs4o7FiOO+npV9YmfTs6q+8qI5xiADGAnywnS7JLl5AYBCiwWPI4siyf\na889b8ZmAahU7IKmPSwXkQiKwCeLJ4c7uapDHRbUFA2vR1ozNUsY3hv4ltx36usE\nh0rVBUvD2WC9nvl73H+WVRLfplXBQ3mvRLsL8epoojZT7Je8zldU0FftCyNmFR/0\nDYUoeeNE2HEaygm90BHsV8OB9cifyVbaKusEYOGI2dDdWsYX9QocIVvxiQ4ql7Zy\nPD6+gv/7fVzR7RkF979BWVxpC5jNX5OOBhNQ7t/s+rh2/heoRsdbmvn0QvE6s4SZ\ndt/MwQOYIQGb5gHL1qFJ6taE71xHWFApLOs7OOTSmd/l379TQFUfKX3KdRUBZz+P\nmr2QuC8+ScM7zzqVu4grmUiL1i+FPYOKfbV4LYnweORIPh+q3w3NZearaevW47uc\n1rXXj/nC7py6ohiMwd3kHD4oSuRFVFIQCICgMogk6FvgSbFHN/aA4dVLu691GjOG\nj8efwS9BXebLHBltkf54pdx1IiNwjAknc88M3SbkqmAZCNjBL8oi1/Kz4bTNn2e8\nyfbxvjR+v4g=\n=eRd0\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2305c5bda6a2a7cbcb948eb6c5838f39db4fe4fc",
          "sha": "2305c5bda6a2a7cbcb948eb6c5838f39db4fe4fc",
          "html_url": "https://github.com/bitcoin/bips/commit/2305c5bda6a2a7cbcb948eb6c5838f39db4fe4fc"
        }
      ],
      "message": "bip-path-templates: Change chars for ranges from \"[]\" to \"{}\"",
      "committer": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-15T06:24:37Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-11T08:55:09Z"
      },
      "sha": "6ffc3542f8b8a36b3452f77f67bd8e289b86772a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YzkwYzc2YmMxYmQxMzUwMWMyZTYxZWNlMGFiYTVmMGM5MDQyMjVlZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c90c76bc1bd13501c2e61ece0aba5f0c904225ed",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c90c76bc1bd13501c2e61ece0aba5f0c904225ed",
      "tree": {
        "sha": "edc73d846c0d5c3974d9ab3e50b96a371e49356b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/edc73d846c0d5c3974d9ab3e50b96a371e49356b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree edc73d846c0d5c3974d9ab3e50b96a371e49356b\nparent 6ffc3542f8b8a36b3452f77f67bd8e289b86772a\nauthor Dmitry Petukhov <dp@simplexum.com> 1620735009 +0500\ncommitter Dmitry Petukhov <dp@simplexum.com> 1621059877 +0500\n\nbip-path-templates: describe Wildcard index range\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEsXo1u6GHOVeE4qazIwHSa9wVFg0FAmCfaSURHGRwQHNpbXBs\nZXh1bS5jb20ACgkQIwHSa9wVFg3uQw/9HuerOvkuzTVgVyOgqWaedZ4bv/uoGYEH\nCg51So7XIT2NvuxH7PmT9W4sSyWzktoHlO+/FOvbNt5k59peX0Q5HbQMm19Cz9ED\n4jWaSMd7YDp7vPjLSzpDuQ8P/ddTChn25lNqRn2bTj59154xMD4Le9zEfwNfdOSS\nrCz94oUVEuB0JiMo9nICOp7OQ3xaYGEpyO5Ar8HugMf1aFyeQX+XTbhQswG0s8iq\ncoGSOEJQdyWryg8LG5De6C7Ft4+1HzRB+e+GgmcgDKGE8u+QUCX3Cm0ENh+10pzM\nlO+TUXt+tMtHIsRBNH+dHzVY5y6jyid/XVN83qQ40GacSAGKUFHN2OrNYHXVFxu7\nLhIWg2iIOHT0/i7fPEbyid4X5VR4M2P88aIl42WuUjJ3GFlfhSF4DKUSaFdViI/M\n04ARNvhWK8u3N4+xf8bvd1h4Gb1t4Zz7MiF2moo4/2qCkEMImBK21z/MwaIIfBS8\nLrFsk96JVVSbaK4+M71RrSRd8IYj5/Fx2I5CS8xwf9P2FL5TXei/j8/XdmHIJpZ8\ndUPbwap/Qiutt7w2njFA32Q/u17kV1ckTwEr3z6UvFG67nt0n9PP8SmBbzq+7s2S\nRj24+b+8DA1g/Z4dMVWc3jiegmrPaEb4oQ0f7mkRP5mS1Mp5vx9Kt8DTe10RL/BR\nOgGYIch5J5Q=\n=1r4w\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6ffc3542f8b8a36b3452f77f67bd8e289b86772a",
          "sha": "6ffc3542f8b8a36b3452f77f67bd8e289b86772a",
          "html_url": "https://github.com/bitcoin/bips/commit/6ffc3542f8b8a36b3452f77f67bd8e289b86772a"
        }
      ],
      "message": "bip-path-templates: describe Wildcard index range",
      "committer": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-15T06:24:37Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-11T12:10:09Z"
      },
      "sha": "c90c76bc1bd13501c2e61ece0aba5f0c904225ed"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MjVmOGMzZTY5NDc3YmQzMzBlNWVkMDFhM2JmYTljZTI5YWJlZjRiNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/25f8c3e69477bd330e5ed01a3bfa9ce29abef4b7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/25f8c3e69477bd330e5ed01a3bfa9ce29abef4b7",
      "tree": {
        "sha": "d7e506a6bc29dc4c62ab9fda4a6d16d1a9bed5ba",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d7e506a6bc29dc4c62ab9fda4a6d16d1a9bed5ba"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d7e506a6bc29dc4c62ab9fda4a6d16d1a9bed5ba\nparent c90c76bc1bd13501c2e61ece0aba5f0c904225ed\nauthor Dmitry Petukhov <dp@simplexum.com> 1620737484 +0500\ncommitter Dmitry Petukhov <dp@simplexum.com> 1621059877 +0500\n\nbip-path-templates: Add Compatibility section\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEsXo1u6GHOVeE4qazIwHSa9wVFg0FAmCfaSURHGRwQHNpbXBs\nZXh1bS5jb20ACgkQIwHSa9wVFg1qcA/8CpVdMogxkCXx7gZZXxxp9whXZdMmw/nq\ntyq+moNb8sV23NSkA2Lia4kD4+V3ny57ugcsdBjK3ZkCHsDZSmCpFUT+SwQqquRd\ngDc8ssUjSImHDD9ylfhmGQCWxTzFaLrbJRGoI4KtdKtKoyosoYITQwZYP1L0EOYH\nR60RibSZewqxgcEbtTUp6gRNHGIRAeGKjbTAY+7KwBHAnIrbGSDohc0NduTWQhf2\neKX0thNYRNTks9GdGHQrY2NLWTu5g/7f3ie7jyuKI580eLXFAypt/m8UlwlR5mL4\nKUeF0SkPSxIA0Zn49MmolY7FX1iqo4Em6rrzkFgkuf0dZrI5bduFYSox7mlu3jOu\nW0ny9/s00xb5ELMK/P2CLIjG47R4iYgwgED33lg/VHUxkxtnxx5CHf+DgEcVnz6G\nX1oGLAkDFVLk9V8nmgf2C9NvyowMT8U6f4eM+U1qUoVt7xxM5kJeOas9Be8uj1Wz\nqSDca2CR/8DZVz+lqN2EfaSs+63ImIb+xOjpywTxBz0zCuzaDXmlnynWsiqQUQ7p\n3aHhEEw18TPdh26z5Qo/XZPPjBfCDsE62Z+AoK+Sa6XAE5fLxAGpslPdBu3hVlxv\nbBposptgjUWjdzFsehdY1OHCthTCTVG/KBTMbmTwEU5Z7JChBdRer3fpJZcgJAqm\nEmFMdzer8b4=\n=sl8Z\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c90c76bc1bd13501c2e61ece0aba5f0c904225ed",
          "sha": "c90c76bc1bd13501c2e61ece0aba5f0c904225ed",
          "html_url": "https://github.com/bitcoin/bips/commit/c90c76bc1bd13501c2e61ece0aba5f0c904225ed"
        }
      ],
      "message": "bip-path-templates: Add Compatibility section",
      "committer": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-15T06:24:37Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-11T12:51:24Z"
      },
      "sha": "25f8c3e69477bd330e5ed01a3bfa9ce29abef4b7"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4749635637,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDc0OTYzNTYzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749635637",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T06:30:09Z"
    },
    {
      "event": "commented",
      "id": 841609565,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTYwOTU2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841609565",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T06:32:07Z",
      "updated_at": "2021-05-15T06:32:07Z",
      "author_association": "CONTRIBUTOR",
      "body": "Done. @luke-jr",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-841609565",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "mentioned",
      "id": 4749636816,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDc0OTYzNjgxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749636816",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T06:32:07Z"
    },
    {
      "event": "subscribed",
      "id": 4749636817,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3NDk2MzY4MTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749636817",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T06:32:07Z"
    },
    {
      "event": "commented",
      "id": 841609645,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTYwOTY0NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841609645",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T06:33:05Z",
      "updated_at": "2021-05-15T06:33:05Z",
      "author_association": "CONTRIBUTOR",
      "body": "I dropped the word \"derivation\" from the title to fit into 44 max chars limit.",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-841609645",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6M2Q5YTM1OWQxZGU2MjMyOTc1MDQyZjBhNWE1Yzk5ZjJmYzExMmE2Yg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "tree": {
        "sha": "f35ff8b220edc49247007fb99d710519f634e967",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f35ff8b220edc49247007fb99d710519f634e967"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f35ff8b220edc49247007fb99d710519f634e967\nparent 25f8c3e69477bd330e5ed01a3bfa9ce29abef4b7\nauthor Dmitry Petukhov <dp@simplexum.com> 1621059496 +0500\ncommitter Dmitry Petukhov <dp@simplexum.com> 1621060622 +0500\n\nBIP88: number assigned, rename file and update README\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEsXo1u6GHOVeE4qazIwHSa9wVFg0FAmCfbA4RHGRwQHNpbXBs\nZXh1bS5jb20ACgkQIwHSa9wVFg2rDhAApVreccEFXKdmm42nmatSgyyEah0/1ap7\nZo/RAs6tmeIMGpuAWOae28c0i9152fJBvtYq0eQmpv3YH1F0OsXX6X/vJVlSAd/+\npzsykl5WYfxDWMBBeko/ErD+w0gmfgIneU0nz8Eo4CINSiYDnkrf/JpucphLIPUl\nBjL+iSZV0/z3o9An1MuXY4cpxbH2KbGaZscn0frapAg+ikLmNP4ro/ONAJdNip1E\nL6A9x/1RURRA+qKk5M5TIGfASQ3aQvuUtCOPlztnD921b7OWKetEaR8akdz5fHfl\n1q3tQki7mk3NmmfB8638cXYh78s8LEioLG6gHu2rh+nF7NN4AC7yBxK1bq+mGIxI\nnt3RexyPFFC1rEZC5g/axkYJx3F1BFuNV4r1rlbm0kR/PcwNa97uIYJJ5tdKshQw\nakTrUqOtRrHDYMqmWryHh8/ZFQjcMPwwxEM8f5Tn8lJsiC2tCaI+BRe4eHxL5SsH\nyUZk7fVnmRthKE/b5GY6GlTSQ2rGRKNduDk43ntVcPp9aA2yKEsQrXDFLAG9c59h\nK+OJQ2rybm8npCLKcvQ65HhWwZNXGen+VNGHWJh4SO4G5KG0t0u9tKVizuhpbZkq\nSJgosfSXAkHqP9mEkSctN9i3trG7s62cYOs/gHBAuXYzOkQKbe8rHY4NLbMWSiGB\nb9YirRN+bxA=\n=OprL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/25f8c3e69477bd330e5ed01a3bfa9ce29abef4b7",
          "sha": "25f8c3e69477bd330e5ed01a3bfa9ce29abef4b7",
          "html_url": "https://github.com/bitcoin/bips/commit/25f8c3e69477bd330e5ed01a3bfa9ce29abef4b7"
        }
      ],
      "message": "BIP88: number assigned, rename file and update README",
      "committer": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-15T06:37:02Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-15T06:18:16Z"
      },
      "sha": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b"
    },
    {
      "event": "commented",
      "id": 841636085,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTYzNjA4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841636085",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T10:25:40Z",
      "updated_at": "2021-05-15T10:25:40Z",
      "author_association": "CONTRIBUTOR",
      "body": "Strong Concept ACK",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-841636085",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 841638872,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTYzODg3Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841638872",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T10:50:31Z",
      "updated_at": "2021-05-15T10:50:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "@dgpv Trying to go through this, have some questions.  Are you on IRC?",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-841638872",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "mentioned",
      "id": 4749837655,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDc0OTgzNzY1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749837655",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T10:50:31Z"
    },
    {
      "event": "subscribed",
      "id": 4749837656,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ3NDk4Mzc2NTY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4749837656",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T10:50:31Z"
    },
    {
      "event": "commented",
      "id": 841685798,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTY4NTc5OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841685798",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T16:10:15Z",
      "updated_at": "2021-05-15T16:10:15Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think you can just ask here, in a comment at relevant line of the file.\r\n\r\nI've changed the status from \"Draft\" to \"Proposed\", because it seemed that the only disagreement that were emerged was about `{}` vs `[]`, and it is settled now. But if you had thoughts that may warrant further discussion, then maybe it should stay at the \"Draft\" status a bit longer...",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-841685798",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "reviewed",
      "id": 660378783,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwMzc4Nzgz",
      "url": null,
      "actor": null,
      "commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#pullrequestreview-660378783",
      "submitted_at": "2021-05-15T18:13:40Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
    },
    {
      "event": "reviewed",
      "id": 660379188,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwMzc5MTg4",
      "url": null,
      "actor": null,
      "commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#pullrequestreview-660379188",
      "submitted_at": "2021-05-15T18:20:02Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
    },
    {
      "event": "commented",
      "id": 841704268,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MTcwNDI2OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/841704268",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-15T18:21:03Z",
      "updated_at": "2021-05-15T18:21:03Z",
      "author_association": "CONTRIBUTOR",
      "body": "I think it is my misunderstanding (and I don't want to crowd the PR), but I will comment here, thanks",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-841704268",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "reviewed",
      "id": 660379577,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwMzc5NTc3",
      "url": null,
      "actor": null,
      "commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#pullrequestreview-660379577",
      "submitted_at": "2021-05-15T18:26:16Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
    },
    {
      "event": "reviewed",
      "id": 660379848,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwMzc5ODQ4",
      "url": null,
      "actor": null,
      "commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#pullrequestreview-660379848",
      "submitted_at": "2021-05-15T18:30:22Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
    },
    {
      "event": "reviewed",
      "id": 660379934,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwMzc5OTM0",
      "url": null,
      "actor": null,
      "commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#pullrequestreview-660379934",
      "submitted_at": "2021-05-15T18:31:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
    },
    {
      "event": "reviewed",
      "id": 660381011,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwMzgxMDEx",
      "url": null,
      "actor": null,
      "commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#pullrequestreview-660381011",
      "submitted_at": "2021-05-15T18:48:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
    },
    {
      "event": "reviewed",
      "id": 660381249,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjYwMzgxMjQ5",
      "url": null,
      "actor": null,
      "commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#pullrequestreview-660381249",
      "submitted_at": "2021-05-15T18:52:09Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MDE2NzljOGYyOWQwNDU0ZDcwMDM4MDVkMzAwMzE2MjNmMTk0YTkzYg==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/01679c8f29d0454d7003805d30031623f194a93b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/01679c8f29d0454d7003805d30031623f194a93b",
      "tree": {
        "sha": "ad9ebe72baed9748737540543febaa13ebcb03c7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ad9ebe72baed9748737540543febaa13ebcb03c7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ad9ebe72baed9748737540543febaa13ebcb03c7\nparent 3d9a359d1de6232975042f0a5a5c99f2fc112a6b\nauthor Dmitry Petukhov <dp@simplexum.com> 1621150418 +0500\ncommitter Dmitry Petukhov <dp@simplexum.com> 1621150717 +0500\n\nBIP88: clarifications, mistype fixes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEsXo1u6GHOVeE4qazIwHSa9wVFg0FAmCgy/0RHGRwQHNpbXBs\nZXh1bS5jb20ACgkQIwHSa9wVFg171BAAoRAuvkE+IsT+OS9nbuHHO+UwZT1YVf+e\nTOAjg+lIdGfKP+CXvR0EyBgfe0hAI/RNK3gQo3jwe/PbwrOEwFsIaRK0eDN58qtN\nt04n1Gt1/+FDBR5bRM23ff2YoRAcehw8fJnvDa74H6ZXpiLB62+mkyi2tjbRow2G\nJXKXA+SIYamINewwv3fWbMzAZgW2/dY0ausmn+XrZuia7FxjGfzwNL3Bw74qAFEF\nOkdFFNmlW0D7fNJQcapz3vZOMcMnMxefDwdt+btBcPvmBFnMEODaWGNIO7d1Kb3n\ndxA+S7IzddIV7mbAm6eBwL0tW1A1PxOjZhm20QpjGctUBS8PWAhIm0xqiXtIajc/\n/7Ce6gFqoUlRbx29cMnab3XxhXo0YfyM6GYEwJY2ZhwMGeA7Nmq5lSGeuxhgEPzu\n002xoCJw9xcBGKdvTgGQVCzF2ZfA0JTh+erTgjXPmIh1aR8nWGAThTnXj3fcOg/B\n8BLboLr3xQ3/2mu7DDINKphcU97spYfUBZawSthud0mPq/Tis6h1o1kD6O9S34v1\nubzTXF7HG7grKm9lwgsd7cGhRwej/sPQk3SaKlT/i+rBTf/e4//LCEsTOkXZwfDo\nW/rfVJQzvjmCVob3Oxc5dBPpp9USjgiTzU83ZuOZHsx6REQAUdF0Ry4DpSLICbKC\nYBmBckQmGjc=\n=oLMN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
          "sha": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
          "html_url": "https://github.com/bitcoin/bips/commit/3d9a359d1de6232975042f0a5a5c99f2fc112a6b"
        }
      ],
      "message": "BIP88: clarifications, mistype fixes",
      "committer": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-16T07:38:37Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-16T07:33:38Z"
      },
      "sha": "01679c8f29d0454d7003805d30031623f194a93b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjYyOGExM2UyMTI0YzdmOTI3YzAzM2Y1ZmVkODE2NzFjYjU1OWFlNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b628a13e2124c7f927c033f5fed81671cb559ae5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b628a13e2124c7f927c033f5fed81671cb559ae5",
      "tree": {
        "sha": "4ab1980580d5f9c7225be5850648dd9b68aa4f32",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4ab1980580d5f9c7225be5850648dd9b68aa4f32"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4ab1980580d5f9c7225be5850648dd9b68aa4f32\nparent 01679c8f29d0454d7003805d30031623f194a93b\nauthor Dmitry Petukhov <dp@simplexum.com> 1621150900 +0500\ncommitter Dmitry Petukhov <dp@simplexum.com> 1621151598 +0500\n\nBIP88: use <code> tags more, instead of double quotes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEsXo1u6GHOVeE4qazIwHSa9wVFg0FAmCgz24RHGRwQHNpbXBs\nZXh1bS5jb20ACgkQIwHSa9wVFg03qw//QQ65Ysy+OSoqhuOiPwwkfK98xpgzW5st\nd5xURrPynXk2sWbQRpIlkJAJtTeHR5Rth2InC+tsomVctULVLdVt5qW5KfKiXf1e\ncTHof7vn3JQRkF6ikzfD5kCvB2bfeS2TNJME0LQSkbwyUhG6fC3mT7d/l2oqCUsl\nSPOwMtd7Y2gf54a9cup1hIzCbl3EvsaePZ0Csmk8E/9MDBxrf7X6LSQ3ijGbSqU5\nymQNLektAvyQGZN/DsT398wRP+p7HRWJ1Qh6Y8NHpmnaAuwfUj9rjSzab5LxUMsC\n7JPnAC5/jyvvrB3e3/26S7Ble0HOPfFVM8UCqJqMXKKJiXqo6wtF519rXKHSJMQl\nF80OxdpYHVXa4GVYgbVVY6kT3fBzagqrK3DEgJJnDO42kHsq+Qan3pQhc06MaFV3\nwtsJyhndOT6TA63IuUrJoyVcfbkvj71Hj1uGaenNcVy14y/u3s2PnMcfPEkjKMaV\na5dlahtIlpBt4KG4XQooD6Jf+9ShnTy/gHIxuiGaM5xTCXe6gPcidrfI43e+Seg1\nQSfkGhrNnOnsRQ+EZtHRDNbSW7fyBqjjBg3ln7xo1QqY1ueV4L1ZjsMRd2mH8z1o\nH8C2SS0cI21/072unMgK7r7IaJaL1loLPxuu0Wj+VxQmUzZJi6pid2KZVQSKdObX\nFsIyDqE/wCE=\n=/+p5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/01679c8f29d0454d7003805d30031623f194a93b",
          "sha": "01679c8f29d0454d7003805d30031623f194a93b",
          "html_url": "https://github.com/bitcoin/bips/commit/01679c8f29d0454d7003805d30031623f194a93b"
        }
      ],
      "message": "BIP88: use <code> tags more, instead of double quotes",
      "committer": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-16T07:53:18Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-16T07:41:40Z"
      },
      "sha": "b628a13e2124c7f927c033f5fed81671cb559ae5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YWJjMTEzZWRkNGJjMjMzOWM2YjY0Njg5YzBiMzM2MzU2MTVjMjk3ZQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/abc113edd4bc2339c6b64689c0b33635615c297e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/abc113edd4bc2339c6b64689c0b33635615c297e",
      "tree": {
        "sha": "d252189ab76b4a2603f2b3229db0bd76794e8cef",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d252189ab76b4a2603f2b3229db0bd76794e8cef"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d252189ab76b4a2603f2b3229db0bd76794e8cef\nparent b628a13e2124c7f927c033f5fed81671cb559ae5\nauthor Dmitry Petukhov <dp@simplexum.com> 1621245782 +0500\ncommitter Dmitry Petukhov <dp@simplexum.com> 1621245782 +0500\n\nBIP88: Add definition for \"length of the template\", \"length of the path\"\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJFBAABCAAvFiEEsXo1u6GHOVeE4qazIwHSa9wVFg0FAmCiP28RHGRwQHNpbXBs\nZXh1bS5jb20ACgkQIwHSa9wVFg2EzRAApp86V+Btpt04AmjqKBMwC7PwcsKqfESE\nEqJW9vRCcGWJB53oVpPVliJIVGpWztED/iW76XBCFbG3GA2dYAVY3E9BJ1yEU37m\nFvvKlwZpfWAHwhqOhTWvEj8XZ/uSznbFu2W8yMaSt3Cw4U/pUHSvvo/uyYewT61q\n9ghamlbpHdJhcVlpdUXOnFc26JVmQqAqjGIdquuqWriU3GN4M9Tu6+UCMqOy8lML\nvrfKoCl8OrgNdqLvi56mixMyBVSILY5L2z6qKhW9NFTVowcqU9X63tfsU3fsdv5p\nJ7qCe50D6pwMgMenovc/Sxb5v3n4vSievhV6Ywl14fCiaY+EK/b9KxOb57RNFhks\nqK7ND9SrWWw5EFAOihJ+okCol3FOflLGfm05i7ryKsBQi/Bdumpzj4AAZMup0NKP\naKb3fO2vUEj1xWxZ5afPrDyUmREYtgjkMzoBVAkXxww0JwsVEAWbqiqJQG7LaRiP\nktuXiN8RJZr+6q3jWCtmWFDRhxWcY3lRYNH5EmAHUmFygbp/tzNgpaociJEvFSdI\nDM2fly4+dHRRqRWgiBK3csiO8gadR22589Ngpqy+YimOqoFMybgzQJIDz60FbvV3\nSrswXvQHX4x0IAf9+rGXgEcg0fSmVjJyYcEPCHGoWyuQ/BI/1u5VI+uRP3RP+PIY\nUBB01HanYEI=\n=EMd1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b628a13e2124c7f927c033f5fed81671cb559ae5",
          "sha": "b628a13e2124c7f927c033f5fed81671cb559ae5",
          "html_url": "https://github.com/bitcoin/bips/commit/b628a13e2124c7f927c033f5fed81671cb559ae5"
        }
      ],
      "message": "BIP88: Add definition for \"length of the template\", \"length of the path\"",
      "committer": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-17T10:03:02Z"
      },
      "author": {
        "name": "Dmitry Petukhov",
        "email": "dp@simplexum.com",
        "date": "2021-05-17T10:03:02Z"
      },
      "sha": "abc113edd4bc2339c6b64689c0b33635615c297e"
    },
    {
      "event": "merged",
      "id": 4757381909,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDc1NzM4MTkwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4757381909",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "868c4f8ada28385f331c41725308177398b4e222",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/868c4f8ada28385f331c41725308177398b4e222",
      "created_at": "2021-05-17T23:20:21Z"
    },
    {
      "event": "closed",
      "id": 4757381915,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDc1NzM4MTkxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4757381915",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-17T23:20:21Z"
    },
    {
      "event": "commented",
      "id": 842705875,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjcwNTg3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/842705875",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-17T23:20:33Z",
      "updated_at": "2021-05-17T23:20:33Z",
      "author_association": "MEMBER",
      "body": "Further changes can be added in additional PRs",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-842705875",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 842900770,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0MjkwMDc3MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/842900770",
      "actor": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-18T06:51:31Z",
      "updated_at": "2021-05-18T06:51:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "ACK commit abc113edd4bc2339c6b64689c0b33635615c297e \r\n\r\nHappy with all the changes!",
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-842900770",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    },
    {
      "event": "commented",
      "id": 842943102,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg0Mjk0MzEwMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/842943102",
      "actor": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-05-18T07:52:12Z",
      "updated_at": "2021-05-18T07:52:12Z",
      "author_association": "CONTRIBUTOR",
      "body": "Thanks!\r\n\r\nI didn't add the Acknowledgements section in time before the BIP88 was merged, doing it in a separate PR: https://github.com/bitcoin/bips/pull/1123",
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1025#issuecomment-842943102",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1025"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632989771",
      "pull_request_review_id": 660378783,
      "id": 632989771,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk4OTc3MQ==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".",
      "path": "bip-0088.mediawiki",
      "position": null,
      "original_position": 98,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit:  \"'\" is hard to read (for me), `<code>'</code>` is easier",
      "created_at": "2021-05-15T18:13:40Z",
      "updated_at": "2021-05-15T18:13:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632989771",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632989771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632990372",
      "pull_request_review_id": 660379188,
      "id": 632990372,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5MDM3Mg==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.",
      "path": "bip-0088.mediawiki",
      "position": 108,
      "original_position": 108,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This confuses me? 2,147,483,648 is the max value allowed by BIP32/44. Why does hardening double this, and how is this allowed?",
      "created_at": "2021-05-15T18:20:02Z",
      "updated_at": "2021-05-15T18:20:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632990372",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632990372"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 108,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632990985",
      "pull_request_review_id": 660379577,
      "id": 632990985,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5MDk4NQ==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template",
      "path": "bip-0088.mediawiki",
      "position": null,
      "original_position": 128,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If a template was restricted to (0-1,000) that is a value that is within (0-2147483647) - should that be represented as a Wildcard? I don't think so, but I was confused with how this was worded.",
      "created_at": "2021-05-15T18:26:16Z",
      "updated_at": "2021-05-15T18:26:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632990985",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632990985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632991383",
      "pull_request_review_id": 660379848,
      "id": 632991383,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5MTM4Mw==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.",
      "path": "bip-0088.mediawiki",
      "position": 157,
      "original_position": 157,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Can you provide examples for these?",
      "created_at": "2021-05-15T18:30:22Z",
      "updated_at": "2021-05-15T18:30:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632991383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632991383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": 152,
      "original_start_line": 152,
      "start_side": "RIGHT",
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632991517",
      "pull_request_review_id": 660379934,
      "id": 632991517,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5MTUxNw==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.",
      "path": "bip-0088.mediawiki",
      "position": 161,
      "original_position": 161,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why only 'MAY' for partial templates?",
      "created_at": "2021-05-15T18:31:27Z",
      "updated_at": "2021-05-15T18:31:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632991517",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632991517"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 161,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632992260",
      "pull_request_review_id": 660380367,
      "id": 632992260,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5MjI2MA==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.",
      "path": "bip-0088.mediawiki",
      "position": 108,
      "original_position": 108,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632990372,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I realized how dumb that was after typing it out... :facepalm: \r\nDisregard\r\n\r\nFor people reading: it's 2^31 for hardened and non-hardened keys",
      "created_at": "2021-05-15T18:38:12Z",
      "updated_at": "2021-05-15T18:38:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632992260",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632992260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 108,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632993241",
      "pull_request_review_id": 660381011,
      "id": 632993241,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5MzI0MQ==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.\n+\n+==Parsing result==\n+\n+The result of successful parsing of a valid path template can be represented by a list of sections, where each section is a list of index ranges, where index range is a tuple of (range_start, range_end).\n+\n+==Matching==\n+\n+The matching is to be performed against a list of integer values that represent a BIP32 path (or a portion of BIP32 path, for partial templates).\n+\n+Non-hardened indexes in this list should be represented by values from 0 to 2147483647.\n+\n+Hardened indexes in this list should be represented by values from 2147483648 to 4294967295.\n+\n+The matching algorithm:\n+\n+    1. If the length of the path differs from the length of the template, fail",
      "path": "bip-0088.mediawiki",
      "position": 177,
      "original_position": 177,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Could you explain this for me? You used \"path template\" previously in the BIP (for example #1 and #8 under constraints), so I am confused by the different definitions of path and template?",
      "created_at": "2021-05-15T18:48:08Z",
      "updated_at": "2021-05-15T18:48:08Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632993241",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632993241"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632993440",
      "pull_request_review_id": 660381132,
      "id": 632993440,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5MzQ0MA==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.\n+\n+==Parsing result==\n+\n+The result of successful parsing of a valid path template can be represented by a list of sections, where each section is a list of index ranges, where index range is a tuple of (range_start, range_end).\n+\n+==Matching==\n+\n+The matching is to be performed against a list of integer values that represent a BIP32 path (or a portion of BIP32 path, for partial templates).\n+\n+Non-hardened indexes in this list should be represented by values from 0 to 2147483647.\n+\n+Hardened indexes in this list should be represented by values from 2147483648 to 4294967295.\n+\n+The matching algorithm:\n+\n+    1. If the length of the path differs from the length of the template, fail",
      "path": "bip-0088.mediawiki",
      "position": 177,
      "original_position": 177,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632993241,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Do you mean section? as defined in the 2nd line under #Specification?",
      "created_at": "2021-05-15T18:50:27Z",
      "updated_at": "2021-05-15T18:50:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632993440",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632993440"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632993618",
      "pull_request_review_id": 660381249,
      "id": 632993618,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMjk5MzYxOA==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.\n+\n+==Parsing result==\n+\n+The result of successful parsing of a valid path template can be represented by a list of sections, where each section is a list of index ranges, where index range is a tuple of (range_start, range_end).\n+\n+==Matching==\n+\n+The matching is to be performed against a list of integer values that represent a BIP32 path (or a portion of BIP32 path, for partial templates).\n+\n+Non-hardened indexes in this list should be represented by values from 0 to 2147483647.\n+\n+Hardened indexes in this list should be represented by values from 2147483648 to 4294967295.\n+\n+The matching algorithm:\n+\n+    1. If the length of the path differs from the length of the template, fail\n+    2. For each value V at position N in the path:\n+            If for all index ranges within the section at position N in the template,\n+            value V is either less than range_start, or greater than range_end, fail\n+    3. Otherwise, succeed\n+\n+==Formal specification==\n+\n+The finite state machine (FSM) for the parser of the described template format,\n+and the matching formula are specified in TLA+ specification language at https://github.com/dgpv/bip32_template_parse_tplaplus_spec\n+\n+The specification can be used with TLC checker and accompanying script to generate test data for the implementations.\n+\n+==Implementations==\n+\n+While the formal specification specifies an FSM, which would be convenient for implementation without access to rich string handling facilities, when such facilities are available, the implementation might use the whole-string deconstruction approach where the templates are first split into sections, then sections are split into index templates, and then each index template are parsed individually.\n+\n+A FSM-based approach can be made close to the formal specification, though, and the test data generated with TLC checker would give much better coverage for a FSM based implementation. If the template string contains several errors, an implementation that uses deconstruction apporach might detect some of these errors earlier than FSM-based implementation, and vise versa.",
      "path": "bip-0088.mediawiki",
      "position": null,
      "original_position": 194,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": null,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: spelling - approach",
      "created_at": "2021-05-15T18:52:09Z",
      "updated_at": "2021-05-15T18:52:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r632993618",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/632993618"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633044758",
      "pull_request_review_id": 660407939,
      "id": 633044758,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA0NDc1OA==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template",
      "path": "bip-0088.mediawiki",
      "position": null,
      "original_position": 128,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632990985,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The wording may be confusing, I agree. Maybe it should say \"an index template that *will* match any value from 0 to 2147483647 MUST be specified as Wildcard index template\" ?",
      "created_at": "2021-05-16T05:30:01Z",
      "updated_at": "2021-05-16T05:30:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633044758",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633044758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633045022",
      "pull_request_review_id": 660408089,
      "id": 633045022,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA0NTAyMg==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template",
      "path": "bip-0088.mediawiki",
      "position": null,
      "original_position": 128,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632990985,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "hm, maybe it is better to explicitly specify, \"an index range `0-2147483647` is not allowed, and MUST be specified as Wildcard index template instead\"",
      "created_at": "2021-05-16T05:33:04Z",
      "updated_at": "2021-05-16T05:33:05Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633045022",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633045022"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633045380",
      "pull_request_review_id": 660408288,
      "id": 633045380,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA0NTM4MA==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.",
      "path": "bip-0088.mediawiki",
      "position": 157,
      "original_position": 157,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632991383,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "`m/49/0` (full)\r\n`0/1/*` (partial)\r\n`m/49/0/1/*` (combined)\r\n\r\n`1/{3-5}` + `0/0/{1-5555}` => `1/{3-5}/0/0/{1-5555}` - combining two partial templates, resulting in a new partial template\r\n\r\nThat's what I meant. Do you think something like this example should go into BIP text ?",
      "created_at": "2021-05-16T05:37:03Z",
      "updated_at": "2021-05-16T05:37:03Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633045380",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633045380"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": 152,
      "original_start_line": 152,
      "start_side": "RIGHT",
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633053803",
      "pull_request_review_id": 660412995,
      "id": 633053803,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA1MzgwMw==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.\n+\n+==Parsing result==\n+\n+The result of successful parsing of a valid path template can be represented by a list of sections, where each section is a list of index ranges, where index range is a tuple of (range_start, range_end).\n+\n+==Matching==\n+\n+The matching is to be performed against a list of integer values that represent a BIP32 path (or a portion of BIP32 path, for partial templates).\n+\n+Non-hardened indexes in this list should be represented by values from 0 to 2147483647.\n+\n+Hardened indexes in this list should be represented by values from 2147483648 to 4294967295.\n+\n+The matching algorithm:\n+\n+    1. If the length of the path differs from the length of the template, fail",
      "path": "bip-0088.mediawiki",
      "position": 177,
      "original_position": 177,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632993241,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "\"path\" is something that is being matched, like `m/44'/0'/0'/1/5`, the \"path template\", or simply \"template\" in this case, is something that the path is matched against, like `m/44'/0'/0'/{0-1}/{0-5000}`. Since the length of the template (number of sections in it) is the same as the length of the path (number of indexes in it), this matching step passes. If the template would be just  `m/44'/0'/0'`, for example, the matching would fail immediately. The implementation could implement partial match, of course, by taking a portion of the path of the same length as the template, and matching it, but I don't think this needs to be specified. ",
      "created_at": "2021-05-16T07:11:32Z",
      "updated_at": "2021-05-17T09:48:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633053803",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633053803"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633054376",
      "pull_request_review_id": 660413311,
      "id": 633054376,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA1NDM3Ng==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.",
      "path": "bip-0088.mediawiki",
      "position": 161,
      "original_position": 161,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632991517,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Because partial templates are a more complex feature - it allows to make a compound template out of several partial templates. Not every implementation would want to have the extra logic needed for this. ",
      "created_at": "2021-05-16T07:17:33Z",
      "updated_at": "2021-05-16T07:17:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633054376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633054376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 161,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633057376",
      "pull_request_review_id": 660415063,
      "id": 633057376,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA1NzM3Ng==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".",
      "path": "bip-0088.mediawiki",
      "position": null,
      "original_position": 98,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632989771,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Fixed in https://github.com/bitcoin/bips/pull/1025/commits/01679c8f29d0454d7003805d30031623f194a93b\r\n\r\nAlso used more `<code>` tags instead of double quotes, in https://github.com/bitcoin/bips/pull/1025/commits/b628a13e2124c7f927c033f5fed81671cb559ae5",
      "created_at": "2021-05-16T07:48:33Z",
      "updated_at": "2021-05-16T07:48:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633057376",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633057376"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633057450",
      "pull_request_review_id": 660415100,
      "id": 633057450,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA1NzQ1MA==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template",
      "path": "bip-0088.mediawiki",
      "position": null,
      "original_position": 128,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632990985,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Rephrased in https://github.com/bitcoin/bips/commit/01679c8f29d0454d7003805d30031623f194a93b",
      "created_at": "2021-05-16T07:49:04Z",
      "updated_at": "2021-05-16T07:49:04Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633057450",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633057450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633057494",
      "pull_request_review_id": 660415118,
      "id": 633057494,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzA1NzQ5NA==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.\n+\n+==Parsing result==\n+\n+The result of successful parsing of a valid path template can be represented by a list of sections, where each section is a list of index ranges, where index range is a tuple of (range_start, range_end).\n+\n+==Matching==\n+\n+The matching is to be performed against a list of integer values that represent a BIP32 path (or a portion of BIP32 path, for partial templates).\n+\n+Non-hardened indexes in this list should be represented by values from 0 to 2147483647.\n+\n+Hardened indexes in this list should be represented by values from 2147483648 to 4294967295.\n+\n+The matching algorithm:\n+\n+    1. If the length of the path differs from the length of the template, fail\n+    2. For each value V at position N in the path:\n+            If for all index ranges within the section at position N in the template,\n+            value V is either less than range_start, or greater than range_end, fail\n+    3. Otherwise, succeed\n+\n+==Formal specification==\n+\n+The finite state machine (FSM) for the parser of the described template format,\n+and the matching formula are specified in TLA+ specification language at https://github.com/dgpv/bip32_template_parse_tplaplus_spec\n+\n+The specification can be used with TLC checker and accompanying script to generate test data for the implementations.\n+\n+==Implementations==\n+\n+While the formal specification specifies an FSM, which would be convenient for implementation without access to rich string handling facilities, when such facilities are available, the implementation might use the whole-string deconstruction approach where the templates are first split into sections, then sections are split into index templates, and then each index template are parsed individually.\n+\n+A FSM-based approach can be made close to the formal specification, though, and the test data generated with TLC checker would give much better coverage for a FSM based implementation. If the template string contains several errors, an implementation that uses deconstruction apporach might detect some of these errors earlier than FSM-based implementation, and vise versa.",
      "path": "bip-0088.mediawiki",
      "position": null,
      "original_position": 194,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632993618,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "fixed in https://github.com/bitcoin/bips/commit/01679c8f29d0454d7003805d30031623f194a93b",
      "created_at": "2021-05-16T07:49:18Z",
      "updated_at": "2021-05-16T07:49:18Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633057494",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633057494"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 194,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633223016",
      "pull_request_review_id": 660553515,
      "id": 633223016,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzIyMzAxNg==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.",
      "path": "bip-0088.mediawiki",
      "position": 157,
      "original_position": 157,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632991383,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "That makes total sense to me now, maybe I was being dumb, but the examples helped. Your call.\r\nOnly question is, when combining two partial templates, how do you know the order?\r\nEx: \r\n1/{3-5} + 0/0/{1-5555} => 1/{3-5}/0/0/{1-5555}\r\nor\r\n1/{3-5} + 0/0/{1-5555} => 0/0/{1-5555}/1/{3-5}\r\n\r\nObviously, the first is more likely, but both ",
      "created_at": "2021-05-17T05:04:09Z",
      "updated_at": "2021-05-17T05:04:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633223016",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633223016"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": 152,
      "original_start_line": 152,
      "start_side": "RIGHT",
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633224193",
      "pull_request_review_id": 660554898,
      "id": 633224193,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzIyNDE5Mw==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.\n+\n+==Parsing result==\n+\n+The result of successful parsing of a valid path template can be represented by a list of sections, where each section is a list of index ranges, where index range is a tuple of (range_start, range_end).\n+\n+==Matching==\n+\n+The matching is to be performed against a list of integer values that represent a BIP32 path (or a portion of BIP32 path, for partial templates).\n+\n+Non-hardened indexes in this list should be represented by values from 0 to 2147483647.\n+\n+Hardened indexes in this list should be represented by values from 2147483648 to 4294967295.\n+\n+The matching algorithm:\n+\n+    1. If the length of the path differs from the length of the template, fail",
      "path": "bip-0088.mediawiki",
      "position": 177,
      "original_position": 177,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632993241,
      "user": {
        "login": "Rspigler",
        "id": 24482484,
        "node_id": "MDQ6VXNlcjI0NDgyNDg0",
        "avatar_url": "https://avatars.githubusercontent.com/u/24482484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Rspigler",
        "html_url": "https://github.com/Rspigler",
        "followers_url": "https://api.github.com/users/Rspigler/followers",
        "following_url": "https://api.github.com/users/Rspigler/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Rspigler/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Rspigler/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Rspigler/subscriptions",
        "organizations_url": "https://api.github.com/users/Rspigler/orgs",
        "repos_url": "https://api.github.com/users/Rspigler/repos",
        "events_url": "https://api.github.com/users/Rspigler/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Rspigler/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Length has a lot of definitions, and was confusing.  You have already defined sections. So maybe re-word as:\r\nIf the number of sections of the path differs from the number of indexes of the path template, fail.\r\nAlso might want to include that definition of path in the BIP",
      "created_at": "2021-05-17T05:08:13Z",
      "updated_at": "2021-05-17T05:11:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633224193",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633224193"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633383287",
      "pull_request_review_id": 660768141,
      "id": 633383287,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzM4MzI4Nw==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.",
      "path": "bip-0088.mediawiki",
      "position": 157,
      "original_position": 157,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632991383,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "When combining partial templates, the order is determined by the software that is combining it, and depend on the concrete usecase and the designation of each partial template (\"account part\", \"suffix part\" of the template, etc)\r\n\r\nI can't even come up with a plausible example where this would be needed, but I see no need add any restriction on combining partial templates in this specification.",
      "created_at": "2021-05-17T09:40:49Z",
      "updated_at": "2021-05-17T09:40:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633383287",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633383287"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": 152,
      "original_start_line": 152,
      "start_side": "RIGHT",
      "line": 157,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633398746",
      "pull_request_review_id": 660788394,
      "id": 633398746,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzMzM5ODc0Ng==",
      "diff_hunk": "@@ -0,0 +1,229 @@\n+<pre>\n+  BIP: 88\n+  Layer: Applications\n+  Title: Hierarchical Deterministic Path Templates\n+  Author: Dmitry Petukhov <dp@simplexum.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0088\n+  Status: Proposed\n+  Type: Informational\n+  Created: 2020-06-23\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document describes a format for the representation of the templates that specify\n+the constraints that can be imposed on BIP32 derivation paths.\n+\n+The constraints specified by the templates allow to easily discern 'valid' paths,\n+that match the constraints, and 'invalid' paths, that exceed the constraints.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+BIP32 derivation path format is universal, and a number of schemes for derivation were proposed\n+in BIP43 and other documents, such as BIPs 44,45,49,84. The flexibility of the format also allowed\n+industry participants to implement custom derivation shemes that fit particular purposes,\n+but not necessarily useful in general.\n+\n+Even when existing BIPs for derivation schemes are used, their usage is not uniform across\n+the different wallets, in part because software vendors might have different considerations\n+and priorities when making decisions about derivation paths. This creates friction for users,\n+which might face problems when they try to access their coins using the wallet that derives\n+addresses differently than the one they used before.\n+\n+===Known solutions===\n+\n+The problem is common enough to warrant the creation of a dedicated website\n+([https://walletsrecovery.org/ walletsrecovery.org]) that tracks paths used by different wallets.\n+\n+At the time of writing, this website has used their own format to succintly describe multiple\n+derivation paths. As far as author knows, it was the only publicitly used format to describe\n+path templates before introduction of this BIP. The format was not specified anywhere beside\n+the main page of the website. It used <code>|</code> to denote alternative derivation indexes\n+(example: <code>m/|44'|49'|84'/0'/0'</code>) or whole alternative paths (<code>m/44'/0'/0'|m/44'/1'/0'</code>).\n+\n+It was not declared as a template format to use for processing by software, and seems to be\n+an ad-hoc format only intended for illustration. In contrast to this ad-hoc format, the format\n+described in this BIP is intended for unambigouos parsing by software, and to be easily read by humans\n+at the same time. Humans can visually detect the 'templated' parts of the path more easily than the use\n+of <code>|</code> in the template could allow. Wider range of paths can be defined in a single template more\n+succintly and unambiguously.\n+\n+===Intended use and advantages===\n+\n+Wallet software authors can use the proposed format to describe the derivation paths that\n+their software uses. This can improve user experience when switching to different wallet\n+software, restoring access to old wallets, etc.\n+\n+Unrestricted derivation path usage might be unsafe in certain contexts. In particular, when \"change\"\n+outputs of a transaction are sent to the addresses derived via paths unknown to the sender, the sender\n+might lose access to the whole change amount.\n+\n+A simplistic approach of hard-coding the checks for well-known paths into software and firmware leads\n+to reduced interoperability. Vendors cannot choose custom paths that are appropriate for\n+their particular, non-general-purpose applications, and are forced to shoehorn their solutions\n+into using well-known paths, or convince other vendors to support their custom paths. This approach\n+scales poorly.\n+\n+A flexible approach proposed in this document is to define a standard notation for \"BIP32 path templates\"\n+that succintly describes the constraints to impose on the derivation path.\n+\n+Wide support for these path templates will increase interoperability and flexibility of solutions,\n+and will allow vendors and individual developers to easily define their own custom restrictions.\n+This way, they will be able to deal with the risks of accidental or malicious use of unrestricted\n+derivation paths in a more flexible and precise manner.\n+\n+Well-known path templates can be pre-configured by default on devices and applications,\n+but users can have an option to turn off the templates that are not relevant to their uses.\n+\n+Having a standardized format for custom path templates will enable a common approach to be developed\n+in the enforcement of application-specific path restrictions in devices and applications.\n+One example of such an approach might be for devices to allow application-specific profiles\n+with path templates and possibly other custom parameters. Care must be taken to prevent the accidental\n+installation of malicious or incorrect profiles, though.\n+\n+==Specification==\n+\n+The format for the template was choosen to make it easy to read, convenient and visually unambigous. \n+\n+Template starts with optional prefix \"m/\", and then one or more sections delimited by the slash character (\"/\").\n+\n+Implementations MAY limit the maximum number of sections.\n+\n+Each section consists of ''index template'', optionally followed by the hardened marker: either an apostrophe (\"'\") or letter \"h\".\n+\n+Index template can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit index template\")\n+* A single \"*\" character, which denotes any value from 0 to 2147483647 (\"Wildcard index template\")\n+* The <nowiki>\"{\"</nowiki> character, followed by a number of ''index ranges'' delimited by commas (\",\"), followed by <nowiki>\"}\"</nowiki> character (\"Ranged index template\")\n+\n+Implementations MAY limit the maximum number of index ranges within the Ranged index template.\n+\n+If an index template is immediately followed by hardened marker, this means that all values specified in this index template is to be increased by 2147483648 for the purposes of matching.\n+\n+Index range can be:\n+\n+* An integer value from 0 to 2147483647 (\"Unit range\")\n+* An integer value from 0 to 2147483647, followed by the \"-\" character, followed by another integer value from 0 to 2147483647 (\"Non-unit range\")\n+\n+For Non-unit range, value on the left side of the \"-\" character is the range_start, and the value on the right side of the \"-\" character is the range_end.\n+\n+For Unit range, we say that range_start is equal to range_end, even though there is no start/end in the Unit range.\n+\n+Unit index template contains a single index range, which is the Unit range\n+\n+Wildcard index template contains a single index range, and we say that its range_start is set to 0 and its range_end is set to 2147483647\n+\n+Constraints:\n+\n+# To avoid ambiguity, whitespace MUST NOT appear within the path template.\n+# Commas within the Ranged index template MUST only appear in between index ranges.\n+# To avoid ambiguity, an index range that matches a single value MUST be specified as Unit range.\n+# To avoid ambiguity, an index template that matches any value from 0 to 2147483647 MUST be specified as Wildcard index template\n+# For Non-unit range, range_end MUST be larger than range_start.\n+# If there is more than one index range within the Ranged index template, range_start of the second and any subsequent range MUST be larger than the range_end of the preceeding range.\n+# To avoid ambiguity, all representations of integer values larger than 0 MUST NOT start with character \"0\" (no leading zeroes allowed).\n+# If hardened marker appears within any section in the path template, all preceding sections MUST also specify hardened matching.\n+# To avoid ambiguity, if a hardened marker appears within any section in the path template, all preceding sections MUST also use the same hardened marker (either \"h\" or \"'\").\n+# To avoid ambiguity, trailing slashes (for example, \"1/2/\") and duplicate slashes (for example, \"0//1\") MUST NOT appear in the template.\n+\n+It may be desireable to have fully unambiguous encoding, where for each valid path template string, there is no other valid template string that matches the exact same set of paths. This would enable someone to compare templates for equality through a simple string equality check, without any parsing.\n+\n+To achieve this, two extra rules are needed:\n+\n+* Within Ranged index template, subsequent range MUST NOT start with the value that is equal to the end of the previous range plus one. Thus, <nowiki>\"{1,2,3-5}\"</nowiki> is not allowed, and should be specified as <nowiki>\"{1-5}\"</nowiki> instead. This rule might make templates less convenient for frequent edits, though.\n+\n+* Only one type of hardened marker should be allowed (either \"h\" or \"'\").\n+\n+Instead of requiring the second extra rule, implementations can simply replace one type of marker with another in the template strings before comparing them.\n+\n+==Full and partial templates==\n+\n+If the template starts with \"m/\", that means that this is the \"full\" template, that matches the whole path.\n+\n+If the template does not start with \"m/\", that means that this is a \"partial\" template, and it can be used to match a part of the path, in the contexts where this might be appropriate (for example, when constraints for the suffix of the path might be dynamic, while constraints for the prefix of the path are fixed).\n+\n+Full template can be combined with partial template, where partial template extends full template,\n+resulting in new, longer full template.\n+\n+Partial template can be combined with another partial template, resulting in new, longer partial template.\n+\n+Full template can not be combined with another full template.\n+\n+Implementations MUST support parsing full templates and matching paths against full templates.\n+\n+Implementations MAY support parsing partial templates and matching portions of the paths against partial templates, as well as combining the templates.\n+\n+==Parsing result==\n+\n+The result of successful parsing of a valid path template can be represented by a list of sections, where each section is a list of index ranges, where index range is a tuple of (range_start, range_end).\n+\n+==Matching==\n+\n+The matching is to be performed against a list of integer values that represent a BIP32 path (or a portion of BIP32 path, for partial templates).\n+\n+Non-hardened indexes in this list should be represented by values from 0 to 2147483647.\n+\n+Hardened indexes in this list should be represented by values from 2147483648 to 4294967295.\n+\n+The matching algorithm:\n+\n+    1. If the length of the path differs from the length of the template, fail",
      "path": "bip-0088.mediawiki",
      "position": 177,
      "original_position": 177,
      "commit_id": "abc113edd4bc2339c6b64689c0b33635615c297e",
      "original_commit_id": "3d9a359d1de6232975042f0a5a5c99f2fc112a6b",
      "in_reply_to_id": 632993241,
      "user": {
        "login": "dgpv",
        "id": 43240089,
        "node_id": "MDQ6VXNlcjQzMjQwMDg5",
        "avatar_url": "https://avatars.githubusercontent.com/u/43240089?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dgpv",
        "html_url": "https://github.com/dgpv",
        "followers_url": "https://api.github.com/users/dgpv/followers",
        "following_url": "https://api.github.com/users/dgpv/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/dgpv/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/dgpv/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/dgpv/subscriptions",
        "organizations_url": "https://api.github.com/users/dgpv/orgs",
        "repos_url": "https://api.github.com/users/dgpv/repos",
        "events_url": "https://api.github.com/users/dgpv/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/dgpv/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Added the definitions of \"length of the template\", \"length of the path\": https://github.com/dgpv/bips/commit/abc113edd4bc2339c6b64689c0b33635615c297e\r\n\r\nI don't think that we should include the definition of the path. Throughout the text of this BIP, \"BIP32 derivation path\" is mentioned many times, and it is obvious that it is the main thing that the BIP88 itself is focused on.\r\n\r\nBIP32 or BIP43 do not define \"path\", while BIP44 just goes and uses the term \"path\" straight away without additional definition. I think we can just leave it as it is and not add specific definition for the path.\r\n\r\nBut if you have a good idea for such definition, it may not hurt to add it.",
      "created_at": "2021-05-17T10:02:17Z",
      "updated_at": "2021-05-17T10:13:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1025#discussion_r633398746",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/633398746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1025"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 177,
      "side": "RIGHT"
    }
  ]
}