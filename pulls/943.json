{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/943",
    "id": 447104657,
    "node_id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTA0NjU3",
    "html_url": "https://github.com/bitcoin/bips/pull/943",
    "diff_url": "https://github.com/bitcoin/bips/pull/943.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/943.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/943/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/943/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/943/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
    "number": 943,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "Update BIP 118 for taproot, rename to ANYPREVOUT",
    "user": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Lots of updates to BIP 118 in light of taproot. cc @cdecker",
    "labels": [
      {
        "id": 275846070,
        "node_id": "MDU6TGFiZWwyNzU4NDYwNzA=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/Proposed%20BIP%20modification",
        "name": "Proposed BIP modification",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2020-07-09T21:33:06Z",
    "updated_at": "2021-07-09T08:20:15Z",
    "closed_at": "2021-07-08T17:24:52Z",
    "mergeable_state": "unknown",
    "merged_at": "2021-07-08T17:24:52Z",
    "merge_commit_sha": "150ab6f5c3aca9da05fccc5b435e9667853407f4",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "ajtowns:bip-anyprevout",
      "ref": "bip-anyprevout",
      "sha": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 158782389,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNTg3ODIzODk=",
        "name": "bips",
        "full_name": "ajtowns/bips",
        "owner": {
          "login": "ajtowns",
          "id": 127186,
          "node_id": "MDQ6VXNlcjEyNzE4Ng==",
          "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ajtowns",
          "html_url": "https://github.com/ajtowns",
          "followers_url": "https://api.github.com/users/ajtowns/followers",
          "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
          "organizations_url": "https://api.github.com/users/ajtowns/orgs",
          "repos_url": "https://api.github.com/users/ajtowns/repos",
          "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ajtowns/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/ajtowns/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/ajtowns/bips",
        "archive_url": "https://api.github.com/repos/ajtowns/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ajtowns/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ajtowns/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ajtowns/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ajtowns/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ajtowns/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ajtowns/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ajtowns/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ajtowns/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ajtowns/bips/contributors",
        "deployments_url": "https://api.github.com/repos/ajtowns/bips/deployments",
        "downloads_url": "https://api.github.com/repos/ajtowns/bips/downloads",
        "events_url": "https://api.github.com/repos/ajtowns/bips/events",
        "forks_url": "https://api.github.com/repos/ajtowns/bips/forks",
        "git_commits_url": "https://api.github.com/repos/ajtowns/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ajtowns/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ajtowns/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ajtowns/bips.git",
        "issue_comment_url": "https://api.github.com/repos/ajtowns/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ajtowns/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ajtowns/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ajtowns/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ajtowns/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ajtowns/bips/languages",
        "merges_url": "https://api.github.com/repos/ajtowns/bips/merges",
        "milestones_url": "https://api.github.com/repos/ajtowns/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ajtowns/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ajtowns/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ajtowns/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:ajtowns/bips.git",
        "stargazers_url": "https://api.github.com/repos/ajtowns/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/ajtowns/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ajtowns/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/ajtowns/bips/subscription",
        "tags_url": "https://api.github.com/repos/ajtowns/bips/tags",
        "teams_url": "https://api.github.com/repos/ajtowns/bips/teams",
        "trees_url": "https://api.github.com/repos/ajtowns/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ajtowns/bips.git",
        "hooks_url": "https://api.github.com/repos/ajtowns/bips/hooks",
        "svn_url": "https://github.com/ajtowns/bips",
        "homepage": "bitcoin.org",
        "language": "Python",
        "forks_count": 3,
        "stargazers_count": 3,
        "watchers_count": 3,
        "size": 14320,
        "default_branch": "master",
        "open_issues_count": 2,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-03-29T05:11:09Z",
        "created_at": "2018-11-23T04:53:50Z",
        "updated_at": "2022-06-17T10:32:37Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "65529b12bb01b9f29717e1735ce4d472ef9d9fe7",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5178,
        "stargazers_count": 8116,
        "watchers_count": 8116,
        "size": 13694,
        "default_branch": "master",
        "open_issues_count": 115,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-06-08T12:03:37Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-06-12T10:53:19Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 192,
    "deletions": 123,
    "changed_files": 2,
    "commits": 5,
    "review_comments": 19,
    "comments": 22
  },
  "events": [
    {
      "event": "mentioned",
      "id": 3531526739,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzUzMTUyNjczOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3531526739",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T21:33:06Z"
    },
    {
      "event": "subscribed",
      "id": 3531526743,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM1MzE1MjY3NDM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3531526743",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-09T21:33:06Z"
    },
    {
      "event": "reviewed",
      "id": 446348965,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzQ4OTY1",
      "url": null,
      "actor": null,
      "commit_id": "0561aaf8d501be4cfe0ed629e0718864556e76d2",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Gave it a quick read and didn't spot anything objectionable.  One micro-nit.",
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#pullrequestreview-446348965",
      "submitted_at": "2020-07-10T12:35:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/943"
    },
    {
      "event": "commented",
      "id": 656960822,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1Njk2MDgyMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/656960822",
      "actor": {
        "login": "mcelrath",
        "id": 1746780,
        "node_id": "MDQ6VXNlcjE3NDY3ODA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1746780?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mcelrath",
        "html_url": "https://github.com/mcelrath",
        "followers_url": "https://api.github.com/users/mcelrath/followers",
        "following_url": "https://api.github.com/users/mcelrath/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mcelrath/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mcelrath/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mcelrath/subscriptions",
        "organizations_url": "https://api.github.com/users/mcelrath/orgs",
        "repos_url": "https://api.github.com/users/mcelrath/repos",
        "events_url": "https://api.github.com/users/mcelrath/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mcelrath/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-11T01:31:46Z",
      "updated_at": "2020-07-11T01:31:46Z",
      "author_association": "NONE",
      "body": "I suggest that you get a new BIP number for ANYPREVOUT and add \"not recommended for implementation\" to bip118 (including reasoning, please ;-).\r\n\r\nThe two approaches are conceptually distinct and it's worth keeping the other idea around for historical purposes, even if it's not pursued going forward. BIP118 as a segwit version has been around for over 3 years now.\r\n\r\nPlease just give us one or the other! We're dying out here! ;-)",
      "user": {
        "login": "mcelrath",
        "id": 1746780,
        "node_id": "MDQ6VXNlcjE3NDY3ODA=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1746780?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/mcelrath",
        "html_url": "https://github.com/mcelrath",
        "followers_url": "https://api.github.com/users/mcelrath/followers",
        "following_url": "https://api.github.com/users/mcelrath/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/mcelrath/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/mcelrath/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/mcelrath/subscriptions",
        "organizations_url": "https://api.github.com/users/mcelrath/orgs",
        "repos_url": "https://api.github.com/users/mcelrath/repos",
        "events_url": "https://api.github.com/users/mcelrath/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/mcelrath/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-656960822",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 656999866,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY1Njk5OTg2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/656999866",
      "actor": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-11T06:20:14Z",
      "updated_at": "2020-07-11T06:20:14Z",
      "author_association": "CONTRIBUTOR",
      "body": "> The two approaches are conceptually distinct and it's worth keeping the other idea around for historical purposes\r\n\r\nConcept ACK for updating.  The original BIP118 proposal will remain available via git history, so no information is lost by updating it.  Noinput as its own separate segwit version never had any traction AFAICT---I think almost everyone has wanted this to be either a part of a larger soft fork or an add-on soft fork.",
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-656999866",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3538181935,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUzODE4MTkzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3538181935",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-13T06:43:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 3538183566,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MzUzODE4MzU2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3538183566",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-13T06:43:56Z"
    },
    {
      "event": "commented",
      "id": 660134961,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY2MDEzNDk2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/660134961",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-07-17T14:23:22Z",
      "updated_at": "2020-07-17T14:23:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "That was the rationale for proposing an update instead of leaving noinput lingering. noinput alone was lacking the details to make it work within taproot, and the update adds all the necessary details to make the proposal compatible with taproot. Given the timing of the taproot and the noinput proposal we tried to make the two independent by not adding any dependencies between them.\r\n\r\nWith taproot making good progress, and the shrinking probability of a raw noinput proposal without taproot integration making progress, it is desirable imho to replace the raw proposal with the integrated one.",
      "user": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-660134961",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "labeled",
      "id": 3611042396,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDM2MTEwNDIzOTY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3611042396",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-01T02:23:37Z",
      "label": {
        "name": "Proposed BIP modification",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 677933250,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY3NzkzMzI1MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/677933250",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T22:12:46Z",
      "updated_at": "2020-08-20T22:12:46Z",
      "author_association": "MEMBER",
      "body": "poke @ajtowns @cdecker ",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-677933250",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "mentioned",
      "id": 3677301951,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY3NzMwMTk1MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3677301951",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T22:12:46Z"
    },
    {
      "event": "subscribed",
      "id": 3677301953,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NzczMDE5NTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3677301953",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T22:12:46Z"
    },
    {
      "event": "mentioned",
      "id": 3677301957,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MzY3NzMwMTk1Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3677301957",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T22:12:46Z"
    },
    {
      "event": "subscribed",
      "id": 3677301960,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDM2NzczMDE5NjA=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/3677301960",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-08-20T22:12:46Z"
    },
    {
      "event": "reviewed",
      "id": 490302495,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzAyNDk1",
      "url": null,
      "actor": null,
      "commit_id": "c7c6a58b7a66a5dc5f4435319577d26a34082a79",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "It might be worth adding a section about recommendations for wallet devs on how to handle if funds are received to an address that has BIP 118 pub key, I would expect that they should immediately spend it to another address if they already given out a `SIGHASH_ANYPREVOUTANYSCRIPT` signature and do not want the newly received funds spendable by the parties with the signature.",
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#pullrequestreview-490302495",
      "submitted_at": "2020-09-17T07:18:36Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/943"
    },
    {
      "event": "commented",
      "id": 694901102,
      "node_id": "MDEyOklzc3VlQ29tbWVudDY5NDkwMTEwMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/694901102",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-09-18T14:26:57Z",
      "updated_at": "2020-09-18T14:27:08Z",
      "author_association": "CONTRIBUTOR",
      "body": "> It might be worth adding a section about recommendations for wallet devs on how to handle if funds are received to an address that has BIP 118 pub key, I would expect that they should immediately spend it to another address if they already given out a `SIGHASH_ANYPREVOUTANYSCRIPT` signature and do not want the newly received funds spendable by the parties with the signature.\r\n\r\nOur usual approach to this is \"if you don't know how to handle ANYPREVOUT scripts you should not signal support for BIP118\", and the wallets sending to you should never use BIP118\". Having consumer wallets that do not require BIP118 support handle it is undesirable, and imho any guidance on how to handle them might give the contrary impression.",
      "user": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-694901102",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 703776859,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwMzc3Njg1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/703776859",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-05T17:30:01Z",
      "updated_at": "2020-10-05T17:30:01Z",
      "author_association": "MEMBER",
      "body": "What is the status here? Can we merge it?",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-703776859",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 707026400,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzAyNjQwMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/707026400",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T10:13:16Z",
      "updated_at": "2020-10-12T10:13:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "I just want to say that it is horribly confusing to have a standards document be completely rewritten to describe a totally different idea. This is a very atypical thing to do. If it's a new approach, please make a new BIP.",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-707026400",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 707122617,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzEyMjYxNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/707122617",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T13:32:38Z",
      "updated_at": "2020-10-12T13:32:38Z",
      "author_association": "CONTRIBUTOR",
      "body": "It's not really new, it just adds the details for Taproot and addresses some concerns that have been raised during the discussion regarding replay-attacks. IMHO this is exactly the goal of updates to the BIPs.",
      "user": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-707122617",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 707198858,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzE5ODg1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/707198858",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T15:46:08Z",
      "updated_at": "2020-10-12T15:46:08Z",
      "author_association": "MEMBER",
      "body": "Indeed, it's not like it was even Proposed yet, just a Draft.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-707198858",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 707205783,
      "node_id": "MDEyOklzc3VlQ29tbWVudDcwNzIwNTc4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/707205783",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2020-10-12T15:58:52Z",
      "updated_at": "2020-10-12T15:58:52Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'll soon have a bit more time to dig into BIP 118, and I have spoken with a number of people willing to join a review club to work through the proposal. If anybody is interested in joining a public discussion we can set something up :-)\r\n\r\nBut don't want to distract from the Taproot effort, which deserves all the attention it can get, and is the basis for anyprevout.",
      "user": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-707205783",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 857732347,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1NzczMjM0Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/857732347",
      "actor": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T14:15:55Z",
      "updated_at": "2021-06-09T14:15:55Z",
      "author_association": "MEMBER",
      "body": "I think now is a good time to revive public discussion efforts?",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-857732347",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4867984266,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDg2Nzk4NDI2Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4867984266",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T22:26:59Z"
    },
    {
      "event": "ready_for_review",
      "id": 4868001672,
      "node_id": "MDE5OlJlYWR5Rm9yUmV2aWV3RXZlbnQ0ODY4MDAxNjcy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4868001672",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T22:33:29Z"
    },
    {
      "event": "commented",
      "id": 858145434,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1ODE0NTQzNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/858145434",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-09T22:34:24Z",
      "updated_at": "2021-06-09T22:34:24Z",
      "author_association": "MEMBER",
      "body": "Rebased, removed \"draft\" marker on PR, so should be okay for ACKs and eventual merge",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-858145434",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 859349680,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTM0OTY4MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/859349680",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-11T07:30:29Z",
      "updated_at": "2021-06-11T07:30:29Z",
      "author_association": "MEMBER",
      "body": "There's a lot of style changes mixed in with contextual changes so it's hard to determine what is a style fix vs what is new content. It would be helpful if commit number 1 was a pure style tweak followed by the actual changes in subsequent commit(s).",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-859349680",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 859458711,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTQ1ODcxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/859458711",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-11T09:50:51Z",
      "updated_at": "2021-06-11T09:50:51Z",
      "author_association": "MEMBER",
      "body": "> There's a lot of style changes mixed in with contextual changes so it's hard to determine what is a style fix vs what is new content.\r\n\r\nIt's pretty much entirely new content, I don't think there's much you can extract as just a style fix?",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-859458711",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "reviewed",
      "id": 681949450,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgxOTQ5NDUw",
      "url": null,
      "actor": null,
      "commit_id": "6b9316cd3516e9836764d6062bf32bb0b0a909be",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#pullrequestreview-681949450",
      "submitted_at": "2021-06-11T15:21:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/943"
    },
    {
      "event": "commented",
      "id": 859921676,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg1OTkyMTY3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/859921676",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-11T21:33:54Z",
      "updated_at": "2021-06-11T21:33:54Z",
      "author_association": "CONTRIBUTOR",
      "body": "Is there a current reference implementation?\r\n\r\nTrying to figure out presently if the BIP is trying to imply a tap leaf with 0x01 CHECKSIG has the effect of being equivalent to <0x01 || internal key> checksig or not (it seems implied by the bip language but not explicit enough imo).",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-859921676",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 860048999,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDA0ODk5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/860048999",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-12T12:48:11Z",
      "updated_at": "2021-06-12T12:48:31Z",
      "author_association": "MEMBER",
      "body": "> Is there a current reference implementation?\r\n\r\nThere's a reference implementation at https://github.com/ajtowns/bitcoin/tree/202101-anyprevout but it's not current both in that it's missing at least the change to have ANYPREVOUTANYSCRIPT [not commit to the amount](https://github.com/ajtowns/bips/pull/5), is some months out of date, and may be buggy.\r\n\r\n> Trying to figure out presently if the BIP is trying to imply a tap leaf with 0x01 CHECKSIG has the effect of being equivalent to <0x01 || internal key> checksig or not (it seems implied by the bip language but not explicit enough imo).\r\n\r\nI'm not sure what's unclear about:\r\n\r\n> To convert a 1-byte BIP 118 public key for use with BIP 340, simply use the 32-byte taproot internal key, p, as defined in BIP 341.\r\n> To convert a 33-byte BIP 118 public key for use with BIP 340, simply remove the 0x01 prefix and use the remaining 32 bytes.\r\n\r\nIf your internal key is G, ie, \"79BE667E F9DCBBAC 55A06295 CE870B07 029BFCDB 2DCE28D9 59F2815B 16F81798\" then doing either `210179BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798AC` (push the 32-byte key prefixed by 0x01, then CHECKSIG) or `51AC` (OP_1 and CHECKSIG) will result in a checksig operation against \"G\" as the BIP118 public key.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-860048999",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 860103579,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDEwMzU3OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/860103579",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-12T20:15:20Z",
      "updated_at": "2021-06-12T20:15:20Z",
      "author_association": "CONTRIBUTOR",
      "body": "I'm not in love with the 0x01 to mean an anyprevout key based on the internal PK.\r\n\r\nI think that this sort of mechanism is more generally useful (e.g., I imagine the script `USE_INTERNAL CHECKSIGVERIFY SHA256 <H> EQUAL` could be useful without APO because bip341 commits to the spend script). \r\n\r\nI also think that 0x01 makes it so that there is a public key which is \"computable\" using script math, which is kind of weird (or at least merits consideration)? I mean I suppose `<something> sha256` also is a 32 byte value, but conceivably finding d. dG == sha256(x) is hard?",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-860103579",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "reviewed",
      "id": 682350783,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjgyMzUwNzgz",
      "url": null,
      "actor": null,
      "commit_id": "00e0ef61a695c87f2f17c8024548ebdb4b2cc00d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#pullrequestreview-682350783",
      "submitted_at": "2021-06-12T20:15:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/943"
    },
    {
      "event": "commented",
      "id": 860126161,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg2MDEyNjE2MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/860126161",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-06-12T23:34:43Z",
      "updated_at": "2021-06-12T23:34:43Z",
      "author_association": "MEMBER",
      "body": "> I think that this sort of mechanism is more generally useful (e.g., I imagine the script `USE_INTERNAL CHECKSIGVERIFY SHA256 <H> EQUAL` could be useful without APO because bip341 commits to the spend script).\r\n\r\nYou could define the single-byte pubkey \"0x81\" (ie the value OP_1NEGATE pushes onto the stack) to be treated as the internal public key with the bip342 signature digest and get that sort of behaviour. The key and/or signature needs to encode what digest is going to be used however; but if you're happy for the signature to encode the digest, then just using the APO capable OP_1 with a non-ANYPREVOUT signature works.\r\n \r\n> I also think that 0x01 makes it so that there is a public key which is \"computable\" using script math, which is kind of weird (or at least merits consideration)? I mean I suppose `<something> sha256` also is a 32 byte value, but conceivably finding d. dG == sha256(x) is hard?\r\n\r\nCAT would also make public keys \"computable\" in this sense, except moreso since there would actually be multiple keys you could compute. But you can already write scripts that simply accept the pubkey as an input which is more flexible, and already in use since that's how P2PKH works.",
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-860126161",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "reviewed",
      "id": 693451179,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjkzNDUxMTc5",
      "url": null,
      "actor": null,
      "commit_id": "7b74bd13739729dd3ea5fc5ba64479db15c5f612",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "bucko13",
        "id": 4344978,
        "node_id": "MDQ6VXNlcjQzNDQ5Nzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4344978?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bucko13",
        "html_url": "https://github.com/bucko13",
        "followers_url": "https://api.github.com/users/bucko13/followers",
        "following_url": "https://api.github.com/users/bucko13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bucko13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bucko13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bucko13/subscriptions",
        "organizations_url": "https://api.github.com/users/bucko13/orgs",
        "repos_url": "https://api.github.com/users/bucko13/repos",
        "events_url": "https://api.github.com/users/bucko13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bucko13/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#pullrequestreview-693451179",
      "submitted_at": "2021-06-27T20:37:08Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/943"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NWUwNTIxNzZlZmVmNGQ1NGY1YjZkMDJlODY1MDFlNDQxN2FmMjU3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e052176efef4d54f5b6d02e86501e4417af2575",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5e052176efef4d54f5b6d02e86501e4417af2575",
      "tree": {
        "sha": "e6f0cce29286ad723ca484b4cbe949d5d009576b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e6f0cce29286ad723ca484b4cbe949d5d009576b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6a5c99fcc95f0080118aaa23297c18fa30357fbf",
          "sha": "6a5c99fcc95f0080118aaa23297c18fa30357fbf",
          "html_url": "https://github.com/bitcoin/bips/commit/6a5c99fcc95f0080118aaa23297c18fa30357fbf"
        }
      ],
      "message": "Update BIP 118 for taproot, rename to ANYPREVOUT",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-07-02T04:47:10Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-09T22:06:46Z"
      },
      "sha": "5e052176efef4d54f5b6d02e86501e4417af2575"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YTg3ODdjNTFmZjc4MzVkMzVkZTkzMGQ1NGFhODA0NWFhYzE5YzEyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a8787c51ff7835d35de930d54aa8045aac19c129",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a8787c51ff7835d35de930d54aa8045aac19c129",
      "tree": {
        "sha": "fb495da30be48f12d8f6b5b38cd65e711e8cfeee",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fb495da30be48f12d8f6b5b38cd65e711e8cfeee"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e052176efef4d54f5b6d02e86501e4417af2575",
          "sha": "5e052176efef4d54f5b6d02e86501e4417af2575",
          "html_url": "https://github.com/bitcoin/bips/commit/5e052176efef4d54f5b6d02e86501e4417af2575"
        }
      ],
      "message": "Update README",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-07-02T04:47:16Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2020-07-20T03:21:07Z"
      },
      "sha": "a8787c51ff7835d35de930d54aa8045aac19c129"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MGNiYzg2NzRkZDY0MjcwMmZjYTIwMzdmYjEwNWQzMjc3MzgxYjc4NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0cbc8674dd642702fca2037fb105d3277381b784",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0cbc8674dd642702fca2037fb105d3277381b784",
      "tree": {
        "sha": "bbff69952aa8c62bf70b69fad9948b245b78fc67",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bbff69952aa8c62bf70b69fad9948b245b78fc67"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a8787c51ff7835d35de930d54aa8045aac19c129",
          "sha": "a8787c51ff7835d35de930d54aa8045aac19c129",
          "html_url": "https://github.com/bitcoin/bips/commit/a8787c51ff7835d35de930d54aa8045aac19c129"
        }
      ],
      "message": "BIP118: refer to bech32m instead of bech32 for segwit v1 outputs\n\nThanks to Ben Carman for spotting.",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-07-02T04:47:16Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-12T09:15:29Z"
      },
      "sha": "0cbc8674dd642702fca2037fb105d3277381b784"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6NDIwZGM0MmYwZTc3MWIxZWUxMzFiNGZmZjljNTA1MzBlMTQwYjQ2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/420dc42f0e771b1ee131b4fff9c50530e140b463",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/420dc42f0e771b1ee131b4fff9c50530e140b463",
      "tree": {
        "sha": "3a1bffb5971d6b7cea0b164902c42dce3d189b0b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3a1bffb5971d6b7cea0b164902c42dce3d189b0b"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0cbc8674dd642702fca2037fb105d3277381b784",
          "sha": "0cbc8674dd642702fca2037fb105d3277381b784",
          "html_url": "https://github.com/bitcoin/bips/commit/0cbc8674dd642702fca2037fb105d3277381b784"
        }
      ],
      "message": "BIP118: remove subliminal advertising of Simplicity",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-07-02T04:47:16Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-12T23:18:06Z"
      },
      "sha": "420dc42f0e771b1ee131b4fff9c50530e140b463"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6ZDYxNmQ1NDkyYmM2ZTY1NjZhZjFiOWY5ZTQzYjY2MGJjZDQ4Y2EyOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "tree": {
        "sha": "4fb2269efb70c134372df73d59e07f452f77dc60",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4fb2269efb70c134372df73d59e07f452f77dc60"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/420dc42f0e771b1ee131b4fff9c50530e140b463",
          "sha": "420dc42f0e771b1ee131b4fff9c50530e140b463",
          "html_url": "https://github.com/bitcoin/bips/commit/420dc42f0e771b1ee131b4fff9c50530e140b463"
        }
      ],
      "message": "BIP118: tweak wording around 1-byte pubkey",
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-07-02T04:47:16Z"
      },
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2021-06-12T23:24:07Z"
      },
      "sha": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 4969323644,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50NDk2OTMyMzY0NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4969323644",
      "actor": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-02T04:47:52Z"
    },
    {
      "event": "commented",
      "id": 873225762,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3MzIyNTc2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/873225762",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-02T19:51:49Z",
      "updated_at": "2021-07-02T19:51:49Z",
      "author_association": "MEMBER",
      "body": "@cdecker Think this is mergable? Even if not perfect, it can continue to be revised...",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-873225762",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "mentioned",
      "id": 4973075228,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDk3MzA3NTIyOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4973075228",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-02T19:51:49Z"
    },
    {
      "event": "subscribed",
      "id": 4973075232,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ5NzMwNzUyMzI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4973075232",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-02T19:51:49Z"
    },
    {
      "event": "reviewed",
      "id": 698605787,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk4NjA1Nzg3",
      "url": null,
      "actor": null,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#pullrequestreview-698605787",
      "submitted_at": "2021-07-03T16:41:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/943"
    },
    {
      "event": "commented",
      "id": 876034559,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3NjAzNDU1OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/876034559",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T00:57:37Z",
      "updated_at": "2021-07-08T00:57:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "In general, one thing that strikes me is that when anyprevout is used for eltoo you're generally doing a script like:\r\n\r\n```\r\nIF\r\n    10 CSV DROP\r\n    1::musigkey(As,Bs) CHECKSIG\r\nELSE\r\n    <S+1> CLTV DROP\r\n   1::musigkey(Au,Bu) CHECKSIG\r\nENDIF\r\n```\r\n\r\nThis means that you're overloading the CLTV clause, which means it's impossible to use Eltoo and use a absolute lock time, it also means you have to use fewer than a billion sequences, and if you pick a random # to mask how many payments you've done / pick random gaps let's say that reduces your numbers in half. That may be enough, but is still relatively limited. There is also the issue that multiple inputs cannot be combined into a transaction if they have signed on different locktimes.\r\n\r\nSince Eltoo is the primary motivation for ANYPREVOUT, it's worth making sure we have all the parts we'd need bundled together to see it be successful.\r\n\r\nA few options come to mind that might be desirable in order to better serve the eltoo usecase\r\n\r\n1) Define a new CSV type (e.g. define (1<<31 && 1<<30) as being dedicated to eltoo sequences). This has the benefit of giving a per input sequence, but the drawback of using a CSV bit. Because there's only 1 CSV per input, this technique cannot be used with a sequence tag.\r\n2) CSFS -- it would be possible to take a signature from stack for an arbitrary higher number, e.g.:\r\n```\r\nIF\r\n    10 CSV DROP\r\n    1::musigkey(As,Bs) CHECKSIG\r\nELSE\r\n    DUP musigkey(Aseq, BSeq) CSFSV <S+1> GTE VERIFY\r\n   1::musigkey(Au,Bu) CHECKSIG\r\nENDIF\r\n```\r\nThen, posession of a higher signed sequence would allow for the use of the update path. However, the downside is that there would be no guarantee that the new state provided for update would be higher than the past one without a more advanced covenant.\r\n3) Sequenced Signature: It could be set up such that ANYPREVOUT keys are tagged with a N byte sequence (instead of 1), and a part of the process of signature verification includes hashing a sequence on the signature itself.\r\n\r\nE.g.\r\n\r\n```\r\nIF\r\n    10 CSV DROP\r\n    1::musigkey(As,Bs) CHECKSIG\r\nELSE\r\n   <N>::musigkey(Au,Bu) CHECKSIG\r\nENDIF\r\n```\r\nTo satisfy this clause, a signature `<N+1>::S` would be required. When validating the signature S, the APO digest would have to include the value <N+1>. It is non cryptographically checked that N+1 > N. \r\n5) Similar to 3, but look at more values off the stack. This is also OK, but violates the principle of not making opcodes take variable numbers of things off the stack. Verify semantics on the extra data fields could ameliorate this concern, and it might make sense to do it that way.\r\n4) Something in the Annex: It would also be possible to define a new generic place for lock times in the annex (to permit dual height/time relative/absolute, all per input. The pro of this approach is that it would be solving an outstanding problem for script that we want to solve anyways, the downside is that the Annex is totally undefined presently so it's unclear that this is an appropriate use for it.\r\n5) Do Nothing :)\r\n\r\n\r\nOverall I'm somewhat partial to option 3 as it seems to be closest to making ANYPREVOUT more precisely designed to support Eltoo. It would also be possible to make it such that if the tag N=1, then the behavior is identical to the proposal currently.\r\n",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-876034559",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 876034940,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3NjAzNDk0MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/876034940",
      "actor": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T00:58:44Z",
      "updated_at": "2021-07-08T00:58:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "It occurs to me this might be the wrong venue to discuss the above as this is larger change outside the changes to the BIP outstanding, so I will move discussion to the mailing list.",
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-876034940",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "commented",
      "id": 876254767,
      "node_id": "MDEyOklzc3VlQ29tbWVudDg3NjI1NDc2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/876254767",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T08:46:44Z",
      "updated_at": "2021-07-08T08:46:44Z",
      "author_association": "CONTRIBUTOR",
      "body": "> @cdecker Think this is mergable? Even if not perfect, it can continue to be revised...\n\nI think it is excellent, let's ship it 🤓 We can do fine-tuning and corrections in separate PRs, agreed",
      "user": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/943#issuecomment-876254767",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/943"
    },
    {
      "event": "mentioned",
      "id": 4993557823,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50NDk5MzU1NzgyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4993557823",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T08:46:45Z"
    },
    {
      "event": "subscribed",
      "id": 4993557827,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDQ5OTM1NTc4Mjc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4993557827",
      "actor": {
        "login": "cdecker",
        "id": 120117,
        "node_id": "MDQ6VXNlcjEyMDExNw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/120117?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cdecker",
        "html_url": "https://github.com/cdecker",
        "followers_url": "https://api.github.com/users/cdecker/followers",
        "following_url": "https://api.github.com/users/cdecker/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/cdecker/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/cdecker/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/cdecker/subscriptions",
        "organizations_url": "https://api.github.com/users/cdecker/orgs",
        "repos_url": "https://api.github.com/users/cdecker/repos",
        "events_url": "https://api.github.com/users/cdecker/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/cdecker/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T08:46:45Z"
    },
    {
      "event": "merged",
      "id": 4996291743,
      "node_id": "MDExOk1lcmdlZEV2ZW50NDk5NjI5MTc0Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4996291743",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "150ab6f5c3aca9da05fccc5b435e9667853407f4",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/150ab6f5c3aca9da05fccc5b435e9667853407f4",
      "created_at": "2021-07-08T17:24:52Z"
    },
    {
      "event": "closed",
      "id": 4996291753,
      "node_id": "MDExOkNsb3NlZEV2ZW50NDk5NjI5MTc1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/4996291753",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2021-07-08T17:24:52Z"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/452802954",
      "pull_request_review_id": 446348965,
      "id": 452802954,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwMjk1NA==",
      "diff_hunk": "@@ -1,144 +1,212 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n-  Author: Christian Decker <decker.christian@gmail.com>\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n+  Author: Christian Decker <decker.christian@gmail.com>, Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the <tt>witness</tt> and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT spends via script path, and does not support ANYPREVOUT key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43', ''0x81'', ''0x82'', ''0x83', ''0xc1'', ''0xc2'', or ''0xc3'.",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 187,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "0561aaf8d501be4cfe0ed629e0718864556e76d2",
      "in_reply_to_id": null,
      "user": {
        "login": "harding",
        "id": 61096,
        "node_id": "MDQ6VXNlcjYxMDk2",
        "avatar_url": "https://avatars.githubusercontent.com/u/61096?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/harding",
        "html_url": "https://github.com/harding",
        "followers_url": "https://api.github.com/users/harding/followers",
        "following_url": "https://api.github.com/users/harding/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/harding/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/harding/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/harding/subscriptions",
        "organizations_url": "https://api.github.com/users/harding/orgs",
        "repos_url": "https://api.github.com/users/harding/repos",
        "events_url": "https://api.github.com/users/harding/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/harding/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Nits: Unclosed italics on `0x43`, `0x83`, and `0xc3`.  Also unclosed parenthesis at end of link of hash types.",
      "created_at": "2020-07-10T12:08:49Z",
      "updated_at": "2020-07-20T03:21:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r452802954",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/452802954"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490019747",
      "pull_request_review_id": 490302495,
      "id": 490019747,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxOTc0Nw==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the <tt>witness</tt> and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT spends via script path, and does not support ANYPREVOUT key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can simply be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).\n+\n+In order to maximise privacy, it is therefore recommended that protocol designers only use BIP 118 public keys in scripts that will be spent using at least one ANYPREVOUT signature, and either use key path spends or alternate scripts in the taproot merkle tree for any spends that can be authorised without ANYPREVOUT signatures.",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "c7c6a58b7a66a5dc5f4435319577d26a34082a79",
      "in_reply_to_id": null,
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "nit: change these \"ANYPREVOUT\"s to \"<code>ANYPREVOUT</code>\"",
      "created_at": "2020-09-17T07:11:24Z",
      "updated_at": "2020-09-17T07:18:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r490019747",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490019747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490020027",
      "pull_request_review_id": 490302495,
      "id": 490020027,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyMDAyNw==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the <tt>witness</tt> and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT spends via script path, and does not support ANYPREVOUT key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can simply be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).\n+\n+In order to maximise privacy, it is therefore recommended that protocol designers only use BIP 118 public keys in scripts that will be spent using at least one ANYPREVOUT signature, and either use key path spends or alternate scripts in the taproot merkle tree for any spends that can be authorised without ANYPREVOUT signatures.",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "c7c6a58b7a66a5dc5f4435319577d26a34082a79",
      "in_reply_to_id": null,
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> maximise\r\n\r\nmaximize ",
      "created_at": "2020-09-17T07:11:54Z",
      "updated_at": "2020-09-17T07:18:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r490020027",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490020027"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490020195",
      "pull_request_review_id": 490302495,
      "id": 490020195,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyMDE5NQ==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the <tt>witness</tt> and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT spends via script path, and does not support ANYPREVOUT key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can simply be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).\n+\n+In order to maximise privacy, it is therefore recommended that protocol designers only use BIP 118 public keys in scripts that will be spent using at least one ANYPREVOUT signature, and either use key path spends or alternate scripts in the taproot merkle tree for any spends that can be authorised without ANYPREVOUT signatures.",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "c7c6a58b7a66a5dc5f4435319577d26a34082a79",
      "in_reply_to_id": 490020027,
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> authorised\r\n\r\nauthorized ",
      "created_at": "2020-09-17T07:12:12Z",
      "updated_at": "2020-09-17T07:18:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r490020195",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490020195"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490021047",
      "pull_request_review_id": 490302495,
      "id": 490021047,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyMTA0Nw==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the <tt>witness</tt> and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT spends via script path, and does not support ANYPREVOUT key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can simply be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.",
      "path": "bip-0118.mediawiki",
      "position": 266,
      "original_position": 266,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "c7c6a58b7a66a5dc5f4435319577d26a34082a79",
      "in_reply_to_id": null,
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> authorised\r\n\r\nauthorized ",
      "created_at": "2020-09-17T07:13:58Z",
      "updated_at": "2020-09-17T07:18:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r490021047",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490021047"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 167,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490091234",
      "pull_request_review_id": 490394643,
      "id": 490091234,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTIzNA==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the <tt>witness</tt> and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT spends via script path, and does not support ANYPREVOUT key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can simply be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).\n+\n+In order to maximise privacy, it is therefore recommended that protocol designers only use BIP 118 public keys in scripts that will be spent using at least one ANYPREVOUT signature, and either use key path spends or alternate scripts in the taproot merkle tree for any spends that can be authorised without ANYPREVOUT signatures.",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "c7c6a58b7a66a5dc5f4435319577d26a34082a79",
      "in_reply_to_id": 490020027,
      "user": {
        "login": "remyers",
        "id": 8568892,
        "node_id": "MDQ6VXNlcjg1Njg4OTI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8568892?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/remyers",
        "html_url": "https://github.com/remyers",
        "followers_url": "https://api.github.com/users/remyers/followers",
        "following_url": "https://api.github.com/users/remyers/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/remyers/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/remyers/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/remyers/subscriptions",
        "organizations_url": "https://api.github.com/users/remyers/orgs",
        "repos_url": "https://api.github.com/users/remyers/repos",
        "events_url": "https://api.github.com/users/remyers/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/remyers/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The z variants are the US spellings, the s variants common to the UK/Commonwealth. “England and America are two countries separated by the same language!” :-)",
      "created_at": "2020-09-17T09:09:28Z",
      "updated_at": "2020-09-17T09:09:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r490091234",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/490091234"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/648719793",
      "pull_request_review_id": 680190950,
      "id": 648719793,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY0ODcxOTc5Mw==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the <tt>witness</tt> and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT spends via script path, and does not support ANYPREVOUT key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can simply be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).\n+\n+In order to maximise privacy, it is therefore recommended that protocol designers only use BIP 118 public keys in scripts that will be spent using at least one ANYPREVOUT signature, and either use key path spends or alternate scripts in the taproot merkle tree for any spends that can be authorised without ANYPREVOUT signatures.",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "c7c6a58b7a66a5dc5f4435319577d26a34082a79",
      "in_reply_to_id": 490019747,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've left \"ANYPREVOUT signatures\" as regular text since it's talking about the concept, and only used `<code>` markup for `SIGHASH_ANYPREVOUT` and `SIGHASH_ANYPREVOUTANYSCRIPT`. I think that's reasonable, so keeping it that way at present... (Have made a couple of tweaks while rebasing though)",
      "created_at": "2021-06-09T22:14:02Z",
      "updated_at": "2021-06-09T22:14:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r648719793",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/648719793"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": 162,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650064057",
      "pull_request_review_id": 681949450,
      "id": 650064057,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDA2NDA1Nw==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the signature and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT signatures via script path spends, and does not support ANYPREVOUT signatures for key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can simply be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).\n+\n+In order to maximise privacy, it is therefore recommended that protocol designers only use BIP 118 public keys in scripts that will be spent using at least one ANYPREVOUT signature, and either use key path spends or alternate scripts in the taproot merkle tree for any spends that can be authorised without ANYPREVOUT signatures.\n+Following this recommendation may require additional script branches, which may mean disregarding this recommendation may result in a better tradeoff between cost and privacy in some circumstances.\n+\n+== Rationale ==\n+\n+<references />\n \n == Deployment ==\n-The <tt>NOINPUT</tt> sighash flag is to be deployed during a regular segwit\n-script update.\n \n-== Backward compatibility ==\n-As a soft fork, older software will continue to operate without\n-modification. Non-upgraded nodes, however, will not verify the\n-validity of the new sighash flag and will consider the transaction\n-valid by default. Being only applicable to segwit transactions,\n-non-segwit nodes will see an anyone-can-spend script and will consider\n-it valid.\n+TODO\n+\n+This may be deployed as a soft-fork either concurrent with, or subsequent to the deployment of [[bip-0340.mediawiki|BIP 340]], [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]].\n+\n+== Backwards compatibility ==\n+\n+As a soft fork, older software will continue to operate without modification.\n+Nodes that have not upgraded to support [[bip-0341.mediawiki|BIP 341]] will see all taproot witness programs as anyone-can-spend scripts, and nodes that have upgraded to support [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]] but not BIP 118 will simply treat any non-empty signature against a BIP 118 public key as valid.\n+As such, nodes are strongly encourage to upgrade in order to fully validate signatures for the new public key type.\n+\n+Non-upgraded wallets can receive and send bitcoin from non-upgraded and upgraded wallets using SegWit version 0 programs, traditional pay-to-pubkey-hash, etc.\n+Depending on the implementation, non-upgraded wallets may be able to send to SegWit version 1 programs if they support sending to [[bip-0173.mediawiki|BIP173]] Bech32 addresses and do not consider the outputs non-standard, and therefore prevent transaction broadcast.",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 305,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "6b9316cd3516e9836764d6062bf32bb0b0a909be",
      "in_reply_to_id": null,
      "user": {
        "login": "benthecarman",
        "id": 15256660,
        "node_id": "MDQ6VXNlcjE1MjU2NjYw",
        "avatar_url": "https://avatars.githubusercontent.com/u/15256660?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/benthecarman",
        "html_url": "https://github.com/benthecarman",
        "followers_url": "https://api.github.com/users/benthecarman/followers",
        "following_url": "https://api.github.com/users/benthecarman/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/benthecarman/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/benthecarman/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/benthecarman/subscriptions",
        "organizations_url": "https://api.github.com/users/benthecarman/orgs",
        "repos_url": "https://api.github.com/users/benthecarman/repos",
        "events_url": "https://api.github.com/users/benthecarman/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/benthecarman/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "> to send to SegWit version 1 programs if they support sending to [[bip-0173.mediawiki|BIP173]] Bech32 addresses\r\n\r\nthis is now BIP 350 bech32m addresses",
      "created_at": "2021-06-11T15:20:04Z",
      "updated_at": "2021-06-11T15:21:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r650064057",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650064057"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 197,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650430543",
      "pull_request_review_id": 682350783,
      "id": 650430543,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzMDU0Mw==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the signature and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT signatures via script path spends, and does not support ANYPREVOUT signatures for key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can simply be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).\n+\n+In order to maximise privacy, it is therefore recommended that protocol designers only use BIP 118 public keys in scripts that will be spent using at least one ANYPREVOUT signature, and either use key path spends or alternate scripts in the taproot merkle tree for any spends that can be authorised without ANYPREVOUT signatures.\n+Following this recommendation may require additional script branches, which may mean disregarding this recommendation may result in a better tradeoff between cost and privacy in some circumstances.\n+\n+== Rationale ==\n+\n+<references />\n \n == Deployment ==\n-The <tt>NOINPUT</tt> sighash flag is to be deployed during a regular segwit\n-script update.\n \n-== Backward compatibility ==\n-As a soft fork, older software will continue to operate without\n-modification. Non-upgraded nodes, however, will not verify the\n-validity of the new sighash flag and will consider the transaction\n-valid by default. Being only applicable to segwit transactions,\n-non-segwit nodes will see an anyone-can-spend script and will consider\n-it valid.\n+TODO\n+\n+This may be deployed as a soft-fork either concurrent with, or subsequent to the deployment of [[bip-0340.mediawiki|BIP 340]], [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]].\n+\n+== Backwards compatibility ==\n+\n+As a soft fork, older software will continue to operate without modification.\n+Nodes that have not upgraded to support [[bip-0341.mediawiki|BIP 341]] will see all taproot witness programs as anyone-can-spend scripts, and nodes that have upgraded to support [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]] but not BIP 118 will simply treat any non-empty signature against a BIP 118 public key as valid.",
      "path": "bip-0118.mediawiki",
      "position": 301,
      "original_position": 301,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "00e0ef61a695c87f2f17c8024548ebdb4b2cc00d",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "you use the word \"simply\" in the spec often, perhaps worth deleting as in most cases it doesn't clarify.",
      "created_at": "2021-06-12T19:59:46Z",
      "updated_at": "2021-06-12T20:15:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r650430543",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650430543"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 193,
      "original_line": 193,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650430965",
      "pull_request_review_id": 682350783,
      "id": 650430965,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzMDk2NQ==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the signature and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT signatures via script path spends, and does not support ANYPREVOUT signatures for key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 169,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "00e0ef61a695c87f2f17c8024548ebdb4b2cc00d",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I think you could clarify here that it's not \"a 1-byte BIP 118 public key\" but 0x01 specifically?",
      "created_at": "2021-06-12T20:03:48Z",
      "updated_at": "2021-06-12T20:15:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r650430965",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650430965"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650431015",
      "pull_request_review_id": 682350783,
      "id": 650431015,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQzMTAxNQ==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the signature and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT signatures via script path spends, and does not support ANYPREVOUT signatures for key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 169,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "00e0ef61a695c87f2f17c8024548ebdb4b2cc00d",
      "in_reply_to_id": 650430965,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "(this is why I missed it earlier)",
      "created_at": "2021-06-12T20:04:09Z",
      "updated_at": "2021-06-12T20:15:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r650431015",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650431015"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650446778",
      "pull_request_review_id": 682359547,
      "id": 650446778,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDQ0Njc3OA==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the signature and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT signatures via script path spends, and does not support ANYPREVOUT signatures for key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 169,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "00e0ef61a695c87f2f17c8024548ebdb4b2cc00d",
      "in_reply_to_id": 650430965,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've tweaked it to \"the 1-byte BIP 118 public key\" -- 1-byte versus 33-bytes is how the keys are defined in the immediately prior section (all BIP 118 keys begin with 0x01).",
      "created_at": "2021-06-12T23:25:45Z",
      "updated_at": "2021-06-12T23:25:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r650446778",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/650446778"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/652789958",
      "pull_request_review_id": 685309953,
      "id": 652789958,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1Mjc4OTk1OA==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the signature and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT signatures via script path spends, and does not support ANYPREVOUT signatures for key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we simply use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert a 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], simply use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 169,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "00e0ef61a695c87f2f17c8024548ebdb4b2cc00d",
      "in_reply_to_id": 650430965,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This is more clear.",
      "created_at": "2021-06-16T15:14:08Z",
      "updated_at": "2021-06-16T15:14:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r652789958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/652789958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/659373123",
      "pull_request_review_id": 693451179,
      "id": 659373123,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1OTM3MzEyMw==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the signature and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT signatures via script path spends, and does not support ANYPREVOUT signatures for key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of either 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert the 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "7b74bd13739729dd3ea5fc5ba64479db15c5f612",
      "in_reply_to_id": null,
      "user": {
        "login": "bucko13",
        "id": 4344978,
        "node_id": "MDQ6VXNlcjQzNDQ5Nzg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4344978?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bucko13",
        "html_url": "https://github.com/bucko13",
        "followers_url": "https://api.github.com/users/bucko13/followers",
        "following_url": "https://api.github.com/users/bucko13/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bucko13/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bucko13/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bucko13/subscriptions",
        "organizations_url": "https://api.github.com/users/bucko13/orgs",
        "repos_url": "https://api.github.com/users/bucko13/repos",
        "events_url": "https://api.github.com/users/bucko13/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bucko13/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Small fix for a typo:\r\n\r\n```suggestion\r\nTransactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software was used (due to the details of the script).\r\n```\r\n",
      "created_at": "2021-06-27T20:37:08Z",
      "updated_at": "2021-06-27T20:37:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r659373123",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/659373123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/662733562",
      "pull_request_review_id": 697819903,
      "id": 662733562,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjczMzU2Mg==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''\n+Committing to the input value may provide additional safety that a signature can't be maliciously reused to claim funds that the signer does not intend to spend, so by default it seems sensible to commit to it. However, doing so prevents being able to use a single signature to consolidate a group of UTXOs with the same spending condition into a single UTXO which may be useful for some protocols, such as the proposal for [https://lists.linuxfoundation.org/pipermail/lightning-dev/2020-January/002448.html layered commitments with eltoo].</ref>).\n+Removing this commitment allows dynamic rebinding of a signed transaction to another previous output that requires authorisation by the same key.\n+\n+The dynamic rebinding is opt-in due to using a separate public key type, and the breadth of transactions the signature can be rebound to can be further restricted by using different keys, committing to the script being spent in the signature, using different amounts between UTXOs, using different nSequence values in the spending transaction, or using the codeseparator opcode to commit to the position in the script.\n \n == Specification ==\n-<tt>SIGHASH_NOINPUT</tt> is a flag with value <tt>0x40</tt> appended to a signature\n-so that the signature does not commit to any of the inputs, and\n-therefore to the outputs being spent. The flag applies solely to the\n-verification of that single signature.\n-\n-The <tt>SIGHASH_NOINPUT</tt> flag is only active for segwit scripts with\n-version 1 or higher. Should the flag be used in a non-segwit script or\n-a segwit script of version 0, the current behavior is maintained and\n-the script execution MUST abort with a failure.\n-\n-The transaction digest algorithm from BIP 143 is used when verifying a\n-<tt>SIGHASH_NOINPUT</tt> signature, with the following modifications:\n-\n-    2. hashPrevouts (32-byte hash) is 32 0x00 bytes\n-    3. hashSequence (32-byte hash) is 32 0x00 bytes\n-    4. outpoint (32-byte hash + 4-byte little endian) is\n-       set to 36 0x00 bytes\n-    5. scriptCode of the input is set to an empty script\n-       0x00\n-\n-The <tt>value</tt> of the previous output remains part of the transaction\n-digest and is therefore also committed to in the signature.\n-\n-The <tt>NOINPUT</tt> flag MAY be combined with the <tt>SINGLE</tt> flag in which\n-case the <tt>hashOutputs</tt> is modified as per BIP\n-143<ref>https://github.com/bitcoin/bips/blob/master/bip-0143.mediawiki</ref>: it\n-only commits to the output with the matching index, if such output exists, and\n-is a <tt>uint256</tt> <tt>0x0000......0000</tt> otherwise.\n-\n-Being a change in the digest algorithm, the <tt>NOINPUT</tt> flag applies to\n-all segwit signature verification opcodes, specifically it applies to:\n-\n-* <tt>OP_CHECKSIG</tt>\n-\n-* <tt>OP_CHECKSIGVERIFY</tt>\n-\n-* <tt>OP_CHECKMULTISIG</tt>\n-\n-* <tt>OP_CHECKMULTISIGVERIFY</tt>\n-\n-== Binding through scripts ==\n-Using <tt>NOINPUT</tt> the input containing the signature no longer\n-references a specific output.\n-Any participant can take a transaction and rewrite it by changing the\n-hash reference to the previous output, without invalidating the\n-signatures.\n-This allows transactions to be bound to any output that matches the\n-value committed to in the signature and whose <tt>witnessProgram</tt>,\n-combined with the spending transaction's <tt>witness</tt> returns <tt>true</tt>.\n-\n-Previously, all information in the transaction was committed in the\n-signature itself, while now the relationship between the spending\n-transaction and the output being spent is solely based on the\n-compatibility of the <tt>witnessProgram</tt> and the <tt>witness</tt>.\n-\n-This also means that particular care has to be taken in order to avoid\n-unintentionally enabling this rebinding mechanism. <tt>NOINPUT</tt> MUST NOT\n-be used, unless it is explicitly needed for the application, e.g., it\n-MUST NOT be a default signing flag in a wallet\n-implementation. Rebinding is only possible when the outputs the\n-transaction may bind to all use the same public keys. Any public key\n-that is used in a <tt>NOINPUT</tt> signature MUST only be used for outputs\n-that the input may bind to, and they MUST NOT be used for transactions\n-that the input may not bind to. For example an application SHOULD\n-generate a new key-pair for the application instance using <tt>NOINPUT</tt>\n-signatures and MUST NOT reuse them afterwards.\n+\n+This BIP modifies the behaviour of the [[bip-0342.mediawiki|BIP 342]] signature opcodes<ref>'''What about key path spends?'''\n+This proposal only supports ANYPREVOUT signatures via script path spends, and does not support ANYPREVOUT signatures for key path spends.\n+This is for two reasons: first, not supporting key path spends allows this proposal to be independent of the core changes included in [[bip-0341.mediawiki|BIP 341]] and [[bip-0342.mediawiki|BIP 342]]; second, it allows addresses to opt-in or opt-out of ANYPREVOUT support while remaining indistinguishable prior to being spent.\n+</ref> (<code>CHECKSIG</code>, <code>CHECKSIGVERIFY</code>, and <code>CHECKSIGADD</code>) for public keys that have a length of 33 bytes and a first byte of <code>0x01</code> or the public key which is precisely the single byte vector <code>0x01</code><ref>'''Use of 0x01 public key type'''\n+Because <code>OP_0</code> leaves an empty vector on the stack it would not satisfy [[bip-0342.mediawiki|BIP 342]]'s rules for unknown public key types. As such, it is convenient to use one of <code>OP_1..OP_16</code> or <code>OP_1NEGATE</code> as a way to reference the taproot internal key.\n+To keep things as simple as possible, we use the first of these, and add the same byte as a prefix to allow ANYPREVOUT signatures for explicitly specified keys.\n+</ref>.\n+These keys are termed '''BIP 118 public keys'''.\n+\n+==== Rules for signature opcodes ====\n+\n+The [[bip-0342.mediawiki|BIP 342]] rules for signature opcodes are modified by removing keys with the first byte <code>0x01</code> and length of either 1-byte or 33-bytes from the list of unknown public key types, and adding the following rule prior to the handling of unknown public key types:\n+\n+* If the public key is the single byte <code>0x01</code>, or if the public key is 33 bytes and the first byte of the public key is <code>0x01</code>, it is considered to be a BIP 118 public key:\n+** If the signature is not the empty vector, the signature is validated according to the [[bip-0341.mediawiki|BIP 341]] signing validation rules with the public key, allowable <code>hash_type</code> values, and transaction digest modified as defined below.\n+\n+==== Public key ====\n+\n+To convert the 1-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], use the 32-byte taproot internal key, <code>p</code>, as defined in [[bip-0341.mediawiki|BIP 341]].\n+\n+To convert a 33-byte BIP 118 public key for use with [[bip-0340.mediawiki|BIP 340]], remove the <code>0x01</code> prefix and use the remaining 32 bytes.\n+\n+==== Signature message ====\n+\n+The function ''SigMsg118(hash_type, ext_flag)'' computes the message being signed as a byte array, analogously to ''SigMsg(hash_type, ext_flag)'' defined in [[bip-0341.mediawiki|BIP 341]], ''SigExt118(hash_type,key_version)'' computes the extension, similarly to [[bip-0342.mediawiki|BIP 342]].\n+\n+The parameter ''hash_type'' is an 8-bit unsigned value, reusing values defined in [[bip-0341.mediawiki|BIP 341]], with the addition that the values <code>0x41</code>, <code>0x42</code>, <code>0x43</code>, <code>0xc1</code>, <code>0xc2</code>, and <code>0xc3</code> are also valid for BIP 118 public keys.\n+\n+We define the following constants using bits 6 and 7 of <code>hash_type</code>:\n+\n+* <code>SIGHASH_ANYPREVOUT = 0x40</code>\n+* <code>SIGHASH_ANYPREVOUTANYSCRIPT = 0xc0</code>\n+\n+As per [[bip-0341.mediawiki|BIP 341]], the parameter ''ext_flag'' is an integer in the range 0-127, used for indicating that extensions are added at the end of the message. The parameter ''key_version'' is an 8-bit unsigned value (an integer in the range 0-255) used for committing to the public key version.\n+\n+The following restrictions apply and cause validation failure if violated:\n+* Using any undefined ''hash_type'' (not ''0x00'', ''0x01'', ''0x02'',  ''0x03'', ''0x41'', ''0x42'', ''0x43'', ''0x81'', ''0x82'', ''0x83'', ''0xc1'', ''0xc2'', or ''0xc3'').\n+* Using <code>SIGHASH_SINGLE</code> without a \"corresponding output\" (an output with the same index as the input being verified).\n+\n+If these restrictions aren't violated, ''SigMsg118(hash_type,ext_flag)'' evaluates to the concatenation of the following data, in order (with byte size of each item listed in parentheses). Numerical values in 2, 4, or 8-byte items are encoded in little-endian.\n+\n+* Control:\n+** ''hash_type'' (1).\n+* Transaction data:\n+** ''nVersion'' (4): the ''nVersion'' of the transaction.\n+** ''nLockTime'' (4): the ''nLockTime'' of the transaction.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''sha_prevouts'' (32): the SHA256 of the serialization of all input outpoints.\n+*** ''sha_amounts'' (32): the SHA256 of the serialization of all spent output amounts.\n+*** ''sha_scriptpubkeys'' (32): the SHA256 of the serialization of all spent output ''scriptPubKey''s.\n+*** ''sha_sequences'' (32): the SHA256 of the serialization of all input ''nSequence''.\n+** If ''hash_type & 3'' does not equal <code>SIGHASH_NONE</code> or <code>SIGHASH_SINGLE</code>:\n+*** ''sha_outputs'' (32): the SHA256 of the serialization of all outputs in <code>CTxOut</code> format.\n+* Data about this input:\n+** ''spend_type'' (1): equal to ''(ext_flag * 2) + annex_present'', where ''annex_present'' is 0 if no annex is present, or 1 otherwise (the original witness stack has two or more witness elements, and the first byte of the last element is ''0x50'')\n+** If ''hash_type & 0xc0'' is non-zero:\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code>:\n+**** ''outpoint'' (36): the <code>COutPoint</code> of this input (32-byte hash + 4-byte little-endian).\n+*** If ''hash_type & 0xc0'' is <code>SIGHASH_ANYONECANPAY</code> or <code>SIGHASH_ANYPREVOUT</code>:\n+**** ''amount'' (8): value of the previous output spent by this input.\n+**** ''scriptPubKey'' (35): ''scriptPubKey'' of the previous output spent by this input, serialized as script inside <code>CTxOut</code>. Its size is always 35 bytes.\n+*** ''nSequence'' (4): ''nSequence'' of this input.\n+** If ''hash_type & 0xc0'' is zero:\n+*** ''input_index'' (4): index of this input in the transaction input vector. Index of the first input is 0.\n+** If an annex is present (the lowest bit of ''spend_type'' is set):\n+*** ''sha_annex'' (32): the SHA256 of ''(compact_size(size of annex) || annex)'', where ''annex'' includes the mandatory ''0x50'' prefix.\n+* Data about this output:\n+** If ''hash_type & 3'' equals <code>SIGHASH_SINGLE</code>:\n+*** ''sha_single_output'' (32): the SHA256 of the corresponding output in <code>CTxOut</code> format.\n+\n+Similarly, ''SigExt118(hash_type,key_version)'' evaluates to the concatenation of:\n+\n+* Extension:\n+** If ''hash_type & 0xc0'' is not <code>SIGHASH_ANYPREVOUTANYSCRIPT</codE>:\n+*** ''tapleaf_hash'' (32): the tapleaf hash as defined in [[bip-0341.mediawiki|BIP 341]]\n+** ''key_version'' (1).\n+** ''codesep_pos'' (4): the opcode position of the last executed <code>OP_CODESEPARATOR</code> before the currently executed signature opcode, with the value in little endian (or ''0xffffffff'' if none executed). The first opcode in a script has a position of 0. A multi-byte push opcode is counted as one opcode, regardless of the size of data being pushed.\n+\n+Note that if ''hash_type & 0x40'' is zero, ''SigMsg118(hash_type,ext_flag) == SigMsg(hash_type,ext_flag)'', and ''SigExt118(hash_type,0x00) == ext'' (where ''ext'' is the message extension as defined in [[bip-0342.mediawiki|BIP 342]]).\n+\n+To verify a signature ''sig'' for a BIP 118 public key ''p'':\n+\n+* If the ''sig'' is 64 bytes long, return ''Verify(p, hash<sub>TapSigHash</sub>(0x00 || SigMsg118(0x00, 1) || SigExt118(0x00, 0x02), sig)'', where ''Verify'' is defined in [[bip-0340.mediawiki|BIP 340]].\n+* If the ''sig'' is 65 bytes long, return ''sig[64] &ne; 0x00 and Verify(p, hash<sub>TapSighash</sub>(0x00 || SigMsg118(sig[64], 1) || SigExt118(sig[64], 0x02), sig[0:64])''.\n+* Otherwise, fail.\n+\n+The key differences from [[bip-0342.mediawiki|BIP 342]] signature verification are:\n+\n+* In all cases, <code>key_version</code> is set to the constant value <code>0x01</code> instead of <code>0x00</code>.<ref>'''Why change key_version?''' Changing <code>key_version</code> ensures that if the same private key is used to generate both a [[bip-0342.mediawiki|BIP 342]] key and a BIP 118 public key, that a signature for the [[bip-0342.mediawiki|BIP 342]] key is not also valid for the BIP 118 public key (and vice-versa).</ref>\n+* If <code>SIGHASH_ANYPREVOUT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code> is not included in the digest.\n+* If <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> is set, the digest is calculated as if <code>SIGHASH_ANYONECANPAY</code> was set, except <code>outpoint</code>, <code>scriptPubKey</code> and <code>tapleaf_hash</code> are not included in the digest.\n+\n+== Security ==\n+\n+==== Signature replay ====\n+\n+By design, <code>SIGHASH_ANYPREVOUT</code> and <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> introduce additional potential for signature replay (that is they allow the same signature to be reused on a different transaction) when compared to <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures.\n+\n+Both <code>SIGHASH_ALL</code> and <code>SIGHASH_ANYONECANPAY</code> signatures prevent signature replay by committing to one or more inputs, so replay of the signature is only possible if the same input can be spent multiple times, which is not possible on the Bitcoin blockchain (due to enforcement of [[bip-0030.mediawiki|BIP 30]]).\n+With <code>SIGHASH_ANYPREVOUT</code> signature replay is possible for different UTXOs with the same <code>scriptPubKey</code> and the same value, while with <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> signature replay is possible for any UTXOs that reuse the same BIP 118 public key in one of their potential scripts.\n+\n+As a consequence, implementors MUST ensure that BIP 118 public keys are only reused when signature replay cannot cause loss of funds (eg due to other features of the protocol or other constraints on the transaction), or when such a loss of funds is acceptable.\n+\n+==== Malleability ====\n+\n+Use of <code>SIGHASH_ANYPREVOUT</code> or <code>SIGHASH_ANYPREVOUTANYSCRIPT</code> may introduce additional malleability vectors.\n+\n+In particular, a transaction authenticated using only ANYPREVOUT signatures is malleable to anyone able to provide an alternate input satisfied by the signature -- an input changed in this way would produce a new, valid transaction paying the same recipient, but with a different txid.\n+Depending on the changes to the inputs, this might conflict with the original transaction (if some inputs remain shared) or might result in a double-payment to the recipient (if they do not).\n+\n+Further, for a chain of transactions using the same <code>scriptPubKey</code> and value, and only authenticated via ANYPREVOUT signatures (as envisioned in eltoo for failure cases), it may be possible for any third party to malleate the transactions (and their txids) without having access to any of the private keys, particularly by omitting intermediate transactions.\n+\n+This form of malleation can be dealt with by the child transactions also using ANYPREVOUT signatures -- when a parent transaction is malleated, its children can be adjusted to reference the new txid as the input and the ANYPREVOUT signatures remain valid.\n+\n+However child transactions that are authorised by a <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code> signature will need new signatures if their inputs are malleated in this way.\n+This risk may be mitigated somewhat by using [[bip-0068.mediawiki|BIP 68]]/[[bip-0112.mediawiki|BIP 112]] relative time locks before spending a UTXO that had been authorised via an ANYPREVOUT signature with <code>SIGHASH_ALL</code> or <code>SIGHASH_ANYONECANPAY</code>: a relative timelock can ensure that the inputs have enough confirmations that they can only be replaced in the event of a large block reorg.\n+Note that this approach has drawbacks: relative timelocks prevent fee-bumping via child-pays-for-parent, and have the obvious drawback of making the funds temporarily unusable until the timelock expires.\n+\n+==== Privacy considerations ====\n+\n+It is expected that ANYPREVOUT signatures will only be rarely used in practice.\n+Protocol and wallet designers should aim to have their transactions use Taproot key path spends whenever possible, both for efficiency reasons due to the lower transaction weight, but also for privacy reasons to avoid third parties being able to distinguish their transactions from those of other protocols.\n+\n+Transactions that do use ANYPREVOUT signatures will therefore reveal information about the transaction, potentially including that cooperation was impossible, or what protocol or software in use (due to the details of the script).",
      "path": "bip-0118.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "7b74bd13739729dd3ea5fc5ba64479db15c5f612",
      "in_reply_to_id": 659373123,
      "user": {
        "login": "ajtowns",
        "id": 127186,
        "node_id": "MDQ6VXNlcjEyNzE4Ng==",
        "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ajtowns",
        "html_url": "https://github.com/ajtowns",
        "followers_url": "https://api.github.com/users/ajtowns/followers",
        "following_url": "https://api.github.com/users/ajtowns/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ajtowns/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ajtowns/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
        "organizations_url": "https://api.github.com/users/ajtowns/orgs",
        "repos_url": "https://api.github.com/users/ajtowns/repos",
        "events_url": "https://api.github.com/users/ajtowns/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ajtowns/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Done",
      "created_at": "2021-07-02T04:47:51Z",
      "updated_at": "2021-07-02T04:47:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r662733562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/662733562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/663384599",
      "pull_request_review_id": 698605787,
      "id": 663384599,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzM4NDU5OQ==",
      "diff_hunk": "@@ -1,144 +1,213 @@\n <pre>\n   BIP: 118\n   Layer: Consensus (soft fork)\n-  Title: SIGHASH_NOINPUT\n+  Title: SIGHASH_ANYPREVOUT for Taproot Scripts\n   Author: Christian Decker <decker.christian@gmail.com>\n+          Anthony Towns <aj@erisian.com.au>\n   Comments-Summary: No comments yet.\n   Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0118\n   Status: Draft\n   Type: Standards Track\n   Created: 2017-02-28\n   License: BSD-3-Clause\n+  Requires: 340, 341, 342\n </pre>\n \n-== Abstract ==\n-This BIP describes a new signature hash flag (<tt>sighash</tt>-flag) for\n-segwit transactions. It removes any commitment to the output being\n-spent from the signature verification mechanism. This enables dynamic\n-binding of transactions to outputs, predicated solely on the\n-compatibility of output scripts to input scripts.\n-\n-== Motivation ==\n-Off-chain protocols make use of transactions that are not yet\n-broadcast to the Bitcoin network in order to renegotiate the final\n-state that should be settled on-chain.\n-In a number of cases it is desirable to react to a given transaction\n-being seen on-chain with a predetermined reaction in the form of\n-another transaction.\n-Often the reaction is identical, no matter which transaction is seen\n-on-chain, but the application still needs to create many identical\n-transactions.\n-This is because signatures in the input of a transaction uniquely\n-commit to the hash of the transaction that created the output being\n-spent.\n-\n-This proposal introduces a new sighash flag that modifies the behavior\n-of the transaction digest algorithm used in the signature creation and\n-verification, to exclude the previous output commitment.\n-By removing the commitment we enable dynamic rebinding of a signed\n-transaction to outputs whose <tt>witnessProgram</tt> and value match the ones\n-in the <tt>witness</tt> of the spending transaction.\n-\n-The dynamic binding is opt-in and can further be restricted by using\n-unique <tt>witnessProgram</tt> scripts that are specific to the application\n-instance, e.g., using public keys that are specific to the off-chain\n-protocol instance.\n+== Introduction ==\n+\n+=== Abstract ===\n+\n+This BIP describes a new type of public key for tapscript ([[bip-0342.mediawiki|BIP 342]]) transactions.\n+It allows signatures for these public keys to not commit to the exact UTXO being spent.\n+This enables dynamic binding of transactions to different UTXOs, provided they have compatible scripts.\n+\n+=== Copyright ===\n+\n+This document is licensed under the 3-clause BSD license.\n+\n+=== Motivation ===\n+\n+Off-chain protocols make use of transactions that are not yet broadcast to the Bitcoin network in order to renegotiate the final state that should be settled on-chain.\n+In a number of cases it is desirable to respond to a given transaction being seen on-chain with a predetermined reaction in the form of another transaction.\n+Often the same reaction is desired for a variety of different transactions that may be seen on-chain, but because the input signatures in the response transaction commit to the exact transaction that is being reacted to, this means a new signature must be created for every possible transaction one wishes to be able to react to.\n+\n+This proposal introduces a new public key type<ref>'''Why a new public key type?'''\n+New public key types for tapscript can be introduced in a soft fork by specifying new rules for ''unknown public key types'' as specified in [[bip-0342.mediawiki|BIP 342]], as this only requires adding restrictions to the pre-existing signature opcodes.\n+Possible alternative approaches would be to define new script opcodes, to use a different taproot leaf version, or to use a different set of SegWit outputs than those specified by [[bip-0341.mediawiki|BIP 341]]; however all of these approaches are more complicated, and are better reserved for other upgrades where the additional flexibility is actually needed.\n+In this case, we specify a new transaction digest, but retain the same elliptic curve and signature algorithm (ie, secp256k1 and [[bip-0340.mediawiki|BIP 340]]).</ref>\n+that modifies the behavior of the transaction digest algorithm used in the signature creation and verification, by excluding the commitment to the previous output (and, optionally, the witness script<ref>'''Why (and why not) commit to the witness script?'''\n+The [https://blockstream.com/eltoo.pdf eltoo] paper provides an example of why committing to the witness script is not always appropriate.\n+It uses script and the transaction <code>nLockTime</code> to make signatures asymmetric, so that a transaction with an earlier signature can be spent by a transaction with a later signature, but a transaction with a later signature cannot be spent by a transaction with an earlier signature.\n+As a result, a single signature for a third, even later transaction must be able to spend both the prior transactions, even though they have a different tapscript.\n+On the other hand, these cases also provide a good reason to have the option to commit to the script: because each transaction has a new script, committing to the script allows you to produce a signature that applies to precisely one of these transactions.\n+In the eltoo case, this allows you to have a signature for an update transaction that can be applied to any prior update, and a signature for a settlement transaction that applies only to the corresponding update transaction, while using the same key for both, which in turn allows for a more compact script.\n+</ref> and value <ref>'''Why (and why not) commit to the input value?'''",
      "path": "bip-0118.mediawiki",
      "position": 77,
      "original_position": 77,
      "commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "original_commit_id": "d616d5492bc6e6566af1b9f9e43b660bcd48ca29",
      "in_reply_to_id": null,
      "user": {
        "login": "JeremyRubin",
        "id": 886523,
        "node_id": "MDQ6VXNlcjg4NjUyMw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/JeremyRubin",
        "html_url": "https://github.com/JeremyRubin",
        "followers_url": "https://api.github.com/users/JeremyRubin/followers",
        "following_url": "https://api.github.com/users/JeremyRubin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/JeremyRubin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/JeremyRubin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
        "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
        "repos_url": "https://api.github.com/users/JeremyRubin/repos",
        "events_url": "https://api.github.com/users/JeremyRubin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "If i understand correctly:\r\n\r\nAPO: Commits to value\r\nAPOAS: Doesn't commit to value\r\n\r\nCan you better justify why we don't also want ANYPREVOUTANYVALUE and ANYPREVOUTANYSCRIPTSPECIFICVALUE?",
      "created_at": "2021-07-03T16:41:47Z",
      "updated_at": "2021-07-03T16:41:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/943#discussion_r663384599",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/663384599"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/943"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 44,
      "original_line": 44,
      "side": "RIGHT"
    }
  ]
}