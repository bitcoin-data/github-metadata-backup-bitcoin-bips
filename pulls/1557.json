{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1557",
    "id": 1761316253,
    "node_id": "PR_kwDOAN28mc5o-42d",
    "html_url": "https://github.com/bitcoin/bips/pull/1557",
    "diff_url": "https://github.com/bitcoin/bips/pull/1557.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1557.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1557/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/996724fe79b18d4c6f2aaeb094260f3e028ab41c",
    "number": 1557,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP40: Stratum wire protocol",
    "user": {
      "login": "ben221199",
      "id": 12856904,
      "node_id": "MDQ6VXNlcjEyODU2OTA0",
      "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ben221199",
      "html_url": "https://github.com/ben221199",
      "followers_url": "https://api.github.com/users/ben221199/followers",
      "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
      "organizations_url": "https://api.github.com/users/ben221199/orgs",
      "repos_url": "https://api.github.com/users/ben221199/repos",
      "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/ben221199/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "The Stratum wire protocol has a long history since @slush0 introduced it. However, the protocol never got standardized in a formal way, so many implementations have been based on incomplete documents or on other implementations. With this document I finally want to give Stratum its place between the other BIPs, so that developers can just read this document and don't have to search through years of code or dead pages that need to be revived with Wayback Machine.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      },
      {
        "id": 6924377447,
        "node_id": "LA_kwDOAN28mc8AAAABnLmdZw",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/PR%20Author%20action%20required",
        "name": "PR Author action required",
        "description": "Needs updates, has unaddressed review comments, or is otherwise waiting for PR author",
        "color": "e99695",
        "default": false
      }
    ],
    "created_at": "2024-03-07T15:46:34Z",
    "updated_at": "2025-07-24T09:41:31Z",
    "mergeable": true,
    "mergeable_state": "unstable",
    "merged": false,
    "merge_commit_sha": "814d137d06ad0e9054f87bbedbb76597dfd87b2a",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "rebaseable": true,
    "head": {
      "label": "ben221199:add-bip40",
      "ref": "add-bip40",
      "sha": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 768580186,
        "node_id": "R_kgDOLc-aWg",
        "name": "bips",
        "full_name": "ben221199/bips",
        "owner": {
          "login": "ben221199",
          "id": 12856904,
          "node_id": "MDQ6VXNlcjEyODU2OTA0",
          "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/ben221199",
          "html_url": "https://github.com/ben221199",
          "followers_url": "https://api.github.com/users/ben221199/followers",
          "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
          "organizations_url": "https://api.github.com/users/ben221199/orgs",
          "repos_url": "https://api.github.com/users/ben221199/repos",
          "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/ben221199/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/ben221199/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/ben221199/bips",
        "archive_url": "https://api.github.com/repos/ben221199/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/ben221199/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/ben221199/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/ben221199/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/ben221199/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/ben221199/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/ben221199/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/ben221199/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/ben221199/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/ben221199/bips/contributors",
        "deployments_url": "https://api.github.com/repos/ben221199/bips/deployments",
        "downloads_url": "https://api.github.com/repos/ben221199/bips/downloads",
        "events_url": "https://api.github.com/repos/ben221199/bips/events",
        "forks_url": "https://api.github.com/repos/ben221199/bips/forks",
        "git_commits_url": "https://api.github.com/repos/ben221199/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/ben221199/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/ben221199/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/ben221199/bips.git",
        "issue_comment_url": "https://api.github.com/repos/ben221199/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/ben221199/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/ben221199/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/ben221199/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/ben221199/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/ben221199/bips/languages",
        "merges_url": "https://api.github.com/repos/ben221199/bips/merges",
        "milestones_url": "https://api.github.com/repos/ben221199/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/ben221199/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/ben221199/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/ben221199/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:ben221199/bips.git",
        "stargazers_url": "https://api.github.com/repos/ben221199/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/ben221199/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/ben221199/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/ben221199/bips/subscription",
        "tags_url": "https://api.github.com/repos/ben221199/bips/tags",
        "teams_url": "https://api.github.com/repos/ben221199/bips/teams",
        "trees_url": "https://api.github.com/repos/ben221199/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/ben221199/bips.git",
        "hooks_url": "https://api.github.com/repos/ben221199/bips/hooks",
        "svn_url": "https://github.com/ben221199/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 0,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 15186,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2024-11-27T21:31:05Z",
        "created_at": "2024-03-07T10:51:57Z",
        "updated_at": "2024-05-13T20:10:00Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "85ccf2379b8401217d34c9729396dbd0b18848e5",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5668,
        "stargazers_count": 10064,
        "watchers_count": 10064,
        "size": 16604,
        "default_branch": "master",
        "open_issues_count": 31,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-07-21T20:11:08Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-07-24T06:57:43Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
      }
    },
    "author_association": "NONE",
    "draft": true,
    "additions": 927,
    "deletions": 4,
    "changed_files": 16,
    "commits": 34,
    "review_comments": 35,
    "comments": 26
  },
  "events": [
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQ3Y2EyMDJlMWY5ZDlkMzFhNGU0YjgwN2Y4ZGJiNTU4NDAzOGE2NjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/47ca202e1f9d9d31a4e4b807f8dbb5584038a663",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/47ca202e1f9d9d31a4e4b807f8dbb5584038a663",
      "tree": {
        "sha": "6030cc000d0073dea12c571d4a20ff675064bff0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6030cc000d0073dea12c571d4a20ff675064bff0"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed",
          "sha": "b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed",
          "html_url": "https://github.com/bitcoin/bips/commit/b3701faef2bdb98a0d7ace4eedbeefa2da4c89ed"
        }
      ],
      "message": "Write initial draft of BIP 40",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T15:26:28Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T15:26:28Z"
      },
      "sha": "47ca202e1f9d9d31a4e4b807f8dbb5584038a663"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDkxNGZiN2M0MGNjMGYzNGNmNzhiMTIzYzJiZTk3YTcyNGJjOGZlN2Y",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/914fb7c40cc0f34cf78b123c2be97a724bc8fe7f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/914fb7c40cc0f34cf78b123c2be97a724bc8fe7f",
      "tree": {
        "sha": "832e4a5d4a27a48f1069fd037c633d57bffc28de",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/832e4a5d4a27a48f1069fd037c633d57bffc28de"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/47ca202e1f9d9d31a4e4b807f8dbb5584038a663",
          "sha": "47ca202e1f9d9d31a4e4b807f8dbb5584038a663",
          "html_url": "https://github.com/bitcoin/bips/commit/47ca202e1f9d9d31a4e4b807f8dbb5584038a663"
        }
      ],
      "message": "Fix inline code",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T15:38:43Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T15:38:43Z"
      },
      "sha": "914fb7c40cc0f34cf78b123c2be97a724bc8fe7f"
    },
    {
      "event": "mentioned",
      "id": 12044312704,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAALN5aCA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12044312704",
      "actor": {
        "login": "slush0",
        "id": 565341,
        "node_id": "MDQ6VXNlcjU2NTM0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slush0",
        "html_url": "https://github.com/slush0",
        "followers_url": "https://api.github.com/users/slush0/followers",
        "following_url": "https://api.github.com/users/slush0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/slush0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/slush0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
        "organizations_url": "https://api.github.com/users/slush0/orgs",
        "repos_url": "https://api.github.com/users/slush0/repos",
        "events_url": "https://api.github.com/users/slush0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/slush0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T15:46:35Z"
    },
    {
      "event": "subscribed",
      "id": 12044312732,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAALN5aCc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12044312732",
      "actor": {
        "login": "slush0",
        "id": 565341,
        "node_id": "MDQ6VXNlcjU2NTM0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slush0",
        "html_url": "https://github.com/slush0",
        "followers_url": "https://api.github.com/users/slush0/followers",
        "following_url": "https://api.github.com/users/slush0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/slush0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/slush0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
        "organizations_url": "https://api.github.com/users/slush0/orgs",
        "repos_url": "https://api.github.com/users/slush0/repos",
        "events_url": "https://api.github.com/users/slush0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/slush0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T15:46:35Z"
    },
    {
      "event": "convert_to_draft",
      "id": 12044314514,
      "node_id": "CTDE_lADOAN28mc6BlzY5zwAAAALN5aeS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12044314514",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-07T15:46:39Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDcyYmZjNGQwMWJkZDZjOTMzNjg0M2VmZmU0NThjMjU0YmQ5N2JkMzc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/72bfc4d01bdd6c9336843effe458c254bd97bd37",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/72bfc4d01bdd6c9336843effe458c254bd97bd37",
      "tree": {
        "sha": "3497c7a9f79ab98d33fb50ffbc095eb764bd7eb1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3497c7a9f79ab98d33fb50ffbc095eb764bd7eb1"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/914fb7c40cc0f34cf78b123c2be97a724bc8fe7f",
          "sha": "914fb7c40cc0f34cf78b123c2be97a724bc8fe7f",
          "html_url": "https://github.com/bitcoin/bips/commit/914fb7c40cc0f34cf78b123c2be97a724bc8fe7f"
        }
      ],
      "message": "Allow public domain",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T17:28:42Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T17:28:42Z"
      },
      "sha": "72bfc4d01bdd6c9336843effe458c254bd97bd37"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12045691404,
      "node_id": "HRFPE_lADOAN28mc6BlzY5zwAAAALN-qoM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12045691404",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "72bfc4d01bdd6c9336843effe458c254bd97bd37",
      "commit_url": "https://api.github.com/repos/ben221199/bips/commits/72bfc4d01bdd6c9336843effe458c254bd97bd37",
      "created_at": "2024-03-07T17:28:52Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFiZTA4ZTRiNWY4MmU4Y2I2M2NiYjJiOTU3NTY2ZjJlYTAzNzcxZjg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
      "tree": {
        "sha": "c42328b04852c0496bff17baec19055db3afc314",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c42328b04852c0496bff17baec19055db3afc314"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/72bfc4d01bdd6c9336843effe458c254bd97bd37",
          "sha": "72bfc4d01bdd6c9336843effe458c254bd97bd37",
          "html_url": "https://github.com/bitcoin/bips/commit/72bfc4d01bdd6c9336843effe458c254bd97bd37"
        }
      ],
      "message": "Improve specification of transport protocols",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T20:52:29Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-07T20:52:29Z"
      },
      "sha": "abe08e4b5f82e8cb63cbb2b957566f2ea03771f8"
    },
    {
      "event": "subscribed",
      "id": 12146758158,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAALUANIO",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12146758158",
      "actor": {
        "login": "Minicoolboy77777",
        "id": 155213799,
        "node_id": "U_kgDOCUBf5w",
        "avatar_url": "https://avatars.githubusercontent.com/u/155213799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Minicoolboy77777",
        "html_url": "https://github.com/Minicoolboy77777",
        "followers_url": "https://api.github.com/users/Minicoolboy77777/followers",
        "following_url": "https://api.github.com/users/Minicoolboy77777/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Minicoolboy77777/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Minicoolboy77777/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Minicoolboy77777/subscriptions",
        "organizations_url": "https://api.github.com/users/Minicoolboy77777/orgs",
        "repos_url": "https://api.github.com/users/Minicoolboy77777/repos",
        "events_url": "https://api.github.com/users/Minicoolboy77777/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Minicoolboy77777/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-18T06:55:57Z"
    },
    {
      "event": "reviewed",
      "id": 1942097925,
      "node_id": "PRR_kwDOAN28mc5zwhAF",
      "url": null,
      "actor": null,
      "commit_id": "abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "Minicoolboy77777",
        "id": 155213799,
        "node_id": "U_kgDOCUBf5w",
        "avatar_url": "https://avatars.githubusercontent.com/u/155213799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Minicoolboy77777",
        "html_url": "https://github.com/Minicoolboy77777",
        "followers_url": "https://api.github.com/users/Minicoolboy77777/followers",
        "following_url": "https://api.github.com/users/Minicoolboy77777/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Minicoolboy77777/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Minicoolboy77777/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Minicoolboy77777/subscriptions",
        "organizations_url": "https://api.github.com/users/Minicoolboy77777/orgs",
        "repos_url": "https://api.github.com/users/Minicoolboy77777/repos",
        "events_url": "https://api.github.com/users/Minicoolboy77777/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Minicoolboy77777/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#pullrequestreview-1942097925",
      "submitted_at": "2024-03-18T06:57:52Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGE1YWVlNWJkNmM1MTg3YmUyY2M1NzkyMjEyZGRjMmE2MTU5NGZhNGM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a5aee5bd6c5187be2cc5792212ddc2a61594fa4c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a5aee5bd6c5187be2cc5792212ddc2a61594fa4c",
      "tree": {
        "sha": "8b68d0decffe4405c868911a60a8352f581e7c52",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8b68d0decffe4405c868911a60a8352f581e7c52"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
          "sha": "abe08e4b5f82e8cb63cbb2b957566f2ea03771f8",
          "html_url": "https://github.com/bitcoin/bips/commit/abe08e4b5f82e8cb63cbb2b957566f2ea03771f8"
        }
      ],
      "message": "Add letters and default ports",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-19T08:58:44Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-19T08:58:44Z"
      },
      "sha": "a5aee5bd6c5187be2cc5792212ddc2a61594fa4c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg2NThiZThmYWFjZWVjOGJiN2ZjOWE5MTdiZjI5NTUzZTJkZDg3OTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8658be8faaceec8bb7fc9a917bf29553e2dd8799",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8658be8faaceec8bb7fc9a917bf29553e2dd8799",
      "tree": {
        "sha": "d111d7989ccaefa24518f588aade976dec78a2ca",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d111d7989ccaefa24518f588aade976dec78a2ca"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a5aee5bd6c5187be2cc5792212ddc2a61594fa4c",
          "sha": "a5aee5bd6c5187be2cc5792212ddc2a61594fa4c",
          "html_url": "https://github.com/bitcoin/bips/commit/a5aee5bd6c5187be2cc5792212ddc2a61594fa4c"
        }
      ],
      "message": "Add more information about WebSockets",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-19T10:14:46Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-19T10:14:46Z"
      },
      "sha": "8658be8faaceec8bb7fc9a917bf29553e2dd8799"
    },
    {
      "event": "commented",
      "id": 2009056897,
      "node_id": "IC_kwDOAN28mc53v8aB",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2009056897",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-03-20T08:52:25Z",
      "updated_at": "2024-03-20T08:52:25Z",
      "author_association": "NONE",
      "body": "Yesterday, I sent two registration requests to IANA to get some information officially egistered. The registries are:\r\n- Media Types (https://www.iana.org/assignments/media-types/media-types.xhtml)\r\n- WebSocket Subprotocol Name Registry (https://www.iana.org/assignments/websocket/websocket.xml#subprotocol-name)\r\n\r\nToday, I got a response that for both registrations some things have to be done first, before IANA can add these records to their registry. In case of the Media Types, this is process is a little bit more difficult. For the WebSocket Subprotocol Name Registry it is just letting them know when this pull request is merged and I have a permalink to the specification.\r\n\r\nAlso, it is possible that I will send more registration requests for other IANA registries too. For example, the Service Name and Transport Protocol Port Number Registry (https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml) is a possible candidate. In that case, I will post new comments about that too.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2009056897",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUxM2RlZjQxZTVjZmQ3MzM0NmRiZDQ1MWQxMzUyNTBhMWU3NDQ2NjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e13def41e5cfd73346dbd451d135250a1e744662",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e13def41e5cfd73346dbd451d135250a1e744662",
      "tree": {
        "sha": "117774898334d1ae9fcde0aa3fa66e569001993e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/117774898334d1ae9fcde0aa3fa66e569001993e"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8658be8faaceec8bb7fc9a917bf29553e2dd8799",
          "sha": "8658be8faaceec8bb7fc9a917bf29553e2dd8799",
          "html_url": "https://github.com/bitcoin/bips/commit/8658be8faaceec8bb7fc9a917bf29553e2dd8799"
        }
      ],
      "message": "Add information about WebSocket subprotocol",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T09:46:56Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T09:46:56Z"
      },
      "sha": "e13def41e5cfd73346dbd451d135250a1e744662"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUyODA3NzEzZTAzNmY4NjA0ZGUzZWQ1ODA3MzRjMGRhOThmODE0YmY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e2807713e036f8604de3ed580734c0da98f814bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e2807713e036f8604de3ed580734c0da98f814bf",
      "tree": {
        "sha": "c482c3dce1512c8d59578cdcd70f6398255f4d11",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c482c3dce1512c8d59578cdcd70f6398255f4d11"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e13def41e5cfd73346dbd451d135250a1e744662",
          "sha": "e13def41e5cfd73346dbd451d135250a1e744662",
          "html_url": "https://github.com/bitcoin/bips/commit/e13def41e5cfd73346dbd451d135250a1e744662"
        }
      ],
      "message": "Add information about HTTP polling",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T11:01:45Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T11:01:45Z"
      },
      "sha": "e2807713e036f8604de3ed580734c0da98f814bf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgzNjQ3YjFiMjA4YmUwZGQ3Zjc4MmMyMGZkNTNiMWZmNGI2N2M3OTc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83647b1b208be0dd7f782c20fd53b1ff4b67c797",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/83647b1b208be0dd7f782c20fd53b1ff4b67c797",
      "tree": {
        "sha": "5dc85860a2781ad5c443abbc247c7587a32583cd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5dc85860a2781ad5c443abbc247c7587a32583cd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e2807713e036f8604de3ed580734c0da98f814bf",
          "sha": "e2807713e036f8604de3ed580734c0da98f814bf",
          "html_url": "https://github.com/bitcoin/bips/commit/e2807713e036f8604de3ed580734c0da98f814bf"
        }
      ],
      "message": "Improve text",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T13:09:36Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T13:09:36Z"
      },
      "sha": "83647b1b208be0dd7f782c20fd53b1ff4b67c797"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNkMjE3YjA5Yjg5YjYxNTFhYWRmMTMwZDExZDE3NThmNGEwNjBkNzc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d217b09b89b6151aadf130d11d1758f4a060d77",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3d217b09b89b6151aadf130d11d1758f4a060d77",
      "tree": {
        "sha": "e794c13602437f14b7dc412fa916d2f9ede9db05",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e794c13602437f14b7dc412fa916d2f9ede9db05"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83647b1b208be0dd7f782c20fd53b1ff4b67c797",
          "sha": "83647b1b208be0dd7f782c20fd53b1ff4b67c797",
          "html_url": "https://github.com/bitcoin/bips/commit/83647b1b208be0dd7f782c20fd53b1ff4b67c797"
        }
      ],
      "message": "Add note",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T13:30:06Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T13:30:06Z"
      },
      "sha": "3d217b09b89b6151aadf130d11d1758f4a060d77"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM4MmEyYTExYjdlZjFhOGViMDZiZjViOGI4NzA5NzgxMjg0ODYwOWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c82a2a11b7ef1a8eb06bf5b8b87097812848609b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c82a2a11b7ef1a8eb06bf5b8b87097812848609b",
      "tree": {
        "sha": "b5aecd0570ecaacc98f995cfd7553b37190d8204",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b5aecd0570ecaacc98f995cfd7553b37190d8204"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3d217b09b89b6151aadf130d11d1758f4a060d77",
          "sha": "3d217b09b89b6151aadf130d11d1758f4a060d77",
          "html_url": "https://github.com/bitcoin/bips/commit/3d217b09b89b6151aadf130d11d1758f4a060d77"
        }
      ],
      "message": "Add information about HTTP Push",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T16:07:05Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T16:07:05Z"
      },
      "sha": "c82a2a11b7ef1a8eb06bf5b8b87097812848609b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgwNTU1OWY2OTVlMjA5NjQ0MTQ1MDE0MTI0YTljOGMzODQxMWZkZmI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/805559f695e209644145014124a9c8c38411fdfb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/805559f695e209644145014124a9c8c38411fdfb",
      "tree": {
        "sha": "95b1d967f3e0e6b1ee64403c945fd1939a950be3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/95b1d967f3e0e6b1ee64403c945fd1939a950be3"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c82a2a11b7ef1a8eb06bf5b8b87097812848609b",
          "sha": "c82a2a11b7ef1a8eb06bf5b8b87097812848609b",
          "html_url": "https://github.com/bitcoin/bips/commit/c82a2a11b7ef1a8eb06bf5b8b87097812848609b"
        }
      ],
      "message": "Add two methods",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T20:15:06Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T20:15:06Z"
      },
      "sha": "805559f695e209644145014124a9c8c38411fdfb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGVjNTJhZTEzMjEyNmZlNmJhOGIzM2Q5NGNmM2Y4MzVkZDE5NjQwODQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "tree": {
        "sha": "d52bfe176e2477c2c6b6f103d529295a6c203845",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d52bfe176e2477c2c6b6f103d529295a6c203845"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/805559f695e209644145014124a9c8c38411fdfb",
          "sha": "805559f695e209644145014124a9c8c38411fdfb",
          "html_url": "https://github.com/bitcoin/bips/commit/805559f695e209644145014124a9c8c38411fdfb"
        }
      ],
      "message": "Improve commands",
      "committer": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T21:35:25Z"
      },
      "author": {
        "name": "Ben",
        "email": "ben@yocto.nu",
        "date": "2024-03-21T21:35:25Z"
      },
      "sha": "ec52ae132126fe6ba8b33d94cf3f835dd1964084"
    },
    {
      "event": "labeled",
      "id": 12568643249,
      "node_id": "LE_lADOAN28mc6BlzY5zwAAAALtJkax",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12568643249",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-04-23T03:41:35Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "reviewed",
      "id": 2041409131,
      "node_id": "PRR_kwDOAN28mc55rW5r",
      "url": null,
      "actor": null,
      "commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Some editorial feedback.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#pullrequestreview-2041409131",
      "submitted_at": "2024-05-06T19:08:21Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
    },
    {
      "event": "commented",
      "id": 2096750956,
      "node_id": "IC_kwDOAN28mc58-eFs",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2096750956",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T19:27:12Z",
      "updated_at": "2024-05-06T19:27:12Z",
      "author_association": "MEMBER",
      "body": "This BIP refers to BIP41, The Stratum mining protocol, for which a BIP number was assigned and an entry exists in the README, but there doesn't seem to be pull request to add the BIP draft -- any update on that?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2096750956",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "commented",
      "id": 2096768324,
      "node_id": "IC_kwDOAN28mc58-iVE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2096768324",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T19:36:31Z",
      "updated_at": "2024-05-06T19:36:31Z",
      "author_association": "NONE",
      "body": "Hi @jonatack, thank you for feedback. I will take a look at it. I didn't have time to work on BIP 40 lately. Yes, both BIP 40 and BIP 41 are already assigned by the README and BIP 41 is also mentioned in this BIP 40. The goal is to finish BIP 40 (Stratum wire protocol) first and then start working on BIP 41 (Stratum mining protocol), referring back to BIP 40, because the mining protocol is based on the wire protocol.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2096768324",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 12719574486,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAL2JU3W",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12719574486",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T19:36:33Z"
    },
    {
      "event": "subscribed",
      "id": 12719574502,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAL2JU3m",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12719574502",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-06T19:36:33Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg0Zjg1MTkyNmU1MDg1ZjEwY2FlNzc3MjE5NjIxZjJjMTMwNTkzNzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/84f851926e5085f10cae777219621f2c13059374",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/84f851926e5085f10cae777219621f2c13059374",
      "tree": {
        "sha": "333b097a1723dcc23513c86435e4fd028f9cbffa",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/333b097a1723dcc23513c86435e4fd028f9cbffa"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 333b097a1723dcc23513c86435e4fd028f9cbffa\nparent ec52ae132126fe6ba8b33d94cf3f835dd1964084\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715030805 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715030805 +0200\n\nProcess editorial feedback\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZjlLFQAKCRAmGqIUEwzn\nq2ccAQDk68eI6+TWToHOMBhQVBlueoJcgzaD8kfNNWa5R6FP+QD+OsfHdI/PCMxS\nhWbEp4CaMaFq7+HFPb8YKvlcy8tSEgk=\n=Vucu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ec52ae132126fe6ba8b33d94cf3f835dd1964084",
          "sha": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
          "html_url": "https://github.com/bitcoin/bips/commit/ec52ae132126fe6ba8b33d94cf3f835dd1964084"
        }
      ],
      "message": "Process editorial feedback",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T21:26:45Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T21:26:45Z"
      },
      "sha": "84f851926e5085f10cae777219621f2c13059374"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12720799203,
      "node_id": "HRFPE_lADOAN28mc6BlzY5zwAAAAL2N_3j",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12720799203",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9a13a0c7f7dcd6f79ee627979f3a8ba40deb9a2c",
      "commit_url": "https://api.github.com/repos/ben221199/bips/commits/9a13a0c7f7dcd6f79ee627979f3a8ba40deb9a2c",
      "created_at": "2024-05-06T21:35:48Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI1MGU5ZTVkZTQxNzZmM2E1MzM0YmMwMDNmOTAyMTg2Zjg5MzA2MDA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b50e9e5de4176f3a5334bc003f902186f8930600",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b50e9e5de4176f3a5334bc003f902186f8930600",
      "tree": {
        "sha": "26f1bd8c58f627b3fc6b4aa8fa1ab8c745018af8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/26f1bd8c58f627b3fc6b4aa8fa1ab8c745018af8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 26f1bd8c58f627b3fc6b4aa8fa1ab8c745018af8\nparent 84f851926e5085f10cae777219621f2c13059374\nparent feacf8f2ed1ea3f95362a9933697d05ab979663d\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715031272 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715031358 +0200\n\nMerge branch 'master' into add-bip40\n\nSigned-off-by: Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZjlNPgAKCRAmGqIUEwzn\nq8rpAP0YWtdewg1MihvAIN1Jc359UbB78YRXUvUXvAK++aae7gD6AwS+a+Vv80sO\nwXwvDCvtLmDNZ6Fqs7QSL6hNULTC3Qk=\n=vuU3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/84f851926e5085f10cae777219621f2c13059374",
          "sha": "84f851926e5085f10cae777219621f2c13059374",
          "html_url": "https://github.com/bitcoin/bips/commit/84f851926e5085f10cae777219621f2c13059374"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/feacf8f2ed1ea3f95362a9933697d05ab979663d",
          "sha": "feacf8f2ed1ea3f95362a9933697d05ab979663d",
          "html_url": "https://github.com/bitcoin/bips/commit/feacf8f2ed1ea3f95362a9933697d05ab979663d"
        }
      ],
      "message": "Merge branch 'master' into add-bip40\n\nSigned-off-by: Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T21:35:58Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T21:34:32Z"
      },
      "sha": "b50e9e5de4176f3a5334bc003f902186f8930600"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12720804066,
      "node_id": "HRFPE_lADOAN28mc6BlzY5zwAAAAL2OBDi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12720804066",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "b50e9e5de4176f3a5334bc003f902186f8930600",
      "commit_url": "https://api.github.com/repos/ben221199/bips/commits/b50e9e5de4176f3a5334bc003f902186f8930600",
      "created_at": "2024-05-06T21:36:23Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBjZGZjYjVkMmVkZDM2ODc0NTEyZWNkNzAwMzJmYWYyNTMwZmRiYTc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0cdfcb5d2edd36874512ecd70032faf2530fdba7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0cdfcb5d2edd36874512ecd70032faf2530fdba7",
      "tree": {
        "sha": "cf6ca812ae28a5882663b44e7da20fb18bba3640",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/cf6ca812ae28a5882663b44e7da20fb18bba3640"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree cf6ca812ae28a5882663b44e7da20fb18bba3640\nparent b50e9e5de4176f3a5334bc003f902186f8930600\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715032694 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715032694 +0200\n\nAdd IANA considerations\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZjlSdgAKCRAmGqIUEwzn\nq5eUAQCFu2TOfOXQWETrz1bixHkQWZBBzhm0GmAJd8QxQX+8kwEA7N6CVKhOZMai\ncanRBPtTfs19tBbC685quVlklCQe9gk=\n=Esg+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b50e9e5de4176f3a5334bc003f902186f8930600",
          "sha": "b50e9e5de4176f3a5334bc003f902186f8930600",
          "html_url": "https://github.com/bitcoin/bips/commit/b50e9e5de4176f3a5334bc003f902186f8930600"
        }
      ],
      "message": "Add IANA considerations",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T21:58:14Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T21:58:14Z"
      },
      "sha": "0cdfcb5d2edd36874512ecd70032faf2530fdba7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDE5YTM5ZTJlNWJlMmM2ODRlZTY0ZmUyMDEwNDlhM2QxMDhjMjEyZDk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/19a39e2e5be2c684ee64fe201049a3d108c212d9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/19a39e2e5be2c684ee64fe201049a3d108c212d9",
      "tree": {
        "sha": "e2dc401710cfe1a23a7c8e72e16ec4b7c6c5fe97",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e2dc401710cfe1a23a7c8e72e16ec4b7c6c5fe97"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e2dc401710cfe1a23a7c8e72e16ec4b7c6c5fe97\nparent 0cdfcb5d2edd36874512ecd70032faf2530fdba7\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715033260 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715033269 +0200\n\nFix links\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZjlUtwAKCRAmGqIUEwzn\nq489AQDHHP1ZO2Sq7gf3UyNx2K90Sehcx+Fh8nP4oxQi57FHLAD9EZbXveKQJouw\ncEw9byobsuWYSsnMsEPtesTgeredtQo=\n=y5Vw\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0cdfcb5d2edd36874512ecd70032faf2530fdba7",
          "sha": "0cdfcb5d2edd36874512ecd70032faf2530fdba7",
          "html_url": "https://github.com/bitcoin/bips/commit/0cdfcb5d2edd36874512ecd70032faf2530fdba7"
        }
      ],
      "message": "Fix links",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T22:07:49Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T22:07:40Z"
      },
      "sha": "19a39e2e5be2c684ee64fe201049a3d108c212d9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDFjZjU5ODM3YzczMDI1Y2Q3ZGM2OGUzZDA5ZTYzYjU2Yzg2OGVmZjQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1cf59837c73025cd7dc68e3d09e63b56c868eff4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1cf59837c73025cd7dc68e3d09e63b56c868eff4",
      "tree": {
        "sha": "138a3740eff666b473ac1a0bec77a9f4062ef4ef",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/138a3740eff666b473ac1a0bec77a9f4062ef4ef"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 138a3740eff666b473ac1a0bec77a9f4062ef4ef\nparent 19a39e2e5be2c684ee64fe201049a3d108c212d9\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715035614 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715035614 +0200\n\nAdd information about service vendor\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZjld3gAKCRAmGqIUEwzn\nq5Q8AP9KEr09qXI6G4XUAcl6sIobpy69UHjy7oMXrpuNrycDDwD8CWPuzN+egUWl\nJVNOaW3iZorm96htY2jj4sSUjpXzsAE=\n=U2+X\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/19a39e2e5be2c684ee64fe201049a3d108c212d9",
          "sha": "19a39e2e5be2c684ee64fe201049a3d108c212d9",
          "html_url": "https://github.com/bitcoin/bips/commit/19a39e2e5be2c684ee64fe201049a3d108c212d9"
        }
      ],
      "message": "Add information about service vendor",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T22:46:54Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T22:46:54Z"
      },
      "sha": "1cf59837c73025cd7dc68e3d09e63b56c868eff4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJmNjIwZjU0ZWNmMjlhMzA5MjQwMDJlMDQ0ODkxNmQxZWVmOTdiMTE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2f620f54ecf29a30924002e0448916d1eef97b11",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2f620f54ecf29a30924002e0448916d1eef97b11",
      "tree": {
        "sha": "493c9cabc47cb0a53cbaf1cc6d6cc07a78cb4a5a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/493c9cabc47cb0a53cbaf1cc6d6cc07a78cb4a5a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 493c9cabc47cb0a53cbaf1cc6d6cc07a78cb4a5a\nparent 1cf59837c73025cd7dc68e3d09e63b56c868eff4\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715037027 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715037040 +0200\n\nFix layer\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZjljcQAKCRAmGqIUEwzn\nq6lmAP9boQuvPt+XgN0jyf3osh9AZ3Jo3jndo/r4qudLtu6/RwEA/G/AUb9HBjM8\nn27D9AFLavgJ1DFzTRxkzI0gySlsiwU=\n=0mrd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1cf59837c73025cd7dc68e3d09e63b56c868eff4",
          "sha": "1cf59837c73025cd7dc68e3d09e63b56c868eff4",
          "html_url": "https://github.com/bitcoin/bips/commit/1cf59837c73025cd7dc68e3d09e63b56c868eff4"
        }
      ],
      "message": "Fix layer",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T23:10:40Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-06T23:10:27Z"
      },
      "sha": "2f620f54ecf29a30924002e0448916d1eef97b11"
    },
    {
      "event": "commented",
      "id": 2098167496,
      "node_id": "IC_kwDOAN28mc59D37I",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2098167496",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-07T11:18:09Z",
      "updated_at": "2024-05-07T11:18:09Z",
      "author_association": "NONE",
      "body": "The media type `application/stratum` has been registered by IANA at Media Types (https://www.iana.org/assignments/media-types/media-types.xhtml).",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2098167496",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQ4YWRiMGZmOTM0NWZlYzg1YWVhYjdlODUwZDY2MmFhMTQyZjc4NDM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/48adb0ff9345fec85aeab7e850d662aa142f7843",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/48adb0ff9345fec85aeab7e850d662aa142f7843",
      "tree": {
        "sha": "9b77f8c2f3dd1c7b2bb846b168bb6f266b1eb7fe",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9b77f8c2f3dd1c7b2bb846b168bb6f266b1eb7fe"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9b77f8c2f3dd1c7b2bb846b168bb6f266b1eb7fe\nparent 2f620f54ecf29a30924002e0448916d1eef97b11\nparent 85ccf2379b8401217d34c9729396dbd0b18848e5\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715367978 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715368022 +0200\n\nMerge branch 'master' into add-bip40\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZj5wWQAKCRAmGqIUEwzn\nq6b/AQDhLE6wUPMwCVzk/ZxDZyTWoJsF8DrWL0U5JnwWFjLiKQEA9UsCg2BRQS4l\nAf8pTcOHnO45cPys1J0ySDyoM6TzJgE=\n=oVX9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2f620f54ecf29a30924002e0448916d1eef97b11",
          "sha": "2f620f54ecf29a30924002e0448916d1eef97b11",
          "html_url": "https://github.com/bitcoin/bips/commit/2f620f54ecf29a30924002e0448916d1eef97b11"
        },
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85ccf2379b8401217d34c9729396dbd0b18848e5",
          "sha": "85ccf2379b8401217d34c9729396dbd0b18848e5",
          "html_url": "https://github.com/bitcoin/bips/commit/85ccf2379b8401217d34c9729396dbd0b18848e5"
        }
      ],
      "message": "Merge branch 'master' into add-bip40",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-10T19:07:02Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-10T19:06:18Z"
      },
      "sha": "48adb0ff9345fec85aeab7e850d662aa142f7843"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI1YTliMTAyMTY0Njg1MmIxZjgzNmE2ZDc0ZWI0NjA5Y2E1NjNiNzA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5a9b1021646852b1f836a6d74eb4609ca563b70",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b5a9b1021646852b1f836a6d74eb4609ca563b70",
      "tree": {
        "sha": "09a57ef7d94b1ea495ac1b492bf9b30e3d17fe13",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/09a57ef7d94b1ea495ac1b492bf9b30e3d17fe13"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 09a57ef7d94b1ea495ac1b492bf9b30e3d17fe13\nparent 48adb0ff9345fec85aeab7e850d662aa142f7843\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715370008 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715370008 +0200\n\nAdd IANA consideration for HTTP fields\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZj54GAAKCRAmGqIUEwzn\nq3oAAQDQAg9tDyZ2CjtttCY8sK+404IfN3NrJbqnqPTv9802/wD+OYbzHJMEG0pY\n3BcyYJJ6IZ7B+o1A4QnztybxOjHI4QI=\n=nfv1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/48adb0ff9345fec85aeab7e850d662aa142f7843",
          "sha": "48adb0ff9345fec85aeab7e850d662aa142f7843",
          "html_url": "https://github.com/bitcoin/bips/commit/48adb0ff9345fec85aeab7e850d662aa142f7843"
        }
      ],
      "message": "Add IANA consideration for HTTP fields",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-10T19:40:08Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-10T19:40:08Z"
      },
      "sha": "b5a9b1021646852b1f836a6d74eb4609ca563b70"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDE5Y2Y0NDc5MzkxMTgwN2IyODRjOTEwMDQ4YTk5MmI1NTM2NDlkYjU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/19cf44793911807b284c910048a992b553649db5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/19cf44793911807b284c910048a992b553649db5",
      "tree": {
        "sha": "48c1dbd31df80cf6c1f63609c42e4a225dd56fa7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/48c1dbd31df80cf6c1f63609c42e4a225dd56fa7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 48c1dbd31df80cf6c1f63609c42e4a225dd56fa7\nparent b5a9b1021646852b1f836a6d74eb4609ca563b70\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715373203 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715373203 +0200\n\nAdd example commands\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZj6EkwAKCRAmGqIUEwzn\nq09NAQDIwpThMv4CJxk6afUvtv4jm8EyF9JD/og+nxPXwkHVlwEAivNhzLQoEV3z\nrLdwYESsr58iZQoaB9eG2TpfM4d/Jww=\n=maf5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5a9b1021646852b1f836a6d74eb4609ca563b70",
          "sha": "b5a9b1021646852b1f836a6d74eb4609ca563b70",
          "html_url": "https://github.com/bitcoin/bips/commit/b5a9b1021646852b1f836a6d74eb4609ca563b70"
        }
      ],
      "message": "Add example commands",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-10T20:33:23Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-10T20:33:23Z"
      },
      "sha": "19cf44793911807b284c910048a992b553649db5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZlMjY2OTFkYjkzNmIyMmExZTU5YTU5NzJjYTlhOWU0YWVhNzBiMzM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6e26691db936b22a1e59a5972ca9a9e4aea70b33",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6e26691db936b22a1e59a5972ca9a9e4aea70b33",
      "tree": {
        "sha": "413fb40a7957bcca13e9b008068b328451678547",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/413fb40a7957bcca13e9b008068b328451678547"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 413fb40a7957bcca13e9b008068b328451678547\nparent 19cf44793911807b284c910048a992b553649db5\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715377797 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715377797 +0200\n\nAdd example pub/sub commands\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZj6WhQAKCRAmGqIUEwzn\nq4lUAP9Ne64/egHV4tkdzu7Vc/5eQ1dZE+kAv3HMuUWUPeGQCgD+NTyNXfKLIo5V\nw6w981+rGk3s3OsJKfGtSY+bH94AKQw=\n=4HPk\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/19cf44793911807b284c910048a992b553649db5",
          "sha": "19cf44793911807b284c910048a992b553649db5",
          "html_url": "https://github.com/bitcoin/bips/commit/19cf44793911807b284c910048a992b553649db5"
        }
      ],
      "message": "Add example pub/sub commands",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-10T21:49:57Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-10T21:49:57Z"
      },
      "sha": "6e26691db936b22a1e59a5972ca9a9e4aea70b33"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDczZjhhZDE4MGE2OTFkZWQ2ODdmZWZmYmRhMzdhYjM3YzY5MDUwYWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/73f8ad180a691ded687feffbda37ab37c69050ad",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/73f8ad180a691ded687feffbda37ab37c69050ad",
      "tree": {
        "sha": "a903bc3ec239b34e3edbc5a6257f21234b84048d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a903bc3ec239b34e3edbc5a6257f21234b84048d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a903bc3ec239b34e3edbc5a6257f21234b84048d\nparent 6e26691db936b22a1e59a5972ca9a9e4aea70b33\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715517273 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715517273 +0200\n\nMove services to seperate file\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZkC3XwAKCRAmGqIUEwzn\nq92UAP9QPNngXYyH5O/X4+kWc0G9Kgxids9Xq09tRikBcFwgSQEAkqR5LMUloZl2\ncMeWZVovVDVG5KaztCQJ9msNI4WShwo=\n=xqzG\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6e26691db936b22a1e59a5972ca9a9e4aea70b33",
          "sha": "6e26691db936b22a1e59a5972ca9a9e4aea70b33",
          "html_url": "https://github.com/bitcoin/bips/commit/6e26691db936b22a1e59a5972ca9a9e4aea70b33"
        }
      ],
      "message": "Move services to seperate file",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-12T12:34:33Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-12T12:34:33Z"
      },
      "sha": "73f8ad180a691ded687feffbda37ab37c69050ad"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI3ODdkYjAxNjNhNmE0YzAzMmE1NTZjZmQ5MmZkMzhmM2VlNzBhNTc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2787db0163a6a4c032a556cfd92fd38f3ee70a57",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2787db0163a6a4c032a556cfd92fd38f3ee70a57",
      "tree": {
        "sha": "2ff2eabd865e7360d6658a49c38c8b22128faec3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2ff2eabd865e7360d6658a49c38c8b22128faec3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2ff2eabd865e7360d6658a49c38c8b22128faec3\nparent 73f8ad180a691ded687feffbda37ab37c69050ad\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715521843 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715521879 +0200\n\nAdd information about discovery service\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZkDJWQAKCRAmGqIUEwzn\nqxnRAP47HpRHCRlhkfv86lfyuwSWsyIIPi0HLqelgzNJ4+ZKzQEA5XNCaYckjOCP\nogJ1any3+XJTbpXWiUrqldAe7cNYYwk=\n=4zvb\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/73f8ad180a691ded687feffbda37ab37c69050ad",
          "sha": "73f8ad180a691ded687feffbda37ab37c69050ad",
          "html_url": "https://github.com/bitcoin/bips/commit/73f8ad180a691ded687feffbda37ab37c69050ad"
        }
      ],
      "message": "Add information about discovery service",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-12T13:51:19Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-12T13:50:43Z"
      },
      "sha": "2787db0163a6a4c032a556cfd92fd38f3ee70a57"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQwYmM3MjEzZjcwOThhOTljNDkzOTRmYjYxOThiNWEzMjM3MWZmZjk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/40bc7213f7098a99c49394fb6198b5a32371fff9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/40bc7213f7098a99c49394fb6198b5a32371fff9",
      "tree": {
        "sha": "c9519867432da1a86c493f1e68eeb9e6330cb5cc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c9519867432da1a86c493f1e68eeb9e6330cb5cc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c9519867432da1a86c493f1e68eeb9e6330cb5cc\nparent 2787db0163a6a4c032a556cfd92fd38f3ee70a57\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715549168 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715549168 +0200\n\nImprove service documentation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZkEz8AAKCRAmGqIUEwzn\nq4uUAQD7EJ7G34qu1OGjVbvjNHH9JUpgL9BqNnxgbyLJV4fnHgD5AeRDtywS0R1C\nOb7QOsT6m5qsYglWCi+JfXNXjCtqVAU=\n=Na5O\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2787db0163a6a4c032a556cfd92fd38f3ee70a57",
          "sha": "2787db0163a6a4c032a556cfd92fd38f3ee70a57",
          "html_url": "https://github.com/bitcoin/bips/commit/2787db0163a6a4c032a556cfd92fd38f3ee70a57"
        }
      ],
      "message": "Improve service documentation",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-12T21:26:08Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-12T21:26:08Z"
      },
      "sha": "40bc7213f7098a99c49394fb6198b5a32371fff9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDA1ZTExOTQ3YmQ2Yjk2MTkxNzUwYTE4NzQ1MDkwMmIwMDhjMGUxYWE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/05e11947bd6b96191750a187450902b008c0e1aa",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/05e11947bd6b96191750a187450902b008c0e1aa",
      "tree": {
        "sha": "2a50a7496f39cd4f0f1dd97ff47b398323ac9284",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2a50a7496f39cd4f0f1dd97ff47b398323ac9284"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2a50a7496f39cd4f0f1dd97ff47b398323ac9284\nparent 40bc7213f7098a99c49394fb6198b5a32371fff9\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715551333 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1715551333 +0200\n\nImprove blockchain service documentation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZkE8ZQAKCRAmGqIUEwzn\nq31vAQC2HJCx+WbDbi3tPdeyvCDtKDlpmr5K/mbNMJi/fmMANgEAqgDYb4o7U3pC\nFdSfBSjan7ePHiP7ToTtF0gNNiXlCgw=\n=Tl9S\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/40bc7213f7098a99c49394fb6198b5a32371fff9",
          "sha": "40bc7213f7098a99c49394fb6198b5a32371fff9",
          "html_url": "https://github.com/bitcoin/bips/commit/40bc7213f7098a99c49394fb6198b5a32371fff9"
        }
      ],
      "message": "Improve blockchain service documentation",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-12T22:02:13Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-12T22:02:13Z"
      },
      "sha": "05e11947bd6b96191750a187450902b008c0e1aa"
    },
    {
      "event": "reviewed",
      "id": 2069244795,
      "node_id": "PRR_kwDOAN28mc57Vit7",
      "url": null,
      "actor": null,
      "commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Thanks for updating. Took a look at the new additions.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#pullrequestreview-2069244795",
      "submitted_at": "2024-05-21T18:18:48Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
    },
    {
      "event": "commented",
      "id": 2123249666,
      "node_id": "IC_kwDOAN28mc5-jjgC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2123249666",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T18:53:47Z",
      "updated_at": "2024-05-21T18:53:47Z",
      "author_association": "MEMBER",
      "body": "@ben221199 This draft might be missing the following:\r\n\r\n    - [ ] Backwards compatibility section describing incompatibilities, severity, and suggest mitigations\r\n    - [ ] Reference implementation (necessary before status \"Final\", but not necessary to be accepted)\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2123249666",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 12884210930,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAL_9XTy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12884210930",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T18:53:48Z"
    },
    {
      "event": "subscribed",
      "id": 12884210941,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAL_9XT9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12884210941",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T18:53:48Z"
    },
    {
      "event": "commented",
      "id": 2123272865,
      "node_id": "IC_kwDOAN28mc5-jpKh",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2123272865",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T19:08:43Z",
      "updated_at": "2024-05-21T19:08:43Z",
      "author_association": "NONE",
      "body": "Where should I place that?",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2123272865",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDE2YjZkNWM1ZDMyNTdiZGQ5ZWRmNmFiY2Y5N2QzZTBiNjA1OTFmODQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/16b6d5c5d3257bdd9edf6abcf97d3e0b60591f84",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/16b6d5c5d3257bdd9edf6abcf97d3e0b60591f84",
      "tree": {
        "sha": "c1fc40ec780ec928e1ff85991ec50d6b04fc3517",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c1fc40ec780ec928e1ff85991ec50d6b04fc3517"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c1fc40ec780ec928e1ff85991ec50d6b04fc3517\nparent 05e11947bd6b96191750a187450902b008c0e1aa\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1716318961 +0200\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1716318961 +0200\n\nApply suggestions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZkzy8QAKCRAmGqIUEwzn\nq6voAQD74ticXM7jFXp7B3rtl5Um6BPjTqCUM6tAHthmHMiCuwD/b3dlcHC/wvDO\ntFeV5+uusSJByi/ezkEurBWxW2IpNQQ=\n=3YWb\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/05e11947bd6b96191750a187450902b008c0e1aa",
          "sha": "05e11947bd6b96191750a187450902b008c0e1aa",
          "html_url": "https://github.com/bitcoin/bips/commit/05e11947bd6b96191750a187450902b008c0e1aa"
        }
      ],
      "message": "Apply suggestions",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-21T19:16:01Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-05-21T19:16:01Z"
      },
      "sha": "16b6d5c5d3257bdd9edf6abcf97d3e0b60591f84"
    },
    {
      "event": "renamed",
      "id": 12886436769,
      "node_id": "RTE_lADOAN28mc6BlzY5zwAAAAMAF2uh",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12886436769",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T23:21:31Z",
      "rename": {
        "from": "Add draft of BIP 40",
        "to": "BIP40: Stratum wire protocol"
      }
    },
    {
      "event": "commented",
      "id": 2123588528,
      "node_id": "IC_kwDOAN28mc5-k2Ow",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2123588528",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-21T23:27:35Z",
      "updated_at": "2024-05-21T23:27:35Z",
      "author_association": "MEMBER",
      "body": "> Where should I place that?\r\n\r\nThey are generally the last two sections in other BIPs.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2123588528",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "labeled",
      "id": 13003882442,
      "node_id": "LE_lADOAN28mc6BlzY5zwAAAAMHF3_K",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13003882442",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-31T17:34:10Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "commented",
      "id": 2171777156,
      "node_id": "IC_kwDOAN28mc6BcrCE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2171777156",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-16T17:20:56Z",
      "updated_at": "2024-06-27T15:33:07Z",
      "author_association": "NONE",
      "body": "It seems BIP41 doesn't have any PR yet, so I'll write a comment on this one.\r\n\r\nMy goal is to inform BIP41 authors (@ben221199 or whoever else volunteers) that the [Stratum Reference Implementation](https://stratumprotocol.org) community is aiming for a similar effort for Stratum V2",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2171777156",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 13176514942,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMRYal-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13176514942",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-16T17:20:58Z"
    },
    {
      "event": "subscribed",
      "id": 13176514945,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMRYamB",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13176514945",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-16T17:20:58Z"
    },
    {
      "event": "commented",
      "id": 2172505460,
      "node_id": "IC_kwDOAN28mc6Bfc10",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2172505460",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T07:30:15Z",
      "updated_at": "2024-06-17T07:30:15Z",
      "author_association": "NONE",
      "body": "Hi @plebhash, thanks for commenting. You are correct that there is no BIP 41 pull request yet. This is because BIP 41 is an implementation of BIP 40 specifically for mining. I will start working on that one when BIP 40 is finished.\r\n\r\nAs far as I'm aware, Stratum V2 is specifically for mining. When people want to make improvements on Stratum V1, I think that is solely a BIP 41 improvement, because BIP 40 only describes the wire protocol (the basics) and the Electrum implementation, not the mining one.\r\n\r\nI think there are some things that could be done:\r\n- Create a BIP for Stratum V2.\r\n- Make a decision if you want to create a new BIP for the V1 improvements, or if you want those improvements merged into BIP 41.\r\n\r\nAlso, can you give me some examples on what those improvments could be?\r\n\r\nThanks",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2172505460",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 13180979431,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMRpcjn",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13180979431",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T07:30:17Z"
    },
    {
      "event": "subscribed",
      "id": 13180979441,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMRpcjx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13180979441",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-17T07:30:17Z"
    },
    {
      "event": "commented",
      "id": 2176850150,
      "node_id": "IC_kwDOAN28mc6BwBjm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2176850150",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T19:54:03Z",
      "updated_at": "2024-06-27T15:33:23Z",
      "author_association": "NONE",
      "body": "> Create a BIP for Stratum V2.\r\n\r\nthat is an interesting idea!",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2176850150",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "commented",
      "id": 2176852383,
      "node_id": "IC_kwDOAN28mc6BwCGf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2176852383",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T19:55:24Z",
      "updated_at": "2024-06-18T19:55:24Z",
      "author_association": "NONE",
      "body": "@ben221199 on the context of BIP40, could you provide some wayback machine link for the original (non-mining) stratum wire protocol?\r\n\r\nthis is a very interesting unknown fact in the mining community, and everyone I tell about this is surprised about this historical fact",
      "user": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2176852383",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 13205867330,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMTIYtC",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13205867330",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T19:55:25Z"
    },
    {
      "event": "subscribed",
      "id": 13205867340,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMTIYtM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13205867340",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-18T19:55:25Z"
    },
    {
      "event": "commented",
      "id": 2179323245,
      "node_id": "IC_kwDOAN28mc6B5dVt",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2179323245",
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T19:00:07Z",
      "updated_at": "2024-06-19T19:00:07Z",
      "author_association": "NONE",
      "body": "Hi @ben221199. Thank you for taking time to document the stratum protocol. However, I have some comments about your description of the electrum flavor of stratum. I'm not sure some of the specified endpoints are actually part of their protocol, for example: `blockchain.address` is long deprecated in favor of `blockchain.scripthash`. They also don't have any method to get a full block.\r\n\r\n[Here](https://electrumx.readthedocs.io/en/latest/protocol-methods.html) is a doc of the latest protocol and all methods they currently support.",
      "user": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2179323245",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 13220053163,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMT-gCr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13220053163",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T19:00:08Z"
    },
    {
      "event": "subscribed",
      "id": 13220053181,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMT-gC9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13220053181",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T19:00:08Z"
    },
    {
      "event": "commented",
      "id": 2179430224,
      "node_id": "IC_kwDOAN28mc6B53dQ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2179430224",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T20:38:57Z",
      "updated_at": "2024-06-19T20:38:57Z",
      "author_association": "NONE",
      "body": "Hi @plebhash, the second message on https://bitcointalk.org/?topic=557866 is one of the source I have used. There are some other sources too, but I think this is the most important one.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2179430224",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 13220713418,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMUBBPK",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13220713418",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T20:38:58Z"
    },
    {
      "event": "subscribed",
      "id": 13220713428,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMUBBPU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13220713428",
      "actor": {
        "login": "plebhash",
        "id": 147345153,
        "node_id": "U_kgDOCMhPAQ",
        "avatar_url": "https://avatars.githubusercontent.com/u/147345153?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/plebhash",
        "html_url": "https://github.com/plebhash",
        "followers_url": "https://api.github.com/users/plebhash/followers",
        "following_url": "https://api.github.com/users/plebhash/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/plebhash/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/plebhash/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/plebhash/subscriptions",
        "organizations_url": "https://api.github.com/users/plebhash/orgs",
        "repos_url": "https://api.github.com/users/plebhash/repos",
        "events_url": "https://api.github.com/users/plebhash/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/plebhash/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T20:38:58Z"
    },
    {
      "event": "commented",
      "id": 2179440710,
      "node_id": "IC_kwDOAN28mc6B56BG",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2179440710",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T20:49:58Z",
      "updated_at": "2024-06-19T20:49:58Z",
      "author_association": "NONE",
      "body": "Hi @Davidson-Souza, Stratum is invented by @slush0 especially for Electrum. Stratum wouldn't be here without Electrum and Electrum would possibly not have been a success without Stratum. I think it is okay to have Electrum commands specified next to the more general commands like `discovery`.\r\n\r\nI'm aware of the fact that `blockchain.address` has been deprecated by `blockchain.scripthash`. However, the Electrum commands specify also a versioning system (where Stratum itself does not), so I think it is also good to have every version documented. Technically, it is possible to write a client and/or server that implements the Stratum protocol with Electrum commands and support multiple protocol versions. Removing deprecated commands seems to be a bad practice in my eyes.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2179440710",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 13220782272,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMUBSDA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13220782272",
      "actor": {
        "login": "slush0",
        "id": 565341,
        "node_id": "MDQ6VXNlcjU2NTM0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slush0",
        "html_url": "https://github.com/slush0",
        "followers_url": "https://api.github.com/users/slush0/followers",
        "following_url": "https://api.github.com/users/slush0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/slush0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/slush0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
        "organizations_url": "https://api.github.com/users/slush0/orgs",
        "repos_url": "https://api.github.com/users/slush0/repos",
        "events_url": "https://api.github.com/users/slush0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/slush0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T20:49:59Z"
    },
    {
      "event": "subscribed",
      "id": 13220782283,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMUBSDL",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13220782283",
      "actor": {
        "login": "slush0",
        "id": 565341,
        "node_id": "MDQ6VXNlcjU2NTM0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slush0",
        "html_url": "https://github.com/slush0",
        "followers_url": "https://api.github.com/users/slush0/followers",
        "following_url": "https://api.github.com/users/slush0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/slush0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/slush0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
        "organizations_url": "https://api.github.com/users/slush0/orgs",
        "repos_url": "https://api.github.com/users/slush0/repos",
        "events_url": "https://api.github.com/users/slush0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/slush0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T20:49:59Z"
    },
    {
      "event": "mentioned",
      "id": 13220782289,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMUBSDR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13220782289",
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T20:49:59Z"
    },
    {
      "event": "subscribed",
      "id": 13220782301,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMUBSDd",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13220782301",
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T20:49:59Z"
    },
    {
      "event": "commented",
      "id": 2179492608,
      "node_id": "IC_kwDOAN28mc6B6GsA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2179492608",
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T21:44:58Z",
      "updated_at": "2024-06-19T21:44:58Z",
      "author_association": "NONE",
      "body": "> Hi @Davidson-Souza, Stratum is invented by @slush0 especially for Electrum. Stratum wouldn't be here without Electrum and Electrum would possibly not have been a success without Stratum. I think it is okay to have Electrum commands specified next to the more general commands like `discovery`.\n> \n> I'm aware of the fact that `blockchain.address` has been deprecated by `blockchain.scripthash`. However, the Electrum commands specify also a versioning system (where Stratum itself does not), so I think it is also good to have every version documented. Technically, it is possible to write a client and/or server that implements the Stratum protocol with Electrum commands and support multiple protocol versions. Removing deprecated commands seems to be a bad practice in my eyes.\n\nHi, thank you for your reply. I do agree with the general direction you propose, I was a bit confused that this is not clear in the text. My understanding after reading it is that it defines the currently used commands by wallets and servers, but this is not the case.",
      "user": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2179492608",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 13221151154,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMUCsGy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13221151154",
      "actor": {
        "login": "slush0",
        "id": 565341,
        "node_id": "MDQ6VXNlcjU2NTM0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slush0",
        "html_url": "https://github.com/slush0",
        "followers_url": "https://api.github.com/users/slush0/followers",
        "following_url": "https://api.github.com/users/slush0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/slush0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/slush0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
        "organizations_url": "https://api.github.com/users/slush0/orgs",
        "repos_url": "https://api.github.com/users/slush0/repos",
        "events_url": "https://api.github.com/users/slush0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/slush0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T21:44:59Z"
    },
    {
      "event": "subscribed",
      "id": 13221151156,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMUCsG0",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13221151156",
      "actor": {
        "login": "slush0",
        "id": 565341,
        "node_id": "MDQ6VXNlcjU2NTM0MQ==",
        "avatar_url": "https://avatars.githubusercontent.com/u/565341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/slush0",
        "html_url": "https://github.com/slush0",
        "followers_url": "https://api.github.com/users/slush0/followers",
        "following_url": "https://api.github.com/users/slush0/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/slush0/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/slush0/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/slush0/subscriptions",
        "organizations_url": "https://api.github.com/users/slush0/orgs",
        "repos_url": "https://api.github.com/users/slush0/repos",
        "events_url": "https://api.github.com/users/slush0/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/slush0/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T21:44:59Z"
    },
    {
      "event": "mentioned",
      "id": 13221151165,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMUCsG9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13221151165",
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T21:44:59Z"
    },
    {
      "event": "subscribed",
      "id": 13221151171,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMUCsHD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13221151171",
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T21:44:59Z"
    },
    {
      "event": "commented",
      "id": 2179499057,
      "node_id": "IC_kwDOAN28mc6B6IQx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2179499057",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T21:52:11Z",
      "updated_at": "2024-06-19T21:52:11Z",
      "author_association": "NONE",
      "body": "@Davidson-Souza If you see improvements in text, don't hesitate to give suggestions. GitHub makes it possible to make comments on code lines. 😄 ",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2179499057",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 13221186307,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAMUC0sD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13221186307",
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T21:52:13Z"
    },
    {
      "event": "subscribed",
      "id": 13221186316,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAMUC0sM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13221186316",
      "actor": {
        "login": "Davidson-Souza",
        "id": 40968167,
        "node_id": "MDQ6VXNlcjQwOTY4MTY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/40968167?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Davidson-Souza",
        "html_url": "https://github.com/Davidson-Souza",
        "followers_url": "https://api.github.com/users/Davidson-Souza/followers",
        "following_url": "https://api.github.com/users/Davidson-Souza/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/Davidson-Souza/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/Davidson-Souza/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/Davidson-Souza/subscriptions",
        "organizations_url": "https://api.github.com/users/Davidson-Souza/orgs",
        "repos_url": "https://api.github.com/users/Davidson-Souza/repos",
        "events_url": "https://api.github.com/users/Davidson-Souza/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/Davidson-Souza/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-19T21:52:13Z"
    },
    {
      "event": "commented",
      "id": 2498944036,
      "node_id": "IC_kwDOAN28mc6U8twk",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2498944036",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-25T20:14:37Z",
      "updated_at": "2024-11-25T20:14:37Z",
      "author_association": "NONE",
      "body": "Okay, I have to pick up this task again.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2498944036",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDRjZjg5ODU3ODlkOWZmM2UyNGQ0NDYzNjRmNmRiOWY2MTU2ZTdhNjk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4cf8985789d9ff3e24d446364f6db9f6156e7a69",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4cf8985789d9ff3e24d446364f6db9f6156e7a69",
      "tree": {
        "sha": "93bcc3d157158b09d046b4360187fc27246aa051",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/93bcc3d157158b09d046b4360187fc27246aa051"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 93bcc3d157158b09d046b4360187fc27246aa051\nparent 16b6d5c5d3257bdd9edf6abcf97d3e0b60591f84\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732568676 +0100\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732568676 +0100\n\nImprove sentences\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZ0TmZAAKCRAmGqIUEwzn\nqwqwAP4+QIvzPmBZqy5tfbi4vTngYrNco3J8iertEkYLRQ+XPQD/bTudC45qT+JB\nxEJHwRvAzBGsIx22cahmxuPawMKrrQs=\n=XtKd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/16b6d5c5d3257bdd9edf6abcf97d3e0b60591f84",
          "sha": "16b6d5c5d3257bdd9edf6abcf97d3e0b60591f84",
          "html_url": "https://github.com/bitcoin/bips/commit/16b6d5c5d3257bdd9edf6abcf97d3e0b60591f84"
        }
      ],
      "message": "Improve sentences",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-25T21:04:36Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-25T21:04:36Z"
      },
      "sha": "4cf8985789d9ff3e24d446364f6db9f6156e7a69"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDE5MzZiNDk4MDM1Nzk2NjE5MjUzYmUxYTJiOGQyOWFiNDk0NjZhMzE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1936b498035796619253be1a2b8d29ab49466a31",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1936b498035796619253be1a2b8d29ab49466a31",
      "tree": {
        "sha": "9d8e93ee0e3daed29262a2b4ce0bd5a19295ebd2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9d8e93ee0e3daed29262a2b4ce0bd5a19295ebd2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9d8e93ee0e3daed29262a2b4ce0bd5a19295ebd2\nparent 4cf8985789d9ff3e24d446364f6db9f6156e7a69\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732617926 +0100\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732617926 +0100\n\nImprove documents of Stratum methods\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZ0WmxgAKCRAmGqIUEwzn\nq8puAQCqraLVyA0rEEb8/wVyavY+kdgo81IFqd9Htk+jie1LlgD/YzslGpC/FxKc\niouTpqIb7MmBLPO4ELaLExqFnvJ4zQs=\n=72IU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4cf8985789d9ff3e24d446364f6db9f6156e7a69",
          "sha": "4cf8985789d9ff3e24d446364f6db9f6156e7a69",
          "html_url": "https://github.com/bitcoin/bips/commit/4cf8985789d9ff3e24d446364f6db9f6156e7a69"
        }
      ],
      "message": "Improve documents of Stratum methods",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-26T10:45:26Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-26T10:45:26Z"
      },
      "sha": "1936b498035796619253be1a2b8d29ab49466a31"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGJiYWQ4YTBhMGNhNTE4MjMyYzg3NzAyODkyZTJjN2M4M2RmNDQ2NzY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bbad8a0a0ca518232c87702892e2c7c83df44676",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/bbad8a0a0ca518232c87702892e2c7c83df44676",
      "tree": {
        "sha": "6a404665a35af200486cccb97e2beb7504706617",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6a404665a35af200486cccb97e2beb7504706617"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6a404665a35af200486cccb97e2beb7504706617\nparent 1936b498035796619253be1a2b8d29ab49466a31\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732619366 +0100\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732619366 +0100\n\nFix type and description\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZ0WsZgAKCRAmGqIUEwzn\nq60HAP9vZKYseW8JdaToV8WlbPME7XBM8T6qDgcpNv0Xvhy07gD+Nx/dPcimdJBX\nBUIApDcGu9lVDtovYmdew9G7EUnTtQo=\n=UOjq\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1936b498035796619253be1a2b8d29ab49466a31",
          "sha": "1936b498035796619253be1a2b8d29ab49466a31",
          "html_url": "https://github.com/bitcoin/bips/commit/1936b498035796619253be1a2b8d29ab49466a31"
        }
      ],
      "message": "Fix type and description",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-26T11:09:26Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-26T11:09:26Z"
      },
      "sha": "bbad8a0a0ca518232c87702892e2c7c83df44676"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM4N2FmMGY4MTllODVjNTIxMjA0OGIzY2Y5MjE0ZmY3MGFmNzk4OTE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/387af0f819e85c5212048b3cf9214ff70af79891",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/387af0f819e85c5212048b3cf9214ff70af79891",
      "tree": {
        "sha": "57a16fbedf2de5d0b40ac9b439dbb8a1121b7f98",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/57a16fbedf2de5d0b40ac9b439dbb8a1121b7f98"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 57a16fbedf2de5d0b40ac9b439dbb8a1121b7f98\nparent bbad8a0a0ca518232c87702892e2c7c83df44676\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732620142 +0100\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732620142 +0100\n\nAdd examples to Firstbits methods\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZ0WvbgAKCRAmGqIUEwzn\nq22QAP9+p1JzbPL0s2eMt1ABOs5puq+3U47IP+2+52NtXOGw2QD/Z8+1sre6bnBg\nftCUyn79qdsJxgcPpfAGQEUQjRroCwY=\n=HXuj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bbad8a0a0ca518232c87702892e2c7c83df44676",
          "sha": "bbad8a0a0ca518232c87702892e2c7c83df44676",
          "html_url": "https://github.com/bitcoin/bips/commit/bbad8a0a0ca518232c87702892e2c7c83df44676"
        }
      ],
      "message": "Add examples to Firstbits methods",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-26T11:22:22Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-26T11:22:22Z"
      },
      "sha": "387af0f819e85c5212048b3cf9214ff70af79891"
    },
    {
      "event": "commented",
      "id": 2501615629,
      "node_id": "IC_kwDOAN28mc6VG6AN",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2501615629",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T18:06:53Z",
      "updated_at": "2024-11-26T18:06:53Z",
      "author_association": "NONE",
      "body": "Some information about old commits...\r\n\r\n**Oldest commits with same server code:**\r\n- https://github.com/spesmilo/electrum/commit/f0aae3cc0f587994c86c5bcbc083829c524d3b62 (Client)\r\n- https://github.com/spesmilo/electrum-server/commit/4572ac0fa026b07665998d50991b6b61be6a07e5 (Server)\r\n\r\n**Server code removed from client repository:**\r\n- https://github.com/spesmilo/electrum/commit/2e5d015917be5989f82d94b9c18c68b40f443da3 (Client)\r\n\r\n**First appearance of Stratum in Electrum source code:**\r\n- https://github.com/spesmilo/electrum/commit/0fc0bdd667559da3b6bb6b58018de56ecbdfa94f (Client)\r\n- https://github.com/spesmilo/electrum-server/commit/21b133f4706a55f317e322a6b2e593b5a0750707 (Server)\r\n\r\nAll commits where protocol versions changed:\r\n- https://github.com/spesmilo/electrum-server/commit/f5e9e2ef81050ba5d0e0798f86be2be84054a862 (Server; `0.1`)\r\n- https://github.com/spesmilo/electrum-server/commit/cf7aed705dbfeaa8b9e56a0649fd70f48d80d33f (Server; `0.2`)\r\n- https://github.com/spesmilo/electrum-server/commit/6a80f4b4a5315ed9d00f2b3117a5e0d447465cda (Server; `0.3`)\r\n- https://github.com/spesmilo/electrum-server/commit/d600c3be009f131a35a622bc83e1ca9d40c241d7 (Server; `0.4`)\r\n- https://github.com/spesmilo/electrum/commit/8ed812830f8880d02ffb521ff8835bff71d2fa24 (Client; `0.5`)\r\n- https://github.com/spesmilo/electrum-server/commit/c293b5a5d4e71f555981ba934ec53dedcce36fea (Server; `0.5`)\r\n- https://github.com/spesmilo/electrum/commit/8ec6a60daf7b0f3019677f27a20f59d311730c0f (Client; `0.6`)\r\n- https://github.com/spesmilo/electrum-server/commit/1abbd5675d40b85eb339c90c4082cdc22e620a86 (Server; `0.6`)\r\n- https://github.com/spesmilo/electrum-server/commit/24aa687775d6eac180088f72b2e8226cb572d7ef (Server; `0.7`)\r\n- https://github.com/spesmilo/electrum-server/commit/a71f02d33aceec0b70bb365c7d89663a55c47f0a (Server; `0.8`)\r\n- https://github.com/spesmilo/electrum-server/commit/fdf26dcd063af1cc68adcaf278c7d0180296d6c5 (Server; `0.9`)\r\n- https://github.com/spesmilo/electrum/commit/118052d81597eff3eb636d242eacdd0437dabdd6 (Client; `0.10`)\r\n- https://github.com/spesmilo/electrum-server/commit/1774ec1496ac8545b4d1b6b88f53d20d966afa29 (Server; `0.10`)\r\n- https://github.com/spesmilo/electrum/commit/68873d92f9973b3d6befe9d2b69f67be71217501 (Client; `0.11`)\r\n- https://github.com/spesmilo/electrum-server/commit/2baa164fc842bf39309c78c15bf89ef2f90a7b95 (Server; `1.0`)\r\n- https://github.com/spesmilo/electrum/commit/7f9b473a988fc8461750f4f8f1622c429d11e0df (Client; `1.1`)\r\n- https://github.com/spesmilo/electrum/commit/c3f3843cc3f31862f7e3bea1126cb42150c405c4 (Client; `1.2`)\r\n- https://github.com/spesmilo/electrum/commit/8f36c9167de1bfd2505ef5516cd43661962b9c27 (Client; `1.4`)",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2501615629",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "commented",
      "id": 2501656859,
      "node_id": "IC_kwDOAN28mc6VHEEb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2501656859",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T18:30:28Z",
      "updated_at": "2024-11-26T18:30:28Z",
      "author_association": "NONE",
      "body": "And for the ElectrumX server...\r\n\r\n**Protocol Minimum:**\r\n- https://github.com/spesmilo/electrumx/commit/151da40d5b6be87bb95b7c8641262138f0333163 (ElectrumX; `1.0`)\r\n- https://github.com/spesmilo/electrumx/commit/135ab68f7419b36d4d565eb47c254ac3240831bd (ElectrumX; `0.10`)\r\n- https://github.com/spesmilo/electrumx/commit/09783aeacc3bae679fa599aae14d9bba23260d63 (ElectrumX; `0.9`)\r\n- https://github.com/spesmilo/electrumx/commit/fec2ee1d8f2590a2ef5c970326e378415b4f6d6e (ElectrumX; `1.0`)\r\n- https://github.com/spesmilo/electrumx/commit/7d9ffbbed001e512222b57f2161bb087b6b7e86c (ElectrumX; `1.1`)\r\n- https://github.com/spesmilo/electrumx/commit/98ca2adc5e38c73738e2ff6a2838fced130729d8 (ElectrumX; `1.2`)\r\n- https://github.com/spesmilo/electrumx/commit/9bc102f34a2811a2702995e3b3181568d3e53ff2 (ElectrumX; `1.4`)\r\n- https://github.com/spesmilo/electrumx/commit/e3e915323c77cc22ea565993a3b8aeea85c84b31 (ElectrumX; `1.2`)\r\n- https://github.com/spesmilo/electrumx/commit/f89cea536c475267ddf869eed9b25fb300414b54 (ElectrumX; `1.4`)\r\n\r\n**Protocol Maximum:**\r\n- https://github.com/spesmilo/electrumx/commit/151da40d5b6be87bb95b7c8641262138f0333163 (ElectrumX; `1.0`)\r\n- https://github.com/spesmilo/electrumx/commit/135ab68f7419b36d4d565eb47c254ac3240831bd (ElectrumX; `1.1`)\r\n- https://github.com/spesmilo/electrumx/commit/2d7403f2efed7e8f33c5cb93e2cd9144415cbb9f (ElectrumX; `1.2`)\r\n- https://github.com/spesmilo/electrumx/commit/c35ac6d9bb1df107e09ee5acf25ef50a96bea8cd (ElectrumX; `1.3`)\r\n- https://github.com/spesmilo/electrumx/commit/46d8e0c6086f87787fbc35eb329d10ba74e7cc58 (ElectrumX; `1.4`)\r\n- https://github.com/spesmilo/electrumx/commit/936251aa960eac928729ba78b5ac11e64a958948 (ElectrumX; `1.4.1`)\r\n- https://github.com/spesmilo/electrumx/commit/39817eec7e05c701c0760aeae37aa4dd568e005d (ElectrumX; `1.4.2`)\r\n- https://github.com/spesmilo/electrumx/commit/714058794a69ec56563009509a1d6df54ff482f2 (ElectrumX; `1.4.3`)",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2501656859",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "commented",
      "id": 2501783414,
      "node_id": "IC_kwDOAN28mc6VHi92",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2501783414",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T19:44:07Z",
      "updated_at": "2024-11-26T19:53:21Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hey @ben221199, this proposal has been emitting a lot of notifications recently without actually requiring editor input. I’m going to temporarily unsubscribe from this pull request while the document is taking shape. Please feel free to mention my handle when it is ready for an editor review. In the future, please consider opening early drafts of proposals against a personal fork of the BIPs repository instead of against the main BIPs repository.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2501783414",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 15441404259,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAOYYSFj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441404259",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T19:44:08Z"
    },
    {
      "event": "subscribed",
      "id": 15441404269,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAOYYSFt",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441404269",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T19:44:08Z"
    },
    {
      "event": "commented",
      "id": 2501793691,
      "node_id": "IC_kwDOAN28mc6VHleb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2501793691",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T19:50:18Z",
      "updated_at": "2024-11-26T19:50:18Z",
      "author_association": "NONE",
      "body": "Hey, @murchandamus. Thank you for letting me know. I will mention you when the draft is done.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2501793691",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 15441461148,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAOYYf-c",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441461148",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T19:50:19Z"
    },
    {
      "event": "subscribed",
      "id": 15441461164,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAOYYf-s",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15441461164",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-11-26T19:50:19Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRiNWVkNzUzMGM1MjRkNDI0N2EyNDc3Y2M0NjE4MDQ1NjJmNTk0MzA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/db5ed7530c524d4247a2477cc461804562f59430",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/db5ed7530c524d4247a2477cc461804562f59430",
      "tree": {
        "sha": "09e3b00672505ec0612c4dc75e1b4b8b2e63fcb0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/09e3b00672505ec0612c4dc75e1b4b8b2e63fcb0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 09e3b00672505ec0612c4dc75e1b4b8b2e63fcb0\nparent 387af0f819e85c5212048b3cf9214ff70af79891\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732741750 +0100\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732741750 +0100\n\nImprove documentation of server commands\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZ0eKdgAKCRAmGqIUEwzn\nqyYDAQCrchd91PAnk/xRhPbzGWa1SIzrcPmLlEesnkvNUxSlEAEAtwQzVhQHR2eW\nWs5gHRwuG4hLDdMy6p6gfNKgsJsRUws=\n=kqmj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/387af0f819e85c5212048b3cf9214ff70af79891",
          "sha": "387af0f819e85c5212048b3cf9214ff70af79891",
          "html_url": "https://github.com/bitcoin/bips/commit/387af0f819e85c5212048b3cf9214ff70af79891"
        }
      ],
      "message": "Improve documentation of server commands",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-27T21:09:10Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-27T21:09:10Z"
      },
      "sha": "db5ed7530c524d4247a2477cc461804562f59430"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk5NjcyNGZlNzliMThkNGM2ZjJhYWViMDk0MjYwZjNlMDI4YWI0MWM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "tree": {
        "sha": "ea3eba74b47fb8a4d8c8b30adeb5666dada19088",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ea3eba74b47fb8a4d8c8b30adeb5666dada19088"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ea3eba74b47fb8a4d8c8b30adeb5666dada19088\nparent db5ed7530c524d4247a2477cc461804562f59430\nauthor Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732743062 +0100\ncommitter Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com> 1732743062 +0100\n\nAdd remaining Stratum services\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS2hNHs5OqEOaflfXkmGqIUEwznqwUCZ0ePlgAKCRAmGqIUEwzn\nq78qAQCH20sYWWPjC6VGJfTtZULAp9CKFA1eC9ysLoX/bubHPQEArWYwzX3kLXRR\nr2tw3eEr41Fb3UDAa0bNb8xM+4pUmw8=\n=/M3S\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/db5ed7530c524d4247a2477cc461804562f59430",
          "sha": "db5ed7530c524d4247a2477cc461804562f59430",
          "html_url": "https://github.com/bitcoin/bips/commit/db5ed7530c524d4247a2477cc461804562f59430"
        }
      ],
      "message": "Add remaining Stratum services",
      "committer": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-27T21:31:02Z"
      },
      "author": {
        "name": "Ben van Hartingsveldt",
        "email": "ben.vanhartingsveldt@yocto.com",
        "date": "2024-11-27T21:31:02Z"
      },
      "sha": "996724fe79b18d4c6f2aaeb094260f3e028ab41c"
    },
    {
      "event": "commented",
      "id": 2743675985,
      "node_id": "IC_kwDOAN28mc6jiSxR",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2743675985",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T15:12:31Z",
      "updated_at": "2025-03-21T15:12:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @ben221199, how is this proposal going? Is there something we can help with?",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2743675985",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 16930439687,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAPxIgIH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16930439687",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T15:12:33Z"
    },
    {
      "event": "subscribed",
      "id": 16930439707,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAPxIgIb",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16930439707",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T15:12:33Z"
    },
    {
      "event": "commented",
      "id": 2744442596,
      "node_id": "IC_kwDOAN28mc6jlN7k",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2744442596",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T21:03:21Z",
      "updated_at": "2025-03-21T21:03:21Z",
      "author_association": "NONE",
      "body": "Hi @murchandamus, thank you for your message. I had to focus on some other things for my own company the last months, but I'm planning to resume working on this in Q2.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-2744442596",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 16935528176,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAAPxb6bw",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16935528176",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T21:03:22Z"
    },
    {
      "event": "subscribed",
      "id": 16935528190,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAAPxb6b-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16935528190",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T21:03:23Z"
    },
    {
      "event": "commented",
      "id": 3110900504,
      "node_id": "IC_kwDOAN28mc65bJMY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3110900504",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T22:56:03Z",
      "updated_at": "2025-07-23T22:56:03Z",
      "author_association": "MEMBER",
      "body": "> I'm planning to resume working on this in Q2.\r\n\r\nHi @ben221199, are you still working on this BIP draft?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-3110900504",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 18783962316,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAARfnITM",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18783962316",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T22:56:05Z"
    },
    {
      "event": "subscribed",
      "id": 18783962330,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAARfnITa",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18783962330",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-23T22:56:05Z"
    },
    {
      "event": "commented",
      "id": 3112666642,
      "node_id": "IC_kwDOAN28mc65h4YS",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3112666642",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-24T09:06:47Z",
      "updated_at": "2025-07-24T09:06:47Z",
      "author_association": "NONE",
      "body": "Hi @jonatack,\r\n\r\nYes, but I got delayed by some things. With the documentation I wrote for LBRY lately, I think I can pick up this again too. Maybe I start right away.",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-3112666642",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    },
    {
      "event": "mentioned",
      "id": 18791019540,
      "node_id": "MEE_lADOAN28mc6BlzY5zwAAAARgCDQU",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18791019540",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-24T09:06:49Z"
    },
    {
      "event": "subscribed",
      "id": 18791019589,
      "node_id": "SE_lADOAN28mc6BlzY5zwAAAARgCDRF",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18791019589",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-24T09:06:49Z"
    },
    {
      "event": "unsubscribed",
      "id": 18791061928,
      "node_id": "UE_lADOAN28mc6BlzY5zwAAAARgCNmo",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/18791061928",
      "actor": {
        "login": "chmod735",
        "id": 150906340,
        "node_id": "U_kgDOCP6l5A",
        "avatar_url": "https://avatars.githubusercontent.com/u/150906340?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/chmod735",
        "html_url": "https://github.com/chmod735",
        "followers_url": "https://api.github.com/users/chmod735/followers",
        "following_url": "https://api.github.com/users/chmod735/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/chmod735/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/chmod735/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/chmod735/subscriptions",
        "organizations_url": "https://api.github.com/users/chmod735/orgs",
        "repos_url": "https://api.github.com/users/chmod735/repos",
        "events_url": "https://api.github.com/users/chmod735/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/chmod735/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-24T09:09:14Z"
    },
    {
      "event": "commented",
      "id": 3112780547,
      "node_id": "IC_kwDOAN28mc65iUMD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/3112780547",
      "actor": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-07-24T09:41:31Z",
      "updated_at": "2025-07-24T09:41:31Z",
      "author_association": "NONE",
      "body": "Okay, I did read the whole document. I think I'm done when the following things are finished:\r\n- [ ] Service `server`\r\n- [ ] Service `server.peers`\r\n- [ ] Service `blockchain`\r\n- [ ] Service `blockchain.address`\r\n- [ ] Service `blockchain.block`\r\n- [ ] Service `blockchain.headers`\r\n- [ ] Service `blockchain.numblocks`\r\n- [ ] Service `blockchain.transaction`\r\n- [ ] Service `blockchain.utxo`\r\n- [ ] Explaination of signed messages",
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1557#issuecomment-3112780547",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1557"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591396841",
      "pull_request_review_id": 2041409131,
      "id": 1591396841,
      "node_id": "PRRC_kwDOAN28mc5e2snp",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 27,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\r\n```",
      "created_at": "2024-05-06T18:25:41Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591396841",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591396841"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591397759",
      "pull_request_review_id": 2041409131,
      "id": 1591397759,
      "node_id": "PRRC_kwDOAN28mc5e2s1_",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 31,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\r\n```",
      "created_at": "2024-05-06T18:26:27Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591397759",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591397759"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 31,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591398821",
      "pull_request_review_id": 2041409131,
      "id": 1591398821,
      "node_id": "PRRC_kwDOAN28mc5e2tGl",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nLater in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\r\n```",
      "created_at": "2024-05-06T18:27:30Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591398821",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591398821"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591403769",
      "pull_request_review_id": 2041409131,
      "id": 1591403769,
      "node_id": "PRRC_kwDOAN28mc5e2uT5",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 37,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nStratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. The rules of each version apply accordingly.\r\n```\r\n\r\nor \r\n\r\n```suggestion\r\nStratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\r\n```",
      "created_at": "2024-05-06T18:31:59Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591403769",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591403769"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 37,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591405891",
      "pull_request_review_id": 2041409131,
      "id": 1591405891,
      "node_id": "PRRC_kwDOAN28mc5e2u1D",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 39,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nAdditionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the value <code>blockchain.block.subscribe</code>.\r\n```",
      "created_at": "2024-05-06T18:34:05Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591405891",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591405891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591407393",
      "pull_request_review_id": 2041409131,
      "id": 1591407393,
      "node_id": "PRRC_kwDOAN28mc5e2vMh",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 41,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\r\n```",
      "created_at": "2024-05-06T18:35:38Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591407393",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591407393"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591420753",
      "pull_request_review_id": 2041409131,
      "id": 1591420753,
      "node_id": "PRRC_kwDOAN28mc5e2ydR",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 47,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "double \"only\" in `only use the server only`\r\n\r\n```suggestion\r\n''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\r\n```",
      "created_at": "2024-05-06T18:48:54Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591420753",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591420753"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591421561",
      "pull_request_review_id": 2041409131,
      "id": 1591421561,
      "node_id": "PRRC_kwDOAN28mc5e2yp5",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 51,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nStratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\r\n```\r\n",
      "created_at": "2024-05-06T18:49:37Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591421561",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591421561"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 51,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591424958",
      "pull_request_review_id": 2041409131,
      "id": 1591424958,
      "node_id": "PRRC_kwDOAN28mc5e2ze-",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 58,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nStratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\r\n```",
      "created_at": "2024-05-06T18:52:38Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591424958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591424958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 58,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591426378",
      "pull_request_review_id": 2041409131,
      "id": 1591426378,
      "node_id": "PRRC_kwDOAN28mc5e2z1K",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 65,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nStratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\r\n```",
      "created_at": "2024-05-06T18:54:03Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591426378",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591426378"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 65,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591428105",
      "pull_request_review_id": 2041409131,
      "id": 1591428105,
      "node_id": "PRRC_kwDOAN28mc5e20QJ",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nA request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\r\n```",
      "created_at": "2024-05-06T18:55:31Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591428105",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591428105"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591430061",
      "pull_request_review_id": 2041409131,
      "id": 1591430061,
      "node_id": "PRRC_kwDOAN28mc5e20ut",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 76,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nServers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\r\n```",
      "created_at": "2024-05-06T18:57:17Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591430061",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591430061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 76,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591431220",
      "pull_request_review_id": 2041409131,
      "id": 1591431220,
      "node_id": "PRRC_kwDOAN28mc5e21A0",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 80,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nWhen polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\r\n```",
      "created_at": "2024-05-06T18:58:30Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591431220",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591431220"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 80,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591432423",
      "pull_request_review_id": 2041409131,
      "id": 1591432423,
      "node_id": "PRRC_kwDOAN28mc5e21Tn",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 82,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIf no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\r\n```",
      "created_at": "2024-05-06T18:59:49Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591432423",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591432423"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591433102",
      "pull_request_review_id": 2041409131,
      "id": 1591433102,
      "node_id": "PRRC_kwDOAN28mc5e21eO",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 86,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nHTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\r\n```",
      "created_at": "2024-05-06T19:00:35Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591433102",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591433102"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 86,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591433891",
      "pull_request_review_id": 2041409131,
      "id": 1591433891,
      "node_id": "PRRC_kwDOAN28mc5e21qj",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 88,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\r\n```",
      "created_at": "2024-05-06T19:01:24Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591433891",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591433891"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 88,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591434735",
      "pull_request_review_id": 2041409131,
      "id": 1591434735,
      "node_id": "PRRC_kwDOAN28mc5e213v",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS. Just the same as normal HTTP, but with SSL/TLS enabled.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 92,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nStratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\r\n```",
      "created_at": "2024-05-06T19:02:15Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591434735",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591434735"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591436408",
      "pull_request_review_id": 2041409131,
      "id": 1591436408,
      "node_id": "PRRC_kwDOAN28mc5e22R4",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS. Just the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send more JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (\\n). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 99,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nStratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\r\n```",
      "created_at": "2024-05-06T19:03:58Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591436408",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591436408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 99,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591437982",
      "pull_request_review_id": 2041409131,
      "id": 1591437982,
      "node_id": "PRRC_kwDOAN28mc5e22qe",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS. Just the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send more JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (\\n). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS. Just the same as normal WebSocket, but with SSL/TLS enabled.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 120,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nStratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\r\n```",
      "created_at": "2024-05-06T19:05:27Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591437982",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591437982"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591439761",
      "pull_request_review_id": 2041409131,
      "id": 1591439761,
      "node_id": "PRRC_kwDOAN28mc5e23GR",
      "diff_hunk": "@@ -0,0 +1,235 @@\n+<pre>\n+  BIP: 40\n+  Layer: Applications\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server does synchronize and index all blocks for us.\n+\n+==History==\n+\n+Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language independent alternative for the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers which Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum also for mining pools: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed. Rules of that version apply accordingly.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name in the following form: <code><service>.<method></code>, where <code><service></code> is allowed to have dots and <code><method></code> isn't. For example, the the value <code>blockchain.block.subscribe</code>.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, also named parameters are allowed. In that case, the parameter names that are documented should be used. If not, the method can fail. It is maybe also possible that a specific method (or server) only does support <code>params</code> being an array, because it doesn't know how to handle the named ones, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server only for coins you really need. Also, other ports could possibly be used and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is send on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS. Just the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (\\n). It is possible to send more messages in one HTTP request or response.\n+\n+It could be possible that a request or response also has a <code>Content-MD5</code> header, so it is possible for the receiver to detect any modifications to the content. It is up to clients and servers how to handle upon a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header, that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client just wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Else, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests in with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response is of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS. Just the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send more JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (\\n). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS. Just the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Commands==\n+\n+===Service: Blockchain Address===\n+\n+* Service name: <code>blockchain.address</code>\n+\n+====Method: Get History====\n+\n+* Method name: <code>get_history</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>blockchain.address.get_history</code>\n+|-\n+! Param [0]\n+| <code>string</code>\n+| <code>1NS17iag9jJgTHD1VXjvLCEnZuQ3rJDE9L</code>\n+| The address to get the history of.\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Result\n+| <code>array</code>\n+|\n+| The history of the a blockchain address.",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "ec52ae132126fe6ba8b33d94cf3f835dd1964084",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"the a\" -> one of these seems redundant\r\n\r\n```suggestion\r\n| The history of the blockchain address.\r\n```",
      "created_at": "2024-05-06T19:07:17Z",
      "updated_at": "2024-05-06T19:08:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1591439761",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591439761"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608709521",
      "pull_request_review_id": 2069244795,
      "id": 1608709521,
      "node_id": "PRRC_kwDOAN28mc5f4vWR",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.",
      "path": "bip-0040.mediawiki",
      "position": 165,
      "original_position": 157,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.\r\n```",
      "created_at": "2024-05-21T17:42:50Z",
      "updated_at": "2024-05-21T18:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608709521",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608709521"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608710562",
      "pull_request_review_id": 2069244795,
      "id": 1608710562,
      "node_id": "PRRC_kwDOAN28mc5f4vmi",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.\n+\n+This document serves as the specification for the HTTP fields \"Stratum-Session-ID\", \"Stratum-Session-Timeout\" and \"Stratum-Callback-URL\".\n+\n+===Media Type===\n+\n+IANA maintains the registry of Media Types [https://www.rfc-editor.org/info/bcp13 BCP13] at http://www.iana.org/assignments/media-types.",
      "path": "bip-0040.mediawiki",
      "position": 171,
      "original_position": 163,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe IANA maintains the registry of Media Types [https://www.rfc-editor.org/info/bcp13 BCP13] at http://www.iana.org/assignments/media-types.\r\n```",
      "created_at": "2024-05-21T17:43:50Z",
      "updated_at": "2024-05-21T18:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608710562",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608710562"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608711032",
      "pull_request_review_id": 2069244795,
      "id": 1608711032,
      "node_id": "PRRC_kwDOAN28mc5f4vt4",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.\n+\n+This document serves as the specification for the HTTP fields \"Stratum-Session-ID\", \"Stratum-Session-Timeout\" and \"Stratum-Callback-URL\".\n+\n+===Media Type===\n+\n+IANA maintains the registry of Media Types [https://www.rfc-editor.org/info/bcp13 BCP13] at http://www.iana.org/assignments/media-types.\n+\n+This document serves as the specification for the media type \"application/stratum\". It has been registered with IANA.\n+\n+===WebSocket Subprotocol Name===\n+\n+IANA maintains the registry of WebSocket Subprotocol Names at https://www.iana.org/assignments/websocket.",
      "path": "bip-0040.mediawiki",
      "position": 177,
      "original_position": 169,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe IANA maintains the registry of WebSocket Subprotocol Names at https://www.iana.org/assignments/websocket.\r\n```",
      "created_at": "2024-05-21T17:44:18Z",
      "updated_at": "2024-05-21T18:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608711032",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608711032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608711338",
      "pull_request_review_id": 2069244795,
      "id": 1608711338,
      "node_id": "PRRC_kwDOAN28mc5f4vyq",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.\n+\n+This document serves as the specification for the HTTP fields \"Stratum-Session-ID\", \"Stratum-Session-Timeout\" and \"Stratum-Callback-URL\".\n+\n+===Media Type===\n+\n+IANA maintains the registry of Media Types [https://www.rfc-editor.org/info/bcp13 BCP13] at http://www.iana.org/assignments/media-types.\n+\n+This document serves as the specification for the media type \"application/stratum\". It has been registered with IANA.",
      "path": "bip-0040.mediawiki",
      "position": 173,
      "original_position": 165,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThis document serves as the specification for the media type \"application/stratum\". It has been registered with the IANA.\r\n```",
      "created_at": "2024-05-21T17:44:36Z",
      "updated_at": "2024-05-21T18:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608711338",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608711338"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608735746",
      "pull_request_review_id": 2069244795,
      "id": 1608735746,
      "node_id": "PRRC_kwDOAN28mc5f41wC",
      "diff_hunk": "@@ -0,0 +1,146 @@\n+=Service: Example=\n+\n+This service is an example service. It doesn't have any other purpose than testing.\n+\n+* Service type: <code>example</code>\n+* Service vendor: <code>Stratum</code>\n+\n+==Method: Hello World==\n+\n+Ask the server to send a \"Hello world!\" back.\n+\n+* Method name: <code>hello_world</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>example.hello_world</code>\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Result\n+| <code>string</code>\n+| <code>Hello world!</code>\n+| The \"Hello world\" text.\n+|}\n+\n+==Method: Ping==\n+\n+Ping the server and get a pong back with the same text.\n+\n+* Method name: <code>ping</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>example.ping</code>\n+|-\n+! Params [0] (<code>payload</code>)\n+| <code>mixed</code>\n+| <code>12345678</code>\n+| The ping text.\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Result\n+| <code>string</code>\n+| <code>Hello world!</code>\n+| The \"Hello world\" text.\n+|}\n+\n+==Method: Synchronous==\n+\n+Ask the server to run a synchronous command for a specific amount of seconds.\n+\n+* Method name: <code>synchronous</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>example.synchronous</code>\n+|-\n+! Params [0] (<code>how_long</code>)\n+| <code>int</code> (or a <code>string</code> or a <code>float</code> that can be casted to an <code>int</code>)\n+| <code>123</code>\n+| The time to run.\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Result\n+| <code>string</code>\n+| <code>Request finished in 123 seconds</code>\n+| A string that tells that the command has finished running.\n+|}\n+\n+==Method: Throw Exception==\n+\n+Ask the server throw exception.",
      "path": "bip-0040/service-example.mediawiki",
      "position": null,
      "original_position": 98,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nAsk the server to throw an exception.\r\n```",
      "created_at": "2024-05-21T18:06:51Z",
      "updated_at": "2024-05-21T18:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608735746",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608735746"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608736155",
      "pull_request_review_id": 2069244795,
      "id": 1608736155,
      "node_id": "PRRC_kwDOAN28mc5f412b",
      "diff_hunk": "@@ -0,0 +1,146 @@\n+=Service: Example=\n+\n+This service is an example service. It doesn't have any other purpose than testing.\n+\n+* Service type: <code>example</code>\n+* Service vendor: <code>Stratum</code>\n+\n+==Method: Hello World==\n+\n+Ask the server to send a \"Hello world!\" back.\n+\n+* Method name: <code>hello_world</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>example.hello_world</code>\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Result\n+| <code>string</code>\n+| <code>Hello world!</code>\n+| The \"Hello world\" text.\n+|}\n+\n+==Method: Ping==\n+\n+Ping the server and get a pong back with the same text.\n+\n+* Method name: <code>ping</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>example.ping</code>\n+|-\n+! Params [0] (<code>payload</code>)\n+| <code>mixed</code>\n+| <code>12345678</code>\n+| The ping text.\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Result\n+| <code>string</code>\n+| <code>Hello world!</code>\n+| The \"Hello world\" text.\n+|}\n+\n+==Method: Synchronous==\n+\n+Ask the server to run a synchronous command for a specific amount of seconds.\n+\n+* Method name: <code>synchronous</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>example.synchronous</code>\n+|-\n+! Params [0] (<code>how_long</code>)\n+| <code>int</code> (or a <code>string</code> or a <code>float</code> that can be casted to an <code>int</code>)\n+| <code>123</code>\n+| The time to run.\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Result\n+| <code>string</code>\n+| <code>Request finished in 123 seconds</code>\n+| A string that tells that the command has finished running.\n+|}\n+\n+==Method: Throw Exception==\n+\n+Ask the server throw exception.\n+\n+* Method name: <code>throw_exception</code>\n+\n+{|\n+! <ins>[Request]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Method\n+| colspan=\"3\" | <code>example.throw_exception</code>\n+|-\n+! <ins>[Response]</ins>\n+! Type\n+! Example\n+! Description\n+|-\n+! Error\n+| <code>object</code>\n+| <code>{\"code\":-1,\"data\":\"Some traceback\",\"message\":\"Some error\"}</code>\n+| The error object.\n+|}\n+\n+==Method: Throw Signed Exception==\n+\n+Ask the server throw exception in a signed JSON-RPC object.",
      "path": "bip-0040/service-example.mediawiki",
      "position": null,
      "original_position": 124,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nAsk the server to throw an exception in a signed JSON-RPC object.\r\n```",
      "created_at": "2024-05-21T18:07:15Z",
      "updated_at": "2024-05-21T18:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608736155",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608736155"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608740295",
      "pull_request_review_id": 2069244795,
      "id": 1608740295,
      "node_id": "PRRC_kwDOAN28mc5f423H",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]",
      "path": "bip-0040.mediawiki",
      "position": null,
      "original_position": 141,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This seems to be incorrect.\r\n\r\n```suggestion\r\n* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Transaction]]\r\n```",
      "created_at": "2024-05-21T18:11:01Z",
      "updated_at": "2024-05-21T18:19:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608740295",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608740295"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 141,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608741424",
      "pull_request_review_id": 2069244795,
      "id": 1608741424,
      "node_id": "PRRC_kwDOAN28mc5f43Iw",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]",
      "path": "bip-0040.mediawiki",
      "position": 155,
      "original_position": 147,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This entry seems incorrect (and is identical to the next one).",
      "created_at": "2024-05-21T18:12:05Z",
      "updated_at": "2024-05-21T18:18:48Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608741424",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608741424"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 155,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608837474",
      "pull_request_review_id": 2069439985,
      "id": 1608837474,
      "node_id": "PRRC_kwDOAN28mc5f5Oli",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.",
      "path": "bip-0040.mediawiki",
      "position": 165,
      "original_position": 157,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": 1608709521,
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see many RFCs that just use `IANA` instead of `The IANA`. I don't see how this suggestion is better.",
      "created_at": "2024-05-21T19:10:16Z",
      "updated_at": "2024-05-21T19:10:16Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608837474",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608837474"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608837619",
      "pull_request_review_id": 2069440251,
      "id": 1608837619,
      "node_id": "PRRC_kwDOAN28mc5f5Onz",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.\n+\n+This document serves as the specification for the HTTP fields \"Stratum-Session-ID\", \"Stratum-Session-Timeout\" and \"Stratum-Callback-URL\".\n+\n+===Media Type===\n+\n+IANA maintains the registry of Media Types [https://www.rfc-editor.org/info/bcp13 BCP13] at http://www.iana.org/assignments/media-types.",
      "path": "bip-0040.mediawiki",
      "position": 171,
      "original_position": 163,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": 1608710562,
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see many RFCs that just use IANA instead of The IANA. I don't see how this suggestion is better.",
      "created_at": "2024-05-21T19:10:26Z",
      "updated_at": "2024-05-21T19:10:26Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608837619",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608837619"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 171,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608837686",
      "pull_request_review_id": 2069440349,
      "id": 1608837686,
      "node_id": "PRRC_kwDOAN28mc5f5Oo2",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.\n+\n+This document serves as the specification for the HTTP fields \"Stratum-Session-ID\", \"Stratum-Session-Timeout\" and \"Stratum-Callback-URL\".\n+\n+===Media Type===\n+\n+IANA maintains the registry of Media Types [https://www.rfc-editor.org/info/bcp13 BCP13] at http://www.iana.org/assignments/media-types.\n+\n+This document serves as the specification for the media type \"application/stratum\". It has been registered with IANA.\n+\n+===WebSocket Subprotocol Name===\n+\n+IANA maintains the registry of WebSocket Subprotocol Names at https://www.iana.org/assignments/websocket.",
      "path": "bip-0040.mediawiki",
      "position": 177,
      "original_position": 169,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": 1608711032,
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see many RFCs that just use IANA instead of The IANA. I don't see how this suggestion is better.",
      "created_at": "2024-05-21T19:10:30Z",
      "updated_at": "2024-05-21T19:10:30Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608837686",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608837686"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 177,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608837780",
      "pull_request_review_id": 2069440508,
      "id": 1608837780,
      "node_id": "PRRC_kwDOAN28mc5f5OqU",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.\n+\n+This document serves as the specification for the HTTP fields \"Stratum-Session-ID\", \"Stratum-Session-Timeout\" and \"Stratum-Callback-URL\".\n+\n+===Media Type===\n+\n+IANA maintains the registry of Media Types [https://www.rfc-editor.org/info/bcp13 BCP13] at http://www.iana.org/assignments/media-types.\n+\n+This document serves as the specification for the media type \"application/stratum\". It has been registered with IANA.",
      "path": "bip-0040.mediawiki",
      "position": 173,
      "original_position": 165,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": 1608711338,
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see many RFCs that just use IANA instead of The IANA. I don't see how this suggestion is better.",
      "created_at": "2024-05-21T19:10:36Z",
      "updated_at": "2024-05-21T19:10:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608837780",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608837780"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 173,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608842710",
      "pull_request_review_id": 2069447691,
      "id": 1608842710,
      "node_id": "PRRC_kwDOAN28mc5f5P3W",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]",
      "path": "bip-0040.mediawiki",
      "position": 155,
      "original_position": 147,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": 1608741424,
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is not incorrect. This service is created by two vendors, both `firstbits.com` and `blockchain.info`. They have the same methods, parameters, etc., so they are referencing to the same document, but listed twice.",
      "created_at": "2024-05-21T19:15:09Z",
      "updated_at": "2024-05-21T19:15:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608842710",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608842710"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 155,
      "original_line": 147,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608847204",
      "pull_request_review_id": 2069454717,
      "id": 1608847204,
      "node_id": "PRRC_kwDOAN28mc5f5Q9k",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.",
      "path": "bip-0040.mediawiki",
      "position": 165,
      "original_position": 157,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": 1608709521,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "In English the article prefixes the noun.\r\n\r\nSee how the article `the` prefixes `IANA` on their website at https://www.iana.org/about. For instance, `The global coordination of the DNS Root, IP addressing, and other Internet protocol resources is performed as the Internet Assigned Numbers Authority (IANA) functions.`",
      "created_at": "2024-05-21T19:19:41Z",
      "updated_at": "2024-05-21T19:21:20Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608847204",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608847204"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608856255",
      "pull_request_review_id": 2069468919,
      "id": 1608856255,
      "node_id": "PRRC_kwDOAN28mc5f5TK_",
      "diff_hunk": "@@ -0,0 +1,174 @@\n+<pre>\n+  BIP: 40\n+  Layer: API/RPC\n+  Title: Stratum wire protocol\n+  Author: Marek Palatinus <slush@satoshilabs.com>\n+          Ben van Hartingsveldt <ben.vanhartingsveldt@yocto.com>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0040\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2024-03-07\n+  License: PD\n+</pre>\n+\n+==Abstract==\n+\n+This document describes the Stratum wire protocol used in clients such as Electrum, and which also laid the foundation for the Stratum mining protocol, used in many Bitcoin pools.\n+\n+The specification is intended to set a standard for connections between clients and servers in which the client is able to request data without having to download the full blockchain.\n+\n+The specification consists of three parts. In the first part, the data format is defined. In the second part, the possible transport protocols (including encapsulation) are described. In the third part, the available methods are documented.\n+\n+==Motivation==\n+\n+Many clients want to give users access to the Bitcoin ecosystem. However, for specific reasons not every user is able to download the full blockchain to their machine.\n+\n+The Stratum wire protocol defines a way to access the blockchain without having it downloaded. For example, a client can request both the genesis block and the latest block with the same latency, because the server synchronizes and indexes all the blocks for us.\n+\n+==History==\n+\n+The Stratum wire protocol was introduced by Marek Palatinus in late 2011 and early 2012. It was a language-independent alternative to the Python-based protocol in early versions of Electrum, created by Thomas Voegtlin. The Stratum wire protocol made it possible to create compatible servers that Electrum could connect to, but it also made it possible to write alternative clients.\n+\n+Later in 2012, Marek Palatinus introduced Stratum for mining pools as well: The Stratum mining protocol, as defined in [[bip-0041.mediawiki|BIP 41]].\n+\n+==Specification: Data Format==\n+\n+Stratum leverages [https://www.jsonrpc.org/ JSON-RPC]. Both versions 1.0 and 2.0 are allowed, according to their respective rules.\n+\n+Additionally, it is a convention to give all Stratum methods in the <code>method</code> property a name that meets the following EBNF notation: <code>method ::= serviceType (\"[\" serviceVendor \"]\")? \".\" methodName</code>, where <code>serviceType</code> and <code>serviceVendor</code> are allowed to have dots and <code>methodName</code> isn't. For example, the values <code>blockchain.block.subscribe</code> and <code>blockchain.block[Electrum].subscribe</code>.\n+\n+The service vendor is optional. However, multiple vendors can define the same service type, so the service vendor is introduced to distinguish them. If the service vendor is absent, the default service type is executed. It is up to the server implementer which service vendor is the default.\n+\n+''Note: In JSON-RPC 1.0, the <code>param</code> property is an array, so everything should be passed in the right order. In JSON-RPC 2.0, named parameters are also allowed. In that case, only the parameter names that are documented should be used; otherwise, the method can fail. It is maybe also possible that a specific method (or server) only supports <code>params</code> as an array, because it doesn't know how to handle named params, even if it supports JSON-RPC 2.0.''\n+\n+==Specification: Transport Protocols==\n+\n+It is possible to send JSON-RPC messages over different transport protocols, like TCP and HTTP. It is also possible to protect these protocols with SSL/TLS.\n+\n+''Note: Because HTTP and WebSockets support virtual hosting (<code>Host</code> header or <code>:authority</code> pseudo-header), it is possible to create a server on a single IP address that supports multiple coins by checking the domain name. The same is the case for the transport protocols with SSL/TLS when SNI is used. On plain TCP, virtual hosting is not possible. A similar experience can be reached by using multiple IP addresses. For IPv6, a network of /96 would be enough to hypothetically support all coins ever listed in SLIP-44. For IPv4, you would need all IPv4 addresses that exist to do the same, even the invalid ones, so a suggestion is to only use the server for coins you really need. Also, other ports could possibly be used, and in that case, a /16 IP block with all 65536 TCP ports in use will be enough to support all coins. However, because using non-standard ports is not user-friendly, this is also not recommended.''\n+\n+===TCP===\n+\n+Stratum over a TCP connection. Every JSON-RPC message (including batch messages) is sent on a single line, ending with a line-feed (<code>\\n</code>), so <code>\\r\\n</code> is also allowed. Line-feeds inside the JSON should be encoded as usual. Both client and server can initiate a request on which the other side could respond with a result or an error.\n+\n+* Default port: <code>50001</code>\n+* Letter: <code>t</code>\n+\n+===TCP over SSL/TLS===\n+\n+Stratum over a TCP connection with SSL/TLS: the same as normal TCP, but with SSL/TLS enabled.\n+\n+* Default port: <code>50002</code>\n+* Letter: <code>s</code>\n+\n+===HTTP===\n+\n+Stratum over an HTTP connection. When communicating over HTTP, there 2 possible options: polling and pushing. In both cases, the request and response have a <code>Content-Type</code> header with the value <code>application/stratum</code>. Like in the TCP transport, the messages have to end with a line-feed (<code>\\n</code>). It is possible to send multiple messages in one HTTP request or response.\n+\n+A request or response may contain a <code>Content-MD5</code> header to allow the receiver to detect any modification to the content. It is up to clients and servers how to handle a mismatch. A suggestion for a client would be to retry the command. A suggestion for a server would be to return a 400 error (or return a 200 error with a JSON-RPC error message).\n+\n+* Default port: <code>8081</code>\n+* Letter: <code>h</code>\n+\n+====Session====\n+\n+Because it is not sure if an HTTP connection will stay open, it is highly possible that messages will be sent over multiple connections. To keep track of the same \"session\", a cookie with the name <code>STRATUM_SESSION</code> is used. If a client sends a request with a cookie, the servers knows exactly which session is used and which notifications to send.\n+\n+Servers could send the <code>Stratum-Session-Timeout</code><ref name=\"extended\"/> header to tell the client when a session with the same session id will be seen as a new session by the server. The header contains a number that indicates how many seconds are left. This is different from <code>Expires</code> or <code>Max-Age</code> parameters of the <code>Set-Cookie</code> header that indicate when a cookie (not necessarily a session) should have been expired by the client. For backwards compatibility, a <code>X-Session-Timeout</code> header with the same value should be sent in those requests, too.\n+\n+====HTTP Poll====\n+\n+When polling, an HTTP POST request is sent with <code>application/stratum</code> in the <code>Content-Type</code> header. In the body, there could be one or more messages. If the body is empty, the client only wants to check for notifications.\n+\n+If no error occurred, the server will respond with a 200 status code and with <code>application/stratum</code> in the <code>Content-Type</code> header. If there are one or more notifications or other messages, the body will contain those messages. Otherwise, the body will be empty.\n+\n+====HTTP Push====\n+\n+HTTP Poll is the default mode when connecting with a server over HTTP. To get the session in HTTP Push mode, a client should send a regular HTTP Poll request with an additional <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. This will let the server send notifications using the callback URL without the client needing to send HTTP poll requests with a very small interval. To disable HTTP Push mode, a regular HTTP poll request should be sent with an additional empty <code>Stratum-Callback-URL</code><ref name=\"extended\"/> header. For backwards compatibility, a <code>X-Callback-URL</code> header with the same value should be sent in those requests too.\n+\n+The callback URL will be called when there are notifications. This request is an HTTP POST request with a <code>Content-Type</code> header and a <code>Stratum-Session-ID</code><ref name=\"extended\"/> header. The <code>Stratum-Session-ID</code><ref name=\"extended\"/> contains the same id as the <code>STRATUM_SESSION</code> cookie. This makes it possible to use the callback URL for multiple sessions. The response of the callback URL is expected to be empty, so any response body will likely be ignored. For backwards compatibility, a <code>X-Session-ID</code> header with the same value should be sent in those requests too.\n+\n+===HTTP over SSL/TLS===\n+\n+Stratum over an HTTP connection with SSL/TLS: the same as normal HTTP, but with SSL/TLS enabled.\n+\n+* Default port: <code>8082</code>\n+* Letter: <code>g</code>\n+\n+===WebSocket===\n+\n+Stratum over a WebSocket connection. When using WebSockets, the JSON-RPC messages (including batch messages) are encapsulated in a WebSocket message. It is also possible to send multiple JSON-RPC messages in one WebSocket message. Every JSON-RPC message should end with a line-feed (<code>\\n</code>). Both client and server can initiate a message request on which the other side could respond with a result or an error, like Stratum over TCP.\n+\n+* Default port: <code>8083</code><ref name=\"extended\">This is extended specification information of the Stratum wire protocol to make it more complete. This information will not be found in any code or specification before this BIP.</ref>\n+* Letter: <code>w</code><ref name=\"extended\"/>\n+\n+====Subprotocol<ref name=\"extended\"/>====\n+\n+In a WebSocket upgrade request, it is possible to use the <code>Sec-WebSocket-Protocol</code> header to let the WebSocket server know which subprotocol is desired to send over the connection. For Stratum, the value <code>stratum</code> is registered. The use of this header is optional. If the server supports the use of this subprotocol too, it will let the client know by sending a <code>Sec-WebSocket-Protocol</code> header back. If the server doesn't send a subprotocol back, the connection will continue without using one. Use of this feature is fully backwards compatible.\n+\n+====Example====\n+\n+<pre>\n+  // Open WebSocket with using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083',['stratum']);\n+\n+  // Open WebSocket without using a subprotocol\n+  new WebSocket('ws://stratum.example.com:8083');\n+</pre>\n+\n+===WebSocket over SSL/TLS===\n+\n+Stratum over a WebSocket connection with SSL/TLS: the same as normal WebSocket, but with SSL/TLS enabled.\n+\n+* Default port: <code>8084</code><ref name=\"extended\"/>\n+* Letter: <code>u</code><ref name=\"extended\"/>\n+\n+==Specification: Services==\n+\n+On top of Stratum, some services are defined. They are listed below, grouped by vendor.\n+\n+===Vendor: Stratum===\n+\n+* [[bip-0040/service-discovery.mediawiki|Discovery]]\n+* [[bip-0040/service-example.mediawiki|Example]]\n+* [[bip-0040/service-example.pubsub.mediawiki|Example Publish-Subscribe]]\n+\n+===Vendor: Electrum===\n+\n+* [[bip-0040/service-blockchain.address.mediawiki|Blockchain Address]]\n+* [[bip-0040/service-blockchain.block.mediawiki|Blockchain Block]]\n+* [[bip-0040/service-blockchain.transaction.mediawiki|Blockchain Translation]]\n+* [[bip-0040/service-node.mediawiki|Node]]\n+* [[bip-0040/service-wallet.mediawiki|Wallet]]\n+\n+===Vendor: blockchain.info===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+===Vendor: firstbits.com===\n+\n+* [[bip-0040/service-firstbits.mediawiki|Firstbits]]\n+\n+==IANA Considerations==\n+\n+===HTTP Field===\n+\n+IANA maintains the registry of HTTP Fields at https://www.iana.org/assignments/http-fields.",
      "path": "bip-0040.mediawiki",
      "position": 165,
      "original_position": 157,
      "commit_id": "996724fe79b18d4c6f2aaeb094260f3e028ab41c",
      "original_commit_id": "05e11947bd6b96191750a187450902b008c0e1aa",
      "in_reply_to_id": 1608709521,
      "user": {
        "login": "ben221199",
        "id": 12856904,
        "node_id": "MDQ6VXNlcjEyODU2OTA0",
        "avatar_url": "https://avatars.githubusercontent.com/u/12856904?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ben221199",
        "html_url": "https://github.com/ben221199",
        "followers_url": "https://api.github.com/users/ben221199/followers",
        "following_url": "https://api.github.com/users/ben221199/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ben221199/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ben221199/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ben221199/subscriptions",
        "organizations_url": "https://api.github.com/users/ben221199/orgs",
        "repos_url": "https://api.github.com/users/ben221199/repos",
        "events_url": "https://api.github.com/users/ben221199/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ben221199/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Example: https://www.rfc-editor.org/rfc/rfc6355\r\n\r\n> `IANA has assigned the value 4 for use by the DHCPv6 DUID-UUID type.`",
      "created_at": "2024-05-21T19:28:54Z",
      "updated_at": "2024-05-21T19:28:54Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1557#discussion_r1608856255",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608856255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1557"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 165,
      "original_line": 157,
      "side": "RIGHT"
    }
  ]
}