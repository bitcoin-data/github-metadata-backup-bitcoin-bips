{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/725",
    "id": 214229789,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjE0MjI5Nzg5",
    "html_url": "https://github.com/bitcoin/bips/pull/725",
    "diff_url": "https://github.com/bitcoin/bips/pull/725.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/725.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/725/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/725/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/725/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/2f152773e651e53e21db56dfbf4fb6b90cce715d",
    "number": 725,
    "state": "closed",
    "locked": false,
    "maintainer_can_modify": false,
    "title": "BIP 322: Generic Signed Message Format",
    "user": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Formatted version: https://github.com/kallewoof/bips/blob/bip-generic-signmessage/bip-0322.mediawiki",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2018-09-10T08:08:48Z",
    "updated_at": "2018-12-03T07:11:27Z",
    "closed_at": "2018-09-19T19:19:14Z",
    "mergeable_state": "unknown",
    "merged_at": "2018-09-19T19:19:14Z",
    "merge_commit_sha": "ad3a16baab521bc6005cb0577f44a0677f24fe08",
    "assignees": [],
    "requested_reviewers": [],
    "requested_teams": [],
    "head": {
      "label": "kallewoof:bip-generic-signmessage",
      "ref": "bip-generic-signmessage",
      "sha": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "repo": {
        "id": 86265104,
        "node_id": "MDEwOlJlcG9zaXRvcnk4NjI2NTEwNA==",
        "name": "bips",
        "full_name": "kallewoof/bips",
        "owner": {
          "login": "kallewoof",
          "id": 250224,
          "node_id": "MDQ6VXNlcjI1MDIyNA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/kallewoof",
          "html_url": "https://github.com/kallewoof",
          "followers_url": "https://api.github.com/users/kallewoof/followers",
          "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
          "organizations_url": "https://api.github.com/users/kallewoof/orgs",
          "repos_url": "https://api.github.com/users/kallewoof/repos",
          "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/kallewoof/received_events",
          "type": "User",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/kallewoof/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/kallewoof/bips",
        "archive_url": "https://api.github.com/repos/kallewoof/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/kallewoof/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/kallewoof/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/kallewoof/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/kallewoof/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/kallewoof/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/kallewoof/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/kallewoof/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/kallewoof/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/kallewoof/bips/contributors",
        "deployments_url": "https://api.github.com/repos/kallewoof/bips/deployments",
        "downloads_url": "https://api.github.com/repos/kallewoof/bips/downloads",
        "events_url": "https://api.github.com/repos/kallewoof/bips/events",
        "forks_url": "https://api.github.com/repos/kallewoof/bips/forks",
        "git_commits_url": "https://api.github.com/repos/kallewoof/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/kallewoof/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/kallewoof/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/kallewoof/bips.git",
        "issue_comment_url": "https://api.github.com/repos/kallewoof/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/kallewoof/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/kallewoof/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/kallewoof/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/kallewoof/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/kallewoof/bips/languages",
        "merges_url": "https://api.github.com/repos/kallewoof/bips/merges",
        "milestones_url": "https://api.github.com/repos/kallewoof/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/kallewoof/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/kallewoof/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/kallewoof/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:kallewoof/bips.git",
        "stargazers_url": "https://api.github.com/repos/kallewoof/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/kallewoof/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/kallewoof/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/kallewoof/bips/subscription",
        "tags_url": "https://api.github.com/repos/kallewoof/bips/tags",
        "teams_url": "https://api.github.com/repos/kallewoof/bips/teams",
        "trees_url": "https://api.github.com/repos/kallewoof/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/kallewoof/bips.git",
        "hooks_url": "https://api.github.com/repos/kallewoof/bips/hooks",
        "svn_url": "https://github.com/kallewoof/bips",
        "homepage": "bitcoin.org",
        "language": "Wikitext",
        "forks_count": 2,
        "stargazers_count": 2,
        "watchers_count": 2,
        "size": 13798,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-03-09T02:57:26Z",
        "created_at": "2017-03-26T21:09:34Z",
        "updated_at": "2023-03-11T09:18:52Z"
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "43f59dfbcb2f6736e13d29a2e8b9a8e43a16ef33",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5535,
        "stargazers_count": 8220,
        "watchers_count": 8220,
        "size": 13787,
        "default_branch": "master",
        "open_issues_count": 112,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2023-08-01T12:09:15Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2023-08-01T09:08:43Z"
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
      }
    },
    "author_association": "MEMBER",
    "draft": false,
    "additions": 176,
    "deletions": 0,
    "changed_files": 2,
    "commits": 2,
    "review_comments": 39,
    "comments": 27
  },
  "events": [
    {
      "event": "head_ref_force_pushed",
      "id": 1835351412,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgzNTM1MTQxMg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1835351412",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T08:25:22Z"
    },
    {
      "event": "commented",
      "id": 419991283,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQxOTk5MTI4Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/419991283",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T17:18:49Z",
      "updated_at": "2018-09-10T17:18:49Z",
      "author_association": "MEMBER",
      "body": "Does the scriptPubKey need to be included? That can be derived from the address to check it against.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-419991283",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "reviewed",
      "id": 153910852,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzOTEwODUy",
      "url": null,
      "actor": null,
      "commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "odarboe",
        "id": 1871493,
        "node_id": "MDQ6VXNlcjE4NzE0OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1871493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odarboe",
        "html_url": "https://github.com/odarboe",
        "followers_url": "https://api.github.com/users/odarboe/followers",
        "following_url": "https://api.github.com/users/odarboe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/odarboe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/odarboe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/odarboe/subscriptions",
        "organizations_url": "https://api.github.com/users/odarboe/orgs",
        "repos_url": "https://api.github.com/users/odarboe/repos",
        "events_url": "https://api.github.com/users/odarboe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/odarboe/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#pullrequestreview-153910852",
      "submitted_at": "2018-09-10T18:44:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/725"
    },
    {
      "event": "commented",
      "id": 420019628,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDAxOTYyOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420019628",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T18:47:31Z",
      "updated_at": "2018-09-10T18:47:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "This scheme might not be compatible with `OP_CODESEPARATOR`. While it is rarely used, it changes `scriptCode` and affects the signature validity. So you need to concatenate `scriptCode` with the message in order to fully support `OP_CODESEPARATOR`\r\n\r\nA related problem is since your message does not commit to the public key, it is possible to \"recover\" the public key from any random signature and random message, with no one has the private key. (I think the existing message system has the same problem)\r\n\r\nI also have a related idea: turn an unused opcode (e.g. `0xf0`) to `OP_MESSAGEONLY`.  The code remains invalid in bitcoin txs and requires no change in consensus. In message system, however, it is interpreted as OP_NOP. So this allows people separating their message keys and money-holding keys. With MAST, the use of `OP_MESSAGEONLY` could be totally invisible except to the message validators.\r\n\r\n",
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420019628",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "reviewed",
      "id": 153917263,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzOTE3MjYz",
      "url": null,
      "actor": null,
      "commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#pullrequestreview-153917263",
      "submitted_at": "2018-09-10T19:00:42Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/725"
    },
    {
      "event": "commented",
      "id": 420036475,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDAzNjQ3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420036475",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T19:45:37Z",
      "updated_at": "2018-09-10T19:45:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Why not construct a bitcoin-like transaction instead of something custom? Make a fake tx with the address as the output and a fake tx spending that output with the hash of the message in an OP_RETURN. That way existing hardware signers and other infrastructure could sign messages without changes.",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420036475",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "commented",
      "id": 420040430,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDA0MDQzMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420040430",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T19:58:56Z",
      "updated_at": "2018-09-10T19:58:56Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Why not construct a bitcoin-like transaction instead of something custom? Make a fake tx with the address as the output and a fake tx spending that output with the hash of the message in an OP_RETURN.\r\n\r\nI agree with @maaku , except that the `SignatureHash()` must be slightly modified to make sure that the \"fake tx\" couldn't be valid on the mainnet. For example, replace `nSigHash` with `nSigHash|0xff000000`\r\n\r\n> That way existing hardware signers and other infrastructure could sign messages without changes.\r\n\r\nThis is very dangerous as the hardware wallet couldn't tell if they are signing a message or a tx. Changes are needed, just as minimal as possible.",
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420040430",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1836920052,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNjkyMDA1Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1836920052",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T19:58:56Z"
    },
    {
      "event": "subscribed",
      "id": 1836920053,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4MzY5MjAwNTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1836920053",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T19:58:56Z"
    },
    {
      "event": "reviewed",
      "id": 153942592,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzOTQyNTky",
      "url": null,
      "actor": null,
      "commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#pullrequestreview-153942592",
      "submitted_at": "2018-09-10T20:11:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/725"
    },
    {
      "event": "commented",
      "id": 420070721,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDA3MDcyMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420070721",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T21:40:53Z",
      "updated_at": "2018-09-10T21:40:53Z",
      "author_association": "CONTRIBUTOR",
      "body": "Modifying the signature hash defeats the point of having drop in hardware signer support. Make the setup fake transaction a coinbase or otherwise give it a fake input that cannot conform.",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420070721",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "commented",
      "id": 420076638,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDA3NjYzOA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420076638",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T22:04:01Z",
      "updated_at": "2018-09-10T22:04:01Z",
      "author_association": "MEMBER",
      "body": "The point of hardware signers is to confirm (and perhaps track) spending amounts. A signed message, however, should not present as a spend. So either way, the hardware needs to explicitly support signing messages - and therefore IMO a modified signature hash is fine.",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420076638",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "reviewed",
      "id": 153981774,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzOTgxNzc0",
      "url": null,
      "actor": null,
      "commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#pullrequestreview-153981774",
      "submitted_at": "2018-09-10T22:06:01Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/725"
    },
    {
      "event": "reviewed",
      "id": 153981919,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTUzOTgxOTE5",
      "url": null,
      "actor": null,
      "commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#pullrequestreview-153981919",
      "submitted_at": "2018-09-10T22:06:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/725"
    },
    {
      "event": "renamed",
      "id": 1837172840,
      "node_id": "MDE3OlJlbmFtZWRUaXRsZUV2ZW50MTgzNzE3Mjg0MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837172840",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T22:10:11Z",
      "rename": {
        "from": "BIP: Generic Signed Message Format",
        "to": "BIP 322: Generic Signed Message Format"
      }
    },
    {
      "event": "labeled",
      "id": 1837172977,
      "node_id": "MDEyOkxhYmVsZWRFdmVudDE4MzcxNzI5Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837172977",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-10T22:10:16Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 420135004,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDEzNTAwNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420135004",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:32:19Z",
      "updated_at": "2018-09-11T03:32:19Z",
      "author_association": "MEMBER",
      "body": "@sipa \r\n\r\n> Does the scriptPubKey need to be included? That can be derived from the address to check it against.\r\n\r\nThe idea here is to *only* include the scriptPubKey. The conversion from address to scriptPubKey would be done by the UI/IX. This means a signmessage implementer could let users sign for a specific address (\"message\") or a txid:vout (\"POF\") or something else from which scriptPubKeys can be derived.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420135004",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837524063,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzUyNDA2Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837524063",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:32:19Z"
    },
    {
      "event": "subscribed",
      "id": 1837524065,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc1MjQwNjU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837524065",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:32:19Z"
    },
    {
      "event": "commented",
      "id": 420135682,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDEzNTY4Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420135682",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:37:08Z",
      "updated_at": "2018-09-11T03:37:08Z",
      "author_association": "MEMBER",
      "body": "@jl2012 \r\n\r\n> This scheme might not be compatible with OP_CODESEPARATOR. While it is rarely used, it changes scriptCode and affects the signature validity. So you need to concatenate scriptCode with the message in order to fully support OP_CODESEPARATOR\r\n\r\nThe implementation (for Bitcoin Core) would literally add a new `BaseSignatureChecker` class that takes a predefined sighash (the message sighash) and executes `VerifyScript` as normal. Would that actually be affected by `OP_CODESEPARATOR` in any way? The sighash is the message only, so it shouldn't matter, right?\r\n\r\n> A related problem is since your message does not commit to the public key, it is possible to \"recover\" the public key from any random signature and random message, with no one has the private key. (I think the existing message system has the same problem)\r\n\r\nSo, include the scriptPubKey in the sighash, then?\r\n\r\n> I also have a related idea: turn an unused opcode (e.g. 0xf0) to OP_MESSAGEONLY. The code remains invalid in bitcoin txs and requires no change in consensus. In message system, however, it is interpreted as OP_NOP. So this allows people separating their message keys and money-holding keys. With MAST, the use of OP_MESSAGEONLY could be totally invisible except to the message validators.\r\n\r\nI love the idea, but not sure if it's worth using an entire op code when you can probably solve it with simple message prefix and/or (as above) a custom sighash format (including scriptPubKey).\r\n",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420135682",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837528564,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzUyODU2NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837528564",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:37:08Z"
    },
    {
      "event": "subscribed",
      "id": 1837528565,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc1Mjg1NjU=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837528565",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:37:08Z"
    },
    {
      "event": "commented",
      "id": 420136135,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDEzNjEzNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420136135",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:40:09Z",
      "updated_at": "2018-09-11T03:40:09Z",
      "author_association": "MEMBER",
      "body": "@maaku \r\n\r\n> Why not construct a bitcoin-like transaction instead of something custom? Make a fake tx with the address as the output and a fake tx spending that output with the hash of the message in an OP_RETURN. That way existing hardware signers and other infrastructure could sign messages without changes.\r\n\r\nIt feels like unnecessary overhead, when all you really want to do is\r\n\r\n* for a given scriptPubKey P\r\n* given a message M\r\n   * create a signature S that signs M for P\r\n   * prove/verify that S signs M for P\r\n\r\nWhy would you even bother with transactions in this case? It adds unnecessary data to the proof, and unnecessary complexity to the prover/verifier.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420136135",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837531076,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzUzMTA3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837531076",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:40:09Z"
    },
    {
      "event": "subscribed",
      "id": 1837531077,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc1MzEwNzc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837531077",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:40:09Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1837534367,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgzNzUzNDM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837534367",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:44:03Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1837536262,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgzNzUzNjI2Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837536262",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:46:14Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1837537265,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgzNzUzNzI2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837537265",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:47:29Z"
    },
    {
      "event": "commented",
      "id": 420137865,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDEzNzg2NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420137865",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:52:12Z",
      "updated_at": "2018-09-11T03:52:12Z",
      "author_association": "MEMBER",
      "body": "@kallewoof But I don't understand why you're including the scriptPubKey in the signature. Transactions don't have that either. You verify them *against* a scriptPubKey.",
      "user": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420137865",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837541515,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzU0MTUxNQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837541515",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:52:12Z"
    },
    {
      "event": "subscribed",
      "id": 1837541517,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc1NDE1MTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837541517",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:52:12Z"
    },
    {
      "event": "commented",
      "id": 420138316,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDEzODMxNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420138316",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:55:35Z",
      "updated_at": "2018-09-11T03:55:35Z",
      "author_association": "MEMBER",
      "body": "@sipa Oh, I see what you mean. Yeah, I think it makes sense to require the verifier/prover to retain the order of the SPKs which means they are not needed in the proof. Fixing.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420138316",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837544544,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzU0NDU0NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837544544",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:55:35Z"
    },
    {
      "event": "subscribed",
      "id": 1837544546,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc1NDQ1NDY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837544546",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:55:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1837546367,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgzNzU0NjM2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837546367",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T03:57:46Z"
    },
    {
      "event": "commented",
      "id": 420140603,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE0MDYwMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420140603",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:11:48Z",
      "updated_at": "2018-09-11T04:11:48Z",
      "author_association": "CONTRIBUTOR",
      "body": "@kallewoof It shouldn't add any overhead as far as I can tell. It's just a different convention: this BIP adds \"Bitcoin Message:\" to the beginning and hashes. What I suggest above would have you deterministically create a sequence of two bitcoin transactions, the first containing an output with the scriptPubKey, and the second \"spending\" it. In a slight revision of my earlier suggestion, the salted hash of the message to be signed would be placed in the input.txid of the first transaction, thereby preventing it from ever being interpreted as a valid transaction.\r\n\r\nYes this is more data structures constructed in memory to fake something that looks like a real transaction, but it's all deterministically constructed using fixed rules, and isn't included in the proof any more than the string \"Bitcoin Message:\" is in yours.",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420140603",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837558892,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzU1ODg5Mg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837558892",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:11:48Z"
    },
    {
      "event": "subscribed",
      "id": 1837558893,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc1NTg4OTM=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837558893",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:11:48Z"
    },
    {
      "event": "commented",
      "id": 420141984,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE0MTk4NA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420141984",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:22:24Z",
      "updated_at": "2018-09-11T04:22:24Z",
      "author_association": "MEMBER",
      "body": "I see what you're saying, and I'm not really against it, but I would love if someone could explain why it is *better* than just a sighash.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420141984",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1837584037,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTgzNzU4NDAzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837584037",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:41:16Z"
    },
    {
      "event": "commented",
      "id": 420145353,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE0NTM1Mw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420145353",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:46:23Z",
      "updated_at": "2018-09-11T04:46:23Z",
      "author_association": "CONTRIBUTOR",
      "body": "@kallewoof how do you get your hardware wallet or corporate HSM to sign your scheme, without a firmware update from the manufacturer?",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420145353",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837588419,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzU4ODQxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837588419",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:46:23Z"
    },
    {
      "event": "subscribed",
      "id": 1837588421,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc1ODg0MjE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837588421",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:46:23Z"
    },
    {
      "event": "commented",
      "id": 420145855,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE0NTg1NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420145855",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:49:49Z",
      "updated_at": "2018-09-11T04:49:49Z",
      "author_association": "MEMBER",
      "body": "@maaku I flat out assumed a firmware update would be necessary to support this. I'm definitely intrigued if it is possible to support this with NLS'es and Trezor's without an actual firmware update!",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420145855",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837591537,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzU5MTUzNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837591537",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:49:49Z"
    },
    {
      "event": "subscribed",
      "id": 1837591538,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc1OTE1Mzg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837591538",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:49:49Z"
    },
    {
      "event": "commented",
      "id": 420147199,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE0NzE5OQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420147199",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T04:58:50Z",
      "updated_at": "2018-09-11T04:58:50Z",
      "author_association": "CONTRIBUTOR",
      "body": "The point is you make it look like a bitcoin transaction, you sign it like a bitcoin transaction, you verify it like a bitcoin transaction, and nothing in the signing path even needs to be aware it is not _actually_ a bitcoin transaction.\r\n\r\nIt also works well with proof of reserve: the proof of reserve **is** a bitcoin transaction spending all the funds, but with an additional input (covered by SIGHASH_ALL) that points to a fake/invalid tx. This has the additional benefit of working in a forward compatible way with any future bitcoin extension, like confidential transactions or mimblewimble: your proof of reserve could have blinded inputs and outputs as well, or whatever else the bitcoin protocol is made to allow. As long as the spends are tangled up with the fake input (via SIGHASH_ALL or a mimblewimble kernel, or whatever), it doesn't matter.",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420147199",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "commented",
      "id": 420149734,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE0OTczNA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420149734",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T05:17:14Z",
      "updated_at": "2018-09-11T05:17:14Z",
      "author_association": "MEMBER",
      "body": "@maaku Thanks a lot for the explanation. That definitely sounds worth it!",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420149734",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837616876,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzYxNjg3Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837616876",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T05:17:14Z"
    },
    {
      "event": "subscribed",
      "id": 1837616877,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc2MTY4Nzc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837616877",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T05:17:14Z"
    },
    {
      "event": "commented",
      "id": 420153067,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE1MzA2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420153067",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T05:39:24Z",
      "updated_at": "2018-09-11T05:39:59Z",
      "author_association": "MEMBER",
      "body": "@maaku After discussion with others on IRC, the forward compatibility part is pretty nice, but there are also dangers with a specification where the signers can be potentially fooled into signing one thing thinking it's something else.\r\n\r\nWith the approach you are suggesting, it would be impossible for existing HW wallets (without a firmware upgrade) to distinguish between messages and transactions, meaning there is no way for the HW wallet to inform the user that they're signing a message vs signing a transaction.",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420153067",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837638711,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzYzODcxMQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837638711",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T05:39:24Z"
    },
    {
      "event": "subscribed",
      "id": 1837638712,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc2Mzg3MTI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837638712",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T05:39:24Z"
    },
    {
      "event": "commented",
      "id": 420167260,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE2NzI2MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420167260",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T06:53:42Z",
      "updated_at": "2018-09-11T06:53:42Z",
      "author_association": "CONTRIBUTOR",
      "body": "Yes I'm aware of that. I'm not suggesting it as a desirable end-goal in the sense that hardware wallets _should_ be blind to message signing. Rather it is a particularly nice feature to have now as there are hardware wallets and HSMs already deployed which won't be receiving field upgrades, either from lack of upstream support or because they are explicitly designed NOT to in the corporate HSM setting. Signing things not understood at the time of firmware burn-in and key loading would otherwise be an attack vector for emptying funds held by the HSM. (But there are enough ways to make a transaction invalid that the HSM would see it as a signed transaction which never confirms and is double-spent according to whatever protocol governs the HSM.) There is even greater need for this with respect to corporate HSMs doing proof of reserve, then raw message signing.\r\n\r\nBeyond being a good transition mechanism now, the same argument holds for any future bitcoin protocol upgrade. If you add confidential transactions, whatever general signing/proof-of-reserve system you come up with now would have to be updated to support CT. If you use (fake) bitcoin transactions, you get it for \"free,\" on any device that gets the CT upgrade.",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420167260",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "commented",
      "id": 420172013,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE3MjAxMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420172013",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T07:14:34Z",
      "updated_at": "2018-09-11T07:14:34Z",
      "author_association": "CONTRIBUTOR",
      "body": "Oh I probably should mention this explicitly: to address the \"sign something that looks like a transaction\" concerns you can make the transaction pay to the same owner, so any signing interface shows a \"0 btc\" transaction.\r\n\r\nThis is probably needed anyway to get around any signing logic restrictions enforced by the HSM.",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420172013",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "commented",
      "id": 420180567,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE4MDU2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420180567",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T07:48:29Z",
      "updated_at": "2018-09-11T07:48:29Z",
      "author_association": "CONTRIBUTOR",
      "body": "@maaku: being unable to upgrade is a feature, not a bug. If the firmware designer wanted to allow message signing, it would have been already supported. If not, I'd assume that's intentional.\r\n\r\nThe whole point of this BIP is to define a **generic** format, which could cover any previous and future scripts. For an unupgradable device, however, everything are set in stone so forward compatibility makes no sense to them",
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420180567",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837827775,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzgyNzc3NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837827775",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T07:48:29Z"
    },
    {
      "event": "subscribed",
      "id": 1837827776,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc4Mjc3NzY=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837827776",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T07:48:29Z"
    },
    {
      "event": "commented",
      "id": 420199307,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDE5OTMwNw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420199307",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T08:55:31Z",
      "updated_at": "2018-09-11T08:55:31Z",
      "author_association": "CONTRIBUTOR",
      "body": "Not on some of the commercial HSM systems I’ve actually worked on at least, where an essential part of the security model is the inability to change the signing logic of the device once it is switched on and the keys generated — signing logic governing what sorts of signatures the device is allowed to create. Otherwise you’re just one firmware update away from signing anything, including a steal-all-the-monies transaction, which introduces a central point of failure with however manages the firmware update process.\n\nAnd I simply disagree on forward compatibility making no sense, and this BIP points to examples which disprove that—proof of reserve messages. An exchange with an HSM rate limiting withdraws is exactly the situation where in you might want to add this message signing feature to an already deployed high-value HSM which takes the extra security precautions of dis-allowing live updates to its signing authorization logic. So you masquerade the proof-of-reserve message to look like a zero-fee transaction to itself, which it IS authorized to sign.\n\n> On Sep 11, 2018, at 12:48 AM, Johnson Lau <notifications@github.com> wrote:\n> \n> @maaku <https://github.com/maaku>: being unable to upgrade is a feature, not a bug. If the firmware designer wanted to allow message signing, it would have been already supported. If not, I'd assume that's intentional.\n> \n> The whole point of this BIP is to define a generic format, which could cover any previous and future scripts. For an unupgradable device, however, everything are set in stone so forward compatibility makes no sense to them\n> \n> —\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub <https://github.com/bitcoin/bips/pull/725#issuecomment-420180567>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AAEOIov1q8QujVZ7j_AmQtx7LDO3WfEaks5uZ2regaJpZM4Wg57j>.\n> \n\n",
      "user": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420199307",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1837965641,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzNzk2NTY0MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837965641",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T08:55:31Z"
    },
    {
      "event": "subscribed",
      "id": 1837965644,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzc5NjU2NDQ=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1837965644",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T08:55:31Z"
    },
    {
      "event": "commented",
      "id": 420210488,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDIxMDQ4OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420210488",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T09:33:35Z",
      "updated_at": "2018-09-11T09:37:49Z",
      "author_association": "CONTRIBUTOR",
      "body": "First, thanks for the draft.\r\n\r\nSecond, there is already a way how to sign/verify messages via Segwit-in-P2SH and Native-Segwit addresses: see https://github.com/bitcoin/bitcoin/issues/10542#issuecomment-316032523\r\nWe are using this solution in Trezor for almost a year now and other wallets use this too already.\r\n\r\nThird, I am against implementing generic SignMessage via a specially crafted transaction. This will severely cripple UX for hardware wallets that actually show the contents of the transaction during the signing. If the usecase is proof-of-funds, that might be the option, though, but for nothing else.",
      "user": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420210488",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "commented",
      "id": 420215485,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDIxNTQ4NQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420215485",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T09:51:10Z",
      "updated_at": "2018-09-11T09:51:10Z",
      "author_association": "CONTRIBUTOR",
      "body": "@maaku If the HSM designer wanted the proof-of-reserve feature, they would/should have done it already (e.g. opendime). If they did not include this feature at the design stage, I'd assume it's intentional.\r\n\r\nAlso, there is no guarantee that whatever you propose would be compatible with every existing HSM. It totally depends on the policy of the HSM. For example, it might not allow inclusion of an OP_RETURN or any non-whitelisted scriptPubKey, even if it is 0 value, so you have nowhere to hide your message.",
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420215485",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1838091080,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzODA5MTA4MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1838091080",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T09:51:10Z"
    },
    {
      "event": "subscribed",
      "id": 1838091081,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4MzgwOTEwODE=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1838091081",
      "actor": {
        "login": "maaku",
        "id": 69154,
        "node_id": "MDQ6VXNlcjY5MTU0",
        "avatar_url": "https://avatars.githubusercontent.com/u/69154?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/maaku",
        "html_url": "https://github.com/maaku",
        "followers_url": "https://api.github.com/users/maaku/followers",
        "following_url": "https://api.github.com/users/maaku/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/maaku/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/maaku/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/maaku/subscriptions",
        "organizations_url": "https://api.github.com/users/maaku/orgs",
        "repos_url": "https://api.github.com/users/maaku/repos",
        "events_url": "https://api.github.com/users/maaku/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/maaku/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T09:51:10Z"
    },
    {
      "event": "reviewed",
      "id": 154318616,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU0MzE4NjE2",
      "url": null,
      "actor": null,
      "commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#pullrequestreview-154318616",
      "submitted_at": "2018-09-11T18:52:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/725"
    },
    {
      "event": "reviewed",
      "id": 154388810,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU0Mzg4ODEw",
      "url": null,
      "actor": null,
      "commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#pullrequestreview-154388810",
      "submitted_at": "2018-09-11T20:44:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/725"
    },
    {
      "event": "commented",
      "id": 420421058,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDQyMTA1OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420421058",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T20:51:16Z",
      "updated_at": "2018-09-11T20:51:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "@kallewoof \r\n>I love the idea, but not sure if it's worth using an entire op code when you can probably solve it with simple message prefix and/or (as above) a custom sighash format (including scriptPubKey).\r\n\r\nWhat I'm suggesting is orthogonal to your proposal. A `OP_MESSAGEONLY = 0xf0` in the script means the script following the code would never be valid. For example, a `scriptPubKey`:\r\n\r\n`OP_IF OP_MESSAGEONLY <key_m> OP_ELSE <key_s> OP_ENDIF OP_CHECKSIG`\r\n\r\nFor messaging purpose, `OP_MESSAGEONLY` is considered as `OP_NOP` and is ignored. A message could be signed with either `key_m` or `key_s`.\r\n\r\nFor spending, only `key_s` is valid.\r\n\r\nI don't think it is a big problem to consume a op_code. If this is a real concern, I could modify it as follow: in message system, `OP_RETURN` will pop the top stack. If top stack is `msg` in hex, it is ignored. Otherwise, the script fails.",
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420421058",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1839581546,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTgzOTU4MTU0Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1839581546",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T20:51:16Z"
    },
    {
      "event": "subscribed",
      "id": 1839581547,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4Mzk1ODE1NDc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1839581547",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-11T20:51:16Z"
    },
    {
      "event": "mentioned",
      "id": 1840207896,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTg0MDIwNzg5Ng==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1840207896",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-12T05:50:04Z"
    },
    {
      "event": "subscribed",
      "id": 1840207897,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4NDAyMDc4OTc=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1840207897",
      "actor": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-12T05:50:04Z"
    },
    {
      "event": "commented",
      "id": 420521630,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDUyMTYzMA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420521630",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-12T05:56:55Z",
      "updated_at": "2018-09-12T05:56:55Z",
      "author_association": "MEMBER",
      "body": "@prusnak \r\n\r\n> Second, there is already a way how to sign/verify messages via Segwit-in-P2SH and Native-Segwit addresses: see bitcoin/bitcoin#10542 (comment)\r\n> We are using this solution in Trezor for almost a year now and other wallets use this too already.\r\n\r\nThat seems like a good temporary workaround but I think the proposal here is a better long term solution. Your feedback on the subject is very much desired, of course!\r\n",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420521630",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1840215767,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTg0MDIxNTc2Nw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1840215767",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-12T05:56:55Z"
    },
    {
      "event": "subscribed",
      "id": 1840215768,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4NDAyMTU3Njg=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1840215768",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-12T05:56:55Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6YjkyNTEzN2Q1ZjMwMjg2M2Y0ZjEwMDJjMTkxODU4ZWYzNTBiYTFmYw==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b925137d5f302863f4f1002c191858ef350ba1fc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b925137d5f302863f4f1002c191858ef350ba1fc",
      "tree": {
        "sha": "7186c442ab82360d0d6ec3d432ff07db00b65a0e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7186c442ab82360d0d6ec3d432ff07db00b65a0e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7186c442ab82360d0d6ec3d432ff07db00b65a0e\nparent 43f59dfbcb2f6736e13d29a2e8b9a8e43a16ef33\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1536549973 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1536732064 +0900\n\nBIP: Generic Signed Message Format\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAluYq6AACgkQV692LbM1\nMyJ7rQ/+J5F9tKvCn9KxPusdAINxX208sipcbEzHr9B6GnDzKidxIkIjXcyK4S0w\nEDq5um2AVeT1slYbo3Ww8laPj+Z8CixefjARNugj1gn+yKKwsK6VoZ6zBHeYiJ0A\nBOpw/nkR/SyE47gu76RU438kSyBxboGvvO6tzJR/mJnZKSpqB6SERLipajN2+OCY\nAk1yOrjR4ROZAokrmXjqoHaAcZNeb/8LAkm359YNMh/pnempdiDfbMIwA1kItvMx\nTMzoKLGnvQBlvSQLS4xoTR4BmLPvPZRTF3AlgBZ8jnXV96vw8WeuXVIxwkckYyoB\n5OBvA74QZbOfzPH1eV89lg0hOf2EsE0PVltaxW71keKndJJ3dZ+YZWbg9W/Th4Lb\nwkkmpLFYw7mWGL+sCpQyn2aIfjs1LuBKmjKANC2ABeVPdXGQjbP5Ynm7NSxDnzey\nS60B9APjbodezxebR8Q1wvOZAaVu0oaoYdQYY4IB/p7ylmJq00Qibk5YI08Ie0Vk\nDlqDO9XjPBYjq0irB40dZ06k+OW2d0evtWS1hsa0+6psTVt/g1at9RKTbyywYSiA\nNESz6EHDVID2NZ6FGqUa8U9O3Q9xFPnsqhGwQjmuM+qv4nXsTixV/h4OE++/mxKS\nrvWtnMRw2VYw8aksWA7VTW5+qzGt72+qyfJ74HWtKnwTwp5hkD4=\n=l8Qk\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/43f59dfbcb2f6736e13d29a2e8b9a8e43a16ef33",
          "sha": "43f59dfbcb2f6736e13d29a2e8b9a8e43a16ef33",
          "html_url": "https://github.com/bitcoin/bips/commit/43f59dfbcb2f6736e13d29a2e8b9a8e43a16ef33"
        }
      ],
      "message": "BIP: Generic Signed Message Format",
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-12T06:01:04Z"
      },
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-10T03:26:13Z"
      },
      "sha": "b925137d5f302863f4f1002c191858ef350ba1fc"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 1840220926,
      "node_id": "MDIzOkhlYWRSZWZGb3JjZVB1c2hlZEV2ZW50MTg0MDIyMDkyNg==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1840220926",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-12T06:01:13Z"
    },
    {
      "event": "mentioned",
      "id": 1840263450,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTg0MDI2MzQ1MA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1840263450",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-12T06:34:04Z"
    },
    {
      "event": "subscribed",
      "id": 1840263452,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4NDAyNjM0NTI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1840263452",
      "actor": {
        "login": "sipa",
        "id": 548488,
        "node_id": "MDQ6VXNlcjU0ODQ4OA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sipa",
        "html_url": "https://github.com/sipa",
        "followers_url": "https://api.github.com/users/sipa/followers",
        "following_url": "https://api.github.com/users/sipa/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/sipa/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/sipa/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
        "organizations_url": "https://api.github.com/users/sipa/orgs",
        "repos_url": "https://api.github.com/users/sipa/repos",
        "events_url": "https://api.github.com/users/sipa/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/sipa/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-12T06:34:04Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "MDY6Q29tbWl0MTQ1MzE3Mzc6MmYxNTI3NzNlNjUxZTUzZTIxZGI1NmRmYmY0ZmI2YjkwY2NlNzE1ZA==",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "tree": {
        "sha": "88c3db3d1010447a986602189e3e2deec6af3a4e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/88c3db3d1010447a986602189e3e2deec6af3a4e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 88c3db3d1010447a986602189e3e2deec6af3a4e\nparent b925137d5f302863f4f1002c191858ef350ba1fc\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1536736919 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1536736919 +0900\n\nfix witness program -> witness\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAluYvpcACgkQV692LbM1\nMyIn9Q/9F2vSExUqed5wQJFaexhQBRNB+FcxNACkopSpe2TMBiZ7/aqIJ1fS/z64\nkbb/DixZDRuBLxjXHPqivf2CvDAzwnyT7RIOBsuxJO1ULqb9iXqhCZmIAyET4bTf\nSku5goKhS+VWJrVvhzyWOFd5Al6WXgdLKlHPFnb1ajk7XMTp7PgrdCpP0Kjr152u\nK9lU2OuuZVGVSrQX8Yy5yetHrBTXr8F7P1PjIKC1cZw4MOyRrf8/dfoVHhzQZJv+\n7FNAGHH+DEfQzBi4jjE9/5bi3QDKE0+0CveRPC45W7iMK60JlU6Fx3bAnWgRykcy\nAbrmZTBWiGfeeVZuN/1c4k5sBicgVPQ4gW3HH6qUbVb6z+yLOiOrjEyEayhiybAT\nyx44PBF8KJcsothJa6suX4wOEAqwTPcLZYT/K+oTpZm3I+x7bsXmpelXCBbD4LGZ\nu7qRFz+oIGJacxkuUsxbbCc/q5i66LgiVwq+dJi5ZdUeQfxlxJROTD5q121LNL3u\nkJkK3ciUJJirjknST4tvte658rcI9/Y/vpsILEot8EcLsVN68UzdZZmvNFeyfI+w\n7ZWf3wH92ONx7CQrI3x4VYUaJ6nRkuvRoAfb+43MqsN48qqO72Hcf5GD9AF45cjL\nySIkEbCC07q9zfN9mYmtnyBKOA1YHWBlgKcCwecn2SuEu5011hs=\n=/cP9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b925137d5f302863f4f1002c191858ef350ba1fc",
          "sha": "b925137d5f302863f4f1002c191858ef350ba1fc",
          "html_url": "https://github.com/bitcoin/bips/commit/b925137d5f302863f4f1002c191858ef350ba1fc"
        }
      ],
      "message": "fix witness program -> witness",
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-12T07:21:59Z"
      },
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-12T07:21:59Z"
      },
      "sha": "2f152773e651e53e21db56dfbf4fb6b90cce715d"
    },
    {
      "event": "reviewed",
      "id": 154741923,
      "node_id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MTU0NzQxOTIz",
      "url": null,
      "actor": null,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Concept ACK.\r\n\r\nThis should specify how CLTV/CSV are verified. Including an `nLockTime` in the SignatureProof container and an `nSequence` with each signature entry therein seems like it should work. Also, what is the sighash type byte on signatures produced? That should be specified.\r\n\r\nI think the SignMessage purpose is fine as is. For the proof-of-funds purpose, constructing the sighash from a dummy, invalid transactions spending from all UTXOs that are to be signed for seems reasonable and should provide compatibility with existing hardware. As noted, the transaction should require an unspendable input to invalidate it.",
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#pullrequestreview-154741923",
      "submitted_at": "2018-09-12T17:02:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/725"
    },
    {
      "event": "commented",
      "id": 420894009,
      "node_id": "MDEyOklzc3VlQ29tbWVudDQyMDg5NDAwOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/420894009",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T06:05:38Z",
      "updated_at": "2018-09-13T06:05:38Z",
      "author_association": "MEMBER",
      "body": "@jimpo Thanks for the valuable feedback. Unless I misunderstand what you're saying, you are suggesting that the format for a proof of funds is an actual transaction while the format for `SignMessage` is not. It seems like this complicates things, but this is what @prusnak is saying as well (in that he's opposed to a tx for signmessage but not for proof of funds), so perhaps it's the way to go...",
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "html_url": "https://github.com/bitcoin/bips/pull/725#issuecomment-420894009",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/725"
    },
    {
      "event": "mentioned",
      "id": 1842782888,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTg0Mjc4Mjg4OA==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1842782888",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T06:05:38Z"
    },
    {
      "event": "subscribed",
      "id": 1842782889,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4NDI3ODI4ODk=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1842782889",
      "actor": {
        "login": "prusnak",
        "id": 42201,
        "node_id": "MDQ6VXNlcjQyMjAx",
        "avatar_url": "https://avatars.githubusercontent.com/u/42201?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/prusnak",
        "html_url": "https://github.com/prusnak",
        "followers_url": "https://api.github.com/users/prusnak/followers",
        "following_url": "https://api.github.com/users/prusnak/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/prusnak/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/prusnak/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/prusnak/subscriptions",
        "organizations_url": "https://api.github.com/users/prusnak/orgs",
        "repos_url": "https://api.github.com/users/prusnak/repos",
        "events_url": "https://api.github.com/users/prusnak/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/prusnak/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T06:05:38Z"
    },
    {
      "event": "mentioned",
      "id": 1842782891,
      "node_id": "MDE0Ok1lbnRpb25lZEV2ZW50MTg0Mjc4Mjg5MQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1842782891",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T06:05:38Z"
    },
    {
      "event": "subscribed",
      "id": 1842782892,
      "node_id": "MDE1OlN1YnNjcmliZWRFdmVudDE4NDI3ODI4OTI=",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1842782892",
      "actor": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-13T06:05:38Z"
    },
    {
      "event": "merged",
      "id": 1855930319,
      "node_id": "MDExOk1lcmdlZEV2ZW50MTg1NTkzMDMxOQ==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1855930319",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": "ad3a16baab521bc6005cb0577f44a0677f24fe08",
      "commit_url": "https://api.github.com/repos/bitcoin/bips/commits/ad3a16baab521bc6005cb0577f44a0677f24fe08",
      "created_at": "2018-09-19T19:19:14Z"
    },
    {
      "event": "closed",
      "id": 1855930323,
      "node_id": "MDExOkNsb3NlZEV2ZW50MTg1NTkzMDMyMw==",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/1855930323",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-09-19T19:19:14Z"
    },
    {
      "event": "head_ref_deleted",
      "id": 2000609662,
      "node_id": "MDE5OkhlYWRSZWZEZWxldGVkRXZlbnQyMDAwNjA5NjYy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/2000609662",
      "actor": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2018-12-03T07:11:27Z"
    },
    {
      "event": "cross-referenced",
      "id": null,
      "node_id": null,
      "url": null,
      "actor": {
        "login": "nodech",
        "id": 1651122,
        "node_id": "MDQ6VXNlcjE2NTExMjI=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1651122?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nodech",
        "html_url": "https://github.com/nodech",
        "followers_url": "https://api.github.com/users/nodech/followers",
        "following_url": "https://api.github.com/users/nodech/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nodech/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nodech/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nodech/subscriptions",
        "organizations_url": "https://api.github.com/users/nodech/orgs",
        "repos_url": "https://api.github.com/users/nodech/repos",
        "events_url": "https://api.github.com/users/nodech/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nodech/received_events",
        "type": "User",
        "site_admin": false
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2019-06-21T14:33:06Z",
      "updated_at": "2019-06-21T14:33:06Z",
      "source": {
        "issue": {
          "id": 459227988,
          "node_id": "MDExOlB1bGxSZXF1ZXN0MjkwNjMxOTM5",
          "url": "https://api.github.com/repos/bcoin-org/bcoin/issues/802",
          "repository_url": "https://api.github.com/repos/bcoin-org/bcoin",
          "labels_url": "https://api.github.com/repos/bcoin-org/bcoin/issues/802/labels%7B/name%7D",
          "comments_url": "https://api.github.com/repos/bcoin-org/bcoin/issues/802/comments",
          "events_url": "https://api.github.com/repos/bcoin-org/bcoin/issues/802/events",
          "html_url": "https://github.com/bcoin-org/bcoin/pull/802",
          "number": 802,
          "state": "closed",
          "state_reason": null,
          "title": "RPC signmessage",
          "body": "Builds on top #464, fixes issue #460 \r\n\r\nGeneral updates on the `signmessagewithprivkey`, `verifymessage` and\r\n`signmessage` :  \r\n  These two calls are outdated and only work for old `P2PKH` addresses. It can\r\nnot be used with witness transactions or p2sh.  \r\n  BitcoinCore thread about this: [Bitcoin Core issue][core-signmessage]  \r\n  Trezor implemeneted variation of signmessage, details in [the issue][trezor].\r\n\r\nThere's new proposal for generic signed messages signing:\r\n[BIP 322: Generic Signed Message Format][bip322] and [BIP 322 - PR][bip322-pr].\r\n\r\nThere's also an [discussion][core-rpcutils] about not adding new utility\r\nRPC calls to the RPC that can be implemented as a library.\r\n\r\n\r\nOther updates:\r\n - organize utils tests\r\n - add TODO for util tests to move to their respective repositories\r\n   - encoding tests should go to `bufio`\r\n   - base58 tests needs to go to bcrypto(previously bstring), after we update to bcrypto@4 (https://github.com/bcoin-org/bcrypto/commit/216f918e297dfe4db31de3bc0650f30930c5086b)\r\n   - Validator tests need to go to `bval` and write more tests there.\r\n\r\n---\r\nNOTE: Bcrypto@4 changes `signRecoverable`: https://github.com/bcoin-org/bcrypto/issues/22\r\n\r\n[core-signmessage]: https://github.com/bitcoin/bitcoin/issues/10542\r\n[trezor]: https://github.com/trezor/trezor-mcu/issues/169\r\n[bip322]: https://github.com/bitcoin/bips/blob/master/bip-0322.mediawiki\r\n[bip322-pr]: https://github.com/bitcoin/bips/pull/725\r\n[core-rpcutils]: https://github.com/bitcoin/bitcoin/issues/14671\r\n",
          "user": {
            "login": "nodech",
            "id": 1651122,
            "node_id": "MDQ6VXNlcjE2NTExMjI=",
            "avatar_url": "https://avatars.githubusercontent.com/u/1651122?v=4",
            "gravatar_id": "",
            "url": "https://api.github.com/users/nodech",
            "html_url": "https://github.com/nodech",
            "followers_url": "https://api.github.com/users/nodech/followers",
            "following_url": "https://api.github.com/users/nodech/following%7B/other_user%7D",
            "gists_url": "https://api.github.com/users/nodech/gists%7B/gist_id%7D",
            "starred_url": "https://api.github.com/users/nodech/starred%7B/owner%7D%7B/repo%7D",
            "subscriptions_url": "https://api.github.com/users/nodech/subscriptions",
            "organizations_url": "https://api.github.com/users/nodech/orgs",
            "repos_url": "https://api.github.com/users/nodech/repos",
            "events_url": "https://api.github.com/users/nodech/events%7B/privacy%7D",
            "received_events_url": "https://api.github.com/users/nodech/received_events",
            "type": "User",
            "site_admin": false
          },
          "labels": [
            {
              "id": 1443433493,
              "node_id": "MDU6TGFiZWwxNDQzNDMzNDkz",
              "url": "https://api.github.com/repos/bcoin-org/bcoin/labels/rpc",
              "name": "rpc",
              "description": "",
              "color": "0000ff",
              "default": false
            }
          ],
          "assignees": [],
          "author_association": "MEMBER",
          "milestone": {
            "url": "https://api.github.com/repos/bcoin-org/bcoin/milestones/1",
            "html_url": "https://github.com/bcoin-org/bcoin/milestone/1",
            "labels_url": "https://api.github.com/repos/bcoin-org/bcoin/milestones/1/labels",
            "id": 4978907,
            "node_id": "MDk6TWlsZXN0b25lNDk3ODkwNw==",
            "number": 1,
            "state": "closed",
            "title": "v2.0.0",
            "description": "",
            "creator": {
              "login": "braydonf",
              "id": 544777,
              "node_id": "MDQ6VXNlcjU0NDc3Nw==",
              "avatar_url": "https://avatars.githubusercontent.com/u/544777?v=4",
              "gravatar_id": "",
              "url": "https://api.github.com/users/braydonf",
              "html_url": "https://github.com/braydonf",
              "followers_url": "https://api.github.com/users/braydonf/followers",
              "following_url": "https://api.github.com/users/braydonf/following%7B/other_user%7D",
              "gists_url": "https://api.github.com/users/braydonf/gists%7B/gist_id%7D",
              "starred_url": "https://api.github.com/users/braydonf/starred%7B/owner%7D%7B/repo%7D",
              "subscriptions_url": "https://api.github.com/users/braydonf/subscriptions",
              "organizations_url": "https://api.github.com/users/braydonf/orgs",
              "repos_url": "https://api.github.com/users/braydonf/repos",
              "events_url": "https://api.github.com/users/braydonf/events%7B/privacy%7D",
              "received_events_url": "https://api.github.com/users/braydonf/received_events",
              "type": "User",
              "site_admin": false
            },
            "open_issues": 0,
            "closed_issues": 133,
            "created_at": "2020-01-06T18:46:11Z",
            "updated_at": "2020-03-16T21:11:11Z",
            "closed_at": "2020-03-16T21:11:11Z"
          },
          "locked": false,
          "comments": 17,
          "pull_request": {
            "url": "https://api.github.com/repos/bcoin-org/bcoin/pulls/802",
            "html_url": "https://github.com/bcoin-org/bcoin/pull/802",
            "diff_url": "https://github.com/bcoin-org/bcoin/pull/802.diff",
            "patch_url": "https://github.com/bcoin-org/bcoin/pull/802.patch"
          },
          "closed_at": "2019-11-15T00:22:52Z",
          "created_at": "2019-06-21T14:33:06Z",
          "updated_at": "2020-01-06T18:51:58Z"
        },
        "type": "issue"
      }
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216431620",
      "pull_request_review_id": 153910852,
      "id": 216431620,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQzMTYyMA==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash\n+# Return VALID if verify succeeds, otherwise return INVALID\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the verify operation must fail with an ERROR.\n+\n+* If a verification call returns ERROR or INVALID, return ERROR or INVALID immediately, ignoring as yet unverified entries.\n+* After all verifications complete, return INCONCLUSIVE if any verification call returned INCONCLUSIVE.\n+* Return VALID if and only if every verification returned VALID.\n+\n+== Future Extensions ==\n+\n+=== Proof of Funds ===\n+\n+The specification can be extended to handle proof of funds in the following manner:\n+\n+* Let the message be prefixed with \"POF:\", followed by a newline-terminated string<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>, followed by [entries] series of hex-encoded transaction ID:vout pairs, separated by a single space (\" \") character\n+* Fail if the number of txid:vout pairs is not exactly equal to [entries]\n+* Retain the message as is for all sighash operations (i.e. all sign and verify operations sign and verify for the entire list of UTXO:s)<ref><strong>Why use same sighash?</strong> The prover is proving that they have a set of UTXO:s at their disposal. Taking a sub-set of the proofs and turning into a new proof should not be valid.</ref>",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 108,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": null,
      "user": {
        "login": "odarboe",
        "id": 1871493,
        "node_id": "MDQ6VXNlcjE4NzE0OTM=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1871493?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/odarboe",
        "html_url": "https://github.com/odarboe",
        "followers_url": "https://api.github.com/users/odarboe/followers",
        "following_url": "https://api.github.com/users/odarboe/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/odarboe/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/odarboe/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/odarboe/subscriptions",
        "organizations_url": "https://api.github.com/users/odarboe/orgs",
        "repos_url": "https://api.github.com/users/odarboe/repos",
        "events_url": "https://api.github.com/users/odarboe/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/odarboe/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Suggested improvement:\r\nLine 108: Retain the message as is for all sighash operations (i.e. all sign and verify operations **should** sign and **verify the entire list** of UTXO:s ...........Taking a sub-set of the proofs and turning **them** into a new proof should not be valid.\r\n\r\nor \r\nLine 108: Retain the message as is for all sighash operations (i.e. all sign and verify operations **should validate the entire list** of UTXO:s ...........Taking a sub-set of the proofs and turning **them** into a new proof should not be valid.",
      "created_at": "2018-09-10T18:44:07Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216431620",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216431620"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216436685",
      "pull_request_review_id": 153917263,
      "id": 216436685,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQzNjY4NQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 75,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": null,
      "user": {
        "login": "instagibbs",
        "id": 5767891,
        "node_id": "MDQ6VXNlcjU3Njc4OTE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/instagibbs",
        "html_url": "https://github.com/instagibbs",
        "followers_url": "https://api.github.com/users/instagibbs/followers",
        "following_url": "https://api.github.com/users/instagibbs/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/instagibbs/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/instagibbs/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
        "organizations_url": "https://api.github.com/users/instagibbs/orgs",
        "repos_url": "https://api.github.com/users/instagibbs/repos",
        "events_url": "https://api.github.com/users/instagibbs/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/instagibbs/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "privkey*s*?",
      "created_at": "2018-09-10T19:00:42Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216436685",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216436685"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216456435",
      "pull_request_review_id": 153942592,
      "id": 216456435,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQ1NjQzNQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 77,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": null,
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "using plain double-sha256 here is very dangerous, as attackers could trick people to sign real txs this way. You need to either pad something before or after the message, or simply use a different hash function.\r\n\r\nfor example, it could be `sighash = sha256(sha256(msg)|0xff)`.\r\n\r\nIf the size of `msg` is small enough to be shown on the wallet screen, the wallet will ask user to confirm the message and will do the whole double hash\r\n\r\nIf the size of `msg` is too big, the untrusted computer will send sha256(msg) to the wallet, and the wallet will only do the second hash. Careful users will use a trusted machine to verify the hash (they don't need special software because it's simple sha256). Even not verified, the worst case would be signing a wrong message, not sending bitcoin to attacker",
      "created_at": "2018-09-10T20:11:44Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216456435",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216456435"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216488107",
      "pull_request_review_id": 153981774,
      "id": 216488107,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQ4ODEwNw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash\n+# Return VALID if verify succeeds, otherwise return INVALID\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the verify operation must fail with an ERROR.\n+\n+* If a verification call returns ERROR or INVALID, return ERROR or INVALID immediately, ignoring as yet unverified entries.\n+* After all verifications complete, return INCONCLUSIVE if any verification call returned INCONCLUSIVE.\n+* Return VALID if and only if every verification returned VALID.\n+\n+== Future Extensions ==\n+\n+=== Proof of Funds ===\n+\n+The specification can be extended to handle proof of funds in the following manner:",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 104,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "This should just be part of the specification IMO, providing a clear distinction between proof-of-funds (which only verifies an amount, not address(es)) and proof-of-receiving-at-address.",
      "created_at": "2018-09-10T22:06:01Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216488107",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216488107"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216488207",
      "pull_request_review_id": 153981919,
      "id": 216488207,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjQ4ODIwNw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 26,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": null,
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Should elaborate on what is being signed/verified.",
      "created_at": "2018-09-10T22:06:31Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216488207",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216488207"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535065",
      "pull_request_review_id": 154037582,
      "id": 216535065,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjUzNTA2NQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash\n+# Return VALID if verify succeeds, otherwise return INVALID\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the verify operation must fail with an ERROR.\n+\n+* If a verification call returns ERROR or INVALID, return ERROR or INVALID immediately, ignoring as yet unverified entries.\n+* After all verifications complete, return INCONCLUSIVE if any verification call returned INCONCLUSIVE.\n+* Return VALID if and only if every verification returned VALID.\n+\n+== Future Extensions ==\n+\n+=== Proof of Funds ===\n+\n+The specification can be extended to handle proof of funds in the following manner:\n+\n+* Let the message be prefixed with \"POF:\", followed by a newline-terminated string<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>, followed by [entries] series of hex-encoded transaction ID:vout pairs, separated by a single space (\" \") character\n+* Fail if the number of txid:vout pairs is not exactly equal to [entries]\n+* Retain the message as is for all sighash operations (i.e. all sign and verify operations sign and verify for the entire list of UTXO:s)<ref><strong>Why use same sighash?</strong> The prover is proving that they have a set of UTXO:s at their disposal. Taking a sub-set of the proofs and turning into a new proof should not be valid.</ref>",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 108,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216431620,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Thanks, will tweak!",
      "created_at": "2018-09-11T03:21:18Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216535065",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535065"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 108,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535300",
      "pull_request_review_id": 154037821,
      "id": 216535300,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjUzNTMwMA==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 75,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216436685,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "There is one privkey for each scriptPubKey I assume (this is in the individual case, even though it is tracking the SPK's in the SPK set for early abort).",
      "created_at": "2018-09-11T03:23:18Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216535300",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535300"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 75,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535567",
      "pull_request_review_id": 154038136,
      "id": 216535567,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjUzNTU2Nw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 77,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216456435,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The msg is prefixed with the string sequence \"Bitcoin Message:\", so that should not be a problem.\r\n\r\nI initially went for single sha256 but realized they could then potentially pass the single sha256 of a transaction and it would thus become the actual txid. But that relies again on the \"Bitcoin Message:\" part being ignored.",
      "created_at": "2018-09-11T03:25:37Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216535567",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535567"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535713",
      "pull_request_review_id": 154038275,
      "id": 216535713,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjUzNTcxMw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 77,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216456435,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "As for a long message, perhaps there should be a limit on message size. I don't think I understand the benefits of single-sha256'ing and showing that. It doesn't seem like it would convey anything at all to the user.",
      "created_at": "2018-09-11T03:26:44Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216535713",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535713"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535878",
      "pull_request_review_id": 154038424,
      "id": 216535878,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjUzNTg3OA==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash\n+# Return VALID if verify succeeds, otherwise return INVALID\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the verify operation must fail with an ERROR.\n+\n+* If a verification call returns ERROR or INVALID, return ERROR or INVALID immediately, ignoring as yet unverified entries.\n+* After all verifications complete, return INCONCLUSIVE if any verification call returned INCONCLUSIVE.\n+* Return VALID if and only if every verification returned VALID.\n+\n+== Future Extensions ==\n+\n+=== Proof of Funds ===\n+\n+The specification can be extended to handle proof of funds in the following manner:",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 104,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216488107,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was aiming for a simple and lean proposal and this was only meant as a \"you CAN do this, by extending this in the future\", but it turned into a more complete proposal than I intended. You're probably right.",
      "created_at": "2018-09-11T03:27:54Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216535878",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535878"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535936",
      "pull_request_review_id": 154038482,
      "id": 216535936,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjUzNTkzNg==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 26,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216488207,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The two sections further down are meant to do that. Is something missing?",
      "created_at": "2018-09-11T03:28:25Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216535936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216535936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216759655",
      "pull_request_review_id": 154318616,
      "id": 216759655,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjc1OTY1NQ==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 24,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": null,
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I thought the witness program was the 2-40 bytes after the witness version in the scriptPubKey. It should be the witness, or possibly witness field here, no? If so, several places from here on should change.",
      "created_at": "2018-09-11T17:47:31Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216759655",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216759655"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216762635",
      "pull_request_review_id": 154318616,
      "id": 216762635,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjc2MjYzNQ==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 70,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": null,
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It'd help if the scriptPubKeys set was defined in the previous paragraph. Or say \"... already exists in (the initially empty) scriptPubKeys set, ...\". The same goes for the Verifying algorithm.",
      "created_at": "2018-09-11T17:56:52Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216762635",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216762635"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216774568",
      "pull_request_review_id": 154318616,
      "id": 216774568,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjc3NDU2OA==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash\n+# Return VALID if verify succeeds, otherwise return INVALID\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the verify operation must fail with an ERROR.\n+\n+* If a verification call returns ERROR or INVALID, return ERROR or INVALID immediately, ignoring as yet unverified entries.\n+* After all verifications complete, return INCONCLUSIVE if any verification call returned INCONCLUSIVE.\n+* Return VALID if and only if every verification returned VALID.\n+\n+== Future Extensions ==\n+\n+=== Proof of Funds ===\n+\n+The specification can be extended to handle proof of funds in the following manner:\n+\n+* Let the message be prefixed with \"POF:\", followed by a newline-terminated string<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>, followed by [entries] series of hex-encoded transaction ID:vout pairs, separated by a single space (\" \") character\n+* Fail if the number of txid:vout pairs is not exactly equal to [entries]\n+* Retain the message as is for all sighash operations (i.e. all sign and verify operations should sign and verify the entire list of UTXO:s)<ref><strong>Why use same sighash?</strong> The prover is proving that they have a set of UTXO:s at their disposal. Taking a sub-set of the proofs and turning them into a new proof should not be valid.</ref>\n+* Add a verification that the txid/vout is a valid UTXO according to a synced up Bitcoin node, and that its corresponding scriptPubKey matches the one given by the proof. Return ERROR if scriptPubKey mismatch, and SPENT error if spent",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": null,
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "You can't verify that the corresponding scriptPubKey matches the one given by the proof. The scriptPubKey is not in the proof.",
      "created_at": "2018-09-11T18:31:31Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216774568",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216774568"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216780934",
      "pull_request_review_id": 154318616,
      "id": 216780934,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjc4MDkzNA==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": null,
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "How do you know which proof entry belongs to this particular scriptPubKey? I suppose these algorithms require that the verifyer first gives a list of scriptPubKeys to the signer, and that list must be kept and processed in order. If not, please clarify how ordering is managed. Or should one simply test the proof entries one by one until success? Maybe you want to leave this up to the user how to handle?",
      "created_at": "2018-09-11T18:49:59Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216780934",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216780934"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216814111",
      "pull_request_review_id": 154386565,
      "id": 216814111,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjgxNDExMQ==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 77,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216456435,
      "user": {
        "login": "jl2012",
        "id": 8403418,
        "node_id": "MDQ6VXNlcjg0MDM0MTg=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jl2012",
        "html_url": "https://github.com/jl2012",
        "followers_url": "https://api.github.com/users/jl2012/followers",
        "following_url": "https://api.github.com/users/jl2012/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jl2012/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jl2012/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
        "organizations_url": "https://api.github.com/users/jl2012/orgs",
        "repos_url": "https://api.github.com/users/jl2012/repos",
        "events_url": "https://api.github.com/users/jl2012/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jl2012/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": ">The msg is prefixed with the string sequence \"Bitcoin Message:\", so that should not be a problem.\r\n\r\nThis is 16 bytes at the beginning. To attack it, a 12 bytes (96 bit) collision is needed. Bitcoin mining is now 82bit/day, so it is 45 years for 96 bit. Not likely, but also not impossible.\r\n\r\nThe only way to make it completely safe (in terms of legacy sighash and BIP143), is to put a non-zero byte at the end of the message.\r\n\r\n> I don't think I understand the benefits of single-sha256'ing and showing that. It doesn't seem like it would convey anything at all to the user.\r\n\r\nMaybe, but this is what Ledger Wallet is currently doing.\r\n\r\n",
      "created_at": "2018-09-11T20:38:59Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216814111",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216814111"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216815976",
      "pull_request_review_id": 154388810,
      "id": 216815976,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjgxNTk3Ng==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 84,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": null,
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Isn't it also important for the verifier to return INCONCLUSIVE for an unknown witness version?",
      "created_at": "2018-09-11T20:44:43Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216815976",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216815976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216888843",
      "pull_request_review_id": 154475049,
      "id": 216888843,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg4ODg0Mw==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 24,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216759655,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I'm not entirely sure what you are suggesting, but the scriptPubKey is `<version> <32 byte hash>` where the latter is a hash of the witness program. The witness program itself is in the spending transaction's input, not in the scriptPubKey. The scriptPubKey simply commits to it.",
      "created_at": "2018-09-12T03:44:44Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216888843",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216888843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216888942",
      "pull_request_review_id": 154475169,
      "id": 216888942,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg4ODk0Mg==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 70,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216762635,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It felt obvious, but I can clarify, sure.",
      "created_at": "2018-09-12T03:45:39Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216888942",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216888942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 70,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216889152",
      "pull_request_review_id": 154475405,
      "id": 216889152,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg4OTE1Mg==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash\n+# Return VALID if verify succeeds, otherwise return INVALID\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the verify operation must fail with an ERROR.\n+\n+* If a verification call returns ERROR or INVALID, return ERROR or INVALID immediately, ignoring as yet unverified entries.\n+* After all verifications complete, return INCONCLUSIVE if any verification call returned INCONCLUSIVE.\n+* Return VALID if and only if every verification returned VALID.\n+\n+== Future Extensions ==\n+\n+=== Proof of Funds ===\n+\n+The specification can be extended to handle proof of funds in the following manner:\n+\n+* Let the message be prefixed with \"POF:\", followed by a newline-terminated string<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>, followed by [entries] series of hex-encoded transaction ID:vout pairs, separated by a single space (\" \") character\n+* Fail if the number of txid:vout pairs is not exactly equal to [entries]\n+* Retain the message as is for all sighash operations (i.e. all sign and verify operations should sign and verify the entire list of UTXO:s)<ref><strong>Why use same sighash?</strong> The prover is proving that they have a set of UTXO:s at their disposal. Taking a sub-set of the proofs and turning them into a new proof should not be valid.</ref>\n+* Add a verification that the txid/vout is a valid UTXO according to a synced up Bitcoin node, and that its corresponding scriptPubKey matches the one given by the proof. Return ERROR if scriptPubKey mismatch, and SPENT error if spent",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216774568,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "For a funds proof, the scriptPubKey is actually derived from the transaction, and the witness program commitment (the second push in the SPK) may differ from the witness program provided in the proof. I will clarify.",
      "created_at": "2018-09-12T03:47:29Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216889152",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216889152"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216889427",
      "pull_request_review_id": 154475724,
      "id": 216889427,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg4OTQyNw==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216780934,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, the ordering is given by the verifier and preserved by the prover.",
      "created_at": "2018-09-12T03:49:59Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216889427",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216889427"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 129,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216889555",
      "pull_request_review_id": 154475878,
      "id": 216889555,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjg4OTU1NQ==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 84,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216815976,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "The standard flags include a \"do not allow upgradable flags\" flag, which will trigger an error if a future segwit version is used (similar to how it will trigger a warning if a NOP is used).",
      "created_at": "2018-09-12T03:51:09Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216889555",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216889555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 128,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216903503",
      "pull_request_review_id": 154491885,
      "id": 216903503,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjkwMzUwMw==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 77,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216456435,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "@jl2012 \r\n\r\n> This is 16 bytes at the beginning. To attack it, a 12 bytes (96 bit) collision is needed. Bitcoin mining is now 82bit/day, so it is 45 years for 96 bit. Not likely, but also not impossible.\r\n> \r\n> The only way to make it completely safe (in terms of legacy sighash and BIP143), is to put a non-zero byte at the end of the message.\r\n\r\nRight now, the sighash is defined as `sha256(sha256(scriptPubKey || pre-image))` where pre-image is \"Bitcoin Message:<message string>\" for a regular signmessage call. The added scriptPubKey should address the problem, right?\r\n\r\n> Maybe, but this is what Ledger Wallet is currently doing.\r\n\r\nInteresting. I didn't realize this. I will have to read up on why they do that.",
      "created_at": "2018-09-12T05:50:04Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216903503",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216903503"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 77,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216903576",
      "pull_request_review_id": 154491984,
      "id": 216903576,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjkwMzU3Ng==",
      "diff_hunk": "@@ -0,0 +1,134 @@\n+<pre>\n+  BIP: ????\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-????\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptPubKey, scriptSig & witnessProgram container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined.\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of scriptPubKey & signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||spklen||Length of scriptPubKey\n+|-\n+|Uint8*||[spklen]||spk||The scriptPubKey data\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness program data\n+|-\n+|Uint8*||[witlen]||wit||Witness program\n+|}\n+\n+In some cases, the scriptsig may be empty (scriptsiglen=0).\n+\n+=== Signing ===\n+\n+The \"Sign\" action takes as input a scriptPubKey and a message (e.g. \"hello world\"). It succeeds or fails.\n+\n+# FAIL if scriptPubKey already exists in scriptPubKeys set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 scriptPubKeys unless they are all distinct, or unless they are proving different UTXO:s (see Future Extensions)</ref>\n+# Derive the private key privkey for the scriptPubKey, or FAIL\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(pre-image))\n+# Generate a signature sig with privkey=privkey, sighash=sighash\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the sign operation must fail.\n+\n+=== Verifying ===\n+\n+The \"Verify\" action takes as input a standard flags value, a scriptPubKey, a message, a script sig, and a witness program.\n+It emits one of INCONCLUSIVE, VALID, INVALID, or ERROR.\n+\n+# Return ERROR if scriptPubKey already exists in scriptPubKeys set, otherwise insert it\n+# If one or more of the standard flags are unknown, return INCONCLUSIVE\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD).\n+# Let sighash = sha256(sha256(pre-image))\n+# Verify Script with flags=standard flags, scriptSig=script sig, scriptPubKey=scriptPubKey, witness=witness program, and sighash=sighash\n+# Return VALID if verify succeeds, otherwise return INVALID\n+\n+Repeat the above operation for each scriptPubKey, retaining the scriptPubKeys set. As noted, if the same scriptPubKey appears more than once, the verify operation must fail with an ERROR.\n+\n+* If a verification call returns ERROR or INVALID, return ERROR or INVALID immediately, ignoring as yet unverified entries.\n+* After all verifications complete, return INCONCLUSIVE if any verification call returned INCONCLUSIVE.\n+* Return VALID if and only if every verification returned VALID.\n+\n+== Future Extensions ==\n+\n+=== Proof of Funds ===\n+\n+The specification can be extended to handle proof of funds in the following manner:",
      "path": "bip-generic-signmessage.mediawiki",
      "position": null,
      "original_position": 104,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "58368027e491df02bea1041682a7c8775ff0eb80",
      "in_reply_to_id": 216488107,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I've rewritten the proposal to include this as part of the proposal.",
      "created_at": "2018-09-12T05:50:42Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216903576",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216903576"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216910978",
      "pull_request_review_id": 154500640,
      "id": 216910978,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjkxMDk3OA==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 24,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216759655,
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "BIP141 says the hash IS the witness program. I asked about this on twitter (https://twitter.com/kallerosenbaum/status/949630404302196736) and @sipa explained it well in that thread:\r\n\r\n\"I think of the P2WPKH or P2WSH hash as a program itself. It's certainly an unusual one, but that hash defines the semantics entirely. Would you agree it's a program if it we extended to allow including actual opcodes in the 2-40 bytes?\"",
      "created_at": "2018-09-12T06:34:04Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216910978",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216910978"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216913881",
      "pull_request_review_id": 154503961,
      "id": 216913881,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjkxMzg4MQ==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 24,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216759655,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Okay, I see what you're saying. So basically, what I call witness program is the witness, and the scriptPubKey is the witness program. In fact, I may even wanna call it (witness) redeem script, since it could potentially refer to a P2SH as well, I think.\r\n\r\nDoes that match your view?",
      "created_at": "2018-09-12T06:48:22Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216913881",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216913881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216920507",
      "pull_request_review_id": 154511979,
      "id": 216920507,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjkyMDUwNw==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 24,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216759655,
      "user": {
        "login": "kallerosenbaum",
        "id": 1530071,
        "node_id": "MDQ6VXNlcjE1MzAwNzE=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1530071?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallerosenbaum",
        "html_url": "https://github.com/kallerosenbaum",
        "followers_url": "https://api.github.com/users/kallerosenbaum/followers",
        "following_url": "https://api.github.com/users/kallerosenbaum/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallerosenbaum/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallerosenbaum/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallerosenbaum/subscriptions",
        "organizations_url": "https://api.github.com/users/kallerosenbaum/orgs",
        "repos_url": "https://api.github.com/users/kallerosenbaum/repos",
        "events_url": "https://api.github.com/users/kallerosenbaum/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallerosenbaum/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Not really. I think you should simply call it \"witness\". That's how it's defined in BIP141. The witness in turn is (in case of p2wsh) composed of input data and a witnessScript. The witnessScript corresponds to the redeemScript in the p2sh case.\r\n\r\nTo clarify, I suggest the following rewording: \"A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\"",
      "created_at": "2018-09-12T07:18:48Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216920507",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216920507"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216921275",
      "pull_request_review_id": 154512905,
      "id": 216921275,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjkyMTI3NQ==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 24,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216759655,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Sounds good. Thanks!",
      "created_at": "2018-09-12T07:21:39Z",
      "updated_at": "2018-09-12T07:22:06Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216921275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216921275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216921425",
      "pull_request_review_id": 154513086,
      "id": 216921425,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNjkyMTQyNQ==",
      "diff_hunk": "@@ -0,0 +1,130 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witnessProgram container.",
      "path": "bip-0322.mediawiki",
      "position": null,
      "original_position": 24,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "61156b66d8fe6a90c4a6e2e6cfae4a297de9cdd8",
      "in_reply_to_id": 216759655,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "2f15277",
      "created_at": "2018-09-12T07:22:19Z",
      "updated_at": "2018-09-12T07:22:19Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r216921425",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/216921425"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 24,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217106383",
      "pull_request_review_id": 154741923,
      "id": 217106383,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzEwNjM4Mw==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.\n+\n+=== Purpose: SignMessage ===\n+\n+The \"SignMessage\" purpose generates a sighash based on a scriptPubKey and a message. It emits a VALID verification result code unless otherwise stated.\n+\n+# Return INVALID if scriptPubKey already exists in `inputs` set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 inputs unless they are all distinct</ref>\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+\n+=== Purpose: ProveFunds ===\n+\n+The \"ProveFunds\" purpose generates a sighash and a scriptPubKey from a transaction, an output index, and a message. For multiple simultaneous proofs, it also requires access to the ordered list of proofs. It emits a VALID verification result code unless otherwise stated.\n+\n+# Let txid be the transaction ID of the transaction, and vout be the output index corresponding to the index of the output being spent\n+# Return INVALID if the txid:vout pair already exists in `inputs` set, otherwise insert it\n+# Return SPENT if the txid/vout is not a valid UTXO according to a Bitcoin node<ref><strong>Synced up or not?</strong> A normal verifier would use a synced up node. An auditor checking records from a client that were submitted in the past want to use a node that is synced up to the block corresponding to the proof, or the proof will fail, even if it may have been valid at the time of creation.</ref>\n+# Extract scriptPubKey from transaction output\n+# Define the message pre-image as the concatenation of the following components:<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>\n+#* the string \"POF:\"\n+#* the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD), including the null terminating character (i.e. write strlen(message) + 1 bytes, for a C string)\n+#* all transactions being proven for, as binary txid (little endian uint256) followed by index (little endian uint32), each separated by a single `0x00` byte",
      "path": "bip-0322.mediawiki",
      "position": 111,
      "original_position": 111,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Why have a separator character since the sizes of the TxID + Index entries are known? If a separator character is needed, [U+001e](https://unicode-table.com/en/001E/) or [U+001f](https://unicode-table.com/en/001F/) seems like a better choice than the null byte.",
      "created_at": "2018-09-12T16:40:43Z",
      "updated_at": "2018-09-12T17:02:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217106383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217106383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217106604",
      "pull_request_review_id": 154741923,
      "id": 217106604,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzEwNjYwNA==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.\n+\n+=== Purpose: SignMessage ===\n+\n+The \"SignMessage\" purpose generates a sighash based on a scriptPubKey and a message. It emits a VALID verification result code unless otherwise stated.\n+\n+# Return INVALID if scriptPubKey already exists in `inputs` set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 inputs unless they are all distinct</ref>\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+\n+=== Purpose: ProveFunds ===\n+\n+The \"ProveFunds\" purpose generates a sighash and a scriptPubKey from a transaction, an output index, and a message. For multiple simultaneous proofs, it also requires access to the ordered list of proofs. It emits a VALID verification result code unless otherwise stated.\n+\n+# Let txid be the transaction ID of the transaction, and vout be the output index corresponding to the index of the output being spent\n+# Return INVALID if the txid:vout pair already exists in `inputs` set, otherwise insert it\n+# Return SPENT if the txid/vout is not a valid UTXO according to a Bitcoin node<ref><strong>Synced up or not?</strong> A normal verifier would use a synced up node. An auditor checking records from a client that were submitted in the past want to use a node that is synced up to the block corresponding to the proof, or the proof will fail, even if it may have been valid at the time of creation.</ref>\n+# Extract scriptPubKey from transaction output\n+# Define the message pre-image as the concatenation of the following components:<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>\n+#* the string \"POF:\"\n+#* the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD), including the null terminating character (i.e. write strlen(message) + 1 bytes, for a C string)",
      "path": "bip-0322.mediawiki",
      "position": 110,
      "original_position": 110,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Exclude the null terminator. That seems fairly C-specific.",
      "created_at": "2018-09-12T16:41:19Z",
      "updated_at": "2018-09-12T17:02:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217106604",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217106604"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217107192",
      "pull_request_review_id": 154741923,
      "id": 217107192,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzEwNzE5Mg==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.",
      "path": "bip-0322.mediawiki",
      "position": 90,
      "original_position": 90,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I don't understand this. What tracks the state? Are the `SignMessage`/`ProveFunds` requests packaged into a single unit from which `inputs` is derived? Could this be stateless instead?",
      "created_at": "2018-09-12T16:43:14Z",
      "updated_at": "2018-09-12T17:02:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217107192",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217107192"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217108002",
      "pull_request_review_id": 154741923,
      "id": 217108002,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzEwODAwMg==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.\n+\n+=== Purpose: SignMessage ===",
      "path": "bip-0322.mediawiki",
      "position": 92,
      "original_position": 92,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Would be helpful to see the serialization for SignMessage and ProveFunds? Or are these RPCs?",
      "created_at": "2018-09-12T16:45:56Z",
      "updated_at": "2018-09-12T17:02:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217108002",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217108002"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217108730",
      "pull_request_review_id": 154741923,
      "id": 217108730,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzEwODczMA==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.\n+\n+=== Purpose: SignMessage ===\n+\n+The \"SignMessage\" purpose generates a sighash based on a scriptPubKey and a message. It emits a VALID verification result code unless otherwise stated.\n+\n+# Return INVALID if scriptPubKey already exists in `inputs` set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 inputs unless they are all distinct</ref>\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+\n+=== Purpose: ProveFunds ===\n+\n+The \"ProveFunds\" purpose generates a sighash and a scriptPubKey from a transaction, an output index, and a message. For multiple simultaneous proofs, it also requires access to the ordered list of proofs. It emits a VALID verification result code unless otherwise stated.\n+\n+# Let txid be the transaction ID of the transaction, and vout be the output index corresponding to the index of the output being spent\n+# Return INVALID if the txid:vout pair already exists in `inputs` set, otherwise insert it\n+# Return SPENT if the txid/vout is not a valid UTXO according to a Bitcoin node<ref><strong>Synced up or not?</strong> A normal verifier would use a synced up node. An auditor checking records from a client that were submitted in the past want to use a node that is synced up to the block corresponding to the proof, or the proof will fail, even if it may have been valid at the time of creation.</ref>\n+# Extract scriptPubKey from transaction output\n+# Define the message pre-image as the concatenation of the following components:<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>\n+#* the string \"POF:\"\n+#* the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD), including the null terminating character (i.e. write strlen(message) + 1 bytes, for a C string)\n+#* all transactions being proven for, as binary txid (little endian uint256) followed by index (little endian uint32), each separated by a single `0x00` byte\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+\n+=== Action: Sign ===\n+\n+The \"Sign\" action takes as input a purpose. It returns a signature or fails.\n+\n+# Obtain the sighash and scriptPubKey from the purpose; FAIL if not VALID\n+# Derive the private key privkey for the scriptPubKey; FAIL if not VALID\n+# Generate and return a signature sig with privkey=privkey, sighash=sighash",
      "path": "bip-0322.mediawiki",
      "position": 120,
      "original_position": 120,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": null,
      "user": {
        "login": "jimpo",
        "id": 881253,
        "node_id": "MDQ6VXNlcjg4MTI1Mw==",
        "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jimpo",
        "html_url": "https://github.com/jimpo",
        "followers_url": "https://api.github.com/users/jimpo/followers",
        "following_url": "https://api.github.com/users/jimpo/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jimpo/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jimpo/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
        "organizations_url": "https://api.github.com/users/jimpo/orgs",
        "repos_url": "https://api.github.com/users/jimpo/repos",
        "events_url": "https://api.github.com/users/jimpo/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jimpo/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "What does it mean to return a \"signature sig\"? Is this a `SignatureProof` as specified above?",
      "created_at": "2018-09-12T16:48:15Z",
      "updated_at": "2018-09-12T17:02:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217108730",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217108730"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217251936",
      "pull_request_review_id": 154919023,
      "id": 217251936,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzI1MTkzNg==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.\n+\n+=== Purpose: SignMessage ===\n+\n+The \"SignMessage\" purpose generates a sighash based on a scriptPubKey and a message. It emits a VALID verification result code unless otherwise stated.\n+\n+# Return INVALID if scriptPubKey already exists in `inputs` set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 inputs unless they are all distinct</ref>\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+\n+=== Purpose: ProveFunds ===\n+\n+The \"ProveFunds\" purpose generates a sighash and a scriptPubKey from a transaction, an output index, and a message. For multiple simultaneous proofs, it also requires access to the ordered list of proofs. It emits a VALID verification result code unless otherwise stated.\n+\n+# Let txid be the transaction ID of the transaction, and vout be the output index corresponding to the index of the output being spent\n+# Return INVALID if the txid:vout pair already exists in `inputs` set, otherwise insert it\n+# Return SPENT if the txid/vout is not a valid UTXO according to a Bitcoin node<ref><strong>Synced up or not?</strong> A normal verifier would use a synced up node. An auditor checking records from a client that were submitted in the past want to use a node that is synced up to the block corresponding to the proof, or the proof will fail, even if it may have been valid at the time of creation.</ref>\n+# Extract scriptPubKey from transaction output\n+# Define the message pre-image as the concatenation of the following components:<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>\n+#* the string \"POF:\"\n+#* the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD), including the null terminating character (i.e. write strlen(message) + 1 bytes, for a C string)\n+#* all transactions being proven for, as binary txid (little endian uint256) followed by index (little endian uint32), each separated by a single `0x00` byte",
      "path": "bip-0322.mediawiki",
      "position": 111,
      "original_position": 111,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": 217106383,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Cool, I didn't know about those unicode characters. I think you're right though. I wanted to include a separator character as I do so in the other cases, but since the entries are indeed fixed size it seems pointless.",
      "created_at": "2018-09-13T03:38:28Z",
      "updated_at": "2018-09-13T03:38:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217251936",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217251936"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 111,
      "original_line": 111,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217252240",
      "pull_request_review_id": 154919365,
      "id": 217252240,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzI1MjI0MA==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.\n+\n+=== Purpose: SignMessage ===\n+\n+The \"SignMessage\" purpose generates a sighash based on a scriptPubKey and a message. It emits a VALID verification result code unless otherwise stated.\n+\n+# Return INVALID if scriptPubKey already exists in `inputs` set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 inputs unless they are all distinct</ref>\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+\n+=== Purpose: ProveFunds ===\n+\n+The \"ProveFunds\" purpose generates a sighash and a scriptPubKey from a transaction, an output index, and a message. For multiple simultaneous proofs, it also requires access to the ordered list of proofs. It emits a VALID verification result code unless otherwise stated.\n+\n+# Let txid be the transaction ID of the transaction, and vout be the output index corresponding to the index of the output being spent\n+# Return INVALID if the txid:vout pair already exists in `inputs` set, otherwise insert it\n+# Return SPENT if the txid/vout is not a valid UTXO according to a Bitcoin node<ref><strong>Synced up or not?</strong> A normal verifier would use a synced up node. An auditor checking records from a client that were submitted in the past want to use a node that is synced up to the block corresponding to the proof, or the proof will fail, even if it may have been valid at the time of creation.</ref>\n+# Extract scriptPubKey from transaction output\n+# Define the message pre-image as the concatenation of the following components:<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>\n+#* the string \"POF:\"\n+#* the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD), including the null terminating character (i.e. write strlen(message) + 1 bytes, for a C string)",
      "path": "bip-0322.mediawiki",
      "position": 110,
      "original_position": 110,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": 217106604,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "I was going back and forth on this. By including it, you can actually \"print\" the string starting with \"POF:\". Without it, you need to sort of figure out where the string ends and the txid entries begin (e.g. take entry count * 36 and say string ends at character total len - that). \r\n\r\nPerhaps this should work the same way the signature proof container works, i.e. a varint of the message length followed by the message sans NULL term char.",
      "created_at": "2018-09-13T03:41:09Z",
      "updated_at": "2018-09-13T03:41:09Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217252240",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217252240"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 110,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217252463",
      "pull_request_review_id": 154919594,
      "id": 217252463,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzI1MjQ2Mw==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.",
      "path": "bip-0322.mediawiki",
      "position": 90,
      "original_position": 90,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": 217107192,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "It's simply a set that is used to ensure that no input is given twice. It is defined once and included/updated in each verify/proof call.\r\n\r\nFor example, I try to convince you that I have X bitcoin to send you, so I send you 150 proofs of individual UTXO's. But I am sneakily including the same proof several times. I don't think this is trivial to detect.",
      "created_at": "2018-09-13T03:43:11Z",
      "updated_at": "2018-09-13T03:43:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217252463",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217252463"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 90,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217252751",
      "pull_request_review_id": 154919946,
      "id": 217252751,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzI1Mjc1MQ==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.\n+\n+=== Purpose: SignMessage ===\n+\n+The \"SignMessage\" purpose generates a sighash based on a scriptPubKey and a message. It emits a VALID verification result code unless otherwise stated.\n+\n+# Return INVALID if scriptPubKey already exists in `inputs` set, otherwise insert it<ref><strong>Why track duplicates?</strong> Because a 3-entry proof is not proving 3 inputs unless they are all distinct</ref>\n+# Define the message pre-image as the sequence \"Bitcoin Message:\" concatenated with the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD)\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+\n+=== Purpose: ProveFunds ===\n+\n+The \"ProveFunds\" purpose generates a sighash and a scriptPubKey from a transaction, an output index, and a message. For multiple simultaneous proofs, it also requires access to the ordered list of proofs. It emits a VALID verification result code unless otherwise stated.\n+\n+# Let txid be the transaction ID of the transaction, and vout be the output index corresponding to the index of the output being spent\n+# Return INVALID if the txid:vout pair already exists in `inputs` set, otherwise insert it\n+# Return SPENT if the txid/vout is not a valid UTXO according to a Bitcoin node<ref><strong>Synced up or not?</strong> A normal verifier would use a synced up node. An auditor checking records from a client that were submitted in the past want to use a node that is synced up to the block corresponding to the proof, or the proof will fail, even if it may have been valid at the time of creation.</ref>\n+# Extract scriptPubKey from transaction output\n+# Define the message pre-image as the concatenation of the following components:<ref><strong>Why not just the UTXO data?</strong> We want the verifier to be able to challenge the prover with a custom message to sign, or anyone can reuse the POF proof for a set of UTXO:s once they have seen it, and the funds have not yet been spent</ref>\n+#* the string \"POF:\"\n+#* the message, encoded in UTF-8 using Normalization Form Compatibility Decomposition (NFKD), including the null terminating character (i.e. write strlen(message) + 1 bytes, for a C string)\n+#* all transactions being proven for, as binary txid (little endian uint256) followed by index (little endian uint32), each separated by a single `0x00` byte\n+# Let sighash = sha256(sha256(scriptPubKey || pre-image))\n+\n+=== Action: Sign ===\n+\n+The \"Sign\" action takes as input a purpose. It returns a signature or fails.\n+\n+# Obtain the sighash and scriptPubKey from the purpose; FAIL if not VALID\n+# Derive the private key privkey for the scriptPubKey; FAIL if not VALID\n+# Generate and return a signature sig with privkey=privkey, sighash=sighash",
      "path": "bip-0322.mediawiki",
      "position": 120,
      "original_position": 120,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": 217108730,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Yes, will clarify.",
      "created_at": "2018-09-13T03:46:10Z",
      "updated_at": "2018-09-13T03:46:10Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217252751",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217252751"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 120,
      "original_line": 120,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217253899",
      "pull_request_review_id": 154921270,
      "id": 217253899,
      "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDIxNzI1Mzg5OQ==",
      "diff_hunk": "@@ -0,0 +1,169 @@\n+<pre>\n+  BIP: 322\n+  Layer: Applications\n+  Title: Generic Signed Message Format\n+  Author: Karl-Johan Alm <karljohan-alm@garage.co.jp>\n+  Comments-Summary: No comments yet.\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0322\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2018-09-10\n+  License: CC0-1.0\n+</pre>\n+\n+== Abstract ==\n+\n+A standard for interoperable generic signed messages based on the Bitcoin Script format.\n+\n+== Motivation ==\n+\n+The current message signing standard only works for P2PKH (1...) addresses. By extending it to use a Bitcoin Script based approach, it could be made more generic without causing a too big burden on implementers, who most likely have access to Bitcoin Script interpreters already.\n+\n+== Specification ==\n+\n+A new structure <code>SignatureProof</code> is added, which is a simple serializable scriptSig & witness container.\n+\n+Two actions \"Sign\" and \"Verify\" are defined along with two *purposes* \"SignMessage\" and \"ProveFunds\".\n+\n+=== SignatureProof container ===\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|Uint32||4||flags||standard flags (1-to-1 with standard flags in Bitcoin Core)\n+|-\n+|VarInt||1-8||msglen||Number of bytes in message string, excluding NUL termination\n+|-\n+|Char*||[msglen]||msg||The message being signed for all subjects, excluding NUL termination\n+|-\n+|Uint8||1||entries||Number of proof entries<ref><strong>Why support multiple proofs?</strong> In particular with proof of funds, it is non-trivial to check a large number of individual proofs (one per UTXO) for duplicates. Software could be written to do so, but it seems more efficient to build this check into the specification itself.</ref>\n+|}\n+\n+The above is followed by [entries] number of signature entries:\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Type\n+!Length\n+!Name\n+!Comment\n+|-\n+|VarInt||1-8||scriptsiglen||Number of bytes in scriptSig data\n+|-\n+|Uint8*||[scriptsiglen]||scriptsig||ScriptSig data\n+|-\n+|VarInt||1-8||witlen||Number of bytes in witness data\n+|-\n+|Uint8*||[witlen]||wit||Witness\n+|}\n+\n+In some cases, the scriptsig or wit may be empty. If both are empty, the proof is incomplete.\n+\n+=== Result Codes ===\n+\n+A verification call will return a result code according to the table below.\n+\n+{|class=\"wikitable\" style=\"text-align: center;\"\n+|-\n+!Code\n+!Description\n+|-\n+|INCOMPLETE||One or several of the given challenges had an empty proof. The prover may need some other entity to complete the proof.\n+|-\n+|INCONCLUSIVE||One or several of the given proofs used unknown opcodes or the scriptPubKey had an unknown witness version, perhaps due to the verifying node being outdated.\n+|-\n+|VALID||All proofs were deemed valid.\n+|-\n+|INVALID||One or more of the given proofs were invalid\n+|-\n+|SPENT||One or more of the claimed UTXO:s has been spent\n+|-\n+|ERROR||An error was encountered\n+|}\n+\n+== Signing and Verifying ==\n+\n+Let there be an empty set `inputs` which is populated and tested at each call to one of the actions below.\n+\n+=== Purpose: SignMessage ===",
      "path": "bip-0322.mediawiki",
      "position": 92,
      "original_position": 92,
      "commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "original_commit_id": "2f152773e651e53e21db56dfbf4fb6b90cce715d",
      "in_reply_to_id": 217108002,
      "user": {
        "login": "kallewoof",
        "id": 250224,
        "node_id": "MDQ6VXNlcjI1MDIyNA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kallewoof",
        "html_url": "https://github.com/kallewoof",
        "followers_url": "https://api.github.com/users/kallewoof/followers",
        "following_url": "https://api.github.com/users/kallewoof/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/kallewoof/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/kallewoof/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
        "organizations_url": "https://api.github.com/users/kallewoof/orgs",
        "repos_url": "https://api.github.com/users/kallewoof/repos",
        "events_url": "https://api.github.com/users/kallewoof/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/kallewoof/received_events",
        "type": "User",
        "site_admin": false
      },
      "body": "Adding serialization.",
      "created_at": "2018-09-13T03:57:22Z",
      "updated_at": "2018-09-13T03:57:22Z",
      "html_url": "https://github.com/bitcoin/bips/pull/725#discussion_r217253899",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/217253899"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/725"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 92,
      "original_line": 92,
      "side": "RIGHT"
    }
  ]
}