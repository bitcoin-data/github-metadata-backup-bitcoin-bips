{
  "type": "pull",
  "pull": {
    "url": "https://api.github.com/repos/bitcoin/bips/pulls/1483",
    "id": 1473076467,
    "node_id": "PR_kwDOAN28mc5XzVzz",
    "html_url": "https://github.com/bitcoin/bips/pull/1483",
    "diff_url": "https://github.com/bitcoin/bips/pull/1483.diff",
    "patch_url": "https://github.com/bitcoin/bips/pull/1483.patch",
    "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483",
    "commits_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483/commits",
    "review_comments_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483/comments",
    "review_comment_url": "https://api.github.com/repos/bitcoin/bips/pulls/comments%7B/number%7D",
    "comments_url": "https://api.github.com/repos/bitcoin/bips/issues/1483/comments",
    "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/9042380f316beb9aa9fa97ad642cb3da2800ee56",
    "number": 1483,
    "state": "open",
    "locked": false,
    "maintainer_can_modify": true,
    "title": "BIP 77: Payjoin Version 2 â€” Async Payjoin",
    "user": {
      "login": "DanGould",
      "id": 8525467,
      "node_id": "MDQ6VXNlcjg1MjU0Njc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DanGould",
      "html_url": "https://github.com/DanGould",
      "followers_url": "https://api.github.com/users/DanGould/followers",
      "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
      "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
      "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
      "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
      "organizations_url": "https://api.github.com/users/DanGould/orgs",
      "repos_url": "https://api.github.com/users/DanGould/repos",
      "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
      "received_events_url": "https://api.github.com/users/DanGould/received_events",
      "type": "User",
      "site_admin": false,
      "patch_url": null
    },
    "body": "This document proposes an asynchronous, backwards-compatible second version of the payjoin protocol described in [BIP 78](bip-0078.mediawiki), enabling complete payjoin receiver functionality including payment output substitution with only an HTTP client rather than server. The former requirement for receivers to run HTTP servers is replaced with an untrusted third-party \"payjoin directory\" store-and-forward server accessed by polling clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. It was [originally proposed to the mailing list here](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-January/021364.html).\r\n\r\nThe protocol design has received rounds of review elsewhere on the [bitcoin-dev mailing list](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2023-August/021868.html) as well.\r\n\r\nFeedback from that list post has been incorporated into this draft.\r\n\r\nProposing this as an Standards Track BIP to ensure wallets across the ecosystem can come to rough consensus on a single asynchronous payjoin standard and correctly implement it widely.",
    "labels": [
      {
        "id": 275845989,
        "node_id": "MDU6TGFiZWwyNzU4NDU5ODk=",
        "url": "https://api.github.com/repos/bitcoin/bips/labels/New%20BIP",
        "name": "New BIP",
        "color": "5319e7",
        "default": false
      }
    ],
    "created_at": "2023-08-12T21:10:05Z",
    "updated_at": "2025-05-16T21:37:43Z",
    "mergeable": true,
    "mergeable_state": "clean",
    "merged": false,
    "merge_commit_sha": "c931b72534d646638046e4c4d87755359cf28e8e",
    "assignees": [],
    "requested_reviewers": [
      {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    ],
    "requested_teams": [],
    "rebaseable": false,
    "head": {
      "label": "DanGould:pjv2",
      "ref": "pjv2",
      "sha": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 477538160,
        "node_id": "R_kgDOHHancA",
        "name": "bips",
        "full_name": "DanGould/bips",
        "owner": {
          "login": "DanGould",
          "id": 8525467,
          "node_id": "MDQ6VXNlcjg1MjU0Njc=",
          "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/DanGould",
          "html_url": "https://github.com/DanGould",
          "followers_url": "https://api.github.com/users/DanGould/followers",
          "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
          "organizations_url": "https://api.github.com/users/DanGould/orgs",
          "repos_url": "https://api.github.com/users/DanGould/repos",
          "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/DanGould/received_events",
          "type": "User",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/DanGould/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": true,
        "url": "https://api.github.com/repos/DanGould/bips",
        "archive_url": "https://api.github.com/repos/DanGould/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/DanGould/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/DanGould/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/DanGould/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/DanGould/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/DanGould/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/DanGould/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/DanGould/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/DanGould/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/DanGould/bips/contributors",
        "deployments_url": "https://api.github.com/repos/DanGould/bips/deployments",
        "downloads_url": "https://api.github.com/repos/DanGould/bips/downloads",
        "events_url": "https://api.github.com/repos/DanGould/bips/events",
        "forks_url": "https://api.github.com/repos/DanGould/bips/forks",
        "git_commits_url": "https://api.github.com/repos/DanGould/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/DanGould/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/DanGould/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/DanGould/bips.git",
        "issue_comment_url": "https://api.github.com/repos/DanGould/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/DanGould/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/DanGould/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/DanGould/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/DanGould/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/DanGould/bips/languages",
        "merges_url": "https://api.github.com/repos/DanGould/bips/merges",
        "milestones_url": "https://api.github.com/repos/DanGould/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/DanGould/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/DanGould/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/DanGould/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:DanGould/bips.git",
        "stargazers_url": "https://api.github.com/repos/DanGould/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/DanGould/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/DanGould/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/DanGould/bips/subscription",
        "tags_url": "https://api.github.com/repos/DanGould/bips/tags",
        "teams_url": "https://api.github.com/repos/DanGould/bips/teams",
        "trees_url": "https://api.github.com/repos/DanGould/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/DanGould/bips.git",
        "hooks_url": "https://api.github.com/repos/DanGould/bips/hooks",
        "svn_url": "https://github.com/DanGould/bips",
        "homepage": "",
        "forks_count": 1,
        "stargazers_count": 0,
        "watchers_count": 0,
        "size": 16433,
        "default_branch": "master",
        "open_issues_count": 0,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": true,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-07T00:02:32Z",
        "created_at": "2022-04-04T03:35:06Z",
        "updated_at": "2022-04-03T20:34:01Z",
        "allow_forking": true
      }
    },
    "base": {
      "label": "bitcoin:master",
      "ref": "master",
      "sha": "3365fb7a7e5e25b95b94d65808e32a02aa684aaa",
      "user": {
        "login": "bitcoin",
        "id": 528860,
        "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
        "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/bitcoin",
        "html_url": "https://github.com/bitcoin",
        "followers_url": "https://api.github.com/users/bitcoin/followers",
        "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
        "organizations_url": "https://api.github.com/users/bitcoin/orgs",
        "repos_url": "https://api.github.com/users/bitcoin/repos",
        "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/bitcoin/received_events",
        "type": "Organization",
        "site_admin": false,
        "patch_url": null
      },
      "repo": {
        "id": 14531737,
        "node_id": "MDEwOlJlcG9zaXRvcnkxNDUzMTczNw==",
        "name": "bips",
        "full_name": "bitcoin/bips",
        "owner": {
          "login": "bitcoin",
          "id": 528860,
          "node_id": "MDEyOk9yZ2FuaXphdGlvbjUyODg2MA==",
          "avatar_url": "https://avatars.githubusercontent.com/u/528860?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bitcoin",
          "html_url": "https://github.com/bitcoin",
          "followers_url": "https://api.github.com/users/bitcoin/followers",
          "following_url": "https://api.github.com/users/bitcoin/following%7B/other_user%7D",
          "gists_url": "https://api.github.com/users/bitcoin/gists%7B/gist_id%7D",
          "starred_url": "https://api.github.com/users/bitcoin/starred%7B/owner%7D%7B/repo%7D",
          "subscriptions_url": "https://api.github.com/users/bitcoin/subscriptions",
          "organizations_url": "https://api.github.com/users/bitcoin/orgs",
          "repos_url": "https://api.github.com/users/bitcoin/repos",
          "events_url": "https://api.github.com/users/bitcoin/events%7B/privacy%7D",
          "received_events_url": "https://api.github.com/users/bitcoin/received_events",
          "type": "Organization",
          "site_admin": false,
          "patch_url": null
        },
        "private": false,
        "html_url": "https://github.com/bitcoin/bips",
        "description": "Bitcoin Improvement Proposals",
        "fork": false,
        "url": "https://api.github.com/repos/bitcoin/bips",
        "archive_url": "https://api.github.com/repos/bitcoin/bips/%7Barchive_format%7D%7B/ref%7D",
        "assignees_url": "https://api.github.com/repos/bitcoin/bips/assignees%7B/user%7D",
        "blobs_url": "https://api.github.com/repos/bitcoin/bips/git/blobs%7B/sha%7D",
        "branches_url": "https://api.github.com/repos/bitcoin/bips/branches%7B/branch%7D",
        "collaborators_url": "https://api.github.com/repos/bitcoin/bips/collaborators%7B/collaborator%7D",
        "comments_url": "https://api.github.com/repos/bitcoin/bips/comments%7B/number%7D",
        "commits_url": "https://api.github.com/repos/bitcoin/bips/commits%7B/sha%7D",
        "compare_url": "https://api.github.com/repos/bitcoin/bips/compare/%7Bbase%7D...%7Bhead%7D",
        "contents_url": "https://api.github.com/repos/bitcoin/bips/contents/%7B+path%7D",
        "contributors_url": "https://api.github.com/repos/bitcoin/bips/contributors",
        "deployments_url": "https://api.github.com/repos/bitcoin/bips/deployments",
        "downloads_url": "https://api.github.com/repos/bitcoin/bips/downloads",
        "events_url": "https://api.github.com/repos/bitcoin/bips/events",
        "forks_url": "https://api.github.com/repos/bitcoin/bips/forks",
        "git_commits_url": "https://api.github.com/repos/bitcoin/bips/git/commits%7B/sha%7D",
        "git_refs_url": "https://api.github.com/repos/bitcoin/bips/git/refs%7B/sha%7D",
        "git_tags_url": "https://api.github.com/repos/bitcoin/bips/git/tags%7B/sha%7D",
        "git_url": "git://github.com/bitcoin/bips.git",
        "issue_comment_url": "https://api.github.com/repos/bitcoin/bips/issues/comments%7B/number%7D",
        "issue_events_url": "https://api.github.com/repos/bitcoin/bips/issues/events%7B/number%7D",
        "issues_url": "https://api.github.com/repos/bitcoin/bips/issues%7B/number%7D",
        "keys_url": "https://api.github.com/repos/bitcoin/bips/keys%7B/key_id%7D",
        "labels_url": "https://api.github.com/repos/bitcoin/bips/labels%7B/name%7D",
        "languages_url": "https://api.github.com/repos/bitcoin/bips/languages",
        "merges_url": "https://api.github.com/repos/bitcoin/bips/merges",
        "milestones_url": "https://api.github.com/repos/bitcoin/bips/milestones%7B/number%7D",
        "notifications_url": "https://api.github.com/repos/bitcoin/bips/notifications%7B?since,all,participating}",
        "pulls_url": "https://api.github.com/repos/bitcoin/bips/pulls%7B/number%7D",
        "releases_url": "https://api.github.com/repos/bitcoin/bips/releases%7B/id%7D",
        "ssh_url": "git@github.com:bitcoin/bips.git",
        "stargazers_url": "https://api.github.com/repos/bitcoin/bips/stargazers",
        "statuses_url": "https://api.github.com/repos/bitcoin/bips/statuses/%7Bsha%7D",
        "subscribers_url": "https://api.github.com/repos/bitcoin/bips/subscribers",
        "subscription_url": "https://api.github.com/repos/bitcoin/bips/subscription",
        "tags_url": "https://api.github.com/repos/bitcoin/bips/tags",
        "teams_url": "https://api.github.com/repos/bitcoin/bips/teams",
        "trees_url": "https://api.github.com/repos/bitcoin/bips/git/trees%7B/sha%7D",
        "clone_url": "https://github.com/bitcoin/bips.git",
        "hooks_url": "https://api.github.com/repos/bitcoin/bips/hooks",
        "svn_url": "https://github.com/bitcoin/bips",
        "homepage": "",
        "language": "Wikitext",
        "forks_count": 5600,
        "stargazers_count": 9920,
        "watchers_count": 9920,
        "size": 16194,
        "default_branch": "master",
        "open_issues_count": 35,
        "is_template": false,
        "topics": [],
        "has_issues": false,
        "has_projects": false,
        "has_wiki": true,
        "has_pages": false,
        "has_downloads": true,
        "archived": false,
        "disabled": false,
        "visibility": "public",
        "pushed_at": "2025-05-16T16:58:31Z",
        "created_at": "2013-11-19T17:18:41Z",
        "updated_at": "2025-05-16T16:58:36Z",
        "allow_forking": true
      }
    },
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
      }
    },
    "author_association": "CONTRIBUTOR",
    "draft": false,
    "additions": 710,
    "deletions": 0,
    "changed_files": 2,
    "commits": 156,
    "review_comments": 215,
    "comments": 19
  },
  "events": [
    {
      "event": "subscribed",
      "id": 10079823582,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAJYzebe",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/10079823582",
      "actor": {
        "login": "ubbabeck",
        "id": 36157890,
        "node_id": "MDQ6VXNlcjM2MTU3ODkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/36157890?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ubbabeck",
        "html_url": "https://github.com/ubbabeck",
        "followers_url": "https://api.github.com/users/ubbabeck/followers",
        "following_url": "https://api.github.com/users/ubbabeck/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/ubbabeck/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/ubbabeck/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/ubbabeck/subscriptions",
        "organizations_url": "https://api.github.com/users/ubbabeck/orgs",
        "repos_url": "https://api.github.com/users/ubbabeck/repos",
        "events_url": "https://api.github.com/users/ubbabeck/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/ubbabeck/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-08-13T12:40:36Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 11242576509,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAKeHBp9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11242576509",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "0056d9d1cf638606b012c4cfd609bf28c22f5d72",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/0056d9d1cf638606b012c4cfd609bf28c22f5d72",
      "created_at": "2023-12-14T02:23:16Z"
    },
    {
      "event": "ready_for_review",
      "id": 11242607479,
      "node_id": "RFRE_lADOAN28mc5uKfAvzwAAAAKeHJN3",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11242607479",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-14T02:30:04Z"
    },
    {
      "event": "labeled",
      "id": 11340766832,
      "node_id": "LE_lADOAN28mc5uKfAvzwAAAAKj9l5w",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11340766832",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:03:19Z",
      "label": {
        "name": "New BIP",
        "color": "5319e7"
      }
    },
    {
      "event": "commented",
      "id": 1869727203,
      "node_id": "IC_kwDOAN28mc5vccXj",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/1869727203",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:14:47Z",
      "updated_at": "2023-12-26T19:14:47Z",
      "author_association": "MEMBER",
      "body": "Let's call this BIP 77",
      "user": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-1869727203",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "renamed",
      "id": 11340807520,
      "node_id": "RTE_lADOAN28mc5uKfAvzwAAAAKj9v1g",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/11340807520",
      "actor": {
        "login": "luke-jr",
        "id": 1095675,
        "node_id": "MDQ6VXNlcjEwOTU2NzU=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/luke-jr",
        "html_url": "https://github.com/luke-jr",
        "followers_url": "https://api.github.com/users/luke-jr/followers",
        "following_url": "https://api.github.com/users/luke-jr/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/luke-jr/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/luke-jr/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
        "organizations_url": "https://api.github.com/users/luke-jr/orgs",
        "repos_url": "https://api.github.com/users/luke-jr/repos",
        "events_url": "https://api.github.com/users/luke-jr/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/luke-jr/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2023-12-26T19:16:05Z",
      "rename": {
        "from": "BIP for Payjoin Version 2: Serverless Payjoin",
        "to": "BIP 77: Payjoin Version 2: Serverless Payjoin"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12030454087,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAALNEilH",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12030454087",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4334ad579a1448fdcdfb2db89927bef5f342d57d",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/4334ad579a1448fdcdfb2db89927bef5f342d57d",
      "created_at": "2024-03-06T16:29:52Z"
    },
    {
      "event": "commented",
      "id": 2088916537,
      "node_id": "IC_kwDOAN28mc58glY5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2088916537",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:09Z",
      "updated_at": "2024-05-01T18:50:09Z",
      "author_association": "CONTRIBUTOR",
      "body": "Hi @DanGould, the first comment on this PR seems to indicate that this proposal is still WIP. Is that an accurate understanding? If this PR is not yet ready to be merged, perhaps it should be changed to \"Draft\". If I misunderstood the status of this PR, please respond below so someone may review to assess whether this is ready for merge.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2088916537",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 12673599205,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAALzZ8bl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12673599205",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:10Z"
    },
    {
      "event": "subscribed",
      "id": 12673599217,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAALzZ8bx",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12673599217",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-01T18:50:10Z"
    },
    {
      "event": "reviewed",
      "id": 2036951404,
      "node_id": "PRR_kwDOAN28mc55aWls",
      "url": null,
      "actor": null,
      "commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2036951404",
      "submitted_at": "2024-05-02T22:23:28Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2037072195,
      "node_id": "PRR_kwDOAN28mc55a0FD",
      "url": null,
      "actor": null,
      "commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2037072195",
      "submitted_at": "2024-05-02T22:30:15Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "convert_to_draft",
      "id": 12691191699,
      "node_id": "CTDE_lADOAN28mc5uKfAvzwAAAAL0dDeT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691191699",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T02:50:35Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12691236404,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL0dOY0",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691236404",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "4c5f3c5433fc6b4de087dfd0052419cdf68721a4",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/4c5f3c5433fc6b4de087dfd0052419cdf68721a4",
      "created_at": "2024-05-03T03:04:08Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12691275864,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL0dYBY",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12691275864",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "9f4624e6d11577c403c3b6d003d99be9f124b372",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/9f4624e6d11577c403c3b6d003d99be9f124b372",
      "created_at": "2024-05-03T03:13:18Z"
    },
    {
      "event": "commented",
      "id": 2092055828,
      "node_id": "IC_kwDOAN28mc58sj0U",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2092055828",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-05-03T03:14:37Z",
      "updated_at": "2024-05-03T03:14:37Z",
      "author_association": "CONTRIBUTOR",
      "body": "Converted to draft until we have some more experience with the implementations in the wild.\r\n\r\nStill seeking review especially on the soundness of the network privacy, choice of cryptosystem, and bip21 parameter encoding.",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2092055828",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "reviewed",
      "id": 2039869772,
      "node_id": "PRR_kwDOAN28mc55lfFM",
      "url": null,
      "actor": null,
      "commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2039869772",
      "submitted_at": "2024-05-06T02:23:49Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12720995821,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL2Ov3t",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12720995821",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "ee517dd77135d8345a1ad86bd1cd20a487db05ad",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/ee517dd77135d8345a1ad86bd1cd20a487db05ad",
      "created_at": "2024-05-06T22:00:57Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 12721019297,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAL2O1mh",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/12721019297",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "created_at": "2024-05-06T22:03:55Z"
    },
    {
      "event": "reviewed",
      "id": 2041919837,
      "node_id": "PRR_kwDOAN28mc55tTld",
      "url": null,
      "actor": null,
      "commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2041919837",
      "submitted_at": "2024-05-07T01:48:07Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2041927205,
      "node_id": "PRR_kwDOAN28mc55tVYl",
      "url": null,
      "actor": null,
      "commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2041927205",
      "submitted_at": "2024-05-07T01:54:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2051527351,
      "node_id": "PRR_kwDOAN28mc56R9K3",
      "url": null,
      "actor": null,
      "commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2051527351",
      "submitted_at": "2024-05-13T00:56:56Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2072406420,
      "node_id": "PRR_kwDOAN28mc57hmmU",
      "url": null,
      "actor": null,
      "commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Midway through a first (non-technical) review pass. Once at the end, will read through BIP78 and then do a more technical review.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2072406420",
      "submitted_at": "2024-05-23T00:23:13Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2143981635,
      "node_id": "IC_kwDOAN28mc5_ypBD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2143981635",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-02T18:38:58Z",
      "updated_at": "2024-07-15T17:02:13Z",
      "author_association": "CONTRIBUTOR",
      "body": "@jonatack Thank you for the review and implicit advice about how to clarify technical specifications such as this one with even small changes like using explicit subjects. Your patient, thorough contribution moves the needle toward production readiness and helps me reflect on the parts of the spec that are most lacking to correct them.\r\n\r\nIn incorporating your fresh perspective, I see a few issues remaining that I'll outline as a note for myself to correct:\r\n\r\n- [x] Revise document to describe Payjoin \"sessions\" instead of directory \"enrollment\". e.g.: \"The payjoin version 2 protocol uses per-[session] public keys\"\r\n- [ ] Replacethe `Authenticate: <token>` messaging with a mask on eligible OHTTP relay addresses that start with \"pay\" domains. Avoid using identifying protocols like authentication tokens to preserve privacy. The goal is to make free access to these servers while by limiting their capability to preventing DoS vectors or misuse.\r\n- [ ] Either include PSBTv2 in the reference implementation or remove it from the bip77 spec",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2143981635",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 13012737826,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAAMHnp8i",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13012737826",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-02T18:39:00Z"
    },
    {
      "event": "subscribed",
      "id": 13012737834,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAMHnp8q",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13012737834",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-06-02T18:39:00Z"
    },
    {
      "event": "reviewed",
      "id": 2126619359,
      "node_id": "PRR_kwDOAN28mc5-waLf",
      "url": null,
      "actor": null,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "Review pass of the latest changes in 3b863a402e0250658985f08a455a6cd103e269e5.\r\n\r\nNote to self: continue original review pass from line 180 to the end.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2126619359",
      "submitted_at": "2024-06-18T22:15:44Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2126694296,
      "node_id": "PRR_kwDOAN28mc5-wseY",
      "url": null,
      "actor": null,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "body": "> continue original review pass from line 180 to the end\r\n\r\nDone (for the initial proofreading pass)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2126694296",
      "submitted_at": "2024-06-18T23:55:45Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2149540099,
      "node_id": "PRR_kwDOAN28mc6AH2ED",
      "url": null,
      "actor": null,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "",
      "user": {
        "login": "5twelve",
        "id": 97030944,
        "node_id": "U_kgDOBciTIA",
        "avatar_url": "https://avatars.githubusercontent.com/u/97030944?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/5twelve",
        "html_url": "https://github.com/5twelve",
        "followers_url": "https://api.github.com/users/5twelve/followers",
        "following_url": "https://api.github.com/users/5twelve/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/5twelve/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/5twelve/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/5twelve/subscriptions",
        "organizations_url": "https://api.github.com/users/5twelve/orgs",
        "repos_url": "https://api.github.com/users/5twelve/repos",
        "events_url": "https://api.github.com/users/5twelve/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/5twelve/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2149540099",
      "submitted_at": "2024-06-29T10:47:50Z",
      "state": "APPROVED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2159134367,
      "node_id": "PRR_kwDOAN28mc6Ascaf",
      "url": null,
      "actor": null,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "",
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2159134367",
      "submitted_at": "2024-07-04T20:18:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2209530281,
      "node_id": "IC_kwDOAN28mc6DssGp",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2209530281",
      "actor": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-04T20:22:01Z",
      "updated_at": "2024-07-04T20:22:01Z",
      "author_association": "CONTRIBUTOR",
      "body": "I really enjoyed reading this :) Well done! Dropped some comments on mainly nit related suggestions, but there were a few places where I left comments seeking clarification.",
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2209530281",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "labeled",
      "id": 13426373892,
      "node_id": "LE_lADOAN28mc5uKfAvzwAAAAMgRjUE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13426373892",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-08T16:02:01Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "renamed",
      "id": 13507528290,
      "node_id": "RTE_lADOAN28mc5uKfAvzwAAAAMlHIZi",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13507528290",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-07-15T15:37:12Z",
      "rename": {
        "from": "BIP 77: Payjoin Version 2: Serverless Payjoin",
        "to": "BIP 77: Payjoin Version 2 â€” Async Payjoin"
      }
    },
    {
      "event": "head_ref_force_pushed",
      "id": 13511076658,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAMlUqsy",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/13511076658",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "df3bd5239b20a9183d24d27c0d1d46da367a5262",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/df3bd5239b20a9183d24d27c0d1d46da367a5262",
      "created_at": "2024-07-15T21:03:41Z"
    },
    {
      "event": "reviewed",
      "id": 2246701892,
      "node_id": "PRR_kwDOAN28mc6F6fNE",
      "url": null,
      "actor": null,
      "commit_id": "df3bd5239b20a9183d24d27c0d1d46da367a5262",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2246701892",
      "submitted_at": "2024-08-19T23:26:14Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2374455885,
      "node_id": "IC_kwDOAN28mc6Nh1JN",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2374455885",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-25T15:42:52Z",
      "updated_at": "2024-09-25T15:42:52Z",
      "author_association": "MEMBER",
      "body": "Hi @DanGould, want to update here?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2374455885",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 14401465003,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAANaZOqr",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14401465003",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-25T15:42:55Z"
    },
    {
      "event": "subscribed",
      "id": 14401465017,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAANaZOq5",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14401465017",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-25T15:42:55Z"
    },
    {
      "event": "commented",
      "id": 2377653576,
      "node_id": "IC_kwDOAN28mc6NuB1I",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2377653576",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T18:29:16Z",
      "updated_at": "2024-09-26T18:29:16Z",
      "author_association": "CONTRIBUTOR",
      "body": "> Hi @DanGould, want to update here?\r\n\r\nSince the last review I have made breaking changes, which I'll apply with an update now. I think we're at the point where each design decision I'm aware of is deliberate. I'll take it out of draft once the new update is pushed.",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2377653576",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 14420949929,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAANbjjup",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14420949929",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T18:29:18Z"
    },
    {
      "event": "subscribed",
      "id": 14420949952,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAANbjjvA",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14420949952",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T18:29:18Z"
    },
    {
      "event": "commented",
      "id": 2377935683,
      "node_id": "IC_kwDOAN28mc6NvGtD",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2377935683",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T21:05:00Z",
      "updated_at": "2024-09-26T21:05:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "The main changes from the last review are that\r\n\r\n- HTTP request methods (POST, GET, PUT) control the flow of the protocol rather than further path subdiretories\r\n- bip21 parameters (pj subdirectory and ohttp key config) serialize as compressed public keys to shorten the URI\r\n- Use PSBTv0 since PSBTv2 support is still very limited\r\n- explicitly mention the format of the `ohttp` KeyConfiguration URL fragment",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2377935683",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "ready_for_review",
      "id": 14422580022,
      "node_id": "RFRE_lADOAN28mc5uKfAvzwAAAANbpxs2",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14422580022",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-09-26T21:05:20Z"
    },
    {
      "event": "reviewed",
      "id": 2353089756,
      "node_id": "PRR_kwDOAN28mc6MQUzc",
      "url": null,
      "actor": null,
      "commit_id": "e44f748f6a273219462a97058a064db0b70d2dab",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2353089756",
      "submitted_at": "2024-10-07T23:09:51Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2355215628,
      "node_id": "PRR_kwDOAN28mc6MYb0M",
      "url": null,
      "actor": null,
      "commit_id": "f7a5d25b522dcb0304e0f444426403f3dd930462",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "NACK\r\n\r\nThis BIP is bad for privacy and lacks details in \"attack vectors\" section. Please be careful while implementing.\r\n\r\n",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2355215628",
      "submitted_at": "2024-10-08T18:19:04Z",
      "state": "CHANGES_REQUESTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2400541911,
      "node_id": "IC_kwDOAN28mc6PFVzX",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2400541911",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T18:26:25Z",
      "updated_at": "2024-10-08T18:26:25Z",
      "author_association": "MEMBER",
      "body": "> NACK\r\n\r\n> This BIP is bad for privacy\r\n\r\nCan you provide the reasoning, please?",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2400541911",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "commented",
      "id": 2400557444,
      "node_id": "IC_kwDOAN28mc6PFZmE",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2400557444",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T18:35:12Z",
      "updated_at": "2024-10-17T03:10:38Z",
      "author_association": "NONE",
      "body": "> > NACK\r\n> \r\n> > This BIP is bad for privacy\r\n> \r\n> Can you provide the reasoning, please?\r\n\r\nRisks with accepting donations using payjoin:\r\n\r\n- Probing: Already mentioned in BIP 78 \r\n- Small donations: Best form of attack in which FBI donates some sats to support their work and know all the UTXOs in the wallet",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2400557444",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "commented",
      "id": 2400561766,
      "node_id": "IC_kwDOAN28mc6PFapm",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2400561766",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T18:37:22Z",
      "updated_at": "2024-10-08T18:37:22Z",
      "author_association": "NONE",
      "body": "Example: https://hrf.org/payjoin ",
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2400561766",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "commented",
      "id": 2400610172,
      "node_id": "IC_kwDOAN28mc6PFmd8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2400610172",
      "actor": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T19:04:22Z",
      "updated_at": "2024-10-08T19:04:22Z",
      "author_association": "NONE",
      "body": "> Risks with accepting donations using payjoin:\r\n> \r\n> * Probing: Already mentioned in BIP 78 but BIP 77 author too emotional to accept it\r\n> * Small donations: Best form of attack in which FBI donates some sats to support their work and know all the UTXOs in the wallet\r\n\r\n@1440000bytes Your first point has already been addressed and he has added a link to the attack vectors section on BIP-78. No one is \"not accepting\" anything. Are you asking that the full explanation given on probing attacks in BIP-78 be redundantly added here? What exactly is your criticism?\r\n\r\nYour second point has already been addressed in BIP-78, here is what the link that you suggested be added says:\r\n```\r\nWhile we cannot prevent this type of attack entirely, we implemented the following mitigations:\r\n\r\n- When the receiver detects an original transaction being broadcast, or if the receiver detects that the original transaction has been double spent, then they will reuse the UTXO that was exposed for the next payjoin.\r\n- While the exposed UTXO will be reused in priority to not leak other UTXOs, there is no strong guarantee about it. This prevents the attacker from detecting with certainty the next payjoin of the merchant to another peer.\r\n```\r\n\r\nBIP-78 already explains what can be done to mitigate this, and fully acknowledges this tradeoff.\r\nCan you explain, in terms of probing attacks, how BIP-77 would be _worse_ for privacy than the already accepted BIP-78?",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2400610172",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 14561624858,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAANj8MMa",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14561624858",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T19:04:25Z"
    },
    {
      "event": "subscribed",
      "id": 14561624879,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAANj8MMv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14561624879",
      "actor": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-08T19:04:25Z"
    },
    {
      "event": "reviewed",
      "id": 2355668363,
      "node_id": "PRR_kwDOAN28mc6MaKWL",
      "url": null,
      "actor": null,
      "commit_id": "3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2355668363",
      "submitted_at": "2024-10-08T22:48:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2401109899,
      "node_id": "IC_kwDOAN28mc6PHgeL",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2401109899",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T01:47:00Z",
      "updated_at": "2024-10-09T01:47:00Z",
      "author_association": "CONTRIBUTOR",
      "body": "The sender could first register an additional session subdirectory for the response, and include the associated public key along with the original PSBT when posting to the receiver's subdirectory. The sender would then respond in the sender's subdirectory.\r\n\r\nEliminating the request/response distinction would avoid a metadata leak, namely whether or not the payjoin flow was completed, since requests and responses would be indistinguishable.\r\n\r\nA followup suggestion would be removing explicit session initialization. Incidentally in the reference directory it appears that since `post_session` is stateless, calling it before other operations is indeed not enforced. GET & POST handlers do appear to validate the `id` path component, but if they did then the first successful request would indicate to either party that the subdirectory ID is valid (or perhaps arbitrary IDs were allowed by design?)\r\n\r\nTiming analysis of subdirectory polling could still leak information about which payjoin requests were responded to, but aggressive clients could mitigate this by maintaining a pool of pre-allocated and randomly polled subdirectories ahead of time, and by responding to themselves in some of them with dummy payloads to generate random cover traffic.",
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2401109899",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "commented",
      "id": 2401274780,
      "node_id": "IC_kwDOAN28mc6PIIuc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2401274780",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T04:14:47Z",
      "updated_at": "2024-10-09T05:00:24Z",
      "author_association": "CONTRIBUTOR",
      "body": "@nothingmuch I'll write up your suggestions to simplify the protocol. It makes the directory implementation simpler, requires fewer protocol message types, and even reduces bandwidth. wowza\r\n\r\n> The sender could first register an additional session subdirectory ... and include the associated public key along with the original PSBT\r\n\r\nHPKE E2EE deployed in this application in Authenticated mode (akin to Noise Framework's IK model) already requires the sender to include their session public key as associated data, so this is an pretty darn easy change to make. The change not only simplifies the protocol messaging, but as you say eliminates a metadata leak. I'm a big fan.\r\n\r\n> A followup suggestion would be removing explicit session initialization\r\n\r\nThis makes sense too. Creating separate subdirectory resources for either sender or receiver on POST then GETting updates to replace the repeated sender POST polling reduces bandwidth too, since the GET request doesn't contain that repeat POST body.\r\n\r\nEven without aggressive client mitigation of the remaining client leaks subject to timing analysis assuming this suggestion is put in place, your new design deletes complexity and improves efficiency.\r\n\r\nI'll update the BIP to the best of my understanding based on your comment and link it to a `rust-payjoin` issue to implement. This spec has already made some breaking changes since the last directory release, so it's a good time for another one since we won't break production implementations other than our own.\r\n\r\nEdit: Is there a potential authorization issue now that the sender POSTs first? In the current design of the protocol, only the receiver might need authorization from the directory in order to initialize a session subdirectory, and having knowledge of a session public key was sufficient for the sender to use an initialized subdirectory. Now, the sender would also need to obtain authorization somehow, since the directory doesn't yet know about the session the receiver has implicitly initiated by communicating directly with the sender, out of band from the directory. We'll have to work out how this might affect the expiration mechanic as well.",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2401274780",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 14565608275,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAANkLYtT",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14565608275",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T04:14:48Z"
    },
    {
      "event": "subscribed",
      "id": 14565608281,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAANkLYtZ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14565608281",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-09T04:14:48Z"
    },
    {
      "event": "unlabeled",
      "id": 14612261385,
      "node_id": "UNLE_lADOAN28mc5uKfAvzwAAAANm9WoJ",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14612261385",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-10-11T17:24:33Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "reviewed",
      "id": 2373349802,
      "node_id": "PRR_kwDOAN28mc6NdnGq",
      "url": null,
      "actor": null,
      "commit_id": "c917eab7e8d2c4cd72b50bb6db877a171ffcd037",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2373349802",
      "submitted_at": "2024-10-16T18:35:12Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2373985813,
      "node_id": "PRR_kwDOAN28mc6NgCYV",
      "url": null,
      "actor": null,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "Some minor clarifications following the \"original\"/\"proposal\" payjoin PSBT terminology established in BIP78. ",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2373985813",
      "submitted_at": "2024-10-17T02:02:29Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2373998516,
      "node_id": "PRR_kwDOAN28mc6NgFe0",
      "url": null,
      "actor": null,
      "commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "body": "I struggled a bit to grok the new messaging flow. After reading through the implementation I think I get it now and left some corrections/clarification suggestions throughout.",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2373998516",
      "submitted_at": "2024-10-17T22:22:58Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 14756189853,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAANviZad",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/14756189853",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "created_at": "2024-10-21T01:39:31Z"
    },
    {
      "event": "reviewed",
      "id": 2382404494,
      "node_id": "PRR_kwDOAN28mc6OAJuO",
      "url": null,
      "actor": null,
      "commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2382404494",
      "submitted_at": "2024-10-21T15:03:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2434059012,
      "node_id": "PRR_kwDOAN28mc6RFMsE",
      "url": null,
      "actor": null,
      "commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "This is looking great. I did not notice any blocking formatting issues, and it appears to fulfill all formal criteria to get merged. Please let me know when you have concluded addressing the outstanding review comments and are ready for it to get merged.\r\n\r\nWould it be viable to provide test vectors for this proposal? If so, I would suggest that some be added before this proposal is advanced to \"Proposed\".",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2434059012",
      "submitted_at": "2024-11-13T19:40:27Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "labeled",
      "id": 15766532897,
      "node_id": "LE_lADOAN28mc5uKfAvzwAAAAOrwjMh",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/15766532897",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2024-12-26T15:56:33Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "reviewed",
      "id": 2565276147,
      "node_id": "PRR_kwDOAN28mc6Y5wHz",
      "url": null,
      "actor": null,
      "commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2565276147",
      "submitted_at": "2025-01-21T17:21:31Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2565523476,
      "node_id": "PRR_kwDOAN28mc6Y6sgU",
      "url": null,
      "actor": null,
      "commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Minor formatting nit: I find that leaving review suggestions and parsing diffs between updates is generally easier when the lines in the \"source code\" of the document are limited in length. Whenever you have very long lines, GitHub omits changes visually, and it can be hard to see what changes are being suggested by a reviewer.\r\n\r\n\r\nIn my experience, what we do at Optech works pretty well. When new text is added, we format it to a limited line length of perhaps 120 characters, but then if any text is edited afterwards, we only edit the lines that were affected. \r\n\r\nI.e. if you add some words, a line might be a bit longer than the original formatting, if you drop some words, you might have shorter lines, if you rephrase or elaborate something, you might introduce another line in between, but break it early to start the subsequent lines with the remaining words that originally were on that line.\r\nThe entire paragraph is never again reformatted to a specific length, as that would show up as the entire paragraph being changed, since GitHub treats the text like code.\r\n\r\nThis makes the diffs between updates easier to parse and makes it easier to work with review suggestions, both from the reviewer and the authorâ€™s perspective. Given that most readers will consume the BIP text in the Rich Text rendering, shorter and longer lines donâ€™t affect the final output of the document.\r\n\r\nHere is an example from BIPâ€¯3 how that would look:\r\n\r\n![image](https://github.com/user-attachments/assets/0d48a52e-126c-426c-83a4-694791fdcdb6)\r\n",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2565523476",
      "submitted_at": "2025-01-21T19:29:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "referenced",
      "id": 16812277742,
      "node_id": "REFE_lADOAN28mc5uKfAvzwAAAAPqFv_u",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/16812277742",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "73d189689248080708ca8605833c4227edb35584",
      "commit_url": "https://api.github.com/repos/DanGould/ohttp-relay/commits/73d189689248080708ca8605833c4227edb35584",
      "created_at": "2025-03-17T18:19:27Z"
    },
    {
      "event": "commented",
      "id": 2743520700,
      "node_id": "IC_kwDOAN28mc6jhs28",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2743520700",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-03-21T14:22:18Z",
      "updated_at": "2025-03-21T14:22:18Z",
      "author_association": "MEMBER",
      "body": "Would be great to move this draft forward. Relevant blog post and discussion yesterday:\r\n\r\n- https://payjoindevkit.org/2025/03/18/the-evolution-of-payjoin/\r\n- https://x.com/jonatack/status/1902786993416781852\r\n",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2743520700",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "reviewed",
      "id": 2706286473,
      "node_id": "PRR_kwDOAN28mc6hTqeJ",
      "url": null,
      "actor": null,
      "commit_id": "799e8c145da0304d847abfe59bd2311a1cf78968",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Thank you for updating the line breaking. \r\n \r\nI was trying to the determine the status of this proposal. It looks like many of the review comments (now marked \"Outdated\" due to the reformatting) have not been processed, yet, so it seems to me that it is still in the Authorâ€™s court and I leave the \"PR Author action required\" label.\r\n\r\nWhen you do process the review, please mark the processed comments as resolved or reply to them to indicate the same if you have additional information to share with reviewers.",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2706286473",
      "submitted_at": "2025-03-21T15:03:19Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2738151745,
      "node_id": "PRR_kwDOAN28mc6jNOFB",
      "url": null,
      "actor": null,
      "commit_id": "799e8c145da0304d847abfe59bd2311a1cf78968",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2738151745",
      "submitted_at": "2025-04-03T02:24:23Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "commented",
      "id": 2802776540,
      "node_id": "IC_kwDOAN28mc6nDvnc",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2802776540",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T19:23:54Z",
      "updated_at": "2025-04-14T19:23:54Z",
      "author_association": "MEMBER",
      "body": "> Would be great to move this draft forward. Relevant blog post and discussion yesterday:\r\n> \r\n>     * [payjoindevkit.org/2025/03/18/the-evolution-of-payjoin](https://payjoindevkit.org/2025/03/18/the-evolution-of-payjoin/)\r\n> \r\n>     * [x.com/jonatack/status/1902786993416781852](https://x.com/jonatack/status/1902786993416781852)\r\n\r\nLast updates here were 3 months ago, if I'm not misreading. Pinging BIP author @DanGould.",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2802776540",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 17254653786,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAAQEdR9a",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17254653786",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T19:23:56Z"
    },
    {
      "event": "subscribed",
      "id": 17254653803,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAQEdR9r",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17254653803",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T19:23:56Z"
    },
    {
      "event": "commented",
      "id": 2802817964,
      "node_id": "IC_kwDOAN28mc6nD5us",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2802817964",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T19:43:02Z",
      "updated_at": "2025-04-14T19:43:02Z",
      "author_association": "CONTRIBUTOR",
      "body": "@nothingmuch and I have been revising behind the scenes over the past 2 weeks. Have not forgotten. Update coming soon",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2802817964",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 17254885730,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAAQEeKli",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17254885730",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T19:43:04Z"
    },
    {
      "event": "subscribed",
      "id": 17254885743,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAQEeKlv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17254885743",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-04-14T19:43:04Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17493797743,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAQStitv",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17493797743",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6ed692911b9afb2336e55fe3a315028e87a886fc",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/6ed692911b9afb2336e55fe3a315028e87a886fc",
      "created_at": "2025-05-02T00:05:52Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17493802542,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAQStj4u",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17493802542",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "3a050650b0e2523252ad9c1739af84362341bd81",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/3a050650b0e2523252ad9c1739af84362341bd81",
      "created_at": "2025-05-02T00:06:49Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFjZjAyMGJhMWE4ZjVlNjYxOTZhNDg0NGY0MDczYjUwNjcwYmEwNDU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/acf020ba1a8f5e66196a4844f4073b50670ba045",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/acf020ba1a8f5e66196a4844f4073b50670ba045",
      "tree": {
        "sha": "a7966cfdb6c5d2c8cb8d9169e3a0f5068e2f7e7c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a7966cfdb6c5d2c8cb8d9169e3a0f5068e2f7e7c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a7966cfdb6c5d2c8cb8d9169e3a0f5068e2f7e7c\nparent 3365fb7a7e5e25b95b94d65808e32a02aa684aaa\nauthor DanGould <d@ngould.dev> 1685832633 -0400\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nDraft payjoin v2 BIP\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWbjlAPwMJ0k4CNj+AdURm8WaAJU36it+s0y2aGFMkWJc1N44KgEA6yDU/v8LHTyh\n2tl1NrCUfurNqJmHZ3jgnby/bMZerwk=\n=BeeX\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3365fb7a7e5e25b95b94d65808e32a02aa684aaa",
          "sha": "3365fb7a7e5e25b95b94d65808e32a02aa684aaa",
          "html_url": "https://github.com/bitcoin/bips/commit/3365fb7a7e5e25b95b94d65808e32a02aa684aaa"
        }
      ],
      "message": "Draft payjoin v2 BIP",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-06-03T22:50:33Z"
      },
      "sha": "acf020ba1a8f5e66196a4844f4073b50670ba045"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQ5MjNlNGQ5YTUxZGNiNDBhNmUxOWY2MWMxY2RkYjJiMGVkYjVmMWE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4923e4d9a51dcb40a6e19f61c1cddb2b0edb5f1a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4923e4d9a51dcb40a6e19f61c1cddb2b0edb5f1a",
      "tree": {
        "sha": "6a697d8494ab5c9300375a07b14235ba2e698445",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6a697d8494ab5c9300375a07b14235ba2e698445"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6a697d8494ab5c9300375a07b14235ba2e698445\nparent acf020ba1a8f5e66196a4844f4073b50670ba045\nauthor DanGould <d@ngould.dev> 1691873345 -0400\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nInclude mailing list feedback\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWWkgAQDqX/JDHiJSG8dONUOa1f4KXN0Ut2S07lxpuYezLxt/mgD/W1ggzkgw/Zb1\nasdq/jFnpRhmEdMQYYSeSuj7plkeSAo=\n=Ecmf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/acf020ba1a8f5e66196a4844f4073b50670ba045",
          "sha": "acf020ba1a8f5e66196a4844f4073b50670ba045",
          "html_url": "https://github.com/bitcoin/bips/commit/acf020ba1a8f5e66196a4844f4073b50670ba045"
        }
      ],
      "message": "Include mailing list feedback",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-08-12T20:49:05Z"
      },
      "sha": "4923e4d9a51dcb40a6e19f61c1cddb2b0edb5f1a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDdiOGZkMDUwYWE5MTUzMzRjOWM2YzFkMjRlOGMzNWNlMTNmZDU0ZDU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7b8fd050aa915334c9c6c1d24e8c35ce13fd54d5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7b8fd050aa915334c9c6c1d24e8c35ce13fd54d5",
      "tree": {
        "sha": "c0372a5cbc9af364f4ebb0618f9cb17afabe26b3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c0372a5cbc9af364f4ebb0618f9cb17afabe26b3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c0372a5cbc9af364f4ebb0618f9cb17afabe26b3\nparent 4923e4d9a51dcb40a6e19f61c1cddb2b0edb5f1a\nauthor DanGould <d@ngould.dev> 1698869139 -0400\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nInclude TABConf feedback\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWQ3aAP9Ll621p7yvZyGLZqFYmWULQjrEQWvY4UUuEaQzkvAy4wEAnz8R1bOFwzeC\neUiqI3QmNQqBjn6z9rYXMY6BmR7PcAA=\n=vLlj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4923e4d9a51dcb40a6e19f61c1cddb2b0edb5f1a",
          "sha": "4923e4d9a51dcb40a6e19f61c1cddb2b0edb5f1a",
          "html_url": "https://github.com/bitcoin/bips/commit/4923e4d9a51dcb40a6e19f61c1cddb2b0edb5f1a"
        }
      ],
      "message": "Include TABConf feedback",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-11-01T20:05:39Z"
      },
      "sha": "7b8fd050aa915334c9c6c1d24e8c35ce13fd54d5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBiMzM1NDg3NTBiNzUzMjI1MDcxZGRmZmE3NWQwYzAyMGQ0YmQxMjU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0b33548750b753225071ddffa75d0c020d4bd125",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0b33548750b753225071ddffa75d0c020d4bd125",
      "tree": {
        "sha": "52d61efe1ed0eff1b1d7119fcf24a5f7b3261ec4",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/52d61efe1ed0eff1b1d7119fcf24a5f7b3261ec4"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 52d61efe1ed0eff1b1d7119fcf24a5f7b3261ec4\nparent 7b8fd050aa915334c9c6c1d24e8c35ce13fd54d5\nauthor DanGould <d@ngould.dev> 1702520982 -0500\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nInclude padding\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWey2AQCipuQCjE5k8HS9mouZUd//af+yvZZqdSP3ZLuUUfIQXwD/WV89crhi+wyE\nnyGqjonV7yNU2Lx+CHlMG4mk2ObqKgI=\n=Rs9+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7b8fd050aa915334c9c6c1d24e8c35ce13fd54d5",
          "sha": "7b8fd050aa915334c9c6c1d24e8c35ce13fd54d5",
          "html_url": "https://github.com/bitcoin/bips/commit/7b8fd050aa915334c9c6c1d24e8c35ce13fd54d5"
        }
      ],
      "message": "Include padding",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-14T02:29:42Z"
      },
      "sha": "0b33548750b753225071ddffa75d0c020d4bd125"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZhN2M1NTNkNDM5YzQ3ZjE1Mjc5OGRlYWZkOTE0OGE5MGFmYTlmZWM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6a7c553d439c47f152798deafd9148a90afa9fec",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6a7c553d439c47f152798deafd9148a90afa9fec",
      "tree": {
        "sha": "2a67d8c7fbaf5c4f0479221685094865bc2139b2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2a67d8c7fbaf5c4f0479221685094865bc2139b2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2a67d8c7fbaf5c4f0479221685094865bc2139b2\nparent 0b33548750b753225071ddffa75d0c020d4bd125\nauthor DanGould <d@ngould.dev> 1702667376 -0500\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nInclude production reference implementation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWQrHAQCb9VagkoiEHIG3i2yMR96nueOthrPMXsoHYkbh9jplNwEAiGog1v0EUYKN\nRC55854PxvSuJ/MxdsKgek2gjdjT/Ac=\n=26t9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0b33548750b753225071ddffa75d0c020d4bd125",
          "sha": "0b33548750b753225071ddffa75d0c020d4bd125",
          "html_url": "https://github.com/bitcoin/bips/commit/0b33548750b753225071ddffa75d0c020d4bd125"
        }
      ],
      "message": "Include production reference implementation",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-15T19:09:36Z"
      },
      "sha": "6a7c553d439c47f152798deafd9148a90afa9fec"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDcyNWVlM2MyMmM5NDFjNmE2NzljOTQ4M2E3NmZkYjAyYTg2ZDFhODg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/725ee3c22c941c6a679c9483a76fdb02a86d1a88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/725ee3c22c941c6a679c9483a76fdb02a86d1a88",
      "tree": {
        "sha": "a96c2887970f1232d3968e89211df0997de07e50",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a96c2887970f1232d3968e89211df0997de07e50"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a96c2887970f1232d3968e89211df0997de07e50\nparent 6a7c553d439c47f152798deafd9148a90afa9fec\nauthor DanGould <d@ngould.dev> 1703692789 -0500\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nAdopt BIP-77 for payjoin v2\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWZDaAQCzgrgeAN6Dc/Qe6wDxaTnEzNo1CpRjTiPc1/gojvbDxwEArJ3jeV4Z4z/H\nZoDW3r+fPINCHMxv/Kkah1xSdQvibA4=\n=+r8x\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6a7c553d439c47f152798deafd9148a90afa9fec",
          "sha": "6a7c553d439c47f152798deafd9148a90afa9fec",
          "html_url": "https://github.com/bitcoin/bips/commit/6a7c553d439c47f152798deafd9148a90afa9fec"
        }
      ],
      "message": "Adopt BIP-77 for payjoin v2",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2023-12-27T15:59:49Z"
      },
      "sha": "725ee3c22c941c6a679c9483a76fdb02a86d1a88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDhmNGU0ZjBlM2NkZWM3MzdjNWFmMTBlOGMxMWUzMTRiNzNjMzFhZjE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8f4e4f0e3cdec737c5af10e8c11e314b73c31af1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8f4e4f0e3cdec737c5af10e8c11e314b73c31af1",
      "tree": {
        "sha": "d6113633459add6e3b78ab42c5a208ae0db626a0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d6113633459add6e3b78ab42c5a208ae0db626a0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d6113633459add6e3b78ab42c5a208ae0db626a0\nparent 725ee3c22c941c6a679c9483a76fdb02a86d1a88\nauthor DanGould <d@ngould.dev> 1709740506 -0500\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nDistinguish payjoin directory from OHTTP Relay\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWRpxAP9EF3/TGy2jgpCemprLuJRIW9MdUSu2Flv1X4D5Qb9f+QEA0T+xFFMsC30+\nZ0PN272Uij0z4pml00hS3C7Apq1uDAs=\n=+LE7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/725ee3c22c941c6a679c9483a76fdb02a86d1a88",
          "sha": "725ee3c22c941c6a679c9483a76fdb02a86d1a88",
          "html_url": "https://github.com/bitcoin/bips/commit/725ee3c22c941c6a679c9483a76fdb02a86d1a88"
        }
      ],
      "message": "Distinguish payjoin directory from OHTTP Relay",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T15:55:06Z"
      },
      "sha": "8f4e4f0e3cdec737c5af10e8c11e314b73c31af1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQ1YWRhN2ZkZjk3ZTE1YjRmZjZjMTdkNjM4OGY0ODQ4N2YwMWZkODQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/45ada7fdf97e15b4ff6c17d6388f48487f01fd84",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/45ada7fdf97e15b4ff6c17d6388f48487f01fd84",
      "tree": {
        "sha": "057ddbed13e6ee58ff3abb6f69f5020ba175aaf1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/057ddbed13e6ee58ff3abb6f69f5020ba175aaf1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 057ddbed13e6ee58ff3abb6f69f5020ba175aaf1\nparent 8f4e4f0e3cdec737c5af10e8c11e314b73c31af1\nauthor DanGould <d@ngould.dev> 1709741847 -0500\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nDetail OHTTP Key Configuration mechanism\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWQhEAP97ko731iMZ0Z7qYgkipIrF7deUu6y7+AgGbiiod+doEgD+L1/0nY4vsiFy\na+iuVnCDnKFTt5kitnR7P7FdLqAu+gQ=\n=7SvM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8f4e4f0e3cdec737c5af10e8c11e314b73c31af1",
          "sha": "8f4e4f0e3cdec737c5af10e8c11e314b73c31af1",
          "html_url": "https://github.com/bitcoin/bips/commit/8f4e4f0e3cdec737c5af10e8c11e314b73c31af1"
        }
      ],
      "message": "Detail OHTTP Key Configuration mechanism",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:17:27Z"
      },
      "sha": "45ada7fdf97e15b4ff6c17d6388f48487f01fd84"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNkYTBhMGIwMzk4ZTY4MjRkNGQxNjA0YmJmODIzMTAzNjdjNjg0NmM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3da0a0b0398e6824d4d1604bbf82310367c6846c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3da0a0b0398e6824d4d1604bbf82310367c6846c",
      "tree": {
        "sha": "bc3dccda7dbf1940cd9757cd0299de4a6455e8c6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bc3dccda7dbf1940cd9757cd0299de4a6455e8c6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bc3dccda7dbf1940cd9757cd0299de4a6455e8c6\nparent 45ada7fdf97e15b4ff6c17d6388f48487f01fd84\nauthor DanGould <d@ngould.dev> 1709741941 -0500\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nFix punctuation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWUSBAQCyBNqz9XtoxPL/vFHkqbtIFBJGXZCfI0UqIrNrfyb7bAEA7G1lqmnBCzEH\nOmodGZP9uzOt54+mpv67Z/0s1ElfQQ4=\n=bGKU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/45ada7fdf97e15b4ff6c17d6388f48487f01fd84",
          "sha": "45ada7fdf97e15b4ff6c17d6388f48487f01fd84",
          "html_url": "https://github.com/bitcoin/bips/commit/45ada7fdf97e15b4ff6c17d6388f48487f01fd84"
        }
      ],
      "message": "Fix punctuation",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:19:01Z"
      },
      "sha": "3da0a0b0398e6824d4d1604bbf82310367c6846c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGU3YTIzY2JjYWQ4YjAyYjgyN2NkYzE1ZmUxYzcyYjQyYjVlZTgzNzY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e7a23cbcad8b02b827cdc15fe1c72b42b5ee8376",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e7a23cbcad8b02b827cdc15fe1c72b42b5ee8376",
      "tree": {
        "sha": "9209664dfa0489d198fc899c62642037234ebd7a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9209664dfa0489d198fc899c62642037234ebd7a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9209664dfa0489d198fc899c62642037234ebd7a\nparent 3da0a0b0398e6824d4d1604bbf82310367c6846c\nauthor DanGould <d@ngould.dev> 1709742448 -0500\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nMake base64URL references consistent\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWS1NAP4wLOfMNrU5Q87GQ+HF1O6cr5Cg2xATSSszsxdw2LuuRAD/T8hEtf+guVBt\nwoqZR+i1zrVPqL+rGL5HhfG3I+BNTw4=\n=ErvD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3da0a0b0398e6824d4d1604bbf82310367c6846c",
          "sha": "3da0a0b0398e6824d4d1604bbf82310367c6846c",
          "html_url": "https://github.com/bitcoin/bips/commit/3da0a0b0398e6824d4d1604bbf82310367c6846c"
        }
      ],
      "message": "Make base64URL references consistent",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:27:28Z"
      },
      "sha": "e7a23cbcad8b02b827cdc15fe1c72b42b5ee8376"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI3MGFiMjUxZmY2OGJiYjRhYzliZWQ2YWYzYTk0ZDFhYWY2NjQyZDc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/270ab251ff68bbb4ac9bed6af3a94d1aaf6642d7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/270ab251ff68bbb4ac9bed6af3a94d1aaf6642d7",
      "tree": {
        "sha": "a48178a3746ca6f4b8fe0a54c032ca8bd249d525",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a48178a3746ca6f4b8fe0a54c032ca8bd249d525"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a48178a3746ca6f4b8fe0a54c032ca8bd249d525\nparent e7a23cbcad8b02b827cdc15fe1c72b42b5ee8376\nauthor DanGould <d@ngould.dev> 1709742582 -0500\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nReference standardized Secp256k1 DHKEM for HPKE\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWVHUAPsGsYwbeNfmR7Loh/3kFLtTm6BJ6LwcXc/1toWgZlYeIQD9F9dmaY1qblOY\n1kpZqoQmdjOFOPIt7mnTIgWY4Sh2CAc=\n=PZok\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e7a23cbcad8b02b827cdc15fe1c72b42b5ee8376",
          "sha": "e7a23cbcad8b02b827cdc15fe1c72b42b5ee8376",
          "html_url": "https://github.com/bitcoin/bips/commit/e7a23cbcad8b02b827cdc15fe1c72b42b5ee8376"
        }
      ],
      "message": "Reference standardized Secp256k1 DHKEM for HPKE",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-06T16:29:42Z"
      },
      "sha": "270ab251ff68bbb4ac9bed6af3a94d1aaf6642d7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM1ZDZlZTNkMTA0YTExODY2NjgwOThkZjlmMzViZjJmNzQyOGY3NWU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c5d6ee3d104a1186668098df9f35bf2f7428f75e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c5d6ee3d104a1186668098df9f35bf2f7428f75e",
      "tree": {
        "sha": "94b0f74848d2908ecec9c10062de276f89505460",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/94b0f74848d2908ecec9c10062de276f89505460"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 94b0f74848d2908ecec9c10062de276f89505460\nparent 270ab251ff68bbb4ac9bed6af3a94d1aaf6642d7\nauthor DanGould <d@ngould.dev> 1711511148 -0400\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nAdd Comments-URI\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWWa6AQDfLU3wFmzPQ8Eez/c5ZhIPMpFiA2xdzYtpI0/MBBcIzwEAmcYTu8TvjitI\nE9tyaonovrJc4cFEpJ0hfvwXmGXnkQI=\n=voPN\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/270ab251ff68bbb4ac9bed6af3a94d1aaf6642d7",
          "sha": "270ab251ff68bbb4ac9bed6af3a94d1aaf6642d7",
          "html_url": "https://github.com/bitcoin/bips/commit/270ab251ff68bbb4ac9bed6af3a94d1aaf6642d7"
        }
      ],
      "message": "Add Comments-URI",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-03-27T03:45:48Z"
      },
      "sha": "c5d6ee3d104a1186668098df9f35bf2f7428f75e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQyNGZkNGEwNTE5NzkwMTEyMjY2ZDY2ODAxOTI3ZDgxZjllZjIwNzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/424fd4a0519790112266d66801927d81f9ef2074",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/424fd4a0519790112266d66801927d81f9ef2074",
      "tree": {
        "sha": "21e9eca099d0ccd297d839c835caac32bab69b38",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/21e9eca099d0ccd297d839c835caac32bab69b38"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 21e9eca099d0ccd297d839c835caac32bab69b38\nparent c5d6ee3d104a1186668098df9f35bf2f7428f75e\nauthor DanGould <d@ngould.dev> 1714705162 -0400\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nfixup: Format and spell check\n\nCo-authored-by: spacebear <144076611+grizznaut@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWb9zAPkBAEhw75+rk8Hn1Q5MOwDlSiRJ1qLud3N80a6J3EfXiQEAyue0pEOw9JZ4\nqYB3myM1B7/5mpBEZEfRzjxDdSmgLgA=\n=02DP\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c5d6ee3d104a1186668098df9f35bf2f7428f75e",
          "sha": "c5d6ee3d104a1186668098df9f35bf2f7428f75e",
          "html_url": "https://github.com/bitcoin/bips/commit/c5d6ee3d104a1186668098df9f35bf2f7428f75e"
        }
      ],
      "message": "fixup: Format and spell check\n\nCo-authored-by: spacebear <144076611+grizznaut@users.noreply.github.com>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T02:59:22Z"
      },
      "sha": "424fd4a0519790112266d66801927d81f9ef2074"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDA0ZTFkYjY2NTI2YjA4MzA0YWFjNWI5OTIyNzhhMWQzMWRmMzJhNTY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/04e1db66526b08304aac5b992278a1d31df32a56",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/04e1db66526b08304aac5b992278a1d31df32a56",
      "tree": {
        "sha": "84afd637c3c8ab76f0a91e26a5a1fc308cad2f51",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/84afd637c3c8ab76f0a91e26a5a1fc308cad2f51"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 84afd637c3c8ab76f0a91e26a5a1fc308cad2f51\nparent 424fd4a0519790112266d66801927d81f9ef2074\nauthor DanGould <d@ngould.dev> 1714705684 -0400\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nAdd BIP 77 to README\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWTkwAP9HnMHlTh4/KWD1ghVGp70VPGIcyYwEd2R2sAt5u37/AAEAiNpqCkIHyahK\nhnlo8WP0mAT5WMQpOmeVEheTnkC/mw8=\n=IDq1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/424fd4a0519790112266d66801927d81f9ef2074",
          "sha": "424fd4a0519790112266d66801927d81f9ef2074",
          "html_url": "https://github.com/bitcoin/bips/commit/424fd4a0519790112266d66801927d81f9ef2074"
        }
      ],
      "message": "Add BIP 77 to README",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T03:08:04Z"
      },
      "sha": "04e1db66526b08304aac5b992278a1d31df32a56"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDc1M2UxYjNkYjEwZmIwMDc4NWU3MWFmOGU2YTNjNDRmMjhlYTA0ZTc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/753e1b3db10fb00785e71af8e6a3c44f28ea04e7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/753e1b3db10fb00785e71af8e6a3c44f28ea04e7",
      "tree": {
        "sha": "e258cddfa2e7c9e63bfe0335c61448f110661fa2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e258cddfa2e7c9e63bfe0335c61448f110661fa2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e258cddfa2e7c9e63bfe0335c61448f110661fa2\nparent 04e1db66526b08304aac5b992278a1d31df32a56\nauthor DanGould <d@ngould.dev> 1714769371 -0400\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nAdd Payjoin V2 overview diagram\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvQAKCRA4cTNWCSIP\nWVDiAP4jYvyp9PX2enJM6TIja7xcYR3TtdmJBh2vK2QkjH8Q9AEAm/Pwj9nIVxrT\nu1mdDNoMu+FWzlwotDkmOtucK07DsAs=\n=bLP8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/04e1db66526b08304aac5b992278a1d31df32a56",
          "sha": "04e1db66526b08304aac5b992278a1d31df32a56",
          "html_url": "https://github.com/bitcoin/bips/commit/04e1db66526b08304aac5b992278a1d31df32a56"
        }
      ],
      "message": "Add Payjoin V2 overview diagram",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-03T20:49:31Z"
      },
      "sha": "753e1b3db10fb00785e71af8e6a3c44f28ea04e7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUzMDhlOGM4MGNmM2Y5OWY3ZTAxMTZlNjJiYmNhODNlYTZkYjFmYTg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e308e8c80cf3f99f7e0116e62bbca83ea6db1fa8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e308e8c80cf3f99f7e0116e62bbca83ea6db1fa8",
      "tree": {
        "sha": "bbc952ade87542af05bba68d435d3368df946854",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bbc952ade87542af05bba68d435d3368df946854"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bbc952ade87542af05bba68d435d3368df946854\nparent 753e1b3db10fb00785e71af8e6a3c44f28ea04e7\nauthor DanGould <d@ngould.dev> 1714957104 -0400\ncommitter DanGould <d@ngould.dev> 1746144445 -0400\n\nAdd Oblivious HTTP Sequence Diagram\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWSXqAQD+J9CBaLyPKxHnBs9lz5RdK0WYkpOMd70kQQupYhCHRQEA+sbaDRe0IKQF\n+1NC4Yfl7GI09JOGnwk28pt9EyWNGwk=\n=8JZZ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/753e1b3db10fb00785e71af8e6a3c44f28ea04e7",
          "sha": "753e1b3db10fb00785e71af8e6a3c44f28ea04e7",
          "html_url": "https://github.com/bitcoin/bips/commit/753e1b3db10fb00785e71af8e6a3c44f28ea04e7"
        }
      ],
      "message": "Add Oblivious HTTP Sequence Diagram",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:25Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T00:58:24Z"
      },
      "sha": "e308e8c80cf3f99f7e0116e62bbca83ea6db1fa8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDE4NWJlOGM2ZjI5ZGNlYWZkNTE0ZThkYjNmYWM4OWM5ZWQwZDE2NDM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/185be8c6f29dceafd514e8db3fac89c9ed0d1643",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/185be8c6f29dceafd514e8db3fac89c9ed0d1643",
      "tree": {
        "sha": "b231aa7bfee4818664a08d5113042c51c421d74a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b231aa7bfee4818664a08d5113042c51c421d74a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b231aa7bfee4818664a08d5113042c51c421d74a\nparent e308e8c80cf3f99f7e0116e62bbca83ea6db1fa8\nauthor DanGould <d@ngould.dev> 1715032786 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nCorrect links and spelling\n\nCo-authored-by: thebrandonlucas <38222767+thebrandonlucas@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWd4hAP4qIAZW/D8ieDSRNMWPeYli02z1/BYfbPOEcmBkutfS4gD/ScpooegkLi1N\n8wvtupafR/ToKGd5PHvpYZNoSP/7oA0=\n=wGX8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e308e8c80cf3f99f7e0116e62bbca83ea6db1fa8",
          "sha": "e308e8c80cf3f99f7e0116e62bbca83ea6db1fa8",
          "html_url": "https://github.com/bitcoin/bips/commit/e308e8c80cf3f99f7e0116e62bbca83ea6db1fa8"
        }
      ],
      "message": "Correct links and spelling\n\nCo-authored-by: thebrandonlucas <38222767+thebrandonlucas@users.noreply.github.com>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-06T21:59:46Z"
      },
      "sha": "185be8c6f29dceafd514e8db3fac89c9ed0d1643"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZjMDk0OGVjMjI2YjI0M2Q0Mjg5ZTZkMjFjNjM1ZTE5MWZlMzc4Y2Q",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fc0948ec226b243d4289e6d21c635e191fe378cd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fc0948ec226b243d4289e6d21c635e191fe378cd",
      "tree": {
        "sha": "1e0669e0785c2e70b0d91898ac32dfa3466a4eb3",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1e0669e0785c2e70b0d91898ac32dfa3466a4eb3"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1e0669e0785c2e70b0d91898ac32dfa3466a4eb3\nparent 185be8c6f29dceafd514e8db3fac89c9ed0d1643\nauthor DanGould <d@ngould.dev> 1715113409 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nWrap <code> blocks\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWZMOAP98zBblGDkrLpWcsLzYgM9awt4fQ+0sGhiQA6MZfC1qXQD/SJcNZl/iaGCp\n6mbLW/2vWeb6jyfUK4gXIcB83+co/AM=\n=Epc9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/185be8c6f29dceafd514e8db3fac89c9ed0d1643",
          "sha": "185be8c6f29dceafd514e8db3fac89c9ed0d1643",
          "html_url": "https://github.com/bitcoin/bips/commit/185be8c6f29dceafd514e8db3fac89c9ed0d1643"
        }
      ],
      "message": "Wrap <code> blocks",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:23:29Z"
      },
      "sha": "fc0948ec226b243d4289e6d21c635e191fe378cd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM3MDBjY2E4ODdiMmY5MDljNDg5YjQ4MTA5NGNjZjgxYWFhZmUwYmY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c700cca887b2f909c489b481094ccf81aaafe0bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c700cca887b2f909c489b481094ccf81aaafe0bf",
      "tree": {
        "sha": "846ce75bea79219f7c09234033c60d56c8d17be7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/846ce75bea79219f7c09234033c60d56c8d17be7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 846ce75bea79219f7c09234033c60d56c8d17be7\nparent fc0948ec226b243d4289e6d21c635e191fe378cd\nauthor DanGould <d@ngould.dev> 1715113521 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nFix basic scheme actors\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWcmaAQDTHEnhfrpG/gju/nlh/js38bQatf9aEdJLko6CPifWzAD8CaSZyixgb8MT\nE/J3oX2PBj3cJp9bFbocxjuCesfSzAg=\n=7hcR\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fc0948ec226b243d4289e6d21c635e191fe378cd",
          "sha": "fc0948ec226b243d4289e6d21c635e191fe378cd",
          "html_url": "https://github.com/bitcoin/bips/commit/fc0948ec226b243d4289e6d21c635e191fe378cd"
        }
      ],
      "message": "Fix basic scheme actors",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:25:21Z"
      },
      "sha": "c700cca887b2f909c489b481094ccf81aaafe0bf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGMzNDQyNTIzNjIzZGFkMzk4ZWI5YTFiZDFkODVjMTljYTVhOGFiMzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c3442523623dad398eb9a1bd1d85c19ca5a8ab32",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c3442523623dad398eb9a1bd1d85c19ca5a8ab32",
      "tree": {
        "sha": "ba1afbb486829a6fded0c27b5550281f842aff90",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ba1afbb486829a6fded0c27b5550281f842aff90"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ba1afbb486829a6fded0c27b5550281f842aff90\nparent c700cca887b2f909c489b481094ccf81aaafe0bf\nauthor DanGould <d@ngould.dev> 1715113697 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nFix dead samourai links\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWUTSAP9ldkOGOHtRhWm2e4bSD28i18xfkCgh5hANu0XxXaJ8hwEA5/CQ6dbUWfRV\nJtHyAAmUB2bd2Tr8MaTcJ0hRJPmuygA=\n=IXFE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c700cca887b2f909c489b481094ccf81aaafe0bf",
          "sha": "c700cca887b2f909c489b481094ccf81aaafe0bf",
          "html_url": "https://github.com/bitcoin/bips/commit/c700cca887b2f909c489b481094ccf81aaafe0bf"
        }
      ],
      "message": "Fix dead samourai links",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-07T20:28:17Z"
      },
      "sha": "c3442523623dad398eb9a1bd1d85c19ca5a8ab32"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM5N2I5Yjc2OWVkNTU5NTIwYmE4NjJkMmYxNTA0MmI0OTAwZmU0NWY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/397b9b769ed559520ba862d2f15042b4900fe45f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/397b9b769ed559520ba862d2f15042b4900fe45f",
      "tree": {
        "sha": "1189f2263449273a6ab69bbc0ea44510e52ea492",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1189f2263449273a6ab69bbc0ea44510e52ea492"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1189f2263449273a6ab69bbc0ea44510e52ea492\nparent c3442523623dad398eb9a1bd1d85c19ca5a8ab32\nauthor DanGould <d@ngould.dev> 1715372007 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nOrient motivation around a problem\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWWXGAP9SJgUdxfZhHZichqQbbUTJuGjLzoQoc6bdE9dwWrFmDAD/azPbTW94YEXh\nQEDxv75umOW1QqDUVlUyH65jJGc3Awg=\n=ZaxM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c3442523623dad398eb9a1bd1d85c19ca5a8ab32",
          "sha": "c3442523623dad398eb9a1bd1d85c19ca5a8ab32",
          "html_url": "https://github.com/bitcoin/bips/commit/c3442523623dad398eb9a1bd1d85c19ca5a8ab32"
        }
      ],
      "message": "Orient motivation around a problem",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-10T20:13:27Z"
      },
      "sha": "397b9b769ed559520ba862d2f15042b4900fe45f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDViZjRkNTZmNjlmMzdiN2Y2ZTNjZThlODQyMGRlZGEzMmZkM2FlMjc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5bf4d56f69f37b7f6e3ce8e8420deda32fd3ae27",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5bf4d56f69f37b7f6e3ce8e8420deda32fd3ae27",
      "tree": {
        "sha": "780a7b4be4a6f808e28445c15e8eff0f5bc157a5",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/780a7b4be4a6f808e28445c15e8eff0f5bc157a5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 780a7b4be4a6f808e28445c15e8eff0f5bc157a5\nparent 397b9b769ed559520ba862d2f15042b4900fe45f\nauthor DanGould <d@ngould.dev> 1715373147 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nfix links\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWQSzAP4qYXnhKgOsuDQcgrLwI/0bstBPzKo1y3TiHTI3UdmnkgEA+mkkEotBGkHu\nlUkKVtSRAMHW7DtURiC9qnlrh5u7uQo=\n=PwXl\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/397b9b769ed559520ba862d2f15042b4900fe45f",
          "sha": "397b9b769ed559520ba862d2f15042b4900fe45f",
          "html_url": "https://github.com/bitcoin/bips/commit/397b9b769ed559520ba862d2f15042b4900fe45f"
        }
      ],
      "message": "fix links",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-10T20:32:27Z"
      },
      "sha": "5bf4d56f69f37b7f6e3ce8e8420deda32fd3ae27"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ2OGUzYjZhM2NhM2M0YmY1NjBmYjgzNGFmMDhkNTZjZmYwY2FhNGY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d68e3b6a3ca3c4bf560fb834af08d56cff0caa4f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d68e3b6a3ca3c4bf560fb834af08d56cff0caa4f",
      "tree": {
        "sha": "0545ceec736ef7078b35d9283d1b4bbbe7ab9450",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0545ceec736ef7078b35d9283d1b4bbbe7ab9450"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0545ceec736ef7078b35d9283d1b4bbbe7ab9450\nparent 5bf4d56f69f37b7f6e3ce8e8420deda32fd3ae27\nauthor DanGould <d@ngould.dev> 1716304625 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nKeyconfig s/should/must/ be provided\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWX9eAQC51Gd3xJIdPDu/3JI6w20wzUj9wkE0OeXeTvuNMmqyMwD9Eg6qrN9qAejB\nFI5R5JPb6AS4kg4kDFd9DywIwr+KIQU=\n=Ik3/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5bf4d56f69f37b7f6e3ce8e8420deda32fd3ae27",
          "sha": "5bf4d56f69f37b7f6e3ce8e8420deda32fd3ae27",
          "html_url": "https://github.com/bitcoin/bips/commit/5bf4d56f69f37b7f6e3ce8e8420deda32fd3ae27"
        }
      ],
      "message": "Keyconfig s/should/must/ be provided",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:17:05Z"
      },
      "sha": "d68e3b6a3ca3c4bf560fb834af08d56cff0caa4f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDdkNDM3OGVhYjhmNTU3Y2YwYTllYWVmOTc2MjhmYmJlZmIwYWFkZjc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7d4378eab8f557cf0a9eaef97628fbbefb0aadf7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7d4378eab8f557cf0a9eaef97628fbbefb0aadf7",
      "tree": {
        "sha": "eb3bdb6f0d33f46aa7005437392b3e8fb15b3eec",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/eb3bdb6f0d33f46aa7005437392b3e8fb15b3eec"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree eb3bdb6f0d33f46aa7005437392b3e8fb15b3eec\nparent d68e3b6a3ca3c4bf560fb834af08d56cff0caa4f\nauthor DanGould <d@ngould.dev> 1716304931 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nFix typos\n\nCo-authored-by: thebrandonlucas <38222767+thebrandonlucas@users.noreply.github.com>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWe3pAQDahkzP7QSOp5VbOVpuHktA92ChuTMj0JtIzHWtt93ydQEAvrr3nJGVszv/\nuYg4tJjM0b0huLkn2cW9keJgjFzJZg8=\n=sv2l\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d68e3b6a3ca3c4bf560fb834af08d56cff0caa4f",
          "sha": "d68e3b6a3ca3c4bf560fb834af08d56cff0caa4f",
          "html_url": "https://github.com/bitcoin/bips/commit/d68e3b6a3ca3c4bf560fb834af08d56cff0caa4f"
        }
      ],
      "message": "Fix typos\n\nCo-authored-by: thebrandonlucas <38222767+thebrandonlucas@users.noreply.github.com>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:22:11Z"
      },
      "sha": "7d4378eab8f557cf0a9eaef97628fbbefb0aadf7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDliMTAyYzg4ZWJiZGRhZGZmMzNjNjMwMDdlYTU2YmU5MmRmZTBjYWU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9b102c88ebbddadff33c63007ea56be92dfe0cae",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9b102c88ebbddadff33c63007ea56be92dfe0cae",
      "tree": {
        "sha": "0a1acb7bc49b469503fb58c98683d2e415b3f3e0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0a1acb7bc49b469503fb58c98683d2e415b3f3e0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0a1acb7bc49b469503fb58c98683d2e415b3f3e0\nparent 7d4378eab8f557cf0a9eaef97628fbbefb0aadf7\nauthor DanGould <d@ngould.dev> 1716304997 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\ns/pubkey/public key\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWQq3AQCVQxgsWX95HVZED5u3PKCZvQf8FH6rJol/PRAPkClzegEAnCJe87c/xwDM\nu4QFifnUIVekWSZm3IKH3HnwgKTpnwA=\n=55JB\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7d4378eab8f557cf0a9eaef97628fbbefb0aadf7",
          "sha": "7d4378eab8f557cf0a9eaef97628fbbefb0aadf7",
          "html_url": "https://github.com/bitcoin/bips/commit/7d4378eab8f557cf0a9eaef97628fbbefb0aadf7"
        }
      ],
      "message": "s/pubkey/public key",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-05-21T15:23:17Z"
      },
      "sha": "9b102c88ebbddadff33c63007ea56be92dfe0cae"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZlNjNjMmMxOWM2OGMyYjY3MzA5OWIyYzZjNGVkYjI3YzhiYWZlMWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6e63c2c19c68c2b673099b2c6c4edb27c8bafe1d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6e63c2c19c68c2b673099b2c6c4edb27c8bafe1d",
      "tree": {
        "sha": "7b9a84026ec0951345b0d8e76daddb94db3934b7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7b9a84026ec0951345b0d8e76daddb94db3934b7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7b9a84026ec0951345b0d8e76daddb94db3934b7\nparent 9b102c88ebbddadff33c63007ea56be92dfe0cae\nauthor DanGould <d@ngould.dev> 1717352857 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nIncorporate jonatack's suggestions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWeLEAQDhtw05T8f0plSf8VrjfZQHdtdVlTtVPlLlAW+B0kE4TgEAvrJ9Lzp1/GD7\nRPiqSfwKupbXobEsCq3RfOiGYIWNJQQ=\n=YHgc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9b102c88ebbddadff33c63007ea56be92dfe0cae",
          "sha": "9b102c88ebbddadff33c63007ea56be92dfe0cae",
          "html_url": "https://github.com/bitcoin/bips/commit/9b102c88ebbddadff33c63007ea56be92dfe0cae"
        }
      ],
      "message": "Incorporate jonatack's suggestions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-06-02T18:27:37Z"
      },
      "sha": "6e63c2c19c68c2b673099b2c6c4edb27c8bafe1d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDE4MjU3YzRmM2IyNjhlMDczMzE5NWVjMGFmNjkxYzg1OGUzMDRhYjA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/18257c4f3b268e0733195ec0af691c858e304ab0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/18257c4f3b268e0733195ec0af691c858e304ab0",
      "tree": {
        "sha": "2a619adb609dd9390cfc677da8a3a4128388c03b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2a619adb609dd9390cfc677da8a3a4128388c03b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2a619adb609dd9390cfc677da8a3a4128388c03b\nparent 6e63c2c19c68c2b673099b2c6c4edb27c8bafe1d\nauthor DanGould <d@ngould.dev> 1720283979 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nIncorporate more jonatack suggestions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWWshAQDBo+ApKIryopNjF8VTKzb1ngpYn1mtY7cRUwTSOLC+BgEA9gbbHCtVyE9F\n/CRl432Fsrw3atGDA09OnBb0JUCB9gs=\n=Fex3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6e63c2c19c68c2b673099b2c6c4edb27c8bafe1d",
          "sha": "6e63c2c19c68c2b673099b2c6c4edb27c8bafe1d",
          "html_url": "https://github.com/bitcoin/bips/commit/6e63c2c19c68c2b673099b2c6c4edb27c8bafe1d"
        }
      ],
      "message": "Incorporate more jonatack suggestions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-06T16:39:39Z"
      },
      "sha": "18257c4f3b268e0733195ec0af691c858e304ab0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZhMGM5N2I3ZWM5ZmU5OGE0MThiZTY3ZGVhZDgxMmJjNjZjYmYxNmU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6a0c97b7ec9fe98a418be67dead812bc66cbf16e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6a0c97b7ec9fe98a418be67dead812bc66cbf16e",
      "tree": {
        "sha": "1e5330f86792baaa38ba87ddccecb6b7d26138d0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1e5330f86792baaa38ba87ddccecb6b7d26138d0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1e5330f86792baaa38ba87ddccecb6b7d26138d0\nparent 18257c4f3b268e0733195ec0af691c858e304ab0\nauthor DanGould <d@ngould.dev> 1720310101 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nIncorporate satsie's suggesetions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWZPDAP0VJeRiEAeys324MdCzZ/Br8ZCCwsNxIgs6+43meMcVnQEAip3MUGyiXd/t\naU9SxgKh5XFj35uXCxO6w6ggmjKD3Q0=\n=LJQM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/18257c4f3b268e0733195ec0af691c858e304ab0",
          "sha": "18257c4f3b268e0733195ec0af691c858e304ab0",
          "html_url": "https://github.com/bitcoin/bips/commit/18257c4f3b268e0733195ec0af691c858e304ab0"
        }
      ],
      "message": "Incorporate satsie's suggesetions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-06T23:55:01Z"
      },
      "sha": "6a0c97b7ec9fe98a418be67dead812bc66cbf16e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBjZDYwNjhlN2RiZTU1Y2I0YjRiMzIyMzAwOGUwMDAxZDE2MzFiODU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0cd6068e7dbe55cb4b4b3223008e0001d1631b85",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0cd6068e7dbe55cb4b4b3223008e0001d1631b85",
      "tree": {
        "sha": "af3bfd781681b921fad7f4a1b9c5ae1f097cdace",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/af3bfd781681b921fad7f4a1b9c5ae1f097cdace"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree af3bfd781681b921fad7f4a1b9c5ae1f097cdace\nparent 6a0c97b7ec9fe98a418be67dead812bc66cbf16e\nauthor DanGould <d@ngould.dev> 1721011793 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRename \"Async Payjoin\"\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWY+lAP4kj3YvAUNH3J3T+mwz62wL7DyRb867+MCylHEF6UJPJAD+Pbh9wIjYgrH7\n3dNVlijE9/I42AUFu3EGcP4GcfmtYQI=\n=r5SH\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6a0c97b7ec9fe98a418be67dead812bc66cbf16e",
          "sha": "6a0c97b7ec9fe98a418be67dead812bc66cbf16e",
          "html_url": "https://github.com/bitcoin/bips/commit/6a0c97b7ec9fe98a418be67dead812bc66cbf16e"
        }
      ],
      "message": "Rename \"Async Payjoin\"",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T02:49:53Z"
      },
      "sha": "0cd6068e7dbe55cb4b4b3223008e0001d1631b85"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQyYjM5NDRmMWFjN2QzMTA3ZTE2ZDhlNjM4NTc4ZWI3YmY1MzZkYTQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d2b3944f1ac7d3107e16d8e638578eb7bf536da4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d2b3944f1ac7d3107e16d8e638578eb7bf536da4",
      "tree": {
        "sha": "bb918051a2da6a12628e72d8dfb3ad5a32ad95cc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bb918051a2da6a12628e72d8dfb3ad5a32ad95cc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bb918051a2da6a12628e72d8dfb3ad5a32ad95cc\nparent 0cd6068e7dbe55cb4b4b3223008e0001d1631b85\nauthor DanGould <d@ngould.dev> 1721057891 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nReplace BIP21 params with fragment params\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWVNQAQDPSEzOW/SkHz6lIdQUSCSy63zrgncIQsOf9Ya2fkmQFAD+O+YbjP+i0hA4\nmOoY7unFOgtuRELZX8dO7Gtlwk5s6Qo=\n=rxzk\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0cd6068e7dbe55cb4b4b3223008e0001d1631b85",
          "sha": "0cd6068e7dbe55cb4b4b3223008e0001d1631b85",
          "html_url": "https://github.com/bitcoin/bips/commit/0cd6068e7dbe55cb4b4b3223008e0001d1631b85"
        }
      ],
      "message": "Replace BIP21 params with fragment params",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T15:38:11Z"
      },
      "sha": "d2b3944f1ac7d3107e16d8e638578eb7bf536da4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUwMjQ4N2Y2M2VjZGNiZTE0NjgyNGFhZTMyNDAzZDMxMjg4NzBiNDk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e02487f63ecdcbe146824aae32403d3128870b49",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e02487f63ecdcbe146824aae32403d3128870b49",
      "tree": {
        "sha": "313ae35ab8aa739d0b880c9f79a3f2d4ac3cf7fb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/313ae35ab8aa739d0b880c9f79a3f2d4ac3cf7fb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 313ae35ab8aa739d0b880c9f79a3f2d4ac3cf7fb\nparent d2b3944f1ac7d3107e16d8e638578eb7bf536da4\nauthor DanGould <d@ngould.dev> 1721062719 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRevise document to describe Payjoin Sessions\n\nEnrollment was a less clear than sessions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWXpkAQDMrxVh9N8o0XIX77wI1Kz6CH9YT9hMr4SCJml5nBq65wD+PSnSOawjTLuy\nseskh307SaLjT+BLO8PsjCA/cd/XDAs=\n=nnCv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d2b3944f1ac7d3107e16d8e638578eb7bf536da4",
          "sha": "d2b3944f1ac7d3107e16d8e638578eb7bf536da4",
          "html_url": "https://github.com/bitcoin/bips/commit/d2b3944f1ac7d3107e16d8e638578eb7bf536da4"
        }
      ],
      "message": "Revise document to describe Payjoin Sessions\n\nEnrollment was a less clear than sessions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T16:58:39Z"
      },
      "sha": "e02487f63ecdcbe146824aae32403d3128870b49"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGVjMmViMjljNzg0YTI2ZTY0NTBmZGI1ZGE0OGI4Mzc5YWY0NzNhYzY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ec2eb29c784a26e6450fdb5da48b8379af473ac6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ec2eb29c784a26e6450fdb5da48b8379af473ac6",
      "tree": {
        "sha": "db2e44410077dc78856e40985b71b81735f14443",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/db2e44410077dc78856e40985b71b81735f14443"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree db2e44410077dc78856e40985b71b81735f14443\nparent e02487f63ecdcbe146824aae32403d3128870b49\nauthor DanGould <d@ngould.dev> 1721062810 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRevise Sequence Diagram\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWZjKAP44jLbLfe+ssgUYM3VsQDGjD1uKltQ4eDGbBt3qDtfLRwEAnlI/v7I6xhHc\nWgwUBBK3eC5ScVueMHg5pwufJcyJswk=\n=atLF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e02487f63ecdcbe146824aae32403d3128870b49",
          "sha": "e02487f63ecdcbe146824aae32403d3128870b49",
          "html_url": "https://github.com/bitcoin/bips/commit/e02487f63ecdcbe146824aae32403d3128870b49"
        }
      ],
      "message": "Revise Sequence Diagram",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-07-15T17:00:10Z"
      },
      "sha": "ec2eb29c784a26e6450fdb5da48b8379af473ac6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM2NWRkZDg3ZjA1MWRmYzg1N2RiMjdhOGU1YWI4ZTE5Y2M2ZDJmN2Y",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/365ddd87f051dfc857db27a8e5ab8e19cc6d2f7f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/365ddd87f051dfc857db27a8e5ab8e19cc6d2f7f",
      "tree": {
        "sha": "37e3e46d98b5fdcf01bfe26a4ebb57ae9f6b20dc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/37e3e46d98b5fdcf01bfe26a4ebb57ae9f6b20dc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 37e3e46d98b5fdcf01bfe26a4ebb57ae9f6b20dc\nparent ec2eb29c784a26e6450fdb5da48b8379af473ac6\nauthor DanGould <d@ngould.dev> 1727375435 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nSpell initialize\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWfZ/AQCvKlrjVsSQTRoR/nPPvpiD3JipxA4R5SNR6YpGk7kkwwD/eAqHv2kPO3u/\ndLEL/ZZBm/D7MkQIy+vU9QGTnbFRVgc=\n=MFuy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ec2eb29c784a26e6450fdb5da48b8379af473ac6",
          "sha": "ec2eb29c784a26e6450fdb5da48b8379af473ac6",
          "html_url": "https://github.com/bitcoin/bips/commit/ec2eb29c784a26e6450fdb5da48b8379af473ac6"
        }
      ],
      "message": "Spell initialize",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T18:30:35Z"
      },
      "sha": "365ddd87f051dfc857db27a8e5ab8e19cc6d2f7f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGU3YjNkMTUwOGZkMDYxZjNjZDA2NTk4YmE2NzRjOTZhY2ZjYWNlYmM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e7b3d1508fd061f3cd06598ba674c96acfcacebc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e7b3d1508fd061f3cd06598ba674c96acfcacebc",
      "tree": {
        "sha": "6843b3905617d4077a66a9adb75a7459930e67a8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6843b3905617d4077a66a9adb75a7459930e67a8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6843b3905617d4077a66a9adb75a7459930e67a8\nparent 365ddd87f051dfc857db27a8e5ab8e19cc6d2f7f\nauthor DanGould <d@ngould.dev> 1727378739 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nUpdate the bip to represent the stable protocol\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWWwDAP452Y1J0Y8kxfF34DvcvXCN8GQeL7Z5jr7MG5nRGeIR/QEAsIo4qYDtWz7k\np4qlBUSkbuRdYPS5zRA/bNJzn2OmvAA=\n=x2fE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/365ddd87f051dfc857db27a8e5ab8e19cc6d2f7f",
          "sha": "365ddd87f051dfc857db27a8e5ab8e19cc6d2f7f",
          "html_url": "https://github.com/bitcoin/bips/commit/365ddd87f051dfc857db27a8e5ab8e19cc6d2f7f"
        }
      ],
      "message": "Update the bip to represent the stable protocol",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T19:25:39Z"
      },
      "sha": "e7b3d1508fd061f3cd06598ba674c96acfcacebc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDExMzRmN2IyMzNmNmUwMjM2NWEyN2MyMGNiMGQ1YjkxMDMxNjg0YmY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1134f7b233f6e02365a27c20cb0d5b91031684bf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1134f7b233f6e02365a27c20cb0d5b91031684bf",
      "tree": {
        "sha": "f538df97684eba45cb690d290d478e8c5bac2ff9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f538df97684eba45cb690d290d478e8c5bac2ff9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f538df97684eba45cb690d290d478e8c5bac2ff9\nparent e7b3d1508fd061f3cd06598ba674c96acfcacebc\nauthor DanGould <d@ngould.dev> 1727383769 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nSpell according to Type Checks's job\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWQjzAQCsBxp8PXHbF6DZ01aqaq488rKX2eCzPUFpPl8g/I12QwD/WM68sTYs7UNc\nTPQ5SPScgg3hG5+Ylt8x5MSwtYxo3gY=\n=3hi4\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e7b3d1508fd061f3cd06598ba674c96acfcacebc",
          "sha": "e7b3d1508fd061f3cd06598ba674c96acfcacebc",
          "html_url": "https://github.com/bitcoin/bips/commit/e7b3d1508fd061f3cd06598ba674c96acfcacebc"
        }
      ],
      "message": "Spell according to Type Checks's job",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T20:49:29Z"
      },
      "sha": "1134f7b233f6e02365a27c20cb0d5b91031684bf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDRlNTAwODg0MDFhNzkxMjdkNDRlMWVjMDEzYWE5NzAwMTNjMDQ2ZGM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4e50088401a79127d44e1ec013aa970013c046dc",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4e50088401a79127d44e1ec013aa970013c046dc",
      "tree": {
        "sha": "c71ce1296b6cdaffb2373d84dbc4a1cef45e966b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c71ce1296b6cdaffb2373d84dbc4a1cef45e966b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c71ce1296b6cdaffb2373d84dbc4a1cef45e966b\nparent 1134f7b233f6e02365a27c20cb0d5b91031684bf\nauthor DanGould <d@ngould.dev> 1727384686 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nMention the format of the ohttp fragment\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWS3oAP0U2KQLcHaWRiInM1xIdYDWobzFaKw2HFDbFHt/uTlFvAEAh6NY9YPgPXaW\ncmbhKx2FT+38mocod2bevehV6fYBMgU=\n=zfAa\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1134f7b233f6e02365a27c20cb0d5b91031684bf",
          "sha": "1134f7b233f6e02365a27c20cb0d5b91031684bf",
          "html_url": "https://github.com/bitcoin/bips/commit/1134f7b233f6e02365a27c20cb0d5b91031684bf"
        }
      ],
      "message": "Mention the format of the ohttp fragment",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-09-26T21:04:46Z"
      },
      "sha": "4e50088401a79127d44e1ec013aa970013c046dc"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI1OGIyNWU5NTQwZDZlYTk0MDE3MjRhOWRlZDRkZmVjODRjOTNjOTU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/258b25e9540d6ea9401724a9ded4dfec84c93c95",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/258b25e9540d6ea9401724a9ded4dfec84c93c95",
      "tree": {
        "sha": "506e3012558d331fb5a2f1ef328768c83b233478",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/506e3012558d331fb5a2f1ef328768c83b233478"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 506e3012558d331fb5a2f1ef328768c83b233478\nparent 4e50088401a79127d44e1ec013aa970013c046dc\nauthor DanGould <d@ngould.dev> 1728361078 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nReference BIP 78 attack vectors\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWThPAP0UR22XbM8pzHqy3YoeCUJWiDMawz6nYN7JWaMk0JT1FgD/USGxBrorybph\n5D8NmcB1St9frOan3QbpNbrK9BC6cgo=\n=sbUD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4e50088401a79127d44e1ec013aa970013c046dc",
          "sha": "4e50088401a79127d44e1ec013aa970013c046dc",
          "html_url": "https://github.com/bitcoin/bips/commit/4e50088401a79127d44e1ec013aa970013c046dc"
        }
      ],
      "message": "Reference BIP 78 attack vectors",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-08T04:17:58Z"
      },
      "sha": "258b25e9540d6ea9401724a9ded4dfec84c93c95"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGY2NzJkZTU2YjljMzRkMzQyMmVhZGZkODRmMDllZGY5MDNhN2QwOGU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f672de56b9c34d3422eadfd84f09edf903a7d08e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f672de56b9c34d3422eadfd84f09edf903a7d08e",
      "tree": {
        "sha": "4d6dadbda6c5c3ebd8f244c00a760f7adb046355",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4d6dadbda6c5c3ebd8f244c00a760f7adb046355"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4d6dadbda6c5c3ebd8f244c00a760f7adb046355\nparent 258b25e9540d6ea9401724a9ded4dfec84c93c95\nauthor DanGould <d@ngould.dev> 1728411467 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRemove straggling text\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWcB2AQC+0NKLJYa+OWQZy4i7keYwE0e8iW9LnX0+CQuuDfFP5gEA3qrBxXB4haR+\nGhaei4ZJ93OuxJMZeExsLV6tuL+xJQI=\n=nBBA\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/258b25e9540d6ea9401724a9ded4dfec84c93c95",
          "sha": "258b25e9540d6ea9401724a9ded4dfec84c93c95",
          "html_url": "https://github.com/bitcoin/bips/commit/258b25e9540d6ea9401724a9ded4dfec84c93c95"
        }
      ],
      "message": "Remove straggling text",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-08T18:17:47Z"
      },
      "sha": "f672de56b9c34d3422eadfd84f09edf903a7d08e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZkNWNlNTY1Y2E0Y2UwNDVhMDVmZjk0MjUyNDUwZWI4NzM5Yzc1YjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fd5ce565ca4ce045a05ff94252450eb8739c75b2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fd5ce565ca4ce045a05ff94252450eb8739c75b2",
      "tree": {
        "sha": "d7ad22f13cfda70082ae0e0cf67f92fc4e4e7dec",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d7ad22f13cfda70082ae0e0cf67f92fc4e4e7dec"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d7ad22f13cfda70082ae0e0cf67f92fc4e4e7dec\nparent f672de56b9c34d3422eadfd84f09edf903a7d08e\nauthor DanGould <d@ngould.dev> 1728450729 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nSpecify authorization mechanism\n\nThe specifics of a credential issuance are left out, however\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWalkAP9A3ikma8bmMFceSQPm5Zgyq9io6ipABTcLUZwNHVKe7QD/SubNX8DDu4Kb\n8vyaUSFKN21XxhuN3jxVBTNUZQ0IKQU=\n=htHr\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f672de56b9c34d3422eadfd84f09edf903a7d08e",
          "sha": "f672de56b9c34d3422eadfd84f09edf903a7d08e",
          "html_url": "https://github.com/bitcoin/bips/commit/f672de56b9c34d3422eadfd84f09edf903a7d08e"
        }
      ],
      "message": "Specify authorization mechanism\n\nThe specifics of a credential issuance are left out, however",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-09T05:12:09Z"
      },
      "sha": "fd5ce565ca4ce045a05ff94252450eb8739c75b2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDU1ZDQ4NDlhMDdlODM1OGQ1NjE4OTljYjIwNzlkZmUyMTMyZWExMTk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/55d4849a07e8358d561899cb2079dfe2132ea119",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/55d4849a07e8358d561899cb2079dfe2132ea119",
      "tree": {
        "sha": "06f1c44e11b85f605d6bab130e5ff5f72e69c383",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/06f1c44e11b85f605d6bab130e5ff5f72e69c383"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 06f1c44e11b85f605d6bab130e5ff5f72e69c383\nparent fd5ce565ca4ce045a05ff94252450eb8739c75b2\nauthor DanGould <d@ngould.dev> 1728450087 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nUse implicit session initialization\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWRcCAQCxv14qkZhqBsgmAYabggWNsEmQvKxBeyOvUDkmCHKJVQEA9pL1OAQOPYPW\niR2ejdTMsTqep/BeVQOjbbzqq0SPtgA=\n=gesu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fd5ce565ca4ce045a05ff94252450eb8739c75b2",
          "sha": "fd5ce565ca4ce045a05ff94252450eb8739c75b2",
          "html_url": "https://github.com/bitcoin/bips/commit/fd5ce565ca4ce045a05ff94252450eb8739c75b2"
        }
      ],
      "message": "Use implicit session initialization",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-09T05:01:27Z"
      },
      "sha": "55d4849a07e8358d561899cb2079dfe2132ea119"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDA0NzU0ZjY4MTYxOTAyNTBjYTc1Mzg2OTdlZTcxNGZlMjY1OTI4MDA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/04754f6816190250ca7538697ee714fe26592800",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/04754f6816190250ca7538697ee714fe26592800",
      "tree": {
        "sha": "1b28137e8d7d13987fea2169fc059ab276032b6d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1b28137e8d7d13987fea2169fc059ab276032b6d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1b28137e8d7d13987fea2169fc059ab276032b6d\nparent 55d4849a07e8358d561899cb2079dfe2132ea119\nauthor Dan Gould <d@ngould.dev> 1729106842 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nSpecify cryptographic handshake based on Noise IK\n\nCo-authored-by: Yuval Kogman <nothingmuch@woobling.org>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWSdEAP9DhqrIchzUdwbFT/O5PzrraxkdJ0dCEMBypxUjBFPLSAD+LKF23hQpgzYf\nRfEVDJAy/EQTAanb5LivjxlJ5ndOIAg=\n=OQxd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/55d4849a07e8358d561899cb2079dfe2132ea119",
          "sha": "55d4849a07e8358d561899cb2079dfe2132ea119",
          "html_url": "https://github.com/bitcoin/bips/commit/55d4849a07e8358d561899cb2079dfe2132ea119"
        }
      ],
      "message": "Specify cryptographic handshake based on Noise IK\n\nCo-authored-by: Yuval Kogman <nothingmuch@woobling.org>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "Dan Gould",
        "email": "d@ngould.dev",
        "date": "2024-10-16T19:27:22Z"
      },
      "sha": "04754f6816190250ca7538697ee714fe26592800"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBmODZjNWRlOWNkOTgwOGQxNzY1YmY5NzYxYTBiMzFiODg0NGYyNzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0f86c5de9cd9808d1765bf9761a0b31b8844f272",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0f86c5de9cd9808d1765bf9761a0b31b8844f272",
      "tree": {
        "sha": "3057b748d99e7c63358ad7ba48fc7d3eaaf931da",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3057b748d99e7c63358ad7ba48fc7d3eaaf931da"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3057b748d99e7c63358ad7ba48fc7d3eaaf931da\nparent 04754f6816190250ca7538697ee714fe26592800\nauthor DanGould <d@ngould.dev> 1729474780 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nAdd Spacebear's clarifications\n\nCo-authored-by: spacebear <git@spacebear.dev>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWbkkAQC53+IyUsIbJ4FjdCLExN/mxjGJccRahI0yb6yfTX0ZogEA/pZ8OIMCIDrC\nJ3u8h6UYsv8b7z0ltj9pUJ/tPU/wSQM=\n=3jAI\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/04754f6816190250ca7538697ee714fe26592800",
          "sha": "04754f6816190250ca7538697ee714fe26592800",
          "html_url": "https://github.com/bitcoin/bips/commit/04754f6816190250ca7538697ee714fe26592800"
        }
      ],
      "message": "Add Spacebear's clarifications\n\nCo-authored-by: spacebear <git@spacebear.dev>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2024-10-21T01:39:40Z"
      },
      "sha": "0f86c5de9cd9808d1765bf9761a0b31b8844f272"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI1YTU2NGY0YjUxNDgzNDlmODA0MmQwNmQ2MDYxNWRiM2UwYzkwYzk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5a564f4b5148349f8042d06d60615db3e0c90c9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b5a564f4b5148349f8042d06d60615db3e0c90c9",
      "tree": {
        "sha": "1fe84945c2d431a7832d1caf86a4fdb113c7dba9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1fe84945c2d431a7832d1caf86a4fdb113c7dba9"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1fe84945c2d431a7832d1caf86a4fdb113c7dba9\nparent 0f86c5de9cd9808d1765bf9761a0b31b8844f272\nauthor DanGould <d@ngould.dev> 1736132692 -0500\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nDocument subdirectory Short IDs\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWfCmAP9+4uPgd4DrzHOyIblx8J8sT+TBVpcxfwCU2YUmMhHs2QEA2s3UHxnE4Tb2\nb2fA+FEt8pbmO/w1mloRKo12xjNOyww=\n=kNjp\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0f86c5de9cd9808d1765bf9761a0b31b8844f272",
          "sha": "0f86c5de9cd9808d1765bf9761a0b31b8844f272",
          "html_url": "https://github.com/bitcoin/bips/commit/0f86c5de9cd9808d1765bf9761a0b31b8844f272"
        }
      ],
      "message": "Document subdirectory Short IDs",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-01-06T03:04:52Z"
      },
      "sha": "b5a564f4b5148349f8042d06d60615db3e0c90c9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ1MjU5ZmY3YmNmYWVkZGE1OWNiNjJhNTJhNDUxMGRjM2E5ZmEwOWY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d5259ff7bcfaedda59cb62a52a4510dc3a9fa09f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d5259ff7bcfaedda59cb62a52a4510dc3a9fa09f",
      "tree": {
        "sha": "e4395b7e5f2759fd00b26b210a640d5f6e8323fb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e4395b7e5f2759fd00b26b210a640d5f6e8323fb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e4395b7e5f2759fd00b26b210a640d5f6e8323fb\nparent b5a564f4b5148349f8042d06d60615db3e0c90c9\nauthor DanGould <d@ngould.dev> 1736132823 -0500\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRequire uppercase URL\n\nbech32 fragment prefixes are case sensitive, and\nalphanumeric mode only works on capital letters.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWZp0AP45HAgB1FE5eHXpYjIFVo0+UA52oRZ8UP5h8XrHLpMUtAD/XeOyuezIVo70\nowOkrxjRm5eOTbrEbaA4saxvCwBU1AM=\n=XVbY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b5a564f4b5148349f8042d06d60615db3e0c90c9",
          "sha": "b5a564f4b5148349f8042d06d60615db3e0c90c9",
          "html_url": "https://github.com/bitcoin/bips/commit/b5a564f4b5148349f8042d06d60615db3e0c90c9"
        }
      ],
      "message": "Require uppercase URL\n\nbech32 fragment prefixes are case sensitive, and\nalphanumeric mode only works on capital letters.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-01-06T03:07:03Z"
      },
      "sha": "d5259ff7bcfaedda59cb62a52a4510dc3a9fa09f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDIzYTlmY2FjNzg1NmY4OTgyNzU5ZTEwOGIzOTExNjMwNzg3OTlkNTU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/23a9fcac7856f8982759e108b391163078799d55",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/23a9fcac7856f8982759e108b391163078799d55",
      "tree": {
        "sha": "f7b391b7016676cafce032c48b9adb1d19ee3a1e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f7b391b7016676cafce032c48b9adb1d19ee3a1e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f7b391b7016676cafce032c48b9adb1d19ee3a1e\nparent d5259ff7bcfaedda59cb62a52a4510dc3a9fa09f\nauthor DanGould <d@ngould.dev> 1736133393 -0500\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nSpecify bech32 fragment parameter definitions\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWW76AQCygGILHhluyNuRFCxPSpikDA6u9nUQJBF+wInu7hJdsAEA/9Qb+eZT276L\nfja7L2wxDmc0d2zNEPaRZ8wmq5R6Fgo=\n=83JY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d5259ff7bcfaedda59cb62a52a4510dc3a9fa09f",
          "sha": "d5259ff7bcfaedda59cb62a52a4510dc3a9fa09f",
          "html_url": "https://github.com/bitcoin/bips/commit/d5259ff7bcfaedda59cb62a52a4510dc3a9fa09f"
        }
      ],
      "message": "Specify bech32 fragment parameter definitions",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-01-06T03:16:33Z"
      },
      "sha": "23a9fcac7856f8982759e108b391163078799d55"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDllOWFhMzQ2NjIyMTA0ZTBhZDY5M2EwYjI0MmRhOGQ4ZjAyNDJmODk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9e9aa346622104e0ad693a0b242da8d8f0242f89",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9e9aa346622104e0ad693a0b242da8d8f0242f89",
      "tree": {
        "sha": "d76581a02fcc818bfcafd4f21884aea7458bb498",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d76581a02fcc818bfcafd4f21884aea7458bb498"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d76581a02fcc818bfcafd4f21884aea7458bb498\nparent 23a9fcac7856f8982759e108b391163078799d55\nauthor DanGould <d@ngould.dev> 1737083942 -0500\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nUppercase URL specifically only after subdirectory\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWSsSAQCrZvGiXIciOA4CQMImpgmtOGP/WTAFN2duvYH9MwNsdAD+OvTSBzc4G7L8\nuQgv2++YbkSoKLTGpALNZo0g6ex39QA=\n=c7w2\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/23a9fcac7856f8982759e108b391163078799d55",
          "sha": "23a9fcac7856f8982759e108b391163078799d55",
          "html_url": "https://github.com/bitcoin/bips/commit/23a9fcac7856f8982759e108b391163078799d55"
        }
      ],
      "message": "Uppercase URL specifically only after subdirectory",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-01-17T03:19:02Z"
      },
      "sha": "9e9aa346622104e0ad693a0b242da8d8f0242f89"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM0M2RlN2NiMjcxYTFmMDQ4ZjYxODM4YWM2OWNhNTlhMjk4MDU5NmE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/343de7cb271a1f048f61838ac69ca59a2980596a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/343de7cb271a1f048f61838ac69ca59a2980596a",
      "tree": {
        "sha": "06f37f411127c716aa0656d3a72c0dd874ad1388",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/06f37f411127c716aa0656d3a72c0dd874ad1388"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 06f37f411127c716aa0656d3a72c0dd874ad1388\nparent 9e9aa346622104e0ad693a0b242da8d8f0242f89\nauthor DanGould <d@ngould.dev> 1736484368 -0500\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nNote payload uniformity via padding and ellswift\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWUWlAP4nrn9cuRt0BWbuYv+Rn27gSr6hh8bhNicaor7vbxVG2gD+OMSBLm6xThj1\nvB0FLrHVtrRzw90359SA+65CURGRAQI=\n=QcFQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9e9aa346622104e0ad693a0b242da8d8f0242f89",
          "sha": "9e9aa346622104e0ad693a0b242da8d8f0242f89",
          "html_url": "https://github.com/bitcoin/bips/commit/9e9aa346622104e0ad693a0b242da8d8f0242f89"
        }
      ],
      "message": "Note payload uniformity via padding and ellswift",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-01-10T04:46:08Z"
      },
      "sha": "343de7cb271a1f048f61838ac69ca59a2980596a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQzMDk3NjRlZDdjMjVhODk2ZjU4MWUzNWMzYzE0NDliMTQ0NjExNzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d309764ed7c25a896f581e35c3c1449b14461172",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d309764ed7c25a896f581e35c3c1449b14461172",
      "tree": {
        "sha": "099392c7e59bd23ef33169d0f20cd109d838ed94",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/099392c7e59bd23ef33169d0f20cd109d838ed94"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 099392c7e59bd23ef33169d0f20cd109d838ed94\nparent 343de7cb271a1f048f61838ac69ca59a2980596a\nauthor DanGould <d@ngould.dev> 1736485472 -0500\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nInclude Message Byte Representations\n\nThis is the most straightforward way to explain the various padding\nrequirements.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWeZhAQCXbWyCVcwGq0WjKA3mJwW5vqOHkgSBOgyUvEgcvTta5QD9G7gd4DkdXJJR\nLNhgxH7IoOrYY337ZnEV7SowlPEYBgc=\n=4+E/\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/343de7cb271a1f048f61838ac69ca59a2980596a",
          "sha": "343de7cb271a1f048f61838ac69ca59a2980596a",
          "html_url": "https://github.com/bitcoin/bips/commit/343de7cb271a1f048f61838ac69ca59a2980596a"
        }
      ],
      "message": "Include Message Byte Representations\n\nThis is the most straightforward way to explain the various padding\nrequirements.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-01-10T05:04:32Z"
      },
      "sha": "d309764ed7c25a896f581e35c3c1449b14461172"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGUzMDI5MTQxMmNkYWE0MjUyNzM3NTM1NDU4ZjJkNmI4NzIxNmM5MmQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e30291412cdaa4252737535458f2d6b87216c92d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e30291412cdaa4252737535458f2d6b87216c92d",
      "tree": {
        "sha": "a7f30a3468dd473a22bb81b2d9a3b981b9ad2ead",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a7f30a3468dd473a22bb81b2d9a3b981b9ad2ead"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a7f30a3468dd473a22bb81b2d9a3b981b9ad2ead\nparent d309764ed7c25a896f581e35c3c1449b14461172\nauthor DanGould <d@ngould.dev> 1737751180 -0500\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nDocument HPKE `info` strings\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWbh5AP93QtQszkzpITYY5u2fpz7WrC7sqyocKxSOmdsD0eD/6AD/bc9sUKhNtJO0\noSCjB+coGuAgrDfPW82n2k+moMdqwQg=\n=Qt5k\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d309764ed7c25a896f581e35c3c1449b14461172",
          "sha": "d309764ed7c25a896f581e35c3c1449b14461172",
          "html_url": "https://github.com/bitcoin/bips/commit/d309764ed7c25a896f581e35c3c1449b14461172"
        }
      ],
      "message": "Document HPKE `info` strings",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-01-24T20:39:40Z"
      },
      "sha": "e30291412cdaa4252737535458f2d6b87216c92d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGEwODRhZTk4ZTY0M2Y4NTk4ODUwNTMzYjNmNjkzOTljNjZmZWQ1ZjY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a084ae98e643f8598850533b3f69399c66fed5f6",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a084ae98e643f8598850533b3f69399c66fed5f6",
      "tree": {
        "sha": "a2695e12fee7e292ffef7d274d4a9242ddc59714",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a2695e12fee7e292ffef7d274d4a9242ddc59714"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a2695e12fee7e292ffef7d274d4a9242ddc59714\nparent e30291412cdaa4252737535458f2d6b87216c92d\nauthor DanGould <d@ngould.dev> 1737752165 -0500\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nTruncate lines to 120 characters\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWYB4AP4zQpD77LyrNMiyGCq2/jYFG9m/znf0PwSqe3/4AQLZaAEA/5OdC5MWoCav\n1b8IPxdVXigccclYxQb8lmK2idKMGQU=\n=DkS1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e30291412cdaa4252737535458f2d6b87216c92d",
          "sha": "e30291412cdaa4252737535458f2d6b87216c92d",
          "html_url": "https://github.com/bitcoin/bips/commit/e30291412cdaa4252737535458f2d6b87216c92d"
        }
      ],
      "message": "Truncate lines to 120 characters",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-01-24T20:56:05Z"
      },
      "sha": "a084ae98e643f8598850533b3f69399c66fed5f6"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGMzMTVmZmNiN2QzZThjNjE5YTUyNDNjZWU2OTQ5OTMyYzAzZjRhMDk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c315ffcb7d3e8c619a5243cee6949932c03f4a09",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c315ffcb7d3e8c619a5243cee6949932c03f4a09",
      "tree": {
        "sha": "b8f8defddf5bf5ad150ae88b623c2fd691215d85",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b8f8defddf5bf5ad150ae88b623c2fd691215d85"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b8f8defddf5bf5ad150ae88b623c2fd691215d85\nparent a084ae98e643f8598850533b3f69399c66fed5f6\nauthor DanGould <d@ngould.dev> 1742912187 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nReceiver's Original PSBT, not proposal\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWfjYAQC8GUl9o9FlWsPsnmPZ5jKXcwn5eGetAAIDyX4ctg6CrwEA9B6yu3pQLCe3\nurWC9vWRrtt3WmlYnmGmmnSWiGizBg4=\n=3POG\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a084ae98e643f8598850533b3f69399c66fed5f6",
          "sha": "a084ae98e643f8598850533b3f69399c66fed5f6",
          "html_url": "https://github.com/bitcoin/bips/commit/a084ae98e643f8598850533b3f69399c66fed5f6"
        }
      ],
      "message": "Receiver's Original PSBT, not proposal",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T14:16:27Z"
      },
      "sha": "c315ffcb7d3e8c619a5243cee6949932c03f4a09"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDA5NTc2OTk0MGYxNzE0MjVmZmE3MTE2MWZkZTIwMDI3NjM1ZTI4ODQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/095769940f171425ffa71161fde20027635e2884",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/095769940f171425ffa71161fde20027635e2884",
      "tree": {
        "sha": "8fa3bea058a0ade742e6a0cab3776e6f9986499e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8fa3bea058a0ade742e6a0cab3776e6f9986499e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8fa3bea058a0ade742e6a0cab3776e6f9986499e\nparent c315ffcb7d3e8c619a5243cee6949932c03f4a09\nauthor DanGould <d@ngould.dev> 1742912275 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nSpecify no mixed [output script]\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWU7HAQCd+aLkgDCLALx590FNjHJA53BLmpTufqy3XjYG9LGoHwEAjF6RVv4PY/b7\nPkHKSqTpnhopmyXrV/Qg8S3uHnUpcwA=\n=O7jW\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c315ffcb7d3e8c619a5243cee6949932c03f4a09",
          "sha": "c315ffcb7d3e8c619a5243cee6949932c03f4a09",
          "html_url": "https://github.com/bitcoin/bips/commit/c315ffcb7d3e8c619a5243cee6949932c03f4a09"
        }
      ],
      "message": "Specify no mixed [output script]",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T14:17:55Z"
      },
      "sha": "095769940f171425ffa71161fde20027635e2884"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM0MTQ1N2FiMzE4NTNjNTE2N2EwNWY1NjAwNjdkN2FhYTE5OThiODA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c41457ab31853c5167a05f560067d7aaa1998b80",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c41457ab31853c5167a05f560067d7aaa1998b80",
      "tree": {
        "sha": "98e0125c27f9183e8ca7a3d06c29b48c35918330",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/98e0125c27f9183e8ca7a3d06c29b48c35918330"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 98e0125c27f9183e8ca7a3d06c29b48c35918330\nparent 095769940f171425ffa71161fde20027635e2884\nauthor DanGould <d@ngould.dev> 1742912337 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRemove extraneous pipe character\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWf90AQCkN1k2K6YrX6cJ+uTD3bvjmITlz+c10qPpIICHYMyt0gD+LbKNr6l+m2Al\nRdOM64/Wxbz9Mrab9ZnXGM9S1ZjGIAs=\n=QdY1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/095769940f171425ffa71161fde20027635e2884",
          "sha": "095769940f171425ffa71161fde20027635e2884",
          "html_url": "https://github.com/bitcoin/bips/commit/095769940f171425ffa71161fde20027635e2884"
        }
      ],
      "message": "Remove extraneous pipe character",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T14:18:57Z"
      },
      "sha": "c41457ab31853c5167a05f560067d7aaa1998b80"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFiNWU2NWY0NGE5NDFiZjkyNjY1ODM3MmQ1ZjY3YzIzOWRmNDI4MzY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ab5e65f44a941bf926658372d5f67c239df42836",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ab5e65f44a941bf926658372d5f67c239df42836",
      "tree": {
        "sha": "738e56ea2acae652ea886a90d8acbb6564099126",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/738e56ea2acae652ea886a90d8acbb6564099126"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 738e56ea2acae652ea886a90d8acbb6564099126\nparent c41457ab31853c5167a05f560067d7aaa1998b80\nauthor DanGould <d@ngould.dev> 1742912412 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRequire BIPS 21, 78, 174\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWY87AP90roRReauLtnLPAON9Xz62BsoOtqKWu/10o6zcXy7K+QD/dd4+kEAhPL+Y\n/rw9jcsOFurT/0jSzgm+awPwoR8jdQM=\n=CUb9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c41457ab31853c5167a05f560067d7aaa1998b80",
          "sha": "c41457ab31853c5167a05f560067d7aaa1998b80",
          "html_url": "https://github.com/bitcoin/bips/commit/c41457ab31853c5167a05f560067d7aaa1998b80"
        }
      ],
      "message": "Require BIPS 21, 78, 174",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T14:20:12Z"
      },
      "sha": "ab5e65f44a941bf926658372d5f67c239df42836"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk2YWIxMTNkNTcyNzk3ZjUzYjc0OTllMTM3ODhiN2U0OTk1MzRkOWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/96ab113d572797f53b7499e13788b7e499534d9b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/96ab113d572797f53b7499e13788b7e499534d9b",
      "tree": {
        "sha": "f4535139dbaf2a260809ff3d1b00df12a0c2e562",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f4535139dbaf2a260809ff3d1b00df12a0c2e562"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f4535139dbaf2a260809ff3d1b00df12a0c2e562\nparent ab5e65f44a941bf926658372d5f67c239df42836\nauthor DanGould <d@ngould.dev> 1742914334 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nUpdate checklist MUST/MUST NOT sections\n\nMUST NOT contained MUST details. Move them to MUST.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWdQ5AQD+TSqeeTNqQ6+fYa3bSBCU6OGWsHmJPm7EHKmSkDqR0AD7BSeTyLfUNC03\nH/71w0WcPqfaH9O7p8RTyHpKNFRDUAU=\n=uXhz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ab5e65f44a941bf926658372d5f67c239df42836",
          "sha": "ab5e65f44a941bf926658372d5f67c239df42836",
          "html_url": "https://github.com/bitcoin/bips/commit/ab5e65f44a941bf926658372d5f67c239df42836"
        }
      ],
      "message": "Update checklist MUST/MUST NOT sections\n\nMUST NOT contained MUST details. Move them to MUST.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T14:52:14Z"
      },
      "sha": "96ab113d572797f53b7499e13788b7e499534d9b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZmMjczNDU0ZDBlOGE1ZTIwN2U3MGI4NWI2MmRmNGQ1YmM0NTEwOGI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ff273454d0e8a5e207e70b85b62df4d5bc45108b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ff273454d0e8a5e207e70b85b62df4d5bc45108b",
      "tree": {
        "sha": "ffad0f08616816cea58a2f489c25800d7dea4553",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ffad0f08616816cea58a2f489c25800d7dea4553"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ffad0f08616816cea58a2f489c25800d7dea4553\nparent 96ab113d572797f53b7499e13788b7e499534d9b\nauthor DanGould <d@ngould.dev> 1742914443 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\ninputs â‡’ input\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWeQ0AP4yi9CASFVnBjGa8X4Yvu/Il294ESTXvB3w1YUl1p0SKwD9FZQoVGXNiwjE\n6hhybo4ghyc3s4ezqfBrlURmPHNcNwY=\n=+G8i\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/96ab113d572797f53b7499e13788b7e499534d9b",
          "sha": "96ab113d572797f53b7499e13788b7e499534d9b",
          "html_url": "https://github.com/bitcoin/bips/commit/96ab113d572797f53b7499e13788b7e499534d9b"
        }
      ],
      "message": "inputs â‡’ input",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T14:54:03Z"
      },
      "sha": "ff273454d0e8a5e207e70b85b62df4d5bc45108b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGJiOTgzMWQ1MjY5MzI3NWI2NThhZDZmODQ5MTFlNGM3NTcwNzAyZTc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bb9831d52693275b658ad6f84911e4c7570702e7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/bb9831d52693275b658ad6f84911e4c7570702e7",
      "tree": {
        "sha": "1a530eda3c895987f3464dbf0de09f6c6b33f700",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1a530eda3c895987f3464dbf0de09f6c6b33f700"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1a530eda3c895987f3464dbf0de09f6c6b33f700\nparent ff273454d0e8a5e207e70b85b62df4d5bc45108b\nauthor DanGould <d@ngould.dev> 1742915089 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nClarify BIP 78 payjoin version 1 connection\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWYadAP499su3+6N2TwZIF5wbOJ32hu7C4IilUXOH/Ef192NzBQD+KlVYbb7nmfTO\nmCUSTatkS5iqyAXgpP2kMTR0UYxpVws=\n=LwyO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ff273454d0e8a5e207e70b85b62df4d5bc45108b",
          "sha": "ff273454d0e8a5e207e70b85b62df4d5bc45108b",
          "html_url": "https://github.com/bitcoin/bips/commit/ff273454d0e8a5e207e70b85b62df4d5bc45108b"
        }
      ],
      "message": "Clarify BIP 78 payjoin version 1 connection",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:04:49Z"
      },
      "sha": "bb9831d52693275b658ad6f84911e4c7570702e7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDdiYzA1YWQ0Y2ZhNmMxZmUwZDVmZjhiNmM4NDk4ZGY5ZjdmOGQ1MTY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7bc05ad4cfa6c1fe0d5ff8b6c8498df9f7f8d516",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7bc05ad4cfa6c1fe0d5ff8b6c8498df9f7f8d516",
      "tree": {
        "sha": "aa0c2c5e78b9a9c680d044f82fb7c5106912f8df",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/aa0c2c5e78b9a9c680d044f82fb7c5106912f8df"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree aa0c2c5e78b9a9c680d044f82fb7c5106912f8df\nparent bb9831d52693275b658ad6f84911e4c7570702e7\nauthor DanGould <d@ngould.dev> 1742915177 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nFix backwards compat language\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWbGsAQCqd00+fUfx3G0t151ysoKhrcb0jDMIyB830IjFOja8tgEA0bUnwA/9dTK/\ngaj43am5Bs/FYxRnuZyxa7l60W0s7gQ=\n=iEVM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/bb9831d52693275b658ad6f84911e4c7570702e7",
          "sha": "bb9831d52693275b658ad6f84911e4c7570702e7",
          "html_url": "https://github.com/bitcoin/bips/commit/bb9831d52693275b658ad6f84911e4c7570702e7"
        }
      ],
      "message": "Fix backwards compat language",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:06:17Z"
      },
      "sha": "7bc05ad4cfa6c1fe0d5ff8b6c8498df9f7f8d516"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI2MzEzZjAzYTJjYjk4NTgyNjFjNDM3MjZlOTY5MjE2OGE3ZmU2M2U",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b6313f03a2cb9858261c43726e9692168a7fe63e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b6313f03a2cb9858261c43726e9692168a7fe63e",
      "tree": {
        "sha": "c6c8ece0c542b1d9ee36a23d5ec1b048dcb7bdf5",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c6c8ece0c542b1d9ee36a23d5ec1b048dcb7bdf5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c6c8ece0c542b1d9ee36a23d5ec1b048dcb7bdf5\nparent 7bc05ad4cfa6c1fe0d5ff8b6c8498df9f7f8d516\nauthor DanGould <d@ngould.dev> 1742915220 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nPayjoin version 2 URIs\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWRjbAP4hdsBEM0kWvNy62va0yvxfe9MVcCD4WNKjl4MIQbdLrwD/VjmTFXmGVRbz\nP3L9iN9Cw5pQNTElexwfchY53/PJwws=\n=0C/2\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7bc05ad4cfa6c1fe0d5ff8b6c8498df9f7f8d516",
          "sha": "7bc05ad4cfa6c1fe0d5ff8b6c8498df9f7f8d516",
          "html_url": "https://github.com/bitcoin/bips/commit/7bc05ad4cfa6c1fe0d5ff8b6c8498df9f7f8d516"
        }
      ],
      "message": "Payjoin version 2 URIs",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:07:00Z"
      },
      "sha": "b6313f03a2cb9858261c43726e9692168a7fe63e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDU1NTUzY2Y4MTE5NjFjNzIyMGEyYjUxMGI5OTEyOWZjY2JjOGIyM2Q",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/55553cf811961c7220a2b510b99129fccbc8b23d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/55553cf811961c7220a2b510b99129fccbc8b23d",
      "tree": {
        "sha": "5002334ef3b7a72e57e22bc37257a7b010b3986e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5002334ef3b7a72e57e22bc37257a7b010b3986e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5002334ef3b7a72e57e22bc37257a7b010b3986e\nparent b6313f03a2cb9858261c43726e9692168a7fe63e\nauthor DanGould <d@ngould.dev> 1742915601 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nReference Binary HTTP RFC\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWYO6AP9S+VlLn2ADSNw8OjS9Bs3mYHXCbWxaKOjghC+uVLvF6AEArKb38aNWU3Ls\n/xLfxM8nM8JVX53jxHkZC0Dm4lgmXQE=\n=PR+D\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b6313f03a2cb9858261c43726e9692168a7fe63e",
          "sha": "b6313f03a2cb9858261c43726e9692168a7fe63e",
          "html_url": "https://github.com/bitcoin/bips/commit/b6313f03a2cb9858261c43726e9692168a7fe63e"
        }
      ],
      "message": "Reference Binary HTTP RFC",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:13:21Z"
      },
      "sha": "55553cf811961c7220a2b510b99129fccbc8b23d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFlNTI5ZmI1ZjgyNzI2YTBmZmUzZDE5M2RhZWJhN2RlYzIxNzJiNGI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ae529fb5f82726a0ffe3d193daeba7dec2172b4b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ae529fb5f82726a0ffe3d193daeba7dec2172b4b",
      "tree": {
        "sha": "7cf22ac1453cb745e9eb85f67cee3e7cad5055c7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7cf22ac1453cb745e9eb85f67cee3e7cad5055c7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7cf22ac1453cb745e9eb85f67cee3e7cad5055c7\nparent 55553cf811961c7220a2b510b99129fccbc8b23d\nauthor DanGould <d@ngould.dev> 1742915673 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nPayjoin version 1 Proposal PSBTs\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWbZZAQC/UXQeEpMwUSHwPH59FaaUAlWeNnGCsgvNvpEiA+1PhwD9H3GXIZrBdyxA\nEv6Dphk18+yoqbR7ti2oW6HFzpToDwg=\n=aUFe\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/55553cf811961c7220a2b510b99129fccbc8b23d",
          "sha": "55553cf811961c7220a2b510b99129fccbc8b23d",
          "html_url": "https://github.com/bitcoin/bips/commit/55553cf811961c7220a2b510b99129fccbc8b23d"
        }
      ],
      "message": "Payjoin version 1 Proposal PSBTs",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:14:33Z"
      },
      "sha": "ae529fb5f82726a0ffe3d193daeba7dec2172b4b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZkMjk4MDFkNjExMGI4YzUwZjFmYzNlY2JlNmQ4Y2ZhYjAyNzliYWY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fd29801d6110b8c50f1fc3ecbe6d8cfab0279baf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fd29801d6110b8c50f1fc3ecbe6d8cfab0279baf",
      "tree": {
        "sha": "aad02980ff940edf8f9583f9e2633d433266b400",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/aad02980ff940edf8f9583f9e2633d433266b400"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree aad02980ff940edf8f9583f9e2633d433266b400\nparent ae529fb5f82726a0ffe3d193daeba7dec2172b4b\nauthor DanGould <d@ngould.dev> 1742915696 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nOblivous -> Oblivious\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWRpnAQDFk2cAWsmns6GFTqx3pMB3jkCpD3dhG8acqTpbcIphNgEA4sU0czf0ndlZ\nu4xTDe5dRV1N7lUDXhOsKcK90Fvolwo=\n=1MVv\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ae529fb5f82726a0ffe3d193daeba7dec2172b4b",
          "sha": "ae529fb5f82726a0ffe3d193daeba7dec2172b4b",
          "html_url": "https://github.com/bitcoin/bips/commit/ae529fb5f82726a0ffe3d193daeba7dec2172b4b"
        }
      ],
      "message": "Oblivous -> Oblivious",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:14:56Z"
      },
      "sha": "fd29801d6110b8c50f1fc3ecbe6d8cfab0279baf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDFkZmFmODY0ZjZkNmE1NjFiNjBiMmRiZjM5MTM4OTQ0MmJkMTU4ZGE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1dfaf864f6d6a561b60b2dbf391389442bd158da",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1dfaf864f6d6a561b60b2dbf391389442bd158da",
      "tree": {
        "sha": "ec8ca72527ca67bba1cd1825caedf9975e62d491",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ec8ca72527ca67bba1cd1825caedf9975e62d491"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ec8ca72527ca67bba1cd1825caedf9975e62d491\nparent fd29801d6110b8c50f1fc3ecbe6d8cfab0279baf\nauthor DanGould <d@ngould.dev> 1742915759 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRm reference to 'production relays'\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWa4NAPwIgDuj5V82FSd8S7VVj8MpPLXEFKUH2FmVvrpUIz9ZGwEA6QwWyV4xaXD6\nioU+MQnMC5lPjlO0sQI0axRELq3w4A4=\n=2ksM\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fd29801d6110b8c50f1fc3ecbe6d8cfab0279baf",
          "sha": "fd29801d6110b8c50f1fc3ecbe6d8cfab0279baf",
          "html_url": "https://github.com/bitcoin/bips/commit/fd29801d6110b8c50f1fc3ecbe6d8cfab0279baf"
        }
      ],
      "message": "Rm reference to 'production relays'",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:15:59Z"
      },
      "sha": "1dfaf864f6d6a561b60b2dbf391389442bd158da"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGE4YzliZmFlYTE2ODY4YzI3YzQzM2YwNDI2NjQzZmI0YTAwNzJiNmI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a8c9bfaea16868c27c433f0426643fb4a0072b6b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a8c9bfaea16868c27c433f0426643fb4a0072b6b",
      "tree": {
        "sha": "0724f1c843a8f600293c369f145882fe4be46414",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0724f1c843a8f600293c369f145882fe4be46414"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0724f1c843a8f600293c369f145882fe4be46414\nparent 1dfaf864f6d6a561b60b2dbf391389442bd158da\nauthor DanGould <d@ngould.dev> 1742915805 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nRepeat the active agent by name\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWVubAQDkpUX9VVy8xwge6GjBULQYxlRcbTNbf6tumsIJOq9w6AEAg8tWWyRXmnGD\nhCfrNFVikgznV/wEP7t6InqGDcfXXgI=\n=23ig\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1dfaf864f6d6a561b60b2dbf391389442bd158da",
          "sha": "1dfaf864f6d6a561b60b2dbf391389442bd158da",
          "html_url": "https://github.com/bitcoin/bips/commit/1dfaf864f6d6a561b60b2dbf391389442bd158da"
        }
      ],
      "message": "Repeat the active agent by name",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:16:45Z"
      },
      "sha": "a8c9bfaea16868c27c433f0426643fb4a0072b6b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGEzMjM4MWE0MzdmNmZlOWZiOTVhMDcyMzVkOWQ5MDczZjAzNTAwZDQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a32381a437f6fe9fb95a07235d9d9073f03500d4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a32381a437f6fe9fb95a07235d9d9073f03500d4",
      "tree": {
        "sha": "e03dc0953409048fc56ddabaeb5c521991a4c34e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e03dc0953409048fc56ddabaeb5c521991a4c34e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e03dc0953409048fc56ddabaeb5c521991a4c34e\nparent a8c9bfaea16868c27c433f0426643fb4a0072b6b\nauthor DanGould <d@ngould.dev> 1742916623 -0400\ncommitter DanGould <d@ngould.dev> 1746144446 -0400\n\nAdd Post-History\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBQMvgAKCRA4cTNWCSIP\nWWfmAQCe73yplxu2Je1F9E4xd3cXW23crtO5EzrRfOWSwxme3gEAo+lMkh2GXxIW\nMHC1AM7Y1w1CmYib8SFT1I+fqwxPywI=\n=BOZe\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a8c9bfaea16868c27c433f0426643fb4a0072b6b",
          "sha": "a8c9bfaea16868c27c433f0426643fb4a0072b6b",
          "html_url": "https://github.com/bitcoin/bips/commit/a8c9bfaea16868c27c433f0426643fb4a0072b6b"
        }
      ],
      "message": "Add Post-History",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:07:26Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:30:23Z"
      },
      "sha": "a32381a437f6fe9fb95a07235d9d9073f03500d4"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17493811309,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAQStmBt",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17493811309",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "f1fc72035a4afee15aef05f02338e1fbd74065bb",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/f1fc72035a4afee15aef05f02338e1fbd74065bb",
      "created_at": "2025-05-02T00:08:38Z"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17493818157,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAQStnst",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17493818157",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "6f73925c06163a810ae4a97db7a31967976dc2da",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/6f73925c06163a810ae4a97db7a31967976dc2da",
      "created_at": "2025-05-02T00:09:57Z"
    },
    {
      "event": "reviewed",
      "id": 2811060783,
      "node_id": "PRR_kwDOAN28mc6njWIv",
      "url": null,
      "actor": null,
      "commit_id": "6f73925c06163a810ae4a97db7a31967976dc2da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2811060783",
      "submitted_at": "2025-05-02T02:24:46Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2811062546,
      "node_id": "PRR_kwDOAN28mc6njWkS",
      "url": null,
      "actor": null,
      "commit_id": "6f73925c06163a810ae4a97db7a31967976dc2da",
      "commit_url": null,
      "created_at": null,
      "author_association": "MEMBER",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2811062546",
      "submitted_at": "2025-05-02T02:26:00Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17501225341,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAQTJ4F9",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17501225341",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "df16bc0dceecbaed1fde64e09d7c93bf2abf6c09",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/df16bc0dceecbaed1fde64e09d7c93bf2abf6c09",
      "created_at": "2025-05-02T14:58:08Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk3YzY3YjM2YWU3MGM2YmExZTFlOTNjZWYxM2M2MDE2NWU1YTgyNDk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/97c67b36ae70c6ba1e1e93cef13c60165e5a8249",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/97c67b36ae70c6ba1e1e93cef13c60165e5a8249",
      "tree": {
        "sha": "ea4922300c5d70835cfee45766991b560317d246",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ea4922300c5d70835cfee45766991b560317d246"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ea4922300c5d70835cfee45766991b560317d246\nparent a32381a437f6fe9fb95a07235d9d9073f03500d4\nauthor DanGould <d@ngould.dev> 1742916915 -0400\ncommitter DanGould <d@ngould.dev> 1746197904 -0400\n\nTitle 'Async Payjoin'\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdkQAKCRA4cTNWCSIP\nWSIjAP9zu7v5EbDSzdWs2A+8wMISi7kEXL9rYAw5GLBf4cPoZQEAikrozOolPWJI\neWVQjfPvSHcCd2wYfBpr+P8twZYBXQg=\n=yB9Y\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a32381a437f6fe9fb95a07235d9d9073f03500d4",
          "sha": "a32381a437f6fe9fb95a07235d9d9073f03500d4",
          "html_url": "https://github.com/bitcoin/bips/commit/a32381a437f6fe9fb95a07235d9d9073f03500d4"
        }
      ],
      "message": "Title 'Async Payjoin'",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:24Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:35:15Z"
      },
      "sha": "97c67b36ae70c6ba1e1e93cef13c60165e5a8249"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDYwNTg2MWEyMThlYWQwYjgyYzJhOTk0MmYzM2JiMTlkNzIyYTVmOTA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/605861a218ead0b82c2a9942f33bb19d722a5f90",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/605861a218ead0b82c2a9942f33bb19d722a5f90",
      "tree": {
        "sha": "c4b727f1570713e1c47a0d2aecb49dfdb7593169",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c4b727f1570713e1c47a0d2aecb49dfdb7593169"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c4b727f1570713e1c47a0d2aecb49dfdb7593169\nparent 97c67b36ae70c6ba1e1e93cef13c60165e5a8249\nauthor DanGould <d@ngould.dev> 1742916981 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nCheck spelling\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWV2RAQCS+oJBpfXPilMsp0i/T/ZFLVymf/G8qyYEH5PzdfE3FwD8CavFZribibvw\n8gPg4SOapsHkSdX2sxDLyL6Rdumylg0=\n=By7I\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/97c67b36ae70c6ba1e1e93cef13c60165e5a8249",
          "sha": "97c67b36ae70c6ba1e1e93cef13c60165e5a8249",
          "html_url": "https://github.com/bitcoin/bips/commit/97c67b36ae70c6ba1e1e93cef13c60165e5a8249"
        }
      ],
      "message": "Check spelling",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T15:36:21Z"
      },
      "sha": "605861a218ead0b82c2a9942f33bb19d722a5f90"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRjZmE0MzE4Y2U0ZWE1OTY4ZDA0MjQxM2NlNmM2OWE2Y2QwMjU5M2E",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dcfa4318ce4ea5968d042413ce6c69a6cd02593a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/dcfa4318ce4ea5968d042413ce6c69a6cd02593a",
      "tree": {
        "sha": "7c47641474ba53def393155fe12d034aed634fbd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7c47641474ba53def393155fe12d034aed634fbd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7c47641474ba53def393155fe12d034aed634fbd\nparent 605861a218ead0b82c2a9942f33bb19d722a5f90\nauthor DanGould <d@ngould.dev> 1742920264 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\ndirectory -> mailbox\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWW0AAPsGwU80Q+1FeFjo+IERcrIhhGhjn+wvzIUriY1fZtyR7QEAgXBAZFEqudsj\nzpyTzDmdjHu1i3ILgHOrss5xznR4Xws=\n=Dxgz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/605861a218ead0b82c2a9942f33bb19d722a5f90",
          "sha": "605861a218ead0b82c2a9942f33bb19d722a5f90",
          "html_url": "https://github.com/bitcoin/bips/commit/605861a218ead0b82c2a9942f33bb19d722a5f90"
        }
      ],
      "message": "directory -> mailbox",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T16:31:04Z"
      },
      "sha": "dcfa4318ce4ea5968d042413ce6c69a6cd02593a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGVmMWY0NGYxZGZiNTlhMmMzNzYyYmQ5NWFkZTQzYzg2OTQ4YmM1ZDM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ef1f44f1dfb59a2c3762bd95ade43c86948bc5d3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ef1f44f1dfb59a2c3762bd95ade43c86948bc5d3",
      "tree": {
        "sha": "d12438133a675f591f813cb74c7bf1abdd9d6a82",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d12438133a675f591f813cb74c7bf1abdd9d6a82"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d12438133a675f591f813cb74c7bf1abdd9d6a82\nparent dcfa4318ce4ea5968d042413ce6c69a6cd02593a\nauthor DanGould <d@ngould.dev> 1742920545 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nMove ohttp= fragment param to link to frag spec\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWdwEAQCifaEf+u5/e/FXb59aZ41xuFI5/EnUFvwILBXdaqidMQEApfiuv2iyn+PX\nGEI4HrsA4WJy9SK89WL0oQbBnAAvRg0=\n=HZDD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dcfa4318ce4ea5968d042413ce6c69a6cd02593a",
          "sha": "dcfa4318ce4ea5968d042413ce6c69a6cd02593a",
          "html_url": "https://github.com/bitcoin/bips/commit/dcfa4318ce4ea5968d042413ce6c69a6cd02593a"
        }
      ],
      "message": "Move ohttp= fragment param to link to frag spec",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T16:35:45Z"
      },
      "sha": "ef1f44f1dfb59a2c3762bd95ade43c86948bc5d3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDc2NTExMTM4NjQwZDhlMzAwOGE3MzExZjczMzAwYjY4ZTczZDY5M2E",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/76511138640d8e3008a7311f73300b68e73d693a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/76511138640d8e3008a7311f73300b68e73d693a",
      "tree": {
        "sha": "aa92039c1ec9bc81456625bf630822abe7d32307",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/aa92039c1ec9bc81456625bf630822abe7d32307"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree aa92039c1ec9bc81456625bf630822abe7d32307\nparent ef1f44f1dfb59a2c3762bd95ade43c86948bc5d3\nauthor DanGould <d@ngould.dev> 1742923116 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nMention URI keys as bootstrap mechanism\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWYuBAQC8rPG1Jprjs1D4Q+jPX48Y6mja6whpQsBi8Hub46mhMwEAl3WysHPp6O26\nxTRGjeq+SISiEGtfbwsQT9KL74lRiwM=\n=PXq9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ef1f44f1dfb59a2c3762bd95ade43c86948bc5d3",
          "sha": "ef1f44f1dfb59a2c3762bd95ade43c86948bc5d3",
          "html_url": "https://github.com/bitcoin/bips/commit/ef1f44f1dfb59a2c3762bd95ade43c86948bc5d3"
        }
      ],
      "message": "Mention URI keys as bootstrap mechanism",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-03-25T17:18:36Z"
      },
      "sha": "76511138640d8e3008a7311f73300b68e73d693a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDliMjI2ZTgzN2VhZjM2MTNkOGFkZjkwMGE2MTE2N2I4NmQ5MzY5YmQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9b226e837eaf3613d8adf900a61167b86d9369bd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9b226e837eaf3613d8adf900a61167b86d9369bd",
      "tree": {
        "sha": "178bfdd9baf21a992364ef3bf211ec1994513402",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/178bfdd9baf21a992364ef3bf211ec1994513402"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 178bfdd9baf21a992364ef3bf211ec1994513402\nparent 76511138640d8e3008a7311f73300b68e73d693a\nauthor DanGould <d@ngould.dev> 1744212682 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nMailbox Discovery\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWZHbAQCNcrgIZ4Nhu8opDXkyU0iEG6cM0/JaqfyhBBStRxPtsQD/bhnOZx38g4Mx\nG0NUdZ5Hyzv1SRX8q/4yFBtBaoeOmgc=\n=Jdxi\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/76511138640d8e3008a7311f73300b68e73d693a",
          "sha": "76511138640d8e3008a7311f73300b68e73d693a",
          "html_url": "https://github.com/bitcoin/bips/commit/76511138640d8e3008a7311f73300b68e73d693a"
        }
      ],
      "message": "Mailbox Discovery",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-04-09T15:31:22Z"
      },
      "sha": "9b226e837eaf3613d8adf900a61167b86d9369bd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRjZmY1OWJhMWYyMDYyNjIzNmUxZTE1YzcxMGU0M2I3NTk3YWViYjE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dcff59ba1f20626236e1e15c710e43b7597aebb1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/dcff59ba1f20626236e1e15c710e43b7597aebb1",
      "tree": {
        "sha": "99848f86a81342127409c85a4ec4d2304004b70d",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/99848f86a81342127409c85a4ec4d2304004b70d"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 99848f86a81342127409c85a4ec4d2304004b70d\nparent 9b226e837eaf3613d8adf900a61167b86d9369bd\nauthor DanGould <d@ngould.dev> 1744212693 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nRemove superfluous word\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWbmKAP9qhKmyHSBCpVuI8KXwepF6XtIycz7Cvvw7pN/nfhnjlQD8DMLJaJfL4ReO\nmTPEikRz4SC/bJPwrPuZ/3WFc63UXQM=\n=X8M7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9b226e837eaf3613d8adf900a61167b86d9369bd",
          "sha": "9b226e837eaf3613d8adf900a61167b86d9369bd",
          "html_url": "https://github.com/bitcoin/bips/commit/9b226e837eaf3613d8adf900a61167b86d9369bd"
        }
      ],
      "message": "Remove superfluous word",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-04-09T15:31:33Z"
      },
      "sha": "dcff59ba1f20626236e1e15c710e43b7597aebb1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGY1NGIxM2EyNzI1YjkxNzEwYzQ3NmQ5MGIzMjgyMjdlOTMzYTI2ZmY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f54b13a2725b91710c476d90b328227e933a26ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f54b13a2725b91710c476d90b328227e933a26ff",
      "tree": {
        "sha": "53e9eb54414f7f7220919059ae38c0f48c96b566",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/53e9eb54414f7f7220919059ae38c0f48c96b566"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 53e9eb54414f7f7220919059ae38c0f48c96b566\nparent dcff59ba1f20626236e1e15c710e43b7597aebb1\nauthor DanGould <d@ngould.dev> 1744214414 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nClarify motivation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWbygAQDpb3pZImfSWRle2wDT5a0vDZ2tE2DMAON67xQaThZe5wD+I2OZ6K8EzGft\nTZdxSjGdQOzAne02MthrHKa6Zlcx6wg=\n=KzoF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/dcff59ba1f20626236e1e15c710e43b7597aebb1",
          "sha": "dcff59ba1f20626236e1e15c710e43b7597aebb1",
          "html_url": "https://github.com/bitcoin/bips/commit/dcff59ba1f20626236e1e15c710e43b7597aebb1"
        }
      ],
      "message": "Clarify motivation",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-04-09T16:00:14Z"
      },
      "sha": "f54b13a2725b91710c476d90b328227e933a26ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDdiM2I2M2MzNTUzNjY2ODljODQzY2MzMzM5YzZhMTkyZDM5YjhiMWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7b3b63c355366689c843cc3339c6a192d39b8b1b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7b3b63c355366689c843cc3339c6a192d39b8b1b",
      "tree": {
        "sha": "8f69ec4fd6c5d5107476945b3d7b855296b1356b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8f69ec4fd6c5d5107476945b3d7b855296b1356b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8f69ec4fd6c5d5107476945b3d7b855296b1356b\nparent f54b13a2725b91710c476d90b328227e933a26ff\nauthor DanGould <d@ngould.dev> 1744216867 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nRevise backwards compatiblity section for clarity\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWdGKAP9xT990gul20yVsTqf/rNT3ExQXKtyu+ORSKcG/0LWgmQEA6pf/ZNtieXEY\ngjla/VKJI1s2cXGTY6IIQSa+aUzTnAg=\n=FnV4\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f54b13a2725b91710c476d90b328227e933a26ff",
          "sha": "f54b13a2725b91710c476d90b328227e933a26ff",
          "html_url": "https://github.com/bitcoin/bips/commit/f54b13a2725b91710c476d90b328227e933a26ff"
        }
      ],
      "message": "Revise backwards compatiblity section for clarity",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-04-09T16:41:07Z"
      },
      "sha": "7b3b63c355366689c843cc3339c6a192d39b8b1b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDAxMGEyYTc0NjgyOTg1Mjk1OTMzZjcwZmZhN2E3NzI5ZGQwY2U1ZGE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/010a2a74682985295933f70ffa7a7729dd0ce5da",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/010a2a74682985295933f70ffa7a7729dd0ce5da",
      "tree": {
        "sha": "3645f7e16fb6548662656310f1c400c62390034f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3645f7e16fb6548662656310f1c400c62390034f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3645f7e16fb6548662656310f1c400c62390034f\nparent 7b3b63c355366689c843cc3339c6a192d39b8b1b\nauthor DanGould <d@ngould.dev> 1744216948 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nRemove related protocol details\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWX9IAQDya2arMa1aoNLNRcWjNi20u5Hbc+7s2HT7AQ+xH5aUOAEAkOg7XBEPY/4U\ncq6FsRjYCDwcMh9cBVnuhxBa1mn7gg0=\n=ScL+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7b3b63c355366689c843cc3339c6a192d39b8b1b",
          "sha": "7b3b63c355366689c843cc3339c6a192d39b8b1b",
          "html_url": "https://github.com/bitcoin/bips/commit/7b3b63c355366689c843cc3339c6a192d39b8b1b"
        }
      ],
      "message": "Remove related protocol details",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-04-09T16:42:28Z"
      },
      "sha": "010a2a74682985295933f70ffa7a7729dd0ce5da"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNhYWM1ODJiNzZiNDdmYjc5OGM5YmNjYzA1N2JjZjY2NWI4MTg4MWY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3aac582b76b47fb798c9bccc057bcf665b81881f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3aac582b76b47fb798c9bccc057bcf665b81881f",
      "tree": {
        "sha": "dafa29adc36911edaf1bad4449aff3ee41096cbc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dafa29adc36911edaf1bad4449aff3ee41096cbc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dafa29adc36911edaf1bad4449aff3ee41096cbc\nparent 010a2a74682985295933f70ffa7a7729dd0ce5da\nauthor DanGould <d@ngould.dev> 1744217871 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nMv copyright out of flow\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWaR4AP4n4yIEtmLza5N4OXdo3LECnzkZtfAkurlZYijirqv9XgD/X5esB/ufCEnp\nmMIpfPx7c2nARynNnkZgzD/hbqZFdQE=\n=6zev\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/010a2a74682985295933f70ffa7a7729dd0ce5da",
          "sha": "010a2a74682985295933f70ffa7a7729dd0ce5da",
          "html_url": "https://github.com/bitcoin/bips/commit/010a2a74682985295933f70ffa7a7729dd0ce5da"
        }
      ],
      "message": "Mv copyright out of flow",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-04-09T16:57:51Z"
      },
      "sha": "3aac582b76b47fb798c9bccc057bcf665b81881f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ5NTAzODYxNWI2MzViYmE4MjlmZWNjNzNkN2JiYTk4NGFlOWI4YzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d95038615b635bba829fecc73d7bba984ae9b8c4",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d95038615b635bba829fecc73d7bba984ae9b8c4",
      "tree": {
        "sha": "6e9d8136c9d097f49800c96865adacbd0838a63a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6e9d8136c9d097f49800c96865adacbd0838a63a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6e9d8136c9d097f49800c96865adacbd0838a63a\nparent 3aac582b76b47fb798c9bccc057bcf665b81881f\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744302268 +0200\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nFix grammar (should be plural)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWfLjAQDexOrf6bnaoxb2ZKNasY5Chq2vOBEwsdfh4D7dCetREgD+O57+1d5087vs\nOznYAjSJAZI+vxPvYtAT9/cHrdbFWgQ=\n=Vgpd\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3aac582b76b47fb798c9bccc057bcf665b81881f",
          "sha": "3aac582b76b47fb798c9bccc057bcf665b81881f",
          "html_url": "https://github.com/bitcoin/bips/commit/3aac582b76b47fb798c9bccc057bcf665b81881f"
        }
      ],
      "message": "Fix grammar (should be plural)",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T16:24:28Z"
      },
      "sha": "d95038615b635bba829fecc73d7bba984ae9b8c4"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDU3YWExNGExOTg4YjI5MmUwNGI5OWEwMzc5YTQ2YjNmNDc2ZGVmZmQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/57aa14a1988b292e04b99a0379a46b3f476deffd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/57aa14a1988b292e04b99a0379a46b3f476deffd",
      "tree": {
        "sha": "776c0766381238cbbc86bb12d8baa6b46db0a63a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/776c0766381238cbbc86bb12d8baa6b46db0a63a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 776c0766381238cbbc86bb12d8baa6b46db0a63a\nparent d95038615b635bba829fecc73d7bba984ae9b8c4\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744302268 +0200\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nWeaken language around addressing CIOH\n\n\"solves\" implies this is the end of the story. Clarify that the problem\nis the sole *explicit* problem mentioned in the paper.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWQLeAQD9oQOWKEBOtyQHsqeLItAv08WbUGE0fOiV4va/urhL0QEA5aDFPw3M+VCQ\nMFAyy++7OGDFjIWPrwkrDd3BRZR/wwA=\n=W4xq\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d95038615b635bba829fecc73d7bba984ae9b8c4",
          "sha": "d95038615b635bba829fecc73d7bba984ae9b8c4",
          "html_url": "https://github.com/bitcoin/bips/commit/d95038615b635bba829fecc73d7bba984ae9b8c4"
        }
      ],
      "message": "Weaken language around addressing CIOH\n\n\"solves\" implies this is the end of the story. Clarify that the problem\nis the sole *explicit* problem mentioned in the paper.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T16:24:28Z"
      },
      "sha": "57aa14a1988b292e04b99a0379a46b3f476deffd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDYxYjE1ZTBhMmI3N2EyNTQxNWU1NzY2MjY2NGQ5MGZiOGEzODdlNDE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/61b15e0a2b77a25415e57662664d90fb8a387e41",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/61b15e0a2b77a25415e57662664d90fb8a387e41",
      "tree": {
        "sha": "ce1bbebb538025aa63ba5519452fe3bd536d6e0f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ce1bbebb538025aa63ba5519452fe3bd536d6e0f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ce1bbebb538025aa63ba5519452fe3bd536d6e0f\nparent 57aa14a1988b292e04b99a0379a46b3f476deffd\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744302268 +0200\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nSimplify overview\n\n- describe happy path protocol sequence\n- introduce non-obvious key terms inherited from BIP 78\n- no need for technical details that are clarified in the specification\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWT+qAP9q2ip9eMwjYFMztryxu+SxCq9BgyTl3+Om25IdQ6jB+gEA/4xWqNnnfVHM\nJRlAgdDwcw+YZdbjPrMHuEvaf1TskAU=\n=KoMn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/57aa14a1988b292e04b99a0379a46b3f476deffd",
          "sha": "57aa14a1988b292e04b99a0379a46b3f476deffd",
          "html_url": "https://github.com/bitcoin/bips/commit/57aa14a1988b292e04b99a0379a46b3f476deffd"
        }
      ],
      "message": "Simplify overview\n\n- describe happy path protocol sequence\n- introduce non-obvious key terms inherited from BIP 78\n- no need for technical details that are clarified in the specification",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T16:24:28Z"
      },
      "sha": "61b15e0a2b77a25415e57662664d90fb8a387e41"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDNhM2EyOTkzY2MwNDFmMzQzMzBmNmFhMTEyOWEyYzYxYzkyYmYwMDM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3a3a2993cc041f34330f6aa1129a2c61c92bf003",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3a3a2993cc041f34330f6aa1129a2c61c92bf003",
      "tree": {
        "sha": "f00de2ec32c177eef1db1955b68e171fd814389f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f00de2ec32c177eef1db1955b68e171fd814389f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f00de2ec32c177eef1db1955b68e171fd814389f\nparent 61b15e0a2b77a25415e57662664d90fb8a387e41\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744304308 +0200\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nDescribe optionality in overview\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWTf7AQDLYyXqD+6tAK7fRUrxSx0dmO87R16q2C1YEoglz8OVmAEA5u3bLjh7NRd4\nud50Otbx4mym0ixOycSVDmoE+Ro3Sgw=\n=RrwL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/61b15e0a2b77a25415e57662664d90fb8a387e41",
          "sha": "61b15e0a2b77a25415e57662664d90fb8a387e41",
          "html_url": "https://github.com/bitcoin/bips/commit/61b15e0a2b77a25415e57662664d90fb8a387e41"
        }
      ],
      "message": "Describe optionality in overview",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T16:58:28Z"
      },
      "sha": "3a3a2993cc041f34330f6aa1129a2c61c92bf003"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg1MTcwYWVmYzdlMmRmNTY2NzU4M2RjNGViMDg0OWRkMzFiNjBkM2E",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85170aefc7e2df5667583dc4eb0849dd31b60d3a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/85170aefc7e2df5667583dc4eb0849dd31b60d3a",
      "tree": {
        "sha": "09abc723a6a139b9c3666862f3870f01084f6e16",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/09abc723a6a139b9c3666862f3870f01084f6e16"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 09abc723a6a139b9c3666862f3870f01084f6e16\nparent 3a3a2993cc041f34330f6aa1129a2c61c92bf003\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744304308 +0200\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nNitpicky sequence diagram fixes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWeBlAP9Vo3czbm0Jz5ays0s1t+wXImJvGsqalc6mVQGliIqj/AD9Gi28RyFyHg4h\n5lzlAOeeh6kE+2moWpQ+qdAZto1S2AA=\n=khHS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3a3a2993cc041f34330f6aa1129a2c61c92bf003",
          "sha": "3a3a2993cc041f34330f6aa1129a2c61c92bf003",
          "html_url": "https://github.com/bitcoin/bips/commit/3a3a2993cc041f34330f6aa1129a2c61c92bf003"
        }
      ],
      "message": "Nitpicky sequence diagram fixes",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T16:58:28Z"
      },
      "sha": "85170aefc7e2df5667583dc4eb0849dd31b60d3a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ4Mjg1ZjczOTY4ZDk1YWI4Y2I1M2Q5Mjk4N2IyZWFiOTdiZWE5MWY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d8285f73968d95ab8cb53d92987b2eab97bea91f",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d8285f73968d95ab8cb53d92987b2eab97bea91f",
      "tree": {
        "sha": "f169922379f2247db7f17d4c54642ad780d6e7b7",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/f169922379f2247db7f17d4c54642ad780d6e7b7"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree f169922379f2247db7f17d4c54642ad780d6e7b7\nparent 85170aefc7e2df5667583dc4eb0849dd31b60d3a\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744304308 +0200\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nClarify receiver's initial message in sequence diagram\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWVKXAPkBYhnqRQsKcUPjmwWQI0Ta0DB5GOzOVRTVuHpzBt0BZQEArD3BGvVEv8ND\n336H2GslJRfq8yQg8tZWqkTGbBn7Yg8=\n=SnSE\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/85170aefc7e2df5667583dc4eb0849dd31b60d3a",
          "sha": "85170aefc7e2df5667583dc4eb0849dd31b60d3a",
          "html_url": "https://github.com/bitcoin/bips/commit/85170aefc7e2df5667583dc4eb0849dd31b60d3a"
        }
      ],
      "message": "Clarify receiver's initial message in sequence diagram",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T16:58:28Z"
      },
      "sha": "d8285f73968d95ab8cb53d92987b2eab97bea91f"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDRlZmQxYmUxZmMyNWExNTZiMWZlMTMzZTc2YmI0NTMxZDZjYWFkODg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4efd1be1fc25a156b1fe133e76bb4531d6caad88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4efd1be1fc25a156b1fe133e76bb4531d6caad88",
      "tree": {
        "sha": "82b0f6bdde276d8bfd677dff01ec3e83d265dc7b",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/82b0f6bdde276d8bfd677dff01ec3e83d265dc7b"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 82b0f6bdde276d8bfd677dff01ec3e83d265dc7b\nparent d8285f73968d95ab8cb53d92987b2eab97bea91f\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744304308 +0200\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nSimplify Basic Scheme section\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHQEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlAAKCRA4cTNWCSIP\nWT4HAQCKOZC9i+9TvRdmV+2VG8CpEmJtzTZgOBz9CWGeKk4owQD497IxVPOeCaeY\nWBM5rCgqw64OKirTeLlB4iiAaGd5BA==\n=rqG5\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d8285f73968d95ab8cb53d92987b2eab97bea91f",
          "sha": "d8285f73968d95ab8cb53d92987b2eab97bea91f",
          "html_url": "https://github.com/bitcoin/bips/commit/d8285f73968d95ab8cb53d92987b2eab97bea91f"
        }
      ],
      "message": "Simplify Basic Scheme section",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T16:58:28Z"
      },
      "sha": "4efd1be1fc25a156b1fe133e76bb4531d6caad88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDdhYTE0ZDYxZGY3MWJkNGYyYzRiMDlkN2FhM2Y4NmZhMDU5YzUzMmE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7aa14d61df71bd4f2c4b09d7aa3f86fa059c532a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7aa14d61df71bd4f2c4b09d7aa3f86fa059c532a",
      "tree": {
        "sha": "8ed875f8e17ec3a02d8c8ddd6ade702c8760e875",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8ed875f8e17ec3a02d8c8ddd6ade702c8760e875"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8ed875f8e17ec3a02d8c8ddd6ade702c8760e875\nparent 4efd1be1fc25a156b1fe133e76bb4531d6caad88\nauthor DanGould <d@ngould.dev> 1745345216 -0400\ncommitter DanGould <d@ngould.dev> 1746197908 -0400\n\nMention OHTTP abbreviation on first mention\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWVW2AP0TFusJbdXzC02CXZnPa0/KIZ+m2zNyON2nLIw5awOI2gEAuvDBpus3Nw29\nv/EeY3R2DrVNuQso7qjq6pV+YZ7XZgU=\n=D2Jz\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4efd1be1fc25a156b1fe133e76bb4531d6caad88",
          "sha": "4efd1be1fc25a156b1fe133e76bb4531d6caad88",
          "html_url": "https://github.com/bitcoin/bips/commit/4efd1be1fc25a156b1fe133e76bb4531d6caad88"
        }
      ],
      "message": "Mention OHTTP abbreviation on first mention",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:28Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-04-22T18:06:56Z"
      },
      "sha": "7aa14d61df71bd4f2c4b09d7aa3f86fa059c532a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDU2NWYzYzIxMDJkY2QyYzZlZmZjZTQxNDA1NTk4YzI5NzYzMDg5YWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/565f3c2102dcd2c6effce41405598c29763089ab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/565f3c2102dcd2c6effce41405598c29763089ab",
      "tree": {
        "sha": "1eebc4946a084b58cb10cbfdc2f889903365a010",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1eebc4946a084b58cb10cbfdc2f889903365a010"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1eebc4946a084b58cb10cbfdc2f889903365a010\nparent 7aa14d61df71bd4f2c4b09d7aa3f86fa059c532a\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744307116 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nMove sequence diagram up\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWR7+AQDmKyjJBCsFnVAMaBbfD3h2FqzHPxiubjSt2Osk4MySbwD8CjgGLnKUnc3X\nq/JB3ruAv9BCN1phwn+898lK3+eK4gw=\n=yj9o\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7aa14d61df71bd4f2c4b09d7aa3f86fa059c532a",
          "sha": "7aa14d61df71bd4f2c4b09d7aa3f86fa059c532a",
          "html_url": "https://github.com/bitcoin/bips/commit/7aa14d61df71bd4f2c4b09d7aa3f86fa059c532a"
        }
      ],
      "message": "Move sequence diagram up",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T17:45:16Z"
      },
      "sha": "565f3c2102dcd2c6effce41405598c29763089ab"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDdhZmQ2MWIwYWU1Yjk2MzY0ZWViMGFlYzVkOTg4NjFkYWY3ODBlZGE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7afd61b0ae5b96364eeb0aec5d98861daf780eda",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7afd61b0ae5b96364eeb0aec5d98861daf780eda",
      "tree": {
        "sha": "c5738cfb6bd2fc58499902fe2c4cc0b08a69e619",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c5738cfb6bd2fc58499902fe2c4cc0b08a69e619"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c5738cfb6bd2fc58499902fe2c4cc0b08a69e619\nparent 565f3c2102dcd2c6effce41405598c29763089ab\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744307116 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nfragment parameter encoding corrections\n\n- base64url was replaced by bech32\n- formatting fixes\n- some clarifications\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWdPXAQCb3+vdKr4H029gJm4rsNVtN9arf+tA3ktpkWj6B0uFUAD+MMHrm7VKobY6\njDatctz12ik+6VTJrkwFM++mTC1NcQ4=\n=fm+d\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/565f3c2102dcd2c6effce41405598c29763089ab",
          "sha": "565f3c2102dcd2c6effce41405598c29763089ab",
          "html_url": "https://github.com/bitcoin/bips/commit/565f3c2102dcd2c6effce41405598c29763089ab"
        }
      ],
      "message": "fragment parameter encoding corrections\n\n- base64url was replaced by bech32\n- formatting fixes\n- some clarifications",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T17:45:16Z"
      },
      "sha": "7afd61b0ae5b96364eeb0aec5d98861daf780eda"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDhkZDI1MjkzZTQ2OGFjYTQ5MGYwMmExN2RmNjdmY2I4YTZkZTZkYWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8dd25293e468aca490f02a17df67fcb8a6de6dab",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/8dd25293e468aca490f02a17df67fcb8a6de6dab",
      "tree": {
        "sha": "06f71fa1fa0ce93940dfda41909038514cc078a1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/06f71fa1fa0ce93940dfda41909038514cc078a1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 06f71fa1fa0ce93940dfda41909038514cc078a1\nparent 7afd61b0ae5b96364eeb0aec5d98861daf780eda\nauthor DanGould <d@ngould.dev> 1745345364 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nUse SHA-256 at independent mentions for consistency\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWdR0AQD86aafiwLUtp6tiu0LFHKzNzxQlAKfFi3uo7SLNqynkQEA50n2vVivuAKh\nMehKGA8E/pyMVt5bqMRcg75hZBy2fwE=\n=wR9F\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7afd61b0ae5b96364eeb0aec5d98861daf780eda",
          "sha": "7afd61b0ae5b96364eeb0aec5d98861daf780eda",
          "html_url": "https://github.com/bitcoin/bips/commit/7afd61b0ae5b96364eeb0aec5d98861daf780eda"
        }
      ],
      "message": "Use SHA-256 at independent mentions for consistency",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-04-22T18:09:24Z"
      },
      "sha": "8dd25293e468aca490f02a17df67fcb8a6de6dab"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFlY2ZiZGI2MGMxOTY2OGViYWI0MGQ2OWE4ZDEwYTBkNGFlZmI2YWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/aecfbdb60c19668ebab40d69a8d10a0d4aefb6ad",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/aecfbdb60c19668ebab40d69a8d10a0d4aefb6ad",
      "tree": {
        "sha": "31a67aa890f5bb2485f241a33482ca16648a1dd5",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/31a67aa890f5bb2485f241a33482ca16648a1dd5"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 31a67aa890f5bb2485f241a33482ca16648a1dd5\nparent 8dd25293e468aca490f02a17df67fcb8a6de6dab\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744316083 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nbootstrap grammar fix & correction\n\nbootstrap would use a tor exit node, not a hidden service\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWfMyAQDp6A/ca0zw8sQR9mHC5HoVWLACOInETYk+TY91aQ8SsgD/eZXsx9ubozKk\n5A4jQmDk0+7UsEOP5c1FIOYx3xiz+A8=\n=BN1T\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/8dd25293e468aca490f02a17df67fcb8a6de6dab",
          "sha": "8dd25293e468aca490f02a17df67fcb8a6de6dab",
          "html_url": "https://github.com/bitcoin/bips/commit/8dd25293e468aca490f02a17df67fcb8a6de6dab"
        }
      ],
      "message": "bootstrap grammar fix & correction\n\nbootstrap would use a tor exit node, not a hidden service",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:14:43Z"
      },
      "sha": "aecfbdb60c19668ebab40d69a8d10a0d4aefb6ad"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM0OGJjODUwZDVhM2I3YWViMmExOTkyMDYwMmRhMjc3YmNjOTMwY2I",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/348bc850d5a3b7aeb2a19920602da277bcc930cb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/348bc850d5a3b7aeb2a19920602da277bcc930cb",
      "tree": {
        "sha": "9da159dfdcd3a3f0f635650a3de4bd170d0ebf43",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9da159dfdcd3a3f0f635650a3de4bd170d0ebf43"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9da159dfdcd3a3f0f635650a3de4bd170d0ebf43\nparent aecfbdb60c19668ebab40d69a8d10a0d4aefb6ad\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744316083 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nclarify proposal PSBT encryption layers\n\nclarify which key is used for which layer of encryption (payjoin v2 e2ee vs.\nOHTTP)\n\nthe message is not \"authenticated\" by the sender, rather it is tagged, it can be\nauthenticated during decryption.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWUkGAQDLQ7ZM13kHBn3EH7OHbgoNV+BNvrFj31+6kXeBxg4ihwEAnLbRNi8hOn4X\nf5bpE0VD6Kh9bi4cCo0VEwKkE8/S/Qs=\n=yME3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/aecfbdb60c19668ebab40d69a8d10a0d4aefb6ad",
          "sha": "aecfbdb60c19668ebab40d69a8d10a0d4aefb6ad",
          "html_url": "https://github.com/bitcoin/bips/commit/aecfbdb60c19668ebab40d69a8d10a0d4aefb6ad"
        }
      ],
      "message": "clarify proposal PSBT encryption layers\n\nclarify which key is used for which layer of encryption (payjoin v2 e2ee vs.\nOHTTP)\n\nthe message is not \"authenticated\" by the sender, rather it is tagged, it can be\nauthenticated during decryption.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:14:43Z"
      },
      "sha": "348bc850d5a3b7aeb2a19920602da277bcc930cb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFlZmExM2Y0OWM2ZWI4ZmEwZDVkN2ExNDE4ZDRhNzQxNGFlOTE3YTM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/aefa13f49c6eb8fa0d5d7a1418d4a7414ae917a3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/aefa13f49c6eb8fa0d5d7a1418d4a7414ae917a3",
      "tree": {
        "sha": "7b3cfcd97243cc60c3533f699176df9461c853a2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7b3cfcd97243cc60c3533f699176df9461c853a2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7b3cfcd97243cc60c3533f699176df9461c853a2\nparent 348bc850d5a3b7aeb2a19920602da277bcc930cb\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744316354 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nformat original/proposal PSBT terms using italic, not <code>\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWaU4AP90haZWaSzycS7ARxgT2wx9U31Z6kgjqshM+kXjs1D7BgEAv7IS4Eyfni45\ndWfUw61Jq3WEtJkIwkTeiEj9ucL9gAU=\n=ihxu\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/348bc850d5a3b7aeb2a19920602da277bcc930cb",
          "sha": "348bc850d5a3b7aeb2a19920602da277bcc930cb",
          "html_url": "https://github.com/bitcoin/bips/commit/348bc850d5a3b7aeb2a19920602da277bcc930cb"
        }
      ],
      "message": "format original/proposal PSBT terms using italic, not <code>",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:19:14Z"
      },
      "sha": "aefa13f49c6eb8fa0d5d7a1418d4a7414ae917a3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGYzZmY3ZGIwMzJjZjI1NzgwY2YzZWU0MTIyMTVmNGNhOTA2MmI5YjU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f3ff7db032cf25780cf3ee412215f4ca9062b9b5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f3ff7db032cf25780cf3ee412215f4ca9062b9b5",
      "tree": {
        "sha": "5124ffa6b53f31c20bb7da7cffeb940734160d7c",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5124ffa6b53f31c20bb7da7cffeb940734160d7c"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5124ffa6b53f31c20bb7da7cffeb940734160d7c\nparent aefa13f49c6eb8fa0d5d7a1418d4a7414ae917a3\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744316354 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nHRP of short ID is an implementation detail\n\nit doesn't matter what is used since it's stripped after encoding\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWZpNAQDAqiFMkMF1dP9A4i6PtQGHThSba+7hyG3cODdDdwJ+ZAEA6Fp+PxHvRXOw\nm7tv5k9yE6QOcRH2l4MvUyj18490rQU=\n=KOtO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/aefa13f49c6eb8fa0d5d7a1418d4a7414ae917a3",
          "sha": "aefa13f49c6eb8fa0d5d7a1418d4a7414ae917a3",
          "html_url": "https://github.com/bitcoin/bips/commit/aefa13f49c6eb8fa0d5d7a1418d4a7414ae917a3"
        }
      ],
      "message": "HRP of short ID is an implementation detail\n\nit doesn't matter what is used since it's stripped after encoding",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:19:14Z"
      },
      "sha": "f3ff7db032cf25780cf3ee412215f4ca9062b9b5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDAwNTQyOTEwM2NiYThlZDBhY2ZiMDY1NmRjYmQ0NGJmZWJjYmQyMDg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/005429103cba8ed0acfb0656dcbd44bfebcbd208",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/005429103cba8ed0acfb0656dcbd44bfebcbd208",
      "tree": {
        "sha": "35f851f4526a493efe08ab86bf1e76d51cc59e06",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/35f851f4526a493efe08ab86bf1e76d51cc59e06"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 35f851f4526a493efe08ab86bf1e76d51cc59e06\nparent f3ff7db032cf25780cf3ee412215f4ca9062b9b5\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744316354 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nClarify checklist requirements\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWWNIAPwO6HmZhcrzWj7JAXoVNEpKt6NF+SczLToWt+pMuxvBOQEAz0wiJDr9Xm76\noYuFhriHOzESiybFlLsVBXXSAyh5iQg=\n=yr0b\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f3ff7db032cf25780cf3ee412215f4ca9062b9b5",
          "sha": "f3ff7db032cf25780cf3ee412215f4ca9062b9b5",
          "html_url": "https://github.com/bitcoin/bips/commit/f3ff7db032cf25780cf3ee412215f4ca9062b9b5"
        }
      ],
      "message": "Clarify checklist requirements",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:19:14Z"
      },
      "sha": "005429103cba8ed0acfb0656dcbd44bfebcbd208"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI5YjYwZGU1YjVhNDczMmE5MzAwNGE1Y2I4NjY1YzdmY2Y1MTA2Mjg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/29b60de5b5a4732a93004a5cb8665c7fcf510628",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/29b60de5b5a4732a93004a5cb8665c7fcf510628",
      "tree": {
        "sha": "b4e9c6a2d8c47629862311e377c53c307278ea7e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b4e9c6a2d8c47629862311e377c53c307278ea7e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b4e9c6a2d8c47629862311e377c53c307278ea7e\nparent 005429103cba8ed0acfb0656dcbd44bfebcbd208\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744317729 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\n\"by intersection\" unclear and unnecessary\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWRXCAP9MS5xeUXmmd1szbV1e8Yi3MkcDkvYWRdRS47UgkHcowQEAjRTvjsocYp9y\nxYzawRgqs18QMEKvegV2TzdSHNK9bAM=\n=+y4s\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/005429103cba8ed0acfb0656dcbd44bfebcbd208",
          "sha": "005429103cba8ed0acfb0656dcbd44bfebcbd208",
          "html_url": "https://github.com/bitcoin/bips/commit/005429103cba8ed0acfb0656dcbd44bfebcbd208"
        }
      ],
      "message": "\"by intersection\" unclear and unnecessary",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:42:09Z"
      },
      "sha": "29b60de5b5a4732a93004a5cb8665c7fcf510628"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDYxMjMzNzFmZmRlN2E1M2YyZWU0MWQ5ZWU0ZjcyNTFhMjA5ZDFmZmU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6123371ffde7a53f2ee41d9ee4f7251a209d1ffe",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6123371ffde7a53f2ee41d9ee4f7251a209d1ffe",
      "tree": {
        "sha": "26b004c884de62aec420cbd110a012ca784da4e2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/26b004c884de62aec420cbd110a012ca784da4e2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 26b004c884de62aec420cbd110a012ca784da4e2\nparent 29b60de5b5a4732a93004a5cb8665c7fcf510628\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744317729 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nthe fragment doesn't follow the pj param, it's part of it\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWefxAP9f4BVnPOPPwXIMU36k4G25kj7IdHJ+2pXZiOr/aEwXYQEA9RUobjcXdXoc\nHdDbDiYt/kciFWkmFBbtoWQRPXbFtgE=\n=TCqS\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/29b60de5b5a4732a93004a5cb8665c7fcf510628",
          "sha": "29b60de5b5a4732a93004a5cb8665c7fcf510628",
          "html_url": "https://github.com/bitcoin/bips/commit/29b60de5b5a4732a93004a5cb8665c7fcf510628"
        }
      ],
      "message": "the fragment doesn't follow the pj param, it's part of it",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:42:09Z"
      },
      "sha": "6123371ffde7a53f2ee41d9ee4f7251a209d1ffe"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDVjMTk5YmZjYzQxNjE3ZWNhNDE0Y2UyMmM0MTdmNmZlZGFlMzVjYzU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5c199bfcc41617eca414ce22c417f6fedae35cc5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5c199bfcc41617eca414ce22c417f6fedae35cc5",
      "tree": {
        "sha": "33a0307c990fe0b402c16624fc1a5c435c29cab2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/33a0307c990fe0b402c16624fc1a5c435c29cab2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 33a0307c990fe0b402c16624fc1a5c435c29cab2\nparent 6123371ffde7a53f2ee41d9ee4f7251a209d1ffe\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744317729 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nfix message diagram line intersections\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWbF9AQCMz9i646hJiR1WzGmOReEkV9q7qRVVq8op4ylz4seAQQEAhowa5PLjOMvO\nzXS4HqlKNbphUsPKpSy4PfTR7muvwg4=\n=GtsL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6123371ffde7a53f2ee41d9ee4f7251a209d1ffe",
          "sha": "6123371ffde7a53f2ee41d9ee4f7251a209d1ffe",
          "html_url": "https://github.com/bitcoin/bips/commit/6123371ffde7a53f2ee41d9ee4f7251a209d1ffe"
        }
      ],
      "message": "fix message diagram line intersections",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:42:09Z"
      },
      "sha": "5c199bfcc41617eca414ce22c417f6fedae35cc5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGE0MTI3OGZiZWE4ZmI0NTI1OWVhMTlmMzdjNjFjMmM1NTQ0NzFjMDI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a41278fbea8fb45259ea19f37c61c2c554471c02",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a41278fbea8fb45259ea19f37c61c2c554471c02",
      "tree": {
        "sha": "7e1d28034e278d63a666b7a34584a60a1ba511f0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7e1d28034e278d63a666b7a34584a60a1ba511f0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7e1d28034e278d63a666b7a34584a60a1ba511f0\nparent 5c199bfcc41617eca414ce22c417f6fedae35cc5\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744317729 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nCorrect encapsulated OHTTP diagram\n\nThe binary HTTP request is encrypted, and the AEAD tag is at the end, not the\nbeginning\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWTEFAP956xspVopBnnZV4PZwYNGxyAwMzVDrquk8/WRXQ8MeHwD+MBc60Xx61x9W\neUhPy2LlIwQQ38TXJrmzrgTMpH5zFAI=\n=Tvt8\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5c199bfcc41617eca414ce22c417f6fedae35cc5",
          "sha": "5c199bfcc41617eca414ce22c417f6fedae35cc5",
          "html_url": "https://github.com/bitcoin/bips/commit/5c199bfcc41617eca414ce22c417f6fedae35cc5"
        }
      ],
      "message": "Correct encapsulated OHTTP diagram\n\nThe binary HTTP request is encrypted, and the AEAD tag is at the end, not the\nbeginning",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T20:42:09Z"
      },
      "sha": "a41278fbea8fb45259ea19f37c61c2c554471c02"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM4ZGJiMTNiZWNiODE4YWIzOGJlYjNlODY2NmEyZTg2MjdkNDc5ZDA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/38dbb13becb818ab38beb3e8666a2e8627d479d0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/38dbb13becb818ab38beb3e8666a2e8627d479d0",
      "tree": {
        "sha": "4d47ce57fd204745669c04f6b09f3295fcbe82b6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4d47ce57fd204745669c04f6b09f3295fcbe82b6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4d47ce57fd204745669c04f6b09f3295fcbe82b6\nparent a41278fbea8fb45259ea19f37c61c2c554471c02\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744320687 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nClarifications for HPKE keys\n\nRemove noise protocol framework mention. The IK pattern is not accurate, the\nclosest patterns are N or possibl NN, but neither is a perfect fit (N defines the\nkey as static, which it isn't, and NN is an interactive pattern)\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWXJFAQDGW7uHhbjGhAg1zjUIN81wkKctJ5B3/+eSBj0rFSZA9AEArQeKhpwFkoLu\nPgevc5z2l2TBWh3e/H+3iCrEBsYU7Qw=\n=eZcF\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a41278fbea8fb45259ea19f37c61c2c554471c02",
          "sha": "a41278fbea8fb45259ea19f37c61c2c554471c02",
          "html_url": "https://github.com/bitcoin/bips/commit/a41278fbea8fb45259ea19f37c61c2c554471c02"
        }
      ],
      "message": "Clarifications for HPKE keys\n\nRemove noise protocol framework mention. The IK pattern is not accurate, the\nclosest patterns are N or possibl NN, but neither is a perfect fit (N defines the\nkey as static, which it isn't, and NN is an interactive pattern)",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T21:31:27Z"
      },
      "sha": "38dbb13becb818ab38beb3e8666a2e8627d479d0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk2NDcxZjhkOTk5YmYzODNmYzFiM2VjMDc2NDEwMzk5ZTMzYTU2ZWE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/96471f8d999bf383fc1b3ec076410399e33a56ea",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/96471f8d999bf383fc1b3ec076410399e33a56ea",
      "tree": {
        "sha": "8a3e50bc95d4a1c09b9baa0055aaf6b43ef56dcd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8a3e50bc95d4a1c09b9baa0055aaf6b43ef56dcd"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8a3e50bc95d4a1c09b9baa0055aaf6b43ef56dcd\nparent 38dbb13becb818ab38beb3e8666a2e8627d479d0\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744320687 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nRemove note about forward secrecy\n\nThis is inaccurate, forward secrecy is defined with respect to long term\nsessions, so the definition doesn't really extend to the request and response\nmessages, each of which is encrypted with ephemeral keys.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWbORAQCWYbngVgOJu0/1wsY3K9uzJBGuiN0QHAP5G9pEmuJ4KQEAzs+Y0xAZpTuH\n2uFk+6dbkkfYaQYAqkzhUq+4wUj5gQg=\n=fcnQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/38dbb13becb818ab38beb3e8666a2e8627d479d0",
          "sha": "38dbb13becb818ab38beb3e8666a2e8627d479d0",
          "html_url": "https://github.com/bitcoin/bips/commit/38dbb13becb818ab38beb3e8666a2e8627d479d0"
        }
      ],
      "message": "Remove note about forward secrecy\n\nThis is inaccurate, forward secrecy is defined with respect to long term\nsessions, so the definition doesn't really extend to the request and response\nmessages, each of which is encrypted with ephemeral keys.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T21:31:27Z"
      },
      "sha": "96471f8d999bf383fc1b3ec076410399e33a56ea"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGM0MjhmZjcyMDgyMTEyYWE3NmQ1Y2E5NjgzMjU1NzQ0MDkyNzgxZmY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c428ff72082112aa76d5ca9683255744092781ff",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c428ff72082112aa76d5ca9683255744092781ff",
      "tree": {
        "sha": "fefd735580134a2c34beebf8bc2017dccdafe791",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fefd735580134a2c34beebf8bc2017dccdafe791"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fefd735580134a2c34beebf8bc2017dccdafe791\nparent 96471f8d999bf383fc1b3ec076410399e33a56ea\nauthor Yuval Kogman <nothingmuch@woobling.org> 1744321364 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nClarify OHTTP-relay bypassing by use of tor hidden service\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWUOdAP9gqNbekmTU4GUFtxw02u70LohSe0OE+v8BzzsUQHCbEgEAsQ3IN/0xXvW9\n6J1N2usFUKgoybdejUnIl+NNej1N4QM=\n=WAX2\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/96471f8d999bf383fc1b3ec076410399e33a56ea",
          "sha": "96471f8d999bf383fc1b3ec076410399e33a56ea",
          "html_url": "https://github.com/bitcoin/bips/commit/96471f8d999bf383fc1b3ec076410399e33a56ea"
        }
      ],
      "message": "Clarify OHTTP-relay bypassing by use of tor hidden service",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-10T21:42:44Z"
      },
      "sha": "c428ff72082112aa76d5ca9683255744092781ff"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGIwN2VmMGZhM2MwZmRkNGQxODlkYmFkYjg4NTUyYzY3YTFhNjU4Y2Y",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b07ef0fa3c0fdd4d189dbadb88552c67a1a658cf",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b07ef0fa3c0fdd4d189dbadb88552c67a1a658cf",
      "tree": {
        "sha": "051879658b642440c091712ffedca325d3bae8eb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/051879658b642440c091712ffedca325d3bae8eb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 051879658b642440c091712ffedca325d3bae8eb\nparent c428ff72082112aa76d5ca9683255744092781ff\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745017104 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nUpdate HPKE mode used for sender's message\n\nPreviously the reply key was included before the HPKE ciphertext, and the Auth\nmode was used using this key. Since they are delivered together that only proves\nthe key was usable by the sender, not that the ciphertext is authentic. With the\nkey included as part of the encrypted plaintext, the HPKE mode was changed to\nthe base encryption to a public key mode with no authentication key.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWYIjAQCqcps9/G3R7gK64+ScqyMq5RNfW0mzVaR725mY/V4kCQEAtMZAv1e8L2Gv\niLbKBwDfhyVX8BrVMh8ZhYqrcZ1HrAA=\n=qt+Q\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c428ff72082112aa76d5ca9683255744092781ff",
          "sha": "c428ff72082112aa76d5ca9683255744092781ff",
          "html_url": "https://github.com/bitcoin/bips/commit/c428ff72082112aa76d5ca9683255744092781ff"
        }
      ],
      "message": "Update HPKE mode used for sender's message\n\nPreviously the reply key was included before the HPKE ciphertext, and the Auth\nmode was used using this key. Since they are delivered together that only proves\nthe key was usable by the sender, not that the ciphertext is authentic. With the\nkey included as part of the encrypted plaintext, the HPKE mode was changed to\nthe base encryption to a public key mode with no authentication key.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-18T22:58:24Z"
      },
      "sha": "b07ef0fa3c0fdd4d189dbadb88552c67a1a658cf"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDc3MDgyZGM1MTY1YzAwNWMzYWVkZDQyYzRiMGFlNjU3OGIzNDUyNjA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/77082dc5165c005c3aedd42c4b0ae6578b345260",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/77082dc5165c005c3aedd42c4b0ae6578b345260",
      "tree": {
        "sha": "a6c82167eaf1cd3cfa786872d6129b1b68bbc921",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a6c82167eaf1cd3cfa786872d6129b1b68bbc921"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a6c82167eaf1cd3cfa786872d6129b1b68bbc921\nparent b07ef0fa3c0fdd4d189dbadb88552c67a1a658cf\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745017918 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nkeep mailbox, but rename mailroom back to directory\n\nPartly reverts a4d4065fa6f736f058e9173aa852e4fd12e75650, this change is hardly\nmore than a find & replace of mailroom to directory, and does not revert grammar\nchanges etc in addition to not reverting the subdirectory -> mailbox rename\nwhich was the main point of confusion.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWWXhAPoDKnXw8o72E6xXLV3PuLAgCaDJ/K3Rx7WFYw+PXHpsCQD/b0JwRenf4WQs\nQIDUlJEky4vNZ8jSQI4B69zmKDBdqwE=\n=e6DB\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b07ef0fa3c0fdd4d189dbadb88552c67a1a658cf",
          "sha": "b07ef0fa3c0fdd4d189dbadb88552c67a1a658cf",
          "html_url": "https://github.com/bitcoin/bips/commit/b07ef0fa3c0fdd4d189dbadb88552c67a1a658cf"
        }
      ],
      "message": "keep mailbox, but rename mailroom back to directory\n\nPartly reverts a4d4065fa6f736f058e9173aa852e4fd12e75650, this change is hardly\nmore than a find & replace of mailroom to directory, and does not revert grammar\nchanges etc in addition to not reverting the subdirectory -> mailbox rename\nwhich was the main point of confusion.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-18T23:11:58Z"
      },
      "sha": "77082dc5165c005c3aedd42c4b0ae6578b345260"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJiNDE1NjMzMmQzMWRiODA4MmE1NzEwZThmYTc3OTk4YTNjYjcxODg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2b4156332d31db8082a5710e8fa77998a3cb7188",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2b4156332d31db8082a5710e8fa77998a3cb7188",
      "tree": {
        "sha": "3c1cf64f297e844362ff3872143bc757d7d15410",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/3c1cf64f297e844362ff3872143bc757d7d15410"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 3c1cf64f297e844362ff3872143bc757d7d15410\nparent 77082dc5165c005c3aedd42c4b0ae6578b345260\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745019220 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nClarify allowed_purposes mechanism\n\nFirst explain RFC 9540, then explain the extension mechanism.\n\nMake roles in the interaction more explicit by changing the heading, \"Directory\nDiscovery\" sort of implies that clients discover these, when it describes relay\nto directory interaction.\n\nClarify centralization pressure, that is alleviated by making senders' and\nreceivers' choices independent of each other.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWQJ9APwNUxUpi+kGBqXdWJZUMCleU/RBH3yknxl8ZUqI6uotHAD+O2xuvgu6aJTX\nJ87Vk/xAhr/IbdQKbsvRCOtZQdZQrA8=\n=gGIc\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/77082dc5165c005c3aedd42c4b0ae6578b345260",
          "sha": "77082dc5165c005c3aedd42c4b0ae6578b345260",
          "html_url": "https://github.com/bitcoin/bips/commit/77082dc5165c005c3aedd42c4b0ae6578b345260"
        }
      ],
      "message": "Clarify allowed_purposes mechanism\n\nFirst explain RFC 9540, then explain the extension mechanism.\n\nMake roles in the interaction more explicit by changing the heading, \"Directory\nDiscovery\" sort of implies that clients discover these, when it describes relay\nto directory interaction.\n\nClarify centralization pressure, that is alleviated by making senders' and\nreceivers' choices independent of each other.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-18T23:33:40Z"
      },
      "sha": "2b4156332d31db8082a5710e8fa77998a3cb7188"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDFmNTNmOTc5ZjFhM2Y0ODU5ZWRiMGNmYzRlM2JmN2YwYjFkNmIxZTE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1f53f979f1a3f4859edb0cfc4e3bf7f0b1d6b1e1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1f53f979f1a3f4859edb0cfc4e3bf7f0b1d6b1e1",
      "tree": {
        "sha": "2c682f7d5d52e22e35e15f1d55248a20a40b7689",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2c682f7d5d52e22e35e15f1d55248a20a40b7689"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2c682f7d5d52e22e35e15f1d55248a20a40b7689\nparent 2b4156332d31db8082a5710e8fa77998a3cb7188\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745020244 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nCorrect payload uniformity section\n\nWe forgot about the OHTTP header which is 7 bytes of cleartext that also\nspecifies the DHKEM algoritm.\n\nAdditional clarifications and some restructuring to describe the details two\nclasses of messages each in its own self contained paragraph.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWabsAP9le9Qmh1LpinMh7K6Hg7e5XmXKiUTR8V1NZH2RR8oQkwEA6aBl+AuH6i5z\nxPJbTO0T1JxnRYMSZvT1VW/dzwU9/gE=\n=g5E+\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2b4156332d31db8082a5710e8fa77998a3cb7188",
          "sha": "2b4156332d31db8082a5710e8fa77998a3cb7188",
          "html_url": "https://github.com/bitcoin/bips/commit/2b4156332d31db8082a5710e8fa77998a3cb7188"
        }
      ],
      "message": "Correct payload uniformity section\n\nWe forgot about the OHTTP header which is 7 bytes of cleartext that also\nspecifies the DHKEM algoritm.\n\nAdditional clarifications and some restructuring to describe the details two\nclasses of messages each in its own self contained paragraph.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-18T23:50:44Z"
      },
      "sha": "1f53f979f1a3f4859edb0cfc4e3bf7f0b1d6b1e1"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDIyYzlkMGMwODk5NmJiYWY4OTBiMTg1NTkzZTBmZmU5ZmMzOGNiZDc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/22c9d0c08996bbaf890b185593e0ffe9fc38cbd7",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/22c9d0c08996bbaf890b185593e0ffe9fc38cbd7",
      "tree": {
        "sha": "4ab2d272212a72ec9d6c340263baca3d4a8c1529",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4ab2d272212a72ec9d6c340263baca3d4a8c1529"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4ab2d272212a72ec9d6c340263baca3d4a8c1529\nparent 1f53f979f1a3f4859edb0cfc4e3bf7f0b1d6b1e1\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745020471 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nrewrap paragraph to fix broken link\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWb+hAP4kmbAoX8X2sJSb09Yil2FxY2sx3C96fDeyntFbs1ia4AD/Q38sjxK/hm7L\nrXlGvRTq0dA+al8kpEbM4FnYQp82eQk=\n=wfOa\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1f53f979f1a3f4859edb0cfc4e3bf7f0b1d6b1e1",
          "sha": "1f53f979f1a3f4859edb0cfc4e3bf7f0b1d6b1e1",
          "html_url": "https://github.com/bitcoin/bips/commit/1f53f979f1a3f4859edb0cfc4e3bf7f0b1d6b1e1"
        }
      ],
      "message": "rewrap paragraph to fix broken link",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-18T23:54:31Z"
      },
      "sha": "22c9d0c08996bbaf890b185593e0ffe9fc38cbd7"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGIxZWVlMjNiNTcwNDA2ZTY3MDM2MzdhZGRhMDIzYTYwN2YyNGE2Mzk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b1eee23b570406e6703637adda023a607f24a639",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b1eee23b570406e6703637adda023a607f24a639",
      "tree": {
        "sha": "bc935fa5e87f636762486ca63603315890d99c78",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bc935fa5e87f636762486ca63603315890d99c78"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bc935fa5e87f636762486ca63603315890d99c78\nparent 22c9d0c08996bbaf890b185593e0ffe9fc38cbd7\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745020766 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nfix bullet list formatting\n\n- unindent to avoid <pre>\n- fix broken URLs\n- fix bullet items split into paragraphs\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWRKHAQDS0VgPvrYdA/BlrjO0S0Graz5yulEZlhFKJ0D89wP2zAD/WbNmyhBAMcdl\nx5xLNHljzYiw5bCsH4ZCEoI9zldolwE=\n=eiRy\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/22c9d0c08996bbaf890b185593e0ffe9fc38cbd7",
          "sha": "22c9d0c08996bbaf890b185593e0ffe9fc38cbd7",
          "html_url": "https://github.com/bitcoin/bips/commit/22c9d0c08996bbaf890b185593e0ffe9fc38cbd7"
        }
      ],
      "message": "fix bullet list formatting\n\n- unindent to avoid <pre>\n- fix broken URLs\n- fix bullet items split into paragraphs",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-18T23:59:26Z"
      },
      "sha": "b1eee23b570406e6703637adda023a607f24a639"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDVlMTExMTA3ZjIwODJhM2YxMTA2ZmJmMzUxNjJjZGRmNTUxZGIyYzM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e111107f2082a3f1106fbf35162cddf551db2c3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5e111107f2082a3f1106fbf35162cddf551db2c3",
      "tree": {
        "sha": "a348a97c9c4481c9c28ffddbe6e29d7d784eeb2e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a348a97c9c4481c9c28ffddbe6e29d7d784eeb2e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a348a97c9c4481c9c28ffddbe6e29d7d784eeb2e\nparent b1eee23b570406e6703637adda023a607f24a639\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745022131 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nrewrap section to fix broken links\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWXMOAQCotXabLhSbJW96wqzLzYTIvlYer+C1QH21ydK5ooy/XgD+NbvaKz72e/iO\n6/ihcT9mVR60H3jtLyNTR5xFlbAQRwM=\n=P+So\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b1eee23b570406e6703637adda023a607f24a639",
          "sha": "b1eee23b570406e6703637adda023a607f24a639",
          "html_url": "https://github.com/bitcoin/bips/commit/b1eee23b570406e6703637adda023a607f24a639"
        }
      ],
      "message": "rewrap section to fix broken links",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-19T00:22:11Z"
      },
      "sha": "5e111107f2082a3f1106fbf35162cddf551db2c3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQ3NTU4ODVhMTM1YTQ3ZmEyODg3NzM2NmQ2M2FiYmE4N2FjMzYxMzQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d755885a135a47fa28877366d63abba87ac36134",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d755885a135a47fa28877366d63abba87ac36134",
      "tree": {
        "sha": "5e35e83c5483ff0d93dbfe3b814e00362ffc592a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5e35e83c5483ff0d93dbfe3b814e00362ffc592a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5e35e83c5483ff0d93dbfe3b814e00362ffc592a\nparent 5e111107f2082a3f1106fbf35162cddf551db2c3\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745022207 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nrewrap more paragraphs to fix broken links\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWbloAP9YCrtCoj7qP3mEjA5xCNPWHCt1axTP2/5VPun0VtHwDwEAgWXG1catf+Ac\nFmPfRZk3tJIy6YvBtnpy7TVxMtks+Q8=\n=pSfG\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5e111107f2082a3f1106fbf35162cddf551db2c3",
          "sha": "5e111107f2082a3f1106fbf35162cddf551db2c3",
          "html_url": "https://github.com/bitcoin/bips/commit/5e111107f2082a3f1106fbf35162cddf551db2c3"
        }
      ],
      "message": "rewrap more paragraphs to fix broken links",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-19T00:23:27Z"
      },
      "sha": "d755885a135a47fa28877366d63abba87ac36134"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDI2ZmIwNWRmMzhlZjlkMDM2NjYxZWYzOWIwNjQwNGE2ZmRkMDMxOWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/26fb05df38ef9d036661ef39b06404a6fdd0319d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/26fb05df38ef9d036661ef39b06404a6fdd0319d",
      "tree": {
        "sha": "5c63441e9d0633d58a8377e57a34aff8a6c8c885",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5c63441e9d0633d58a8377e57a34aff8a6c8c885"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 5c63441e9d0633d58a8377e57a34aff8a6c8c885\nparent d755885a135a47fa28877366d63abba87ac36134\nauthor Yuval Kogman <nothingmuch@woobling.org> 1745022916 +0200\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nmake attack vectors level 2 heading\n\nas level 3 heading it was displayed under rationale in the table of contents\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWVTZAP9DGB3TIpqID95WK6qTlxqWwzXt3QEkKgI++Nv5ktdGfQD+IVAmHjDj7vh9\nefhhGNRh/oOsHVGYIE3equUZ53rkeQc=\n=UMDQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d755885a135a47fa28877366d63abba87ac36134",
          "sha": "d755885a135a47fa28877366d63abba87ac36134",
          "html_url": "https://github.com/bitcoin/bips/commit/d755885a135a47fa28877366d63abba87ac36134"
        }
      ],
      "message": "make attack vectors level 2 heading\n\nas level 3 heading it was displayed under rationale in the table of contents",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-04-19T00:35:16Z"
      },
      "sha": "26fb05df38ef9d036661ef39b06404a6fdd0319d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGZiMTljZTA2ZDAxNGE2NDNjNzkyMWQ2MmU0NmFlNDdhMDc5YTZmNGQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fb19ce06d014a643c7921d62e46ae47a079a6f4d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/fb19ce06d014a643c7921d62e46ae47a079a6f4d",
      "tree": {
        "sha": "fce362125ddecc2dc1f46c47ffd401f8fcef9d7f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fce362125ddecc2dc1f46c47ffd401f8fcef9d7f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fce362125ddecc2dc1f46c47ffd401f8fcef9d7f\nparent 26fb05df38ef9d036661ef39b06404a6fdd0319d\nauthor spacebear <144076611+spacebear21@users.noreply.github.com> 1745886793 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nGrammar/style fixes",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWTNcAP9LCYUtNhZAzJbL2gCg269Nzo9FtUnEQq9hiwOKs8Y6OgEAlmIivko+O/x4\nUzJsDAj8FLliZNb279pidQ7sQSVsiwU=\n=4hPV\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/26fb05df38ef9d036661ef39b06404a6fdd0319d",
          "sha": "26fb05df38ef9d036661ef39b06404a6fdd0319d",
          "html_url": "https://github.com/bitcoin/bips/commit/26fb05df38ef9d036661ef39b06404a6fdd0319d"
        }
      ],
      "message": "Grammar/style fixes",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "spacebear",
        "email": "144076611+spacebear21@users.noreply.github.com",
        "date": "2025-04-29T00:33:13Z"
      },
      "sha": "fb19ce06d014a643c7921d62e46ae47a079a6f4d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGEwMDdkMWQ1ZDI0NWMwNDgxMzVlN2Y4Y2RiODAzOTNlNzkzNzA0MmU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a007d1d5d245c048135e7f8cdb80393e7937042e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a007d1d5d245c048135e7f8cdb80393e7937042e",
      "tree": {
        "sha": "e0045f30db95665632d7735a05f64163f8ca7899",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e0045f30db95665632d7735a05f64163f8ca7899"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e0045f30db95665632d7735a05f64163f8ca7899\nparent fb19ce06d014a643c7921d62e46ae47a079a6f4d\nauthor DanGould <d@ngould.dev> 1746110773 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nOrder Requires\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWfwUAPwOfkL+rXS02RXR4fLoiTYUG/8MQn/6eVcH50RpXAfLTgD9H3ubW6UY7N9A\nWQewhu0n5IvHJzlNyReZPyJsFArpSwM=\n=kr+t\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/fb19ce06d014a643c7921d62e46ae47a079a6f4d",
          "sha": "fb19ce06d014a643c7921d62e46ae47a079a6f4d",
          "html_url": "https://github.com/bitcoin/bips/commit/fb19ce06d014a643c7921d62e46ae47a079a6f4d"
        }
      ],
      "message": "Order Requires",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T14:46:13Z"
      },
      "sha": "a007d1d5d245c048135e7f8cdb80393e7937042e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk1NDAwZTZkYjg1ZTRlZWMyZDM5MGRkNDk2NjFjMDYyNTgwZjVmM2M",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/95400e6db85e4eec2d390dd49661c062580f5f3c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/95400e6db85e4eec2d390dd49661c062580f5f3c",
      "tree": {
        "sha": "a26b1ad7ef1406e218e3c977b14f8d2dce67d898",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a26b1ad7ef1406e218e3c977b14f8d2dce67d898"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a26b1ad7ef1406e218e3c977b14f8d2dce67d898\nparent a007d1d5d245c048135e7f8cdb80393e7937042e\nauthor DanGould <d@ngould.dev> 1746112851 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nDescribe 'what' in the first sentence of the abstract.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHQEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWYqMAQDyWIDWMhqt6fMJB65rkxsci+q4Fx6YuFBNzDD+UbpTvQD4rlwP7upYMdxb\ndpPM1ziorD4ZEj72m5wPsYG8GBrgAg==\n=3aM7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a007d1d5d245c048135e7f8cdb80393e7937042e",
          "sha": "a007d1d5d245c048135e7f8cdb80393e7937042e",
          "html_url": "https://github.com/bitcoin/bips/commit/a007d1d5d245c048135e7f8cdb80393e7937042e"
        }
      ],
      "message": "Describe 'what' in the first sentence of the abstract.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T15:20:51Z"
      },
      "sha": "95400e6db85e4eec2d390dd49661c062580f5f3c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGEwZDA3NDdkM2QzNWY1ZjZkMTczMmY4NDcyMjc0ODMwODNjMzA3MzI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a0d0747d3d35f5f6d1732f847227483083c30732",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a0d0747d3d35f5f6d1732f847227483083c30732",
      "tree": {
        "sha": "16218f46e286d78b21cfda08536712ee0683d39a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/16218f46e286d78b21cfda08536712ee0683d39a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 16218f46e286d78b21cfda08536712ee0683d39a\nparent 95400e6db85e4eec2d390dd49661c062580f5f3c\nauthor DanGould <d@ngould.dev> 1746114141 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nBe more specific about motivation.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWRmCAQChLF6QatNuYmEBg38IifGMW6vQxK0/oo178Zk5vtwqxQD/XFQsImcppQWp\nOLWwrIH/p2P8+o9/sr87lU6qDewhygA=\n=GHIq\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/95400e6db85e4eec2d390dd49661c062580f5f3c",
          "sha": "95400e6db85e4eec2d390dd49661c062580f5f3c",
          "html_url": "https://github.com/bitcoin/bips/commit/95400e6db85e4eec2d390dd49661c062580f5f3c"
        }
      ],
      "message": "Be more specific about motivation.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T15:42:21Z"
      },
      "sha": "a0d0747d3d35f5f6d1732f847227483083c30732"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDJkODk0M2E1MzgwMzNlMmQ4YTkyMGE1ZjlhMzcxZjM3YzcxZTRmZWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2d8943a538033e2d8a920a5f9a371f37c71e4feb",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/2d8943a538033e2d8a920a5f9a371f37c71e4feb",
      "tree": {
        "sha": "1faf3b11d58b94db908e98edd0e4b19bff329cd1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1faf3b11d58b94db908e98edd0e4b19bff329cd1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1faf3b11d58b94db908e98edd0e4b19bff329cd1\nparent a0d0747d3d35f5f6d1732f847227483083c30732\nauthor DanGould <d@ngould.dev> 1746116191 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nMake goal more explicit and consise\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWXYUAQDiBAw1WW9HWWztKuH/KRXX/gg9Z9wedmlYczPubgNK7gEAw+FD44kmX/xX\nB0BNMPCIjpeop2lEGGekS4+yNwppwwk=\n=h/JO\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a0d0747d3d35f5f6d1732f847227483083c30732",
          "sha": "a0d0747d3d35f5f6d1732f847227483083c30732",
          "html_url": "https://github.com/bitcoin/bips/commit/a0d0747d3d35f5f6d1732f847227483083c30732"
        }
      ],
      "message": "Make goal more explicit and consise",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T16:16:31Z"
      },
      "sha": "2d8943a538033e2d8a920a5f9a371f37c71e4feb"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDkyMDM5NWUxZDJkZDQ2YmU2YzA2Y2EzMmJjM2ExNjY2M2I3Mjg1YzM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/920395e1d2dd46be6c06ca32bc3a16663b7285c3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/920395e1d2dd46be6c06ca32bc3a16663b7285c3",
      "tree": {
        "sha": "0e7352e04003a9b3faafe946f48d42747f7e6adb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/0e7352e04003a9b3faafe946f48d42747f7e6adb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 0e7352e04003a9b3faafe946f48d42747f7e6adb\nparent 2d8943a538033e2d8a920a5f9a371f37c71e4feb\nauthor DanGould <d@ngould.dev> 1746117173 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nStandardize \"Common-input-ownership heuristic\"\n\nbitcoin wiki uses this.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWWQ3AP9FnkZRuQZ3AKQNlQ3TmvsEjmtYIz4Ydi5OEjil98bmTwD7BEZs4qsj/VO0\n2kqXiSN9LKEWLFhlRL0yW+OVe1bXrgw=\n=jIgs\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/2d8943a538033e2d8a920a5f9a371f37c71e4feb",
          "sha": "2d8943a538033e2d8a920a5f9a371f37c71e4feb",
          "html_url": "https://github.com/bitcoin/bips/commit/2d8943a538033e2d8a920a5f9a371f37c71e4feb"
        }
      ],
      "message": "Standardize \"Common-input-ownership heuristic\"\n\nbitcoin wiki uses this.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T16:32:53Z"
      },
      "sha": "920395e1d2dd46be6c06ca32bc3a16663b7285c3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGU4NjZiNjFjNDJlM2JhOGFmOTI4OGZiZmVjMmY4N2E2N2Y4MDZiYTI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e866b61c42e3ba8af9288fbfec2f87a67f806ba2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e866b61c42e3ba8af9288fbfec2f87a67f806ba2",
      "tree": {
        "sha": "bbebfdcb9ebb3403fa2e919e7e9bfdcf53bac754",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/bbebfdcb9ebb3403fa2e919e7e9bfdcf53bac754"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree bbebfdcb9ebb3403fa2e919e7e9bfdcf53bac754\nparent 920395e1d2dd46be6c06ca32bc3a16663b7285c3\nauthor DanGould <d@ngould.dev> 1746118833 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nReplace Request expiration with Session Expiration\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWfIjAQD/K4BuQ6A4UpctuJxm2F3qjsNCk9SQ/vp0VeC9hv45AgEApnt7leD6BtTF\nXiMH3VTsRwiBweuQgcQA9vzkSh6tcAI=\n=/AiD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/920395e1d2dd46be6c06ca32bc3a16663b7285c3",
          "sha": "920395e1d2dd46be6c06ca32bc3a16663b7285c3",
          "html_url": "https://github.com/bitcoin/bips/commit/920395e1d2dd46be6c06ca32bc3a16663b7285c3"
        }
      ],
      "message": "Replace Request expiration with Session Expiration",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T17:00:33Z"
      },
      "sha": "e866b61c42e3ba8af9288fbfec2f87a67f806ba2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDg3ZWY1YjI2ZjMyOWNlYjgzOWIwZjAwMTljZDM5ZTdiZDNhMTMxMWQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/87ef5b26f329ceb839b0f0019cd39e7bd3a1311d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/87ef5b26f329ceb839b0f0019cd39e7bd3a1311d",
      "tree": {
        "sha": "e36bfcdf8b67a446780451cb4e7fc32c903f7b1a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/e36bfcdf8b67a446780451cb4e7fc32c903f7b1a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree e36bfcdf8b67a446780451cb4e7fc32c903f7b1a\nparent e866b61c42e3ba8af9288fbfec2f87a67f806ba2\nauthor DanGould <d@ngould.dev> 1746119092 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nSpecify BIP 78 `v` parameter as redundant.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWRIEAP9I1XbYL8ynr2gOnWZRBxA/JpDos1BL+QLBL2hLvMmPHwEAx9JX5QaJPe1v\nV1oaZuTrOSgJoama9CFynVDCk1ZhoAU=\n=sIM7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e866b61c42e3ba8af9288fbfec2f87a67f806ba2",
          "sha": "e866b61c42e3ba8af9288fbfec2f87a67f806ba2",
          "html_url": "https://github.com/bitcoin/bips/commit/e866b61c42e3ba8af9288fbfec2f87a67f806ba2"
        }
      ],
      "message": "Specify BIP 78 `v` parameter as redundant.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T17:04:52Z"
      },
      "sha": "87ef5b26f329ceb839b0f0019cd39e7bd3a1311d"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQzYTJmODc1ZTkwZGQ1NjYyNDUzZTE1Y2U0NTQ2Y2ZiNjA1ZmRmMWI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d3a2f875e90dd5662453e15ce4546cfb605fdf1b",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d3a2f875e90dd5662453e15ce4546cfb605fdf1b",
      "tree": {
        "sha": "05b490a02511806fd3c0cbe660727c94b55ad1fb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/05b490a02511806fd3c0cbe660727c94b55ad1fb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 05b490a02511806fd3c0cbe660727c94b55ad1fb\nparent 87ef5b26f329ceb839b0f0019cd39e7bd3a1311d\nauthor DanGould <d@ngould.dev> 1746119822 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nSeparate Short ID length rationale from spec\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWeeYAP48iADCnEMhO7hupPnF6ctahkdrNAduLLle0oj7RRA0gAD/Qq9hbFOxRNCa\ndHzZwUovP7y8YSG4gAIvr2K+34yK9gc=\n=vOTV\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/87ef5b26f329ceb839b0f0019cd39e7bd3a1311d",
          "sha": "87ef5b26f329ceb839b0f0019cd39e7bd3a1311d",
          "html_url": "https://github.com/bitcoin/bips/commit/87ef5b26f329ceb839b0f0019cd39e7bd3a1311d"
        }
      ],
      "message": "Separate Short ID length rationale from spec",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T17:17:02Z"
      },
      "sha": "d3a2f875e90dd5662453e15ce4546cfb605fdf1b"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDY4MTU3ZTNiZTgyYmExMDI3MWNjODM3NDVmMzMwZTE3OThjMzU4NGM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/68157e3be82ba10271cc83745f330e1798c3584c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/68157e3be82ba10271cc83745f330e1798c3584c",
      "tree": {
        "sha": "ee1ca41a4feaed9a1feabc0d98398bac6af5d6db",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ee1ca41a4feaed9a1feabc0d98398bac6af5d6db"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ee1ca41a4feaed9a1feabc0d98398bac6af5d6db\nparent d3a2f875e90dd5662453e15ce4546cfb605fdf1b\nauthor DanGould <d@ngould.dev> 1746125663 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nClairfy key nomeclature\n\n- mailbox key\n- reply key\n- receiver key\n\nas well as ephemerality and session nomeclature.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWekGAP9OxaHKRrk0FKIY6cZejFTtxvDOKAdsam9ufG8crxjSrQEA3kSBjvuPEsc5\ntgV2EapyhqCLyTEBz6bMeaOw49v/8A0=\n=RWeK\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d3a2f875e90dd5662453e15ce4546cfb605fdf1b",
          "sha": "d3a2f875e90dd5662453e15ce4546cfb605fdf1b",
          "html_url": "https://github.com/bitcoin/bips/commit/d3a2f875e90dd5662453e15ce4546cfb605fdf1b"
        }
      ],
      "message": "Clairfy key nomeclature\n\n- mailbox key\n- reply key\n- receiver key\n\nas well as ephemerality and session nomeclature.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T18:54:23Z"
      },
      "sha": "68157e3be82ba10271cc83745f330e1798c3584c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM2YWUxNDA0NzZlYTUzZDM1ZTNmY2M0OGM3MjY1N2E4M2FjZWM0ZmQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/36ae140476ea53d35e3fcc48c72657a83acec4fd",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/36ae140476ea53d35e3fcc48c72657a83acec4fd",
      "tree": {
        "sha": "ebacb0fdaa4b624fc3dc80ab18dc49a921fc8799",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ebacb0fdaa4b624fc3dc80ab18dc49a921fc8799"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ebacb0fdaa4b624fc3dc80ab18dc49a921fc8799\nparent 68157e3be82ba10271cc83745f330e1798c3584c\nauthor DanGould <d@ngould.dev> 1746127667 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nPlace byte diagrams with there respective message description.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWaX7AQC+k4LcJU4jHxCMJXTyJo+MJO8X0z+XDTymFhE16mgsdgEAmZqN4WrAYU1W\nuJM5IHaJaxbBoSLJD6HCzxRSnr/OMAE=\n=j613\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/68157e3be82ba10271cc83745f330e1798c3584c",
          "sha": "68157e3be82ba10271cc83745f330e1798c3584c",
          "html_url": "https://github.com/bitcoin/bips/commit/68157e3be82ba10271cc83745f330e1798c3584c"
        }
      ],
      "message": "Place byte diagrams with there respective message description.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T19:27:47Z"
      },
      "sha": "36ae140476ea53d35e3fcc48c72657a83acec4fd"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGFmZTI1Y2VmMGVmNmE3YTM2ZGRlOTg2MjEzYWZkMWZhMDY3Yjc1NDI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/afe25cef0ef6a7a36dde986213afd1fa067b7542",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/afe25cef0ef6a7a36dde986213afd1fa067b7542",
      "tree": {
        "sha": "d03add4970ea49ee662ca87efd2d073f667581c0",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/d03add4970ea49ee662ca87efd2d073f667581c0"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree d03add4970ea49ee662ca87efd2d073f667581c0\nparent 36ae140476ea53d35e3fcc48c72657a83acec4fd\nauthor DanGould <d@ngould.dev> 1746130973 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nInclude bitcoin URI subsection\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWabSAP40ONKuSPz0E/MvVNoqcQ+t/hWCVJ2k+h+pT1Lp7vqVgQEAyF4uzeWrMiW2\n0GvvwzIu95W1LTW96wxuk5d69LJJKgY=\n=Xop2\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/36ae140476ea53d35e3fcc48c72657a83acec4fd",
          "sha": "36ae140476ea53d35e3fcc48c72657a83acec4fd",
          "html_url": "https://github.com/bitcoin/bips/commit/36ae140476ea53d35e3fcc48c72657a83acec4fd"
        }
      ],
      "message": "Include bitcoin URI subsection",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T20:22:53Z"
      },
      "sha": "afe25cef0ef6a7a36dde986213afd1fa067b7542"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGIxYWY4MzFkMmIyYzM4ZWViM2VhYjkwMWM0NTg0NGJkZWJiYTk3YjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b1af831d2b2c38eeb3eab901c45844bdebba97b3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b1af831d2b2c38eeb3eab901c45844bdebba97b3",
      "tree": {
        "sha": "b792d17db2fc0787cc6862f42d0013ad604fa814",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/b792d17db2fc0787cc6862f42d0013ad604fa814"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree b792d17db2fc0787cc6862f42d0013ad604fa814\nparent afe25cef0ef6a7a36dde986213afd1fa067b7542\nauthor DanGould <d@ngould.dev> 1746137031 -0400\ncommitter DanGould <d@ngould.dev> 1746197909 -0400\n\nTop half reorg\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdlQAKCRA4cTNWCSIP\nWaDgAP9fZZ+emIwK4HgOkkCX7wr+5X9+prN69mx3LmvL8k7EkQD9GCJHFAygveZn\noVNaImIFmD2isgal1jvPZkUKPySJbwg=\n=kYBD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/afe25cef0ef6a7a36dde986213afd1fa067b7542",
          "sha": "afe25cef0ef6a7a36dde986213afd1fa067b7542",
          "html_url": "https://github.com/bitcoin/bips/commit/afe25cef0ef6a7a36dde986213afd1fa067b7542"
        }
      ],
      "message": "Top half reorg",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:29Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T22:03:51Z"
      },
      "sha": "b1af831d2b2c38eeb3eab901c45844bdebba97b3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGQxZWU0NDAyYWI3MmVhYTc2MGRhYzIzNjkyZDE1MWNjNmQ5ZjYzYzU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d1ee4402ab72eaa760dac23692d151cc6d9f63c5",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/d1ee4402ab72eaa760dac23692d151cc6d9f63c5",
      "tree": {
        "sha": "1a8d711e702d051d89882e27b59bb28e6a681494",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1a8d711e702d051d89882e27b59bb28e6a681494"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1a8d711e702d051d89882e27b59bb28e6a681494\nparent b1af831d2b2c38eeb3eab901c45844bdebba97b3\nauthor DanGould <d@ngould.dev> 1746143961 -0400\ncommitter DanGould <d@ngould.dev> 1746197927 -0400\n\nAdd Yuval Kogman as Co-author\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdqAAKCRA4cTNWCSIP\nWQsbAQDmHdNRrOrbGhkQPKwI8JyJHQ8UpGduWiVzkQ3LEA8cFwEAxiWNpcACb2kT\n+RzLmGFgPAF6lcpaulbKCYKFlvn2awo=\n=qae3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b1af831d2b2c38eeb3eab901c45844bdebba97b3",
          "sha": "b1af831d2b2c38eeb3eab901c45844bdebba97b3",
          "html_url": "https://github.com/bitcoin/bips/commit/b1af831d2b2c38eeb3eab901c45844bdebba97b3"
        }
      ],
      "message": "Add Yuval Kogman as Co-author",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:47Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-01T23:59:21Z"
      },
      "sha": "d1ee4402ab72eaa760dac23692d151cc6d9f63c5"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRmMTZiYzBkY2VlY2JhZWQxZmRlNjRlMDlkN2M5M2JmMmFiZjZjMDk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/df16bc0dceecbaed1fde64e09d7c93bf2abf6c09",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/df16bc0dceecbaed1fde64e09d7c93bf2abf6c09",
      "tree": {
        "sha": "09e3ecc78ff639b4978dd589faee04ef71e82cc2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/09e3ecc78ff639b4978dd589faee04ef71e82cc2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 09e3ecc78ff639b4978dd589faee04ef71e82cc2\nparent d1ee4402ab72eaa760dac23692d151cc6d9f63c5\nauthor DanGould <d@ngould.dev> 1746144367 -0400\ncommitter DanGould <d@ngould.dev> 1746197928 -0400\n\nNO mak typo\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTdqAAKCRA4cTNWCSIP\nWbhTAP4n41Bdy9W08XVQLlN0pkgd3SCJaVWFS9TvnDCwF+2UwwD/Q3aVta4F3CQO\nU0j62lNmHBb/nLOskNRAEZk2oR5dago=\n=opn1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/d1ee4402ab72eaa760dac23692d151cc6d9f63c5",
          "sha": "d1ee4402ab72eaa760dac23692d151cc6d9f63c5",
          "html_url": "https://github.com/bitcoin/bips/commit/d1ee4402ab72eaa760dac23692d151cc6d9f63c5"
        }
      ],
      "message": "NO mak typo",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T14:58:48Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T00:06:07Z"
      },
      "sha": "df16bc0dceecbaed1fde64e09d7c93bf2abf6c09"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGIyNWU4NmQxMDc1NzBlZmM5YzQwNzVjNzI4NWMyYTM1YTZiMDcyYTg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b25e86d107570efc9c4075c7285c2a35a6b072a8",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b25e86d107570efc9c4075c7285c2a35a6b072a8",
      "tree": {
        "sha": "673e91131fe7e177675009033454d34dec494d04",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/673e91131fe7e177675009033454d34dec494d04"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 673e91131fe7e177675009033454d34dec494d04\nparent df16bc0dceecbaed1fde64e09d7c93bf2abf6c09\nauthor DanGould <d@ngould.dev> 1746198167 -0400\ncommitter DanGould <d@ngould.dev> 1746198167 -0400\n\nFix heirarchy\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBTelwAKCRA4cTNWCSIP\nWYtJAPwORiY5jkl6ixOUAqy5nDAUAPXFJvuut9m2EgdsY+KkEgD9HgPrCEuRAcEt\nW2fU6ukkyeRKsKBbaQ14DRxPgPf6RQc=\n=fjnn\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/df16bc0dceecbaed1fde64e09d7c93bf2abf6c09",
          "sha": "df16bc0dceecbaed1fde64e09d7c93bf2abf6c09",
          "html_url": "https://github.com/bitcoin/bips/commit/df16bc0dceecbaed1fde64e09d7c93bf2abf6c09"
        }
      ],
      "message": "Fix heirarchy",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T15:02:47Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T15:02:47Z"
      },
      "sha": "b25e86d107570efc9c4075c7285c2a35a6b072a8"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk2MzdkYTU0YWQ3OTFhYTIxOWQ4OGUyODY0YTBmYzc0NjkzMWQ0NmM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9637da54ad791aa219d88e2864a0fc746931d46c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9637da54ad791aa219d88e2864a0fc746931d46c",
      "tree": {
        "sha": "8fe58d14fe237edda2599e9d3734bdac117fe0e6",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8fe58d14fe237edda2599e9d3734bdac117fe0e6"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8fe58d14fe237edda2599e9d3734bdac117fe0e6\nparent b25e86d107570efc9c4075c7285c2a35a6b072a8\nauthor DanGould <d@ngould.dev> 1746204554 -0400\ncommitter DanGould <d@ngould.dev> 1746207891 -0400\n\nConvert mediawiki to markdown\n\nnix shell nixpkgs#pandoc --command bash -lc '\n  pandoc -f mediawiki -t gfm bip-0077.mediawiki -o bip-0077.md'\n\nrm bip-0077.mediawiki\nreference bip-0077.md in README\nsurround bip-0077.md preamble in ``` to satisfy CI\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBUEpAAKCRA4cTNWCSIP\nWXcBAQDZqsv3Ocn6sZz39E/Rhax941kxw18PP0WToWUbqyDJEgEA7zr4bOsTyJYj\nJ9YGzxAb9CR1NEglAnGi22/8Y5NHPQA=\n=TCX3\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b25e86d107570efc9c4075c7285c2a35a6b072a8",
          "sha": "b25e86d107570efc9c4075c7285c2a35a6b072a8",
          "html_url": "https://github.com/bitcoin/bips/commit/b25e86d107570efc9c4075c7285c2a35a6b072a8"
        }
      ],
      "message": "Convert mediawiki to markdown\n\nnix shell nixpkgs#pandoc --command bash -lc '\n  pandoc -f mediawiki -t gfm bip-0077.mediawiki -o bip-0077.md'\n\nrm bip-0077.mediawiki\nreference bip-0077.md in README\nsurround bip-0077.md preamble in ``` to satisfy CI",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T17:44:51Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T16:49:14Z"
      },
      "sha": "9637da54ad791aa219d88e2864a0fc746931d46c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk5NTlmMzYzMTAyZTQwNzJlMTk4NTdhMzcxZjlkN2Q1YWZlNTFhNWU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9959f363102e4072e19857a371f9d7d5afe51a5e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9959f363102e4072e19857a371f9d7d5afe51a5e",
      "tree": {
        "sha": "7b82e96efe4bbd2cde6d9dd56b943c01c7d59d34",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7b82e96efe4bbd2cde6d9dd56b943c01c7d59d34"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7b82e96efe4bbd2cde6d9dd56b943c01c7d59d34\nparent 9637da54ad791aa219d88e2864a0fc746931d46c\nauthor DanGould <d@ngould.dev> 1746204877 -0400\ncommitter DanGould <d@ngould.dev> 1746207911 -0400\n\nStrip link titles from mediawiki -> md conversion\n\nsed -i.bak -E 's/\\]\\(([^ )]+) \"[^\"]*\"\\)/](\\1)/g' bip-0077.md\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBUEpwAKCRA4cTNWCSIP\nWfcaAP9KjaXtKVottkNPdW/YYs3Jrf3prGwnlXkoDbOyS+DDNwD5AYP0+X3bEzgs\n5lPYoKaLoTa9aezx9/uZng4O70iEKA0=\n=kCQY\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9637da54ad791aa219d88e2864a0fc746931d46c",
          "sha": "9637da54ad791aa219d88e2864a0fc746931d46c",
          "html_url": "https://github.com/bitcoin/bips/commit/9637da54ad791aa219d88e2864a0fc746931d46c"
        }
      ],
      "message": "Strip link titles from mediawiki -> md conversion\n\nsed -i.bak -E 's/\\]\\(([^ )]+) \"[^\"]*\"\\)/](\\1)/g' bip-0077.md",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T17:45:11Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T16:54:37Z"
      },
      "sha": "9959f363102e4072e19857a371f9d7d5afe51a5e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGY1NjJiNjgyN2NiYWNiM2I1OTE5OThkYzk5OTgxN2U2NTIyNzc5ZWU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f562b6827cbacb3b591998dc999817e6522779ee",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/f562b6827cbacb3b591998dc999817e6522779ee",
      "tree": {
        "sha": "12faf64d4aa517fefa1fb0a7051b1a1fbebbd94f",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/12faf64d4aa517fefa1fb0a7051b1a1fbebbd94f"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 12faf64d4aa517fefa1fb0a7051b1a1fbebbd94f\nparent 9959f363102e4072e19857a371f9d7d5afe51a5e\nauthor DanGould <d@ngould.dev> 1746204925 -0400\ncommitter DanGould <d@ngould.dev> 1746207911 -0400\n\nStrip leading/trailing spaces from inside links\n\nsed -i.bak -E 's/\\[[[:space:]]+/[/g; s/[[:space:]]+\\]/]/g' bip-0077.md\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBUEpwAKCRA4cTNWCSIP\nWWYZAP9z6v+/3wKpjfdQsQo9hRnaPROJpdXt3lv3Bp6QhPHW9AEA/PTPz1Dn3Rso\n5fPAhn5eFq/+nrEw2iezHgm90mtDWgI=\n=ySI9\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9959f363102e4072e19857a371f9d7d5afe51a5e",
          "sha": "9959f363102e4072e19857a371f9d7d5afe51a5e",
          "html_url": "https://github.com/bitcoin/bips/commit/9959f363102e4072e19857a371f9d7d5afe51a5e"
        }
      ],
      "message": "Strip leading/trailing spaces from inside links\n\nsed -i.bak -E 's/\\[[[:space:]]+/[/g; s/[[:space:]]+\\]/]/g' bip-0077.md",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T17:45:11Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T16:55:25Z"
      },
      "sha": "f562b6827cbacb3b591998dc999817e6522779ee"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZiNTdhOWZkYWYxNjA0NDRlZWExZDNkMjcxZTMyYWU5M2Q0MmE2YzA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6b57a9fdaf160444eea1d3d271e32ae93d42a6c0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6b57a9fdaf160444eea1d3d271e32ae93d42a6c0",
      "tree": {
        "sha": "6528a9af237035bbc4be230ccd49b69430d5866a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6528a9af237035bbc4be230ccd49b69430d5866a"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6528a9af237035bbc4be230ccd49b69430d5866a\nparent f562b6827cbacb3b591998dc999817e6522779ee\nauthor DanGould <d@ngould.dev> 1746205176 -0400\ncommitter DanGould <d@ngould.dev> 1746207911 -0400\n\nFix spacing around inline code\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBUEpwAKCRA4cTNWCSIP\nWYCsAQC4plpN3spC4uNJHJMUjWT1MG7P9zR92exTlseLgTo7xgEA+0bQXp29QHZV\nHcCMyYTyyCfVkd7VDvkBgZSNCYyV7wU=\n=gLhQ\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/f562b6827cbacb3b591998dc999817e6522779ee",
          "sha": "f562b6827cbacb3b591998dc999817e6522779ee",
          "html_url": "https://github.com/bitcoin/bips/commit/f562b6827cbacb3b591998dc999817e6522779ee"
        }
      ],
      "message": "Fix spacing around inline code",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T17:45:11Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T16:59:36Z"
      },
      "sha": "6b57a9fdaf160444eea1d3d271e32ae93d42a6c0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI0NzZkNzBmODYyOGY3ZWJmMmExODUxMmY5ZDZmNWFhOGQ4YWMwZjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b476d70f8628f7ebf2a18512f9d6f5aa8d8ac0f3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b476d70f8628f7ebf2a18512f9d6f5aa8d8ac0f3",
      "tree": {
        "sha": "2da00da79103d567919c316bab351afcfdd75725",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2da00da79103d567919c316bab351afcfdd75725"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2da00da79103d567919c316bab351afcfdd75725\nparent 6b57a9fdaf160444eea1d3d271e32ae93d42a6c0\nauthor DanGould <d@ngould.dev> 1746205619 -0400\ncommitter DanGould <d@ngould.dev> 1746207961 -0400\n\nTake bitcoin URI example out of md link syntax\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBUE2QAKCRA4cTNWCSIP\nWcrUAQCZ/qAKgYEhUDsNp1nLXBO67CtrC726LH2u3ecQAY9d+wD/U5sTXwO2V1li\nPWSOUm8ox/JO+Ujy2dlFy7qlSol1/gc=\n=5thL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6b57a9fdaf160444eea1d3d271e32ae93d42a6c0",
          "sha": "6b57a9fdaf160444eea1d3d271e32ae93d42a6c0",
          "html_url": "https://github.com/bitcoin/bips/commit/6b57a9fdaf160444eea1d3d271e32ae93d42a6c0"
        }
      ],
      "message": "Take bitcoin URI example out of md link syntax",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T17:46:01Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-02T17:06:59Z"
      },
      "sha": "b476d70f8628f7ebf2a18512f9d6f5aa8d8ac0f3"
    },
    {
      "event": "unlabeled",
      "id": 17506691708,
      "node_id": "UNLE_lADOAN28mc5uKfAvzwAAAAQTeup8",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17506691708",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-03T03:39:58Z",
      "label": {
        "name": "PR Author action required",
        "color": "e99695"
      }
    },
    {
      "event": "commented",
      "id": 2848726881,
      "node_id": "IC_kwDOAN28mc6pzB9h",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2848726881",
      "actor": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-03T17:38:26Z",
      "updated_at": "2025-05-03T17:38:26Z",
      "author_association": "MEMBER",
      "body": "Hi @DanGould, I see you've pushed an update. Can you let us know when it is ready for review and what changed (thanks!)",
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2848726881",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 17508336031,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAAQTlAGf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17508336031",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-03T17:38:27Z"
    },
    {
      "event": "subscribed",
      "id": 17508336037,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAQTlAGl",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17508336037",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-03T17:38:27Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGE5ZjMzNmY3YWY1YzM0ZTIzY2Q0M2I4ZDUzOTQ2ZDQ4NzdkOWU4YjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a9f336f7af5c34e23cd43b8d53946d4877d9e8b3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a9f336f7af5c34e23cd43b8d53946d4877d9e8b3",
      "tree": {
        "sha": "71247e7bcd8a1ce5ac9914d957326de243b866d1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/71247e7bcd8a1ce5ac9914d957326de243b866d1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 71247e7bcd8a1ce5ac9914d957326de243b866d1\nparent b476d70f8628f7ebf2a18512f9d6f5aa8d8ac0f3\nauthor DanGould <d@ngould.dev> 1746305957 -0400\ncommitter DanGould <d@ngould.dev> 1746305957 -0400\n\nFence byte diagrams in backtics\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBaDpQAKCRA4cTNWCSIP\nWXoqAP4igBLRR2XxbrHSTJYk2RBtUcVksWmojN5eDziQfddanQD/d7602vv8dXxV\nLbpYWvjltg9hqmtlWpahvfFq3vZAPQc=\n=eEWT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b476d70f8628f7ebf2a18512f9d6f5aa8d8ac0f3",
          "sha": "b476d70f8628f7ebf2a18512f9d6f5aa8d8ac0f3",
          "html_url": "https://github.com/bitcoin/bips/commit/b476d70f8628f7ebf2a18512f9d6f5aa8d8ac0f3"
        }
      ],
      "message": "Fence byte diagrams in backtics",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-03T20:59:17Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-03T20:59:17Z"
      },
      "sha": "a9f336f7af5c34e23cd43b8d53946d4877d9e8b3"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDYwMzU4NDVjNjMzZTU3NjRlNGY0MTNhN2E3OGM5YWMxOGRiZTc3YWM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6035845c633e5764e4f413a7a78c9ac18dbe77ac",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6035845c633e5764e4f413a7a78c9ac18dbe77ac",
      "tree": {
        "sha": "067427f53a71098b3a7699c121f4d56878975330",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/067427f53a71098b3a7699c121f4d56878975330"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 067427f53a71098b3a7699c121f4d56878975330\nparent a9f336f7af5c34e23cd43b8d53946d4877d9e8b3\nauthor DanGould <d@ngould.dev> 1746309615 -0400\ncommitter DanGould <d@ngould.dev> 1746336171 -0400\n\nReplace sequence diagrams with mermaid\n\nBetter rendering and semantic source\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBb5rAAKCRA4cTNWCSIP\nWeHWAP9MD4KmXeJzKNDmLKjNwd+Nzp0ZiRbY099R+ZB9FCIw2AD8DrcYLs9zO7mn\nDzA8zn9kL+chpNkhgGZsKlOBZZMhlA8=\n=FIDf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a9f336f7af5c34e23cd43b8d53946d4877d9e8b3",
          "sha": "a9f336f7af5c34e23cd43b8d53946d4877d9e8b3",
          "html_url": "https://github.com/bitcoin/bips/commit/a9f336f7af5c34e23cd43b8d53946d4877d9e8b3"
        }
      ],
      "message": "Replace sequence diagrams with mermaid\n\nBetter rendering and semantic source",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T05:22:51Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-03T22:00:15Z"
      },
      "sha": "6035845c633e5764e4f413a7a78c9ac18dbe77ac"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17511148158,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAQTvup-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17511148158",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "7664fd5cafe48880d66fbf4c7bb737bfa6e62912",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/7664fd5cafe48880d66fbf4c7bb737bfa6e62912",
      "created_at": "2025-05-04T18:08:59Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDc2NjRmZDVjYWZlNDg4ODBkNjZmYmY0YzdiYjczN2JmYTZlNjI5MTI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7664fd5cafe48880d66fbf4c7bb737bfa6e62912",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/7664fd5cafe48880d66fbf4c7bb737bfa6e62912",
      "tree": {
        "sha": "a033f2285edcbabf1db417a5db422d989929dd92",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/a033f2285edcbabf1db417a5db422d989929dd92"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree a033f2285edcbabf1db417a5db422d989929dd92\nparent 6035845c633e5764e4f413a7a78c9ac18dbe77ac\nauthor DanGould <d@ngould.dev> 1746381763 -0400\ncommitter DanGould <d@ngould.dev> 1746382172 -0400\n\nCollapse overview, basic scheme, and protocol sequence\n\nThese were all inconsitent levels of detail for the same thing. Leave the overview\nthe highest level and link to the specifics.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBetYwAKCRA4cTNWCSIP\nWTzaAP4skGzkO0stH88NKODhiN43Ir1Yk8qtydQAEDxOzp8MEQEAorpQZR49dBm+\n9x6UfwhZXhaoE6AikST077ojgc4nOww=\n=HKDD\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6035845c633e5764e4f413a7a78c9ac18dbe77ac",
          "sha": "6035845c633e5764e4f413a7a78c9ac18dbe77ac",
          "html_url": "https://github.com/bitcoin/bips/commit/6035845c633e5764e4f413a7a78c9ac18dbe77ac"
        }
      ],
      "message": "Collapse overview, basic scheme, and protocol sequence\n\nThese were all inconsitent levels of detail for the same thing. Leave the overview\nthe highest level and link to the specifics.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:09:32Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:02:43Z"
      },
      "sha": "7664fd5cafe48880d66fbf4c7bb737bfa6e62912"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGVlNzMwNDgyZWRhMTc5N2ZiZWUxNDE3NDdlYzI5MjFhNDI4NTBiNmM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ee730482eda1797fbee141747ec2921a42850b6c",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/ee730482eda1797fbee141747ec2921a42850b6c",
      "tree": {
        "sha": "4dca570d34d25d19977a28227393d8853bcfadfa",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/4dca570d34d25d19977a28227393d8853bcfadfa"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 4dca570d34d25d19977a28227393d8853bcfadfa\nparent 7664fd5cafe48880d66fbf4c7bb737bfa6e62912\nauthor DanGould <d@ngould.dev> 1746382303 -0400\ncommitter DanGould <d@ngould.dev> 1746382303 -0400\n\nConsistent short id singularity\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBet3wAKCRA4cTNWCSIP\nWf6xAQDsMBUdG0HuU0JjpOb6yAjj1Ym5aai4v7xRP8M3/pEh7gD/XAyYH7QR7Yjd\nptJWK9aiwvFxZMMlpm643fqiFkLtCQ8=\n=UX7N\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/7664fd5cafe48880d66fbf4c7bb737bfa6e62912",
          "sha": "7664fd5cafe48880d66fbf4c7bb737bfa6e62912",
          "html_url": "https://github.com/bitcoin/bips/commit/7664fd5cafe48880d66fbf4c7bb737bfa6e62912"
        }
      ],
      "message": "Consistent short id singularity",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:11:43Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:11:43Z"
      },
      "sha": "ee730482eda1797fbee141747ec2921a42850b6c"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGU2YTFmNTc0NGVjMjJhMTBkMTFlMjE0MzgxMjRjMDFmOGQ4OGMwNzc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e6a1f5744ec22a10d11e21438124c01f8d88c077",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/e6a1f5744ec22a10d11e21438124c01f8d88c077",
      "tree": {
        "sha": "97404cfc188e1dfa489604638d64a1fedf274208",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/97404cfc188e1dfa489604638d64a1fedf274208"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 97404cfc188e1dfa489604638d64a1fedf274208\nparent ee730482eda1797fbee141747ec2921a42850b6c\nauthor DanGould <d@ngould.dev> 1746382524 -0400\ncommitter DanGould <d@ngould.dev> 1746382524 -0400\n\nRemove straggling whitespace\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBeuvAAKCRA4cTNWCSIP\nWf1GAP4mIv92Dzz3xkmcfXQOwTmV554r6BD9ujm2A8GtHMecDgEA6aku6nmT5I8b\nNJUbv1aYs58IHL15sXzAzzS5xgZiHgY=\n=LteA\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/ee730482eda1797fbee141747ec2921a42850b6c",
          "sha": "ee730482eda1797fbee141747ec2921a42850b6c",
          "html_url": "https://github.com/bitcoin/bips/commit/ee730482eda1797fbee141747ec2921a42850b6c"
        }
      ],
      "message": "Remove straggling whitespace",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:15:24Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:15:24Z"
      },
      "sha": "e6a1f5744ec22a10d11e21438124c01f8d88c077"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGEyZmQ1OTU5YTZmOTVhMTU4YzE3MjQxMjAyZmJiM2NlNGJmMjgwZWM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a2fd5959a6f95a158c17241202fbb3ce4bf280ec",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/a2fd5959a6f95a158c17241202fbb3ce4bf280ec",
      "tree": {
        "sha": "fad8981a610da3a9be4068e0b406b12124ca5124",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/fad8981a610da3a9be4068e0b406b12124ca5124"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree fad8981a610da3a9be4068e0b406b12124ca5124\nparent e6a1f5744ec22a10d11e21438124c01f8d88c077\nauthor DanGould <d@ngould.dev> 1746382633 -0400\ncommitter DanGould <d@ngould.dev> 1746382635 -0400\n\nLink whitepaper\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBevMAAKCRA4cTNWCSIP\nWdm1AP9IZoGQzgKULNzhbW4Bjxk+p9rgYo8QCZv/dmPbvwOT5wD/XzTgCHWPWw9W\nzOl/ncX1WeNNePcL+GaVo/rnErDDyQc=\n=1Qgf\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/e6a1f5744ec22a10d11e21438124c01f8d88c077",
          "sha": "e6a1f5744ec22a10d11e21438124c01f8d88c077",
          "html_url": "https://github.com/bitcoin/bips/commit/e6a1f5744ec22a10d11e21438124c01f8d88c077"
        }
      ],
      "message": "Link whitepaper",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:17:15Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:17:13Z"
      },
      "sha": "a2fd5959a6f95a158c17241202fbb3ce4bf280ec"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDc5MTkwOGEwNDI4MWNlMWFmZDc5ZjA3NGQ1NzhhNzdhOWY0NDA0ZTA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/791908a04281ce1afd79f074d578a77a9f4404e0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/791908a04281ce1afd79f074d578a77a9f4404e0",
      "tree": {
        "sha": "256e1519a36495c69d346bde2a69f46774b3c8de",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/256e1519a36495c69d346bde2a69f46774b3c8de"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 256e1519a36495c69d346bde2a69f46774b3c8de\nparent a2fd5959a6f95a158c17241202fbb3ce4bf280ec\nauthor DanGould <d@ngould.dev> 1746382723 -0400\ncommitter DanGould <d@ngould.dev> 1746382723 -0400\n\nFix motivation flow\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBevgwAKCRA4cTNWCSIP\nWbZBAP4ttr0T8dDtEAMllNrNO746nJC2pPon6qa5LRgz98B7owD8DVbSZ6oe2Cov\n8q+4Z1QLOwPiva2dFK/EV9fQsV0UBQg=\n=616U\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/a2fd5959a6f95a158c17241202fbb3ce4bf280ec",
          "sha": "a2fd5959a6f95a158c17241202fbb3ce4bf280ec",
          "html_url": "https://github.com/bitcoin/bips/commit/a2fd5959a6f95a158c17241202fbb3ce4bf280ec"
        }
      ],
      "message": "Fix motivation flow",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:18:43Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-04T18:18:43Z"
      },
      "sha": "791908a04281ce1afd79f074d578a77a9f4404e0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGRlMTM4ZjU4NTBjMzEzNDI1OTcwM2NlMDE3ZmNiOTRmZmRiMzk2ODc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/de138f5850c3134259703ce017fcb94ffdb39687",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/de138f5850c3134259703ce017fcb94ffdb39687",
      "tree": {
        "sha": "7e60ab5b27b01c145fdc8256b5548d3c54279840",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/7e60ab5b27b01c145fdc8256b5548d3c54279840"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 7e60ab5b27b01c145fdc8256b5548d3c54279840\nparent 791908a04281ce1afd79f074d578a77a9f4404e0\nauthor DanGould <d@ngould.dev> 1746458929 -0400\ncommitter DanGould <d@ngould.dev> 1746458929 -0400\n\nClarify abstract\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjZMQAKCRA4cTNWCSIP\nWUzPAP9IMR/waEPnvK37SdOIcqRRWqX/INjeNK9qmX0gNrjSoAEA9W2vzA1ihtl0\n4/mroQSpwzSc5HwEDV3AoN/K4tHb2wY=\n=6zWw\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/791908a04281ce1afd79f074d578a77a9f4404e0",
          "sha": "791908a04281ce1afd79f074d578a77a9f4404e0",
          "html_url": "https://github.com/bitcoin/bips/commit/791908a04281ce1afd79f074d578a77a9f4404e0"
        }
      ],
      "message": "Clarify abstract",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T15:28:49Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T15:28:49Z"
      },
      "sha": "de138f5850c3134259703ce017fcb94ffdb39687"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDE2ZGY4NDY4M2Y5ZTYzM2ViMWQ4ODU1ZmJkZTRmZjJhNzVlNDY1YjA",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/16df84683f9e633eb1d8855fbde4ff2a75e465b0",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/16df84683f9e633eb1d8855fbde4ff2a75e465b0",
      "tree": {
        "sha": "630e5f066320a1d098986b94e69a46485cb9f7c8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/630e5f066320a1d098986b94e69a46485cb9f7c8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 630e5f066320a1d098986b94e69a46485cb9f7c8\nparent de138f5850c3134259703ce017fcb94ffdb39687\nauthor DanGould <d@ngould.dev> 1746459931 -0400\ncommitter DanGould <d@ngould.dev> 1746460238 -0400\n\nClarify motivation\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjeUAAKCRA4cTNWCSIP\nWWQ7AP9zVgPxv+10HSvgd+s/1G/mZIYCsgD3aMIF5E3k8hLwqgD/d3ZdwLW3fBew\nX27XNHtn9wmBnoSJX56lyYw8xgUjDQo=\n=5dUT\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/de138f5850c3134259703ce017fcb94ffdb39687",
          "sha": "de138f5850c3134259703ce017fcb94ffdb39687",
          "html_url": "https://github.com/bitcoin/bips/commit/de138f5850c3134259703ce017fcb94ffdb39687"
        }
      ],
      "message": "Clarify motivation",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T15:50:38Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T15:45:31Z"
      },
      "sha": "16df84683f9e633eb1d8855fbde4ff2a75e465b0"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDM2MWRiOTQxMDUzMzZkZDU2YzEyODc0OGIxN2Q3OGVjODUxNzcwNzc",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/361db94105336dd56c128748b17d78ec85177077",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/361db94105336dd56c128748b17d78ec85177077",
      "tree": {
        "sha": "9583bd39b224b9bc96bfb5535b963a4767519590",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/9583bd39b224b9bc96bfb5535b963a4767519590"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 9583bd39b224b9bc96bfb5535b963a4767519590\nparent 16df84683f9e633eb1d8855fbde4ff2a75e465b0\nauthor DanGould <d@ngould.dev> 1746460817 -0400\ncommitter DanGould <d@ngould.dev> 1746460817 -0400\n\nClarify overview\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjgkQAKCRA4cTNWCSIP\nWU57AP980rWU5o6+1tFcfIJMml5E7kF5KVtF3LjUpH3aEP8qigD/Ve5T6Q/o1pIi\ntGf4KULl0ZmbNOWbKXlgsQVAtlgPoA4=\n=yNY7\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/16df84683f9e633eb1d8855fbde4ff2a75e465b0",
          "sha": "16df84683f9e633eb1d8855fbde4ff2a75e465b0",
          "html_url": "https://github.com/bitcoin/bips/commit/16df84683f9e633eb1d8855fbde4ff2a75e465b0"
        }
      ],
      "message": "Clarify overview",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:00:17Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:00:17Z"
      },
      "sha": "361db94105336dd56c128748b17d78ec85177077"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDEwZmM0MDhkYTRiNmU1NWQ0OTJjM2M3NWI2YjIxYjllNjQ2MjFmNWE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/10fc408da4b6e55d492c3c75b6b21b9e64621f5a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/10fc408da4b6e55d492c3c75b6b21b9e64621f5a",
      "tree": {
        "sha": "154b758bd48acd06d1ea5b071fceda05f5ddd9c2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/154b758bd48acd06d1ea5b071fceda05f5ddd9c2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 154b758bd48acd06d1ea5b071fceda05f5ddd9c2\nparent 361db94105336dd56c128748b17d78ec85177077\nauthor DanGould <d@ngould.dev> 1746461063 -0400\ncommitter DanGould <d@ngould.dev> 1746461063 -0400\n\nClarify bootstrapping\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjhhwAKCRA4cTNWCSIP\nWZERAP9RvrtMAtVARQ7sI9IHNwPhAEDoitJMkJJyNv5SS8WQeQEAntRIYQlaLQmf\nV67OKyLjDd3H4gXB76i7/cYcGBXDfwE=\n=QGNk\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/361db94105336dd56c128748b17d78ec85177077",
          "sha": "361db94105336dd56c128748b17d78ec85177077",
          "html_url": "https://github.com/bitcoin/bips/commit/361db94105336dd56c128748b17d78ec85177077"
        }
      ],
      "message": "Clarify bootstrapping",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:04:23Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:04:23Z"
      },
      "sha": "10fc408da4b6e55d492c3c75b6b21b9e64621f5a"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGViMjQzOTlkODVjZWFiM2ZiNzg0MjE1MjBkOWY4OTBkMjFlODdlZjM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/eb24399d85ceab3fb78421520d9f890d21e87ef3",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/eb24399d85ceab3fb78421520d9f890d21e87ef3",
      "tree": {
        "sha": "cfdee3377e1026ce3a7716c982d6045bb1e8e2fc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/cfdee3377e1026ce3a7716c982d6045bb1e8e2fc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree cfdee3377e1026ce3a7716c982d6045bb1e8e2fc\nparent 10fc408da4b6e55d492c3c75b6b21b9e64621f5a\nauthor DanGould <d@ngould.dev> 1746461158 -0400\ncommitter DanGould <d@ngould.dev> 1746461321 -0400\n\nUse singular to describe Payjoin URI\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjiiwAKCRA4cTNWCSIP\nWX56AQDadylF8zoMxqRNCkibKSyAh091rh+zkZIttHMlQJqEBQEA+U2NmzbXrudj\n8Jm3+tRdTgTirsi6lb3YNsQYxcWoFgE=\n=uwM1\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/10fc408da4b6e55d492c3c75b6b21b9e64621f5a",
          "sha": "10fc408da4b6e55d492c3c75b6b21b9e64621f5a",
          "html_url": "https://github.com/bitcoin/bips/commit/10fc408da4b6e55d492c3c75b6b21b9e64621f5a"
        }
      ],
      "message": "Use singular to describe Payjoin URI",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:08:41Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:05:58Z"
      },
      "sha": "eb24399d85ceab3fb78421520d9f890d21e87ef3"
    },
    {
      "event": "head_ref_force_pushed",
      "id": 17522992415,
      "node_id": "HRFPE_lADOAN28mc5uKfAvzwAAAAQUc6Uf",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17522992415",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": "c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1",
      "commit_url": "https://api.github.com/repos/DanGould/bips/commits/c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1",
      "created_at": "2025-05-05T17:01:59Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDMyNTQ3NTBjZTQ5YTA4MGY5OWM2MWU4NWY2NzM0NzQyZmI5MmJkNjg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3254750ce49a080f99c61e85f6734742fb92bd68",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3254750ce49a080f99c61e85f6734742fb92bd68",
      "tree": {
        "sha": "147458ce8058958537e27d8169f783ee36db9473",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/147458ce8058958537e27d8169f783ee36db9473"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 147458ce8058958537e27d8169f783ee36db9473\nparent eb24399d85ceab3fb78421520d9f890d21e87ef3\nauthor DanGould <d@ngould.dev> 1746462386 -0400\ncommitter DanGould <d@ngould.dev> 1746464559 -0400\n\nClarify mailbox endpoint\n\nSpecify that v2 mailboxes are OHTTP Targets.\nMention backwards compatibility.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjvLwAKCRA4cTNWCSIP\nWTF4AQDqY1cUtiPR3qQfrZJaZGpQK98r6tAAaRzkpYIGSJVo1gD/dlWXw2PI46B4\npfJsnwaNzrGiQQLXyW0gej5GcaxV7QI=\n=hL8J\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/eb24399d85ceab3fb78421520d9f890d21e87ef3",
          "sha": "eb24399d85ceab3fb78421520d9f890d21e87ef3",
          "html_url": "https://github.com/bitcoin/bips/commit/eb24399d85ceab3fb78421520d9f890d21e87ef3"
        }
      ],
      "message": "Clarify mailbox endpoint\n\nSpecify that v2 mailboxes are OHTTP Targets.\nMention backwards compatibility.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:02:39Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:26:26Z"
      },
      "sha": "3254750ce49a080f99c61e85f6734742fb92bd68"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDQwMzhjYjU0YWI2MGUwMDk4NDFiNmRkNzgzNjQyZTUxODY4OTNlMDQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4038cb54ab60e009841b6dd783642e5186893e04",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/4038cb54ab60e009841b6dd783642e5186893e04",
      "tree": {
        "sha": "1a0b2a5cdeec1cd4894d95bc0a7e22f0cfd274a1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/1a0b2a5cdeec1cd4894d95bc0a7e22f0cfd274a1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 1a0b2a5cdeec1cd4894d95bc0a7e22f0cfd274a1\nparent 3254750ce49a080f99c61e85f6734742fb92bd68\nauthor DanGould <d@ngould.dev> 1746462685 -0400\ncommitter DanGould <d@ngould.dev> 1746464559 -0400\n\nClarify Receiver Fragment Parameters\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjvLwAKCRA4cTNWCSIP\nWQ90AP9Hfv6xpZortVXnuM71HNMwjfLyAn/Ka6FhSSUbvtNBoQD9Fa2+bRcr4C1n\nrsZoQ9E8N+fXfkK9j5QPMFKbtHlO0QE=\n=J8lL\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3254750ce49a080f99c61e85f6734742fb92bd68",
          "sha": "3254750ce49a080f99c61e85f6734742fb92bd68",
          "html_url": "https://github.com/bitcoin/bips/commit/3254750ce49a080f99c61e85f6734742fb92bd68"
        }
      ],
      "message": "Clarify Receiver Fragment Parameters",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:02:39Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:31:25Z"
      },
      "sha": "4038cb54ab60e009841b6dd783642e5186893e04"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDBkNGE4YWVlMGJlMTlhZTVmOWI1YzM5NGQ1YWFiMmVlMDdlNjIxNWU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0d4a8aee0be19ae5f9b5c394d5aab2ee07e6215e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/0d4a8aee0be19ae5f9b5c394d5aab2ee07e6215e",
      "tree": {
        "sha": "6cbefe3b86caaa125123dd9db6f14af4e22cbaf1",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/6cbefe3b86caaa125123dd9db6f14af4e22cbaf1"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 6cbefe3b86caaa125123dd9db6f14af4e22cbaf1\nparent 4038cb54ab60e009841b6dd783642e5186893e04\nauthor DanGould <d@ngould.dev> 1746463519 -0400\ncommitter DanGould <d@ngould.dev> 1746464559 -0400\n\nRevise messaging for clarity\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjvMAAKCRA4cTNWCSIP\nWWlCAPwJg4HUh8ZtNyJbhbPnSnCbNopU8ihm7vQAB9nl++NVqQEAgT4KZXvLyrSM\nhogjjcaNw1gD2HblCEoZbhiPM7M55QY=\n=4lbj\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/4038cb54ab60e009841b6dd783642e5186893e04",
          "sha": "4038cb54ab60e009841b6dd783642e5186893e04",
          "html_url": "https://github.com/bitcoin/bips/commit/4038cb54ab60e009841b6dd783642e5186893e04"
        }
      ],
      "message": "Revise messaging for clarity",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:02:39Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:45:19Z"
      },
      "sha": "0d4a8aee0be19ae5f9b5c394d5aab2ee07e6215e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDY2ZjY3YzE5YTk1MTU3ZjdmMTQxOTY3ZTkxYTZkNTA2ZDY1ZTc3ODQ",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/66f67c19a95157f7f141967e91a6d506d65e7784",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/66f67c19a95157f7f141967e91a6d506d65e7784",
      "tree": {
        "sha": "c4bc93e0e3c6b97d0ceabe53065a26e58d7f5adb",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/c4bc93e0e3c6b97d0ceabe53065a26e58d7f5adb"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree c4bc93e0e3c6b97d0ceabe53065a26e58d7f5adb\nparent 0d4a8aee0be19ae5f9b5c394d5aab2ee07e6215e\nauthor DanGould <d@ngould.dev> 1746463589 -0400\ncommitter DanGould <d@ngould.dev> 1746464560 -0400\n\nAdd rationale for allowed_purposes\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjvMAAKCRA4cTNWCSIP\nWac/AP0ZlrF2yJgWMJpE3udLXp0NKgv9CrDb6s4UAY6lTw6f5wD+KDgzEIV62jMV\nP6PPTfl8bwn5eAUTw5/spSLT/5tGLQ8=\n=W6H4\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/0d4a8aee0be19ae5f9b5c394d5aab2ee07e6215e",
          "sha": "0d4a8aee0be19ae5f9b5c394d5aab2ee07e6215e",
          "html_url": "https://github.com/bitcoin/bips/commit/0d4a8aee0be19ae5f9b5c394d5aab2ee07e6215e"
        }
      ],
      "message": "Add rationale for allowed_purposes",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:02:40Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:46:29Z"
      },
      "sha": "66f67c19a95157f7f141967e91a6d506d65e7784"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDk0YTZlZTNmZTRkY2Q4MWJhZmI3MDE3YmU4N2I3MDlhYmIxMzk4NzM",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/94a6ee3fe4dcd81bafb7017be87b709abb139873",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/94a6ee3fe4dcd81bafb7017be87b709abb139873",
      "tree": {
        "sha": "79744342e3feb5a774ef574b4a301ac69999901e",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/79744342e3feb5a774ef574b4a301ac69999901e"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 79744342e3feb5a774ef574b4a301ac69999901e\nparent 66f67c19a95157f7f141967e91a6d506d65e7784\nauthor DanGould <d@ngould.dev> 1746464139 -0400\ncommitter DanGould <d@ngould.dev> 1746464560 -0400\n\nDefine ElligatorSwift according to BIP 324\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjvMAAKCRA4cTNWCSIP\nWUysAP4rt9OJiAVFf6Wx7ZHhK6VgKhdBeh3j9YJ7jdrYWLl8twD/cF3YXrutQ651\nZpWwbvpMmru9lsUT/d3u++ovRaBihAM=\n=Wp1t\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/66f67c19a95157f7f141967e91a6d506d65e7784",
          "sha": "66f67c19a95157f7f141967e91a6d506d65e7784",
          "html_url": "https://github.com/bitcoin/bips/commit/66f67c19a95157f7f141967e91a6d506d65e7784"
        }
      ],
      "message": "Define ElligatorSwift according to BIP 324",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:02:40Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T16:55:39Z"
      },
      "sha": "94a6ee3fe4dcd81bafb7017be87b709abb139873"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGMzY2ZjYzhlNTI0ZTM4NWM1OGFiMGU4NTZjZmI5YmZjYTZjMmFhYjE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1",
      "tree": {
        "sha": "2200726ce3fa60cb606032ccc3c3e108fdc05435",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/2200726ce3fa60cb606032ccc3c3e108fdc05435"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 2200726ce3fa60cb606032ccc3c3e108fdc05435\nparent 94a6ee3fe4dcd81bafb7017be87b709abb139873\nauthor DanGould <d@ngould.dev> 1746464481 -0400\ncommitter DanGould <d@ngould.dev> 1746464560 -0400\n\nClarify attacks, backwards compatibility\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBjvMAAKCRA4cTNWCSIP\nWbIeAQC9bruExf8T/XlWtOz6XqK0VoNh0ljIQbi8+PR2UbjmIwD/fz/YG1/P8S+1\n29h8lAgHRyXlh1LqaoBtoWeK9y+jNAs=\n=8s/J\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/94a6ee3fe4dcd81bafb7017be87b709abb139873",
          "sha": "94a6ee3fe4dcd81bafb7017be87b709abb139873",
          "html_url": "https://github.com/bitcoin/bips/commit/94a6ee3fe4dcd81bafb7017be87b709abb139873"
        }
      ],
      "message": "Clarify attacks, backwards compatibility",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:02:40Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:01:21Z"
      },
      "sha": "c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1"
    },
    {
      "event": "commented",
      "id": 2851684926,
      "node_id": "IC_kwDOAN28mc6p-UI-",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/comments/2851684926",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-05T17:09:22Z",
      "updated_at": "2025-05-05T17:09:22Z",
      "author_association": "CONTRIBUTOR",
      "body": "A major rewrite touched every section of the document and reorganized the hierarchy. This is ready for review.\r\n\r\n- abstract introduces what and why\r\n- motivation touches on the privacy *risk* satoshi left in the whitepaper as well as how the solution can make more efficient batches and the limitations of v1.\r\n- Overview, Basic Scheme, and a procedural list were consolidated into a single overview which links to ordered specification sections\r\n- specification sections appear in procedural order for easier reading\r\n- Much rationale was moved out of specification and into specific rational subsections\r\n- sequence diagrams are rendered in `mermaid` for better semantic clarity in source and in render\r\n- version 2 specifics like directory OHTTP gateway `allowed_purposes` advertisement, expiration, fragment parameters, HPKE info strings. were edited for completeness.\r\n- complete document was edited for clarity under recitation, the way each sentence sounds.\r\n\r\nThe document was rewritten with @nothingmuch so that an implementer or anyone who wants some education on the subject can read through an ordered hierarchy of detail they find relevant. Thank you for your patience on this edit.",
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#issuecomment-2851684926",
      "issue_url": "https://api.github.com/repos/bitcoin/bips/issues/1483"
    },
    {
      "event": "mentioned",
      "id": 17523093334,
      "node_id": "MEE_lADOAN28mc5uKfAvzwAAAAQUdS9W",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17523093334",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-05T17:09:23Z"
    },
    {
      "event": "subscribed",
      "id": 17523093342,
      "node_id": "SE_lADOAN28mc5uKfAvzwAAAAQUdS9e",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17523093342",
      "actor": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-05T17:09:23Z"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDFhNzkyZmM5ZGI4NTVjM2RkMzdjZTk2NzFkYWU3NWJjODY1M2E5ZGI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1a792fc9db855c3dd37ce9671dae75bc8653a9db",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1a792fc9db855c3dd37ce9671dae75bc8653a9db",
      "tree": {
        "sha": "dbec87e83fd7f8263e5344caf3b02ccb059caa72",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/dbec87e83fd7f8263e5344caf3b02ccb059caa72"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree dbec87e83fd7f8263e5344caf3b02ccb059caa72\nparent c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1\nauthor DanGould <d@ngould.dev> 1746466816 -0400\ncommitter DanGould <d@ngould.dev> 1746466816 -0400\n\nFix Receiver Proposal PSBT messaging header\n\nfor link.\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBj4AAAKCRA4cTNWCSIP\nWaiHAP9dhjmeynzJ/XavEepeTC1yjNlg4yPQttk6d4rPX7r8ywD/Y/U+tXrL+cPV\nzl0ErcKz3re1R5/sD0LGJXTng6W24QI=\n=wPLl\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1",
          "sha": "c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1",
          "html_url": "https://github.com/bitcoin/bips/commit/c3cfcc8e524e385c58ab0e856cfb9bfca6c2aab1"
        }
      ],
      "message": "Fix Receiver Proposal PSBT messaging header\n\nfor link.",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:40:16Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:40:16Z"
      },
      "sha": "1a792fc9db855c3dd37ce9671dae75bc8653a9db"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDFhZDhmMjY5NjE0YmRiNzAzYzZlOTFiMWEzMGFhNjdmNzBiZTg5M2Q",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1ad8f269614bdb703c6e91b1a30aa67f70be893d",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/1ad8f269614bdb703c6e91b1a30aa67f70be893d",
      "tree": {
        "sha": "cb9ecad7ac855b8fa1ae9672fd82d434e3bf80f8",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/cb9ecad7ac855b8fa1ae9672fd82d434e3bf80f8"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree cb9ecad7ac855b8fa1ae9672fd82d434e3bf80f8\nparent 1a792fc9db855c3dd37ce9671dae75bc8653a9db\nauthor DanGould <d@ngould.dev> 1746467952 -0400\ncommitter DanGould <d@ngould.dev> 1746467952 -0400\n\nAdd activation to sequence\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBj8cAAKCRA4cTNWCSIP\nWYvfAP9cnTtLenE4R6m2IdOyPByrzVr5gVPU7OKT72jTCxDiVQEAs6S9sCze/Jtw\nxiA9Hiz8Q6twIuMvex3I5OsXBRbmSwk=\n=1GIU\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1a792fc9db855c3dd37ce9671dae75bc8653a9db",
          "sha": "1a792fc9db855c3dd37ce9671dae75bc8653a9db",
          "html_url": "https://github.com/bitcoin/bips/commit/1a792fc9db855c3dd37ce9671dae75bc8653a9db"
        }
      ],
      "message": "Add activation to sequence",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:59:12Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-05T17:59:12Z"
      },
      "sha": "1ad8f269614bdb703c6e91b1a30aa67f70be893d"
    },
    {
      "event": "reviewed",
      "id": 2816306283,
      "node_id": "PRR_kwDOAN28mc6n3Wxr",
      "url": null,
      "actor": null,
      "commit_id": "1ad8f269614bdb703c6e91b1a30aa67f70be893d",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2816306283",
      "submitted_at": "2025-05-05T22:41:25Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDUzNTkzNTZjNjljYTI4YWRmNDg1YWQyODE2NzFmMTQyNzZkNmVjOWE",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5359356c69ca28adf485ad281671f14276d6ec9a",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/5359356c69ca28adf485ad281671f14276d6ec9a",
      "tree": {
        "sha": "8806be1f3bbc9cb39aa5bd712ca6069d8ac284cc",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8806be1f3bbc9cb39aa5bd712ca6069d8ac284cc"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree 8806be1f3bbc9cb39aa5bd712ca6069d8ac284cc\nparent 1ad8f269614bdb703c6e91b1a30aa67f70be893d\nauthor Dan Gould <d@ngould.dev> 1746543546 -0400\ncommitter GitHub <noreply@github.com> 1746543546 -0400\n\nCorrect #64-bit-short-id-length link\n\nCo-authored-by: Yuval Kogman <nothingmuch@woobling.org>",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsFcBAABCAAQBQJoGiO7CRC1aQ7uu5UhlAAAytIQAGkArPWUiv7BExVru5Z/q9iF\nwrqsFs0zv9nVDilJkdn5xB0pBIRTP8Z/gg22B0Ga/iY79BiCn6SSGMgVxOYWOy+T\nzwTduN8sVQdOLp0IQeU/6KdX1REmUWGhf+yygvQhFa5qqHpQbwwITTYCB+Xfkhf9\n3gPqPDckVehcTej4St7OEyA0bT7Th0u02ADykTPc/QLejYox5ZWWF7/HU5ipHmXp\nSMPu7b7Gahsrf+Cz/8+Whet+Q1aEmsaenMwL48b/NDLQPkAhJtosKhSmw7wRf0zl\n1grDSwmr/gQBcTmdOG/31vZnVPYPIuJfiOP9Ub39Zt/FEqzTCWawQ6u6yMFSOxZP\nyyClDr3eDVjg8JdezaJJJrQ9dm8lzCBMkbBJ4UFXbT+QyU+P4sn3CaIW+rujkoJt\nPsbcPCKxBhd4fIcKKHRIMOzKtKff0farIwOl55lfFLo5PMQVkqkSsrncGNJ3xTxp\nbnpOUXXJt1WNraJTvZYbOlf8x3Er/5nvRya4k9MRaq1KB98pW4VMXo6maE4Ikl1r\n+2K34m9bZAg/AgSmJzW17xpk+Y9sZrcSPW5BPpp+2C7nHgsOp2H7ZIsquJ7zyZ0j\nXIefQyM6uk8RkFKiLLv1AYk6L8EZ28HbUdT6z5roXH96VejLhSqnDa6HBt4kJO1N\nMrB4CF355sOuo0ijTZE2\n=EoSc\n-----END PGP SIGNATURE-----\n"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/1ad8f269614bdb703c6e91b1a30aa67f70be893d",
          "sha": "1ad8f269614bdb703c6e91b1a30aa67f70be893d",
          "html_url": "https://github.com/bitcoin/bips/commit/1ad8f269614bdb703c6e91b1a30aa67f70be893d"
        }
      ],
      "message": "Correct #64-bit-short-id-length link\n\nCo-authored-by: Yuval Kogman <nothingmuch@woobling.org>",
      "committer": {
        "name": "GitHub",
        "email": "noreply@github.com",
        "date": "2025-05-06T14:59:06Z"
      },
      "author": {
        "name": "Dan Gould",
        "email": "d@ngould.dev",
        "date": "2025-05-06T14:59:06Z"
      },
      "sha": "5359356c69ca28adf485ad281671f14276d6ec9a"
    },
    {
      "event": "review_requested",
      "id": 17539284582,
      "node_id": "RRE_lADOAN28mc5uKfAvzwAAAAQVbD5m",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17539284582",
      "actor": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-06T14:59:40Z",
      "requested_reviewer": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDMyODhhZmMwMWVjZmQxZjQ2ZTg0ZDM3YmY0YjRjNDhmZTJiNmNhODg",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3288afc01ecfd1f46e84d37bf4b4c48fe2b6ca88",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/3288afc01ecfd1f46e84d37bf4b4c48fe2b6ca88",
      "tree": {
        "sha": "ccbb413a1146fa59e7ddcd1b3a62c58cb201fcc2",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ccbb413a1146fa59e7ddcd1b3a62c58cb201fcc2"
      },
      "verification": {
        "verified": true,
        "reason": "valid",
        "payload": "tree ccbb413a1146fa59e7ddcd1b3a62c58cb201fcc2\nparent 5359356c69ca28adf485ad281671f14276d6ec9a\nauthor DanGould <d@ngould.dev> 1746547822 -0400\ncommitter DanGould <d@ngould.dev> 1746547822 -0400\n\nClarify why not AES-GCM rationale\n",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQRpp+ieW7WZEgsu4CQ4cTNWCSIPWQUCaBo0bgAKCRA4cTNWCSIP\nWR4PAP44NIIVGOc/+2L/iIPfkysUagOvds/kd/4YPYXzt4nPyQD7BYsCJ1lWJjS/\nMUeUAplgdVo6q2t0D3l6vhw5w2NoiAw=\n=7O+d\n-----END PGP SIGNATURE-----"
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/5359356c69ca28adf485ad281671f14276d6ec9a",
          "sha": "5359356c69ca28adf485ad281671f14276d6ec9a",
          "html_url": "https://github.com/bitcoin/bips/commit/5359356c69ca28adf485ad281671f14276d6ec9a"
        }
      ],
      "message": "Clarify why not AES-GCM rationale",
      "committer": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-06T16:10:22Z"
      },
      "author": {
        "name": "DanGould",
        "email": "d@ngould.dev",
        "date": "2025-05-06T16:10:22Z"
      },
      "sha": "3288afc01ecfd1f46e84d37bf4b4c48fe2b6ca88"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKGI0NGE1NDljZTAzMzhmMTgyYWFiNTM2YTM5MzQyNjhhZDkyMGVhNTI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b44a549ce0338f182aab536a3934268ad920ea52",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/b44a549ce0338f182aab536a3934268ad920ea52",
      "tree": {
        "sha": "cd5812ed71dc98855ef1af31ffba2120f9ad5a0a",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/cd5812ed71dc98855ef1af31ffba2120f9ad5a0a"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/3288afc01ecfd1f46e84d37bf4b4c48fe2b6ca88",
          "sha": "3288afc01ecfd1f46e84d37bf4b4c48fe2b6ca88",
          "html_url": "https://github.com/bitcoin/bips/commit/3288afc01ecfd1f46e84d37bf4b4c48fe2b6ca88"
        }
      ],
      "message": "Specify serialization of reply key in plaintext",
      "committer": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:55:42Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:16:39Z"
      },
      "sha": "b44a549ce0338f182aab536a3934268ad920ea52"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgzY2E1YjQ2MTgzMmE1MzViMzljMjhjMDY2M2VkYTg5Mjk2YTFiZjk",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83ca5b461832a535b39c28c0663eda89296a1bf9",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/83ca5b461832a535b39c28c0663eda89296a1bf9",
      "tree": {
        "sha": "8489a5e5a532469dfe9225344948d4385cfaf9dd",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/8489a5e5a532469dfe9225344948d4385cfaf9dd"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/b44a549ce0338f182aab536a3934268ad920ea52",
          "sha": "b44a549ce0338f182aab536a3934268ad920ea52",
          "html_url": "https://github.com/bitcoin/bips/commit/b44a549ce0338f182aab536a3934268ad920ea52"
        }
      ],
      "message": "Specify the wire format for ChaCha20-Poly1305 ciphertext and tag",
      "committer": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:55:42Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:16:39Z"
      },
      "sha": "83ca5b461832a535b39c28c0663eda89296a1bf9"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDZkNWU4YWYyMWI5NWE1OTU2MGRjNzljM2JiOThjMjc0ZDEzYjQyYjI",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6d5e8af21b95a59560dc79c3bb98c274d13b42b2",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/6d5e8af21b95a59560dc79c3bb98c274d13b42b2",
      "tree": {
        "sha": "5a352e947864b23012a48b7ff80ef019e7323064",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/5a352e947864b23012a48b7ff80ef019e7323064"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/83ca5b461832a535b39c28c0663eda89296a1bf9",
          "sha": "83ca5b461832a535b39c28c0663eda89296a1bf9",
          "html_url": "https://github.com/bitcoin/bips/commit/83ca5b461832a535b39c28c0663eda89296a1bf9"
        }
      ],
      "message": "Specify details of HPKE message wire format\n\nAlso clarifies that HPKE auth mode is used with the receiver's key,\nauthenticating the receiver as the sender of the encrypted Proposal PSBT.",
      "committer": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:55:42Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:16:39Z"
      },
      "sha": "6d5e8af21b95a59560dc79c3bb98c274d13b42b2"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDgwYzQ4ZDhhOWUxNDI4NWYyOTIyNjFmNGE1NzFjODA3OWNlNTNjMGU",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/80c48d8a9e14285f292261f4a571c8079ce53c0e",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/80c48d8a9e14285f292261f4a571c8079ce53c0e",
      "tree": {
        "sha": "ea45eb1710bbfc4a087259860e118f2a99f23f45",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/ea45eb1710bbfc4a087259860e118f2a99f23f45"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/6d5e8af21b95a59560dc79c3bb98c274d13b42b2",
          "sha": "6d5e8af21b95a59560dc79c3bb98c274d13b42b2",
          "html_url": "https://github.com/bitcoin/bips/commit/6d5e8af21b95a59560dc79c3bb98c274d13b42b2"
        }
      ],
      "message": "Correct diagram for OHTTP encapsulation\n\nThe order according to RFC 9458 and the code is is header, followed by\nencapsulated key, followed by the ciphertext.",
      "committer": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:55:42Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:16:39Z"
      },
      "sha": "80c48d8a9e14285f292261f4a571c8079ce53c0e"
    },
    {
      "event": "committed",
      "id": null,
      "node_id": "C_kwDOAN28mdoAKDkwNDIzODBmMzE2YmViOWFhOWZhOTdhZDY0MmNiM2RhMjgwMGVlNTY",
      "url": "https://api.github.com/repos/bitcoin/bips/git/commits/9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "actor": null,
      "commit_id": null,
      "commit_url": null,
      "created_at": null,
      "html_url": "https://github.com/bitcoin/bips/commit/9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "tree": {
        "sha": "39e6c2e803e4dee463255ea74aaf9875ccc01dc9",
        "url": "https://api.github.com/repos/bitcoin/bips/git/trees/39e6c2e803e4dee463255ea74aaf9875ccc01dc9"
      },
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "payload": null,
        "signature": null
      },
      "parents": [
        {
          "url": "https://api.github.com/repos/bitcoin/bips/git/commits/80c48d8a9e14285f292261f4a571c8079ce53c0e",
          "sha": "80c48d8a9e14285f292261f4a571c8079ce53c0e",
          "html_url": "https://github.com/bitcoin/bips/commit/80c48d8a9e14285f292261f4a571c8079ce53c0e"
        }
      ],
      "message": "OHTTP message encoding according to RFC 9458",
      "committer": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:55:42Z"
      },
      "author": {
        "name": "Yuval Kogman",
        "email": "nothingmuch@woobling.org",
        "date": "2025-05-06T23:16:39Z"
      },
      "sha": "9042380f316beb9aa9fa97ad642cb3da2800ee56"
    },
    {
      "event": "review_requested",
      "id": 17564237157,
      "node_id": "RRE_lADOAN28mc5uKfAvzwAAAAQW6P1l",
      "url": "https://api.github.com/repos/bitcoin/bips/issues/events/17564237157",
      "actor": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "commit_id": null,
      "commit_url": null,
      "created_at": "2025-05-07T22:29:28Z",
      "requested_reviewer": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "review_requester": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      }
    },
    {
      "event": "reviewed",
      "id": 2831069917,
      "node_id": "PRR_kwDOAN28mc6ovrLd",
      "url": null,
      "actor": null,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2831069917",
      "submitted_at": "2025-05-10T21:38:17Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2831071600,
      "node_id": "PRR_kwDOAN28mc6ovrlw",
      "url": null,
      "actor": null,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "commit_url": null,
      "created_at": null,
      "author_association": "NONE",
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2831071600",
      "submitted_at": "2025-05-10T21:51:59Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    },
    {
      "event": "reviewed",
      "id": 2847213995,
      "node_id": "PRR_kwDOAN28mc6ptQmr",
      "url": null,
      "actor": null,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "commit_url": null,
      "created_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Great read. Got a bucket of nits for you, most of which you can consider, adopt, amend, or discard as you wish. Should hopefully not be too much work to address these, even though there are many.\r\n\r\nItâ€™s probably a personal preference, but I do find \"version 1\" and \"version 2\" unnecessarily confusing as monikers for the two different proposal. I wrote more about that in the appropriate spot of the document (see below).",
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "html_url": "https://github.com/bitcoin/bips/pull/1483#pullrequestreview-2847213995",
      "submitted_at": "2025-05-16T21:37:43Z",
      "state": "COMMENTED",
      "pull_request_url": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
    }
  ],
  "comments": [
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588415643",
      "pull_request_review_id": 2036951404,
      "id": 1588415643,
      "node_id": "PRRC_kwDOAN28mc5erUyb",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 26,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nVersion 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\r\n```",
      "created_at": "2024-05-02T21:21:55Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588415643",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588415643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 26,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588418927",
      "pull_request_review_id": 2036951404,
      "id": 1588418927,
      "node_id": "PRRC_kwDOAN28mc5erVlv",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 34,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\r\n```",
      "created_at": "2024-05-02T21:23:42Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588418927",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588418927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 34,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588420870",
      "pull_request_review_id": 2036951404,
      "id": 1588420870,
      "node_id": "PRRC_kwDOAN28mc5erWEG",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 42,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\r\n```",
      "created_at": "2024-05-02T21:24:57Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588420870",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588420870"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 42,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588421358",
      "pull_request_review_id": 2036951404,
      "id": 1588421358,
      "node_id": "PRRC_kwDOAN28mc5erWLu",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 48,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nPayjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\r\n```",
      "created_at": "2024-05-02T21:25:16Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588421358",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588421358"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 48,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588448910",
      "pull_request_review_id": 2036951404,
      "id": 1588448910,
      "node_id": "PRRC_kwDOAN28mc5erc6O",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 74,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "For some reason these Markdown lists aren't rendering properly on the GitHub file view.\r\n\r\n<img width=\"1010\" alt=\"Screenshot 2024-05-02 at 17 40 26\" src=\"https://github.com/bitcoin/bips/assets/144076611/3acaf8f2-e1a5-4d8e-a925-9d2d0c07a5a9\">\r\n\r\n```suggestion\r\n* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\r\n* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\r\n* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\r\n* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\r\n* The request is stored in the subdirectory.\r\n* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\r\n* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\r\n* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\r\n* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\r\n```",
      "created_at": "2024-05-02T21:41:19Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588448910",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588448910"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 66,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588449650",
      "pull_request_review_id": 2036951404,
      "id": 1588449650,
      "node_id": "PRRC_kwDOAN28mc5erdFy",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 82,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Include complete UTXO data.\r\n* Be signed.\r\n* Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\r\n* Set input and output Transaction Modifiable Flags to 1\r\n* Be broadcastable.\r\n```",
      "created_at": "2024-05-02T21:41:47Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588449650",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588449650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 78,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 82,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588450458",
      "pull_request_review_id": 2036951404,
      "id": 1588450458,
      "node_id": "PRRC_kwDOAN28mc5erdSa",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 87,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Include outputs unrelated to the sender-receiver transfer for batching purposes.\r\n* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\r\n```",
      "created_at": "2024-05-02T21:42:23Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588450458",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588450458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 86,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 87,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451222",
      "pull_request_review_id": 2036951404,
      "id": 1588451222,
      "node_id": "PRRC_kwDOAN28mc5erdeW",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 93,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Include all inputs from the Original PSBT.\r\n* Include all outputs which do not belong to the receiver from the Original PSBT.\r\n* Include complete UTXO data.\r\n```",
      "created_at": "2024-05-02T21:43:01Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451222",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451222"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 91,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 93,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451382",
      "pull_request_review_id": 2036951404,
      "id": 1588451382,
      "node_id": "PRRC_kwDOAN28mc5erdg2",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 97,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\r\n```",
      "created_at": "2024-05-02T21:43:08Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451382",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451382"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 97,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451790",
      "pull_request_review_id": 2036951404,
      "id": 1588451790,
      "node_id": "PRRC_kwDOAN28mc5erdnO",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 102,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\r\n* Decrease the absolute fee of the original transaction.\r\n```",
      "created_at": "2024-05-02T21:43:29Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588451790",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588451790"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 101,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 102,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588458495",
      "pull_request_review_id": 2036951404,
      "id": 1588458495,
      "node_id": "PRRC_kwDOAN28mc5erfP_",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. ",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 106,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This sentence seems malformed. Did you mean \"to *get* a subdirectory allocated\"?",
      "created_at": "2024-05-02T21:49:22Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588458495",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588458495"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468349",
      "pull_request_review_id": 2036951404,
      "id": 1588468349,
      "node_id": "PRRC_kwDOAN28mc5erhp9",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\r\n* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchronous execution of the protocol, like automated payment processors.\r\n```",
      "created_at": "2024-05-02T22:02:10Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588468349",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468349"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 150,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468857",
      "pull_request_review_id": 2036951404,
      "id": 1588468857,
      "node_id": "PRRC_kwDOAN28mc5erhx5",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\r\n```",
      "created_at": "2024-05-02T22:02:49Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588468857",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588468857"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588472886",
      "pull_request_review_id": 2036951404,
      "id": 1588472886,
      "node_id": "PRRC_kwDOAN28mc5eriw2",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 appication specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 185,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nHybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\r\n```",
      "created_at": "2024-05-02T22:08:44Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588472886",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588472886"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588476142",
      "pull_request_review_id": 2036951404,
      "id": 1588476142,
      "node_id": "PRRC_kwDOAN28mc5erjju",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. \n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+- <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+- <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+- <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 appication specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols|zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html|Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/|IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5|base64URL]] encoding as a subdirectory of the directory server in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html|Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305|algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439|RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki|BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy=== \n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may aditionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory with without OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 217,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nUnlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory with without OHTTP.\r\n```",
      "created_at": "2024-05-02T22:13:33Z",
      "updated_at": "2024-05-02T22:23:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588476142",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588476142"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 217,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588495570",
      "pull_request_review_id": 2037072195,
      "id": 1588495570,
      "node_id": "PRRC_kwDOAN28mc5eroTS",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 8,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I don't think this really replaces BIP78 since it's intended to be backwards-compatible?",
      "created_at": "2024-05-02T22:30:15Z",
      "updated_at": "2024-05-02T22:30:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588495570",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588495570"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 8,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588624994",
      "pull_request_review_id": 2037262652,
      "id": 1588624994,
      "node_id": "PRRC_kwDOAN28mc5esH5i",
      "diff_hunk": "@@ -0,0 +1,237 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Replaces: 78\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and reciever to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet develoepers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitition to be disabled. Output substitition is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substition while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronus networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+- The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+- Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+- The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+- The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+- The request is stored in the subdirectory.\n+- Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+- The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+- The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+- The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be signed.\n+- Exclude unnecessary fields such as global xpubs or keypath information. <!-- I believe PSBTv2 obviates this requirement -->\n+- Set input and output Transaction Modifiable Flags to 1\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+- Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the Original PSBT.\n+- Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+- Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to a subdirectory allocated. ",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 106,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "37f74d82266981bc71540cf8876d0162c2345219",
      "in_reply_to_id": 1588458495,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes.",
      "created_at": "2024-05-03T03:09:43Z",
      "updated_at": "2024-05-03T03:09:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1588624994",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1588624994"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590473525",
      "pull_request_review_id": 2039869772,
      "id": 1590473525,
      "node_id": "PRRC_kwDOAN28mc5ezLM1",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 47,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Grammar error?\r\n\r\n```suggestion\r\nPayjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\r\n```",
      "created_at": "2024-05-06T01:41:39Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590473525",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590473525"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590475825",
      "pull_request_review_id": 2039869772,
      "id": 1590475825,
      "node_id": "PRRC_kwDOAN28mc5ezLwx",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 179,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "At different times, \"directory\", \"directory server\", and \"payjoin directory\" (sometimes capitalized) are used to refer to the same thing. It may be useful to standardize the usage of this terminology throughout for clarity, or use an acronym where the term is defined.",
      "created_at": "2024-05-06T01:51:41Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590475825",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590475825"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590479014",
      "pull_request_review_id": 2039869772,
      "id": 1590479014,
      "node_id": "PRRC_kwDOAN28mc5ezMim",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 175,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Link leads to 404. I think this was meant to lead [here?](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist)\r\n```suggestion\r\nThe version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist|the BIP 78 sender checklist]] with the exception that it expects ALL UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\r\n```",
      "created_at": "2024-05-06T02:05:50Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590479014",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590479014"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590480647",
      "pull_request_review_id": 2039869772,
      "id": 1590480647,
      "node_id": "PRRC_kwDOAN28mc5ezM8H",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 107,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Where is \"receiver directory enrollment\" supposed to link to? [here?](https://github.com/bitcoin/bips/blob/7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0/bip-0077.mediawiki#enroll-messaging)",
      "created_at": "2024-05-06T02:12:37Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590480647",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590480647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482357",
      "pull_request_review_id": 2039869772,
      "id": 1590482357,
      "node_id": "PRRC_kwDOAN28mc5ezNW1",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Where is \"Original PSBT Request\" supposed to link to?",
      "created_at": "2024-05-06T02:19:28Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590482357",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482357"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482520",
      "pull_request_review_id": 2039869772,
      "id": 1590482520,
      "node_id": "PRRC_kwDOAN28mc5ezNZY",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nPayjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to facilitate PSBT mutation.\r\n```",
      "created_at": "2024-05-06T02:20:02Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590482520",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482520"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482781",
      "pull_request_review_id": 2039869772,
      "id": 1590482781,
      "node_id": "PRRC_kwDOAN28mc5ezNdd",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 143,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "We're referring to the `Original PSBT` here, yes?\r\n\r\n```suggestion\r\n* Decrease the absolute fee of the Original PSBT.\r\n```",
      "created_at": "2024-05-06T02:21:08Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590482781",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482781"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 143,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482843",
      "pull_request_review_id": 2039869772,
      "id": 1590482843,
      "node_id": "PRRC_kwDOAN28mc5ezNeb",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory on the directory server has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory server. This is a base64URL encoded public key of the directory server's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols|zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html|Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/|IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5|base64URL]] encoding as a subdirectory of the directory server in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html|Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305|algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439|RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki|BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory with without OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 263,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nUnlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\r\n```",
      "created_at": "2024-05-06T02:21:28Z",
      "updated_at": "2024-05-06T02:23:49Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1590482843",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1590482843"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 263,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591601267",
      "pull_request_review_id": 2041750450,
      "id": 1591601267,
      "node_id": "PRRC_kwDOAN28mc5e3ehz",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 175,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": 1590479014,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It turned out bar is used for links inside the repo and spaces should be used for external links. So I've adjusted them all accordingly. Nice catches.",
      "created_at": "2024-05-06T22:02:14Z",
      "updated_at": "2024-05-06T22:02:15Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591601267",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591601267"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 175,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591602470",
      "pull_request_review_id": 2041752231,
      "id": 1591602470,
      "node_id": "PRRC_kwDOAN28mc5e3e0m",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html|Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html|regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180|HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server|unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md|Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym|PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki|BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from a application layer authenticated encryption and relayed asynchronous networking, the version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki|BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration|OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki|BIP 370 PSBT v2]] format to fascilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to [[#directory-enrollment|receiver directory enrollment]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#original-psbt-request|Original PSBT Request]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078#receivers-original-psbt-checklist|the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original transaction.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01|OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist|the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078#senders-payjoin-proposal-checklist|the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 179,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "7e74783a7f9b346a8fe5313cb0cd4cbe67bb08a0",
      "in_reply_to_id": 1590475825,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've changed this to use either \"directory\" as shorthand or \" and only once \"payjoin directory server\" to introduce the fact that it is in fact a server. Un-capitalized to be consistent.\r\n\r\nIf you think this is still too varied, please let me know.",
      "created_at": "2024-05-06T22:04:03Z",
      "updated_at": "2024-05-06T22:04:33Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591602470",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591602470"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 179,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715112",
      "pull_request_review_id": 2041919837,
      "id": 1591715112,
      "node_id": "PRRC_kwDOAN28mc5e36Uo",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 112,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\r\n```",
      "created_at": "2024-05-07T01:42:32Z",
      "updated_at": "2024-05-07T01:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591715112",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 112,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715266",
      "pull_request_review_id": 2041919837,
      "id": 1591715266,
      "node_id": "PRRC_kwDOAN28mc5e36XC",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01 OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 165,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\r\n```",
      "created_at": "2024-05-07T01:42:54Z",
      "updated_at": "2024-05-07T01:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591715266",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715266"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 165,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715384",
      "pull_request_review_id": 2041919837,
      "id": 1591715384,
      "node_id": "PRRC_kwDOAN28mc5e36Y4",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code>requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01 OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static pubkey to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair `e` from which it derives a shared secret `es` with the receiver's key `s`. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by `/receive`. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by `/receive`.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 167,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nOnce an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair `e` from which it derives a shared secret `ee` with the sender's key `e` from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key `e`'s pubkey as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral pubkey, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\r\n```",
      "created_at": "2024-05-07T01:43:09Z",
      "updated_at": "2024-05-07T01:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591715384",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591715384"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591717712",
      "pull_request_review_id": 2041919837,
      "id": 1591717712,
      "node_id": "PRRC_kwDOAN28mc5e369Q",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 53,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint\r\n\r\nShould this say \"from the directory to receiver\"? IIUC the sender is not involved yet at this stage",
      "created_at": "2024-05-07T01:47:58Z",
      "updated_at": "2024-05-07T01:48:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591717712",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591717712"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591720176",
      "pull_request_review_id": 2041927205,
      "id": 1591720176,
      "node_id": "PRRC_kwDOAN28mc5e37jw",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 41,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The samourai links are dead :/",
      "created_at": "2024-05-07T01:53:11Z",
      "updated_at": "2024-05-07T01:54:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1591720176",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1591720176"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 41,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1593046275",
      "pull_request_review_id": 2044134742,
      "id": 1593046275,
      "node_id": "PRRC_kwDOAN28mc5e8_UD",
      "diff_hunk": "@@ -0,0 +1,283 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring them to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory and HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner.\" Breaking that common-input ownership assumption and others requires input from multiple owners. Cooperative transaction construction also increases transaction throughput by providing new opportunity for payment batching and transaction cut-through.\n+\n+Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism adaptable to a majority of wallet environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180 HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://code.samourai.io/wallet/ExtLibJ/-/blob/develop/doc/cahoots/STOWAWAY.md Stowaway]] is a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://samouraiwallet.com/paynym PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The next message from the directory to sender includes the enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 53,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "5ff5b7ae776ae8e9e160ced98dce1ab10e9019df",
      "in_reply_to_id": 1591717712,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes",
      "created_at": "2024-05-07T20:28:24Z",
      "updated_at": "2024-05-07T20:28:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1593046275",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1593046275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 53,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597767546",
      "pull_request_review_id": 2051527351,
      "id": 1597767546,
      "node_id": "PRRC_kwDOAN28mc5fO_96",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased the opportunity to batch payments and and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfuihjknhoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 27,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nVersion 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\r\n```",
      "created_at": "2024-05-13T00:55:15Z",
      "updated_at": "2024-05-13T00:56:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1597767546",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597767546"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597767650",
      "pull_request_review_id": 2051527351,
      "id": 1597767650,
      "node_id": "PRRC_kwDOAN28mc5fO__i",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased the opportunity to batch payments and and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 25,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\r\n```",
      "created_at": "2024-05-13T00:55:35Z",
      "updated_at": "2024-05-13T00:56:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1597767650",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597767650"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 25,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597768122",
      "pull_request_review_id": 2051527351,
      "id": 1597768122,
      "node_id": "PRRC_kwDOAN28mc5fPAG6",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased the opportunity to batch payments and and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfuihjknhoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Out of band, the receiver of the payment shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter with the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.\r\n```",
      "created_at": "2024-05-13T00:56:44Z",
      "updated_at": "2024-05-13T00:56:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1597768122",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1597768122"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608525206",
      "pull_request_review_id": 2068950086,
      "id": 1608525206,
      "node_id": "PRRC_kwDOAN28mc5f4CWW",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased the opportunity to batch payments and and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfuihjknhoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their pubkey to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the pubkey as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin pubkey and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment, shares a bitcoin URI with the sender including a <code>pj=</code> query parameter including the subdirectory as a base64URL encoded pubkey. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config should also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "bc3123e1dab1c5b08d6f934b11b4d741107ac386",
      "in_reply_to_id": 1597768122,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I rewrote the sentence and believe I fixed the core issue",
      "created_at": "2024-05-21T15:24:14Z",
      "updated_at": "2024-05-21T15:24:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1608525206",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1608525206"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610673352",
      "pull_request_review_id": 2072406420,
      "id": 1610673352,
      "node_id": "PRRC_kwDOAN28mc5gAOzI",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 15,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "(\"which\" is followed by a comma; \"that\" is not)\r\n\r\n```suggestion\r\nThis document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\r\n```",
      "created_at": "2024-05-22T21:27:47Z",
      "updated_at": "2024-05-23T00:23:56Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610673352",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610673352"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610677653",
      "pull_request_review_id": 2072406420,
      "id": 1610677653,
      "node_id": "PRRC_kwDOAN28mc5gAP2V",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 27,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nPayjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or a Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\r\n```",
      "created_at": "2024-05-22T21:33:13Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610677653",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610677653"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610707499",
      "pull_request_review_id": 2072406420,
      "id": 1610707499,
      "node_id": "PRRC_kwDOAN28mc5gAXIr",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 29,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\r\n```",
      "created_at": "2024-05-22T21:49:39Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610707499",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610707499"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 29,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610750410",
      "pull_request_review_id": 2072406420,
      "id": 1610750410,
      "node_id": "PRRC_kwDOAN28mc5gAhnK",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 33,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\r\n```\r\n\r\nAlso, perhaps mention/link to BIP 370 here when mentioning PSBT v2 for the first time in the document.",
      "created_at": "2024-05-22T22:41:27Z",
      "updated_at": "2024-05-23T00:24:47Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610750410",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610750410"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610760238",
      "pull_request_review_id": 2072406420,
      "id": 1610760238,
      "node_id": "PRRC_kwDOAN28mc5gAkAu",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 39,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\r\n```",
      "created_at": "2024-05-22T22:47:09Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610760238",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610760238"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 39,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610772621",
      "pull_request_review_id": 2072406420,
      "id": 1610772621,
      "node_id": "PRRC_kwDOAN28mc5gAnCN",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 43,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78 and this work may produce batched transactions with many outputs.\r\n```",
      "created_at": "2024-05-22T23:08:09Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610772621",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610772621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 43,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610778275",
      "pull_request_review_id": 2072406420,
      "id": 1610778275,
      "node_id": "PRRC_kwDOAN28mc5gAoaj",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Suggest prefixing the first mention of `ohttp` in this document with Oblivious HTTP. Some other suggestions:\r\n\r\n```suggestion\r\nRather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```",
      "created_at": "2024-05-22T23:17:27Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610778275",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610778275"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610778808",
      "pull_request_review_id": 2072406420,
      "id": 1610778808,
      "node_id": "PRRC_kwDOAN28mc5gAoi4",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 57,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consistent naming\r\n\r\n```suggestion\r\nThe sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\r\n```",
      "created_at": "2024-05-22T23:18:25Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610778808",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610778808"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 57,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610780974",
      "pull_request_review_id": 2072406420,
      "id": 1610780974,
      "node_id": "PRRC_kwDOAN28mc5gApEu",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"PSBT mutation\" -> it may be helpful to link here to the **PSBT Version 2** section below.",
      "created_at": "2024-05-22T23:22:48Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610780974",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610780974"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610781472",
      "pull_request_review_id": 2072406420,
      "id": 1610781472,
      "node_id": "PRRC_kwDOAN28mc5gApMg",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"It may go offline\" -> can you clarify what \"It\" is (the receiver)?\r\n\r\n```suggestion\r\n* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\r\n```",
      "created_at": "2024-05-22T23:23:49Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610781472",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610781472"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610785958",
      "pull_request_review_id": 2072406420,
      "id": 1610785958,
      "node_id": "PRRC_kwDOAN28mc5gAqSm",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Suggest adding the explanatory link for base64url encoding here, as it is the first time it is used, in addition to line 235 below: `The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64URL]] encoding` \r\n\r\nAlso (nit) suggest writing each instance of it as `base64url`, as done in RFC4648.\r\n\r\nA few further suggestions here:\r\n\r\n```suggestion\r\n* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is a base64url encoded public key. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url \"Key Config\" must also be provided.\r\n```\r\n",
      "created_at": "2024-05-22T23:32:54Z",
      "updated_at": "2024-05-23T00:25:42Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610785958",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610785958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610793401",
      "pull_request_review_id": 2072406420,
      "id": 1610793401,
      "node_id": "PRRC_kwDOAN28mc5gAsG5",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 114,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "- Maybe link `/receive` to the `Receive Messaging` section below.\r\n\r\n- \"which\" needs to be followed by a comma\r\n\r\n```suggestion\r\n* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\r\n```",
      "created_at": "2024-05-22T23:47:53Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610793401",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610793401"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 114,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610794770",
      "pull_request_review_id": 2072406420,
      "id": 1610794770,
      "node_id": "PRRC_kwDOAN28mc5gAscS",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 116,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Do both words \"it\" here mean the same thing (what)?\r\n",
      "created_at": "2024-05-22T23:50:35Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610794770",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610794770"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 116,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610795021",
      "pull_request_review_id": 2072406420,
      "id": 1610795021,
      "node_id": "PRRC_kwDOAN28mc5gAsgN",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 124,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Here and line 130, to be like the other entries.\r\n\r\n```suggestion\r\n* Set input and output Transaction Modifiable Flags to 1.\r\n```",
      "created_at": "2024-05-22T23:51:16Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610795021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610795021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 124,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610795246",
      "pull_request_review_id": 2072406420,
      "id": 1610795246,
      "node_id": "PRRC_kwDOAN28mc5gAsju",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this line be removed, per your comment?",
      "created_at": "2024-05-22T23:51:47Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610795246",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610795246"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610796092",
      "pull_request_review_id": 2072406420,
      "id": 1610796092,
      "node_id": "PRRC_kwDOAN28mc5gAsw8",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 149,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nReceivers must enroll with a directory to have a subdirectory allocated to them, as follows:\r\n```",
      "created_at": "2024-05-22T23:53:28Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610796092",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610796092"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 149,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610798059",
      "pull_request_review_id": 2072406420,
      "id": 1610798059,
      "node_id": "PRRC_kwDOAN28mc5gAtPr",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 155,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nOptionally, before returning the uri, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\r\n```",
      "created_at": "2024-05-22T23:57:10Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610798059",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610798059"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 155,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610798555",
      "pull_request_review_id": 2072406420,
      "id": 1610798555,
      "node_id": "PRRC_kwDOAN28mc5gAtXb",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 157,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIf a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\r\n```",
      "created_at": "2024-05-22T23:58:06Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610798555",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610798555"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 157,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610799771",
      "pull_request_review_id": 2072406420,
      "id": 1610799771,
      "node_id": "PRRC_kwDOAN28mc5gAtqb",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 161,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"it\" and \"It\" in this paragraph would be clearer if replaced by the actual subject.",
      "created_at": "2024-05-23T00:00:47Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610799771",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610799771"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610800050",
      "pull_request_review_id": 2072406420,
      "id": 1610800050,
      "node_id": "PRRC_kwDOAN28mc5gAtuy",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 163,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\r\n```",
      "created_at": "2024-05-23T00:01:23Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610800050",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610800050"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610800617",
      "pull_request_review_id": 2072406420,
      "id": 1610800617,
      "node_id": "PRRC_kwDOAN28mc5gAt3p",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 167,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received a request from the sender.\r\n```",
      "created_at": "2024-05-23T00:02:31Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610800617",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610800617"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 167,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610801119",
      "pull_request_review_id": 2072406420,
      "id": 1610801119,
      "node_id": "PRRC_kwDOAN28mc5gAt_f",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 169,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"it\" and \"It\" in this paragraph would be clearer if replaced by the actual subject.\r\n",
      "created_at": "2024-05-23T00:03:33Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610801119",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610801119"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 169,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610801227",
      "pull_request_review_id": 2072406420,
      "id": 1610801227,
      "node_id": "PRRC_kwDOAN28mc5gAuBL",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 173,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nOther than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\r\n```",
      "created_at": "2024-05-23T00:03:49Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610801227",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610801227"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 173,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610802175",
      "pull_request_review_id": 2072406420,
      "id": 1610802175,
      "node_id": "PRRC_kwDOAN28mc5gAuP_",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 177,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which caused issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\r\n```",
      "created_at": "2024-05-23T00:05:52Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610802175",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610802175"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 177,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803229",
      "pull_request_review_id": 2072406420,
      "id": 1610803229,
      "node_id": "PRRC_kwDOAN28mc5gAugd",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 181,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps replace the 3 \"it\" words in this paragraph with the actual subject.",
      "created_at": "2024-05-23T00:08:24Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610803229",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803229"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 181,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803375",
      "pull_request_review_id": 2072406420,
      "id": 1610803375,
      "node_id": "PRRC_kwDOAN28mc5gAuiv",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 185,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nEach receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\r\n```",
      "created_at": "2024-05-23T00:08:47Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610803375",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803375"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803976",
      "pull_request_review_id": 2072406420,
      "id": 1610803976,
      "node_id": "PRRC_kwDOAN28mc5gAusI",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64URL encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 198,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nWhen the payjoin sender posts the original PSBT to the receiver, the sender can optionally specify the following HTTP query string parameters:\r\n```",
      "created_at": "2024-05-23T00:09:57Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610803976",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610803976"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 198,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610804914",
      "pull_request_review_id": 2072406420,
      "id": 1610804914,
      "node_id": "PRRC_kwDOAN28mc5gAu6y",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64URL encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 210,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\r\n```",
      "created_at": "2024-05-23T00:12:00Z",
      "updated_at": "2024-05-23T00:23:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610804914",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610804914"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610805774",
      "pull_request_review_id": 2072406420,
      "id": 1610805774,
      "node_id": "PRRC_kwDOAN28mc5gAvIO",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64URL encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 214,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If I understand your meaning correctly; `protection from Oblivious HTTP` seems odd here, as the latter is providing protection and not causing the need for it.\r\n\r\n```suggestion\r\nHTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\r\n```",
      "created_at": "2024-05-23T00:13:48Z",
      "updated_at": "2024-05-23T00:28:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610805774",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610805774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 214,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610807554",
      "pull_request_review_id": 2072406420,
      "id": 1610807554,
      "node_id": "PRRC_kwDOAN28mc5gAvkC",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them as follows.\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64URL encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the uri the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code> after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails an error is returned.\n+\n+In the case a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is placed in an HTTP POST request body as binary before being encoded into BHTTP and encrypted according to the HPKE protocol. This Original PSBT BHTTP Request is then encrypted according to the HPKE, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>es</code> with the receiver's key <code>s</code>. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Original PSBT BHTTP Request and serialized ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, decrypts the payload, and forwards the BHTTP POST request to the receiver's internal subdirectory endpoint which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway then awaits a response from the receiver's subdirectory endpoint, encapsulates it, and responds according to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. It awaits an OHTTP response from the directory containing the BHTTP request from the sender with status code 200 OK, or sends a new OHTTP request after receiving 202 ACCEPTED notifying the receiver that the directory has not yet received an request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the list, the receiver may respond with a Payjoin PSBT. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2 the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]] with the exception that it expects ALL utxo data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many headaches since it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. It stores Payjoin payloads to support asynchronous communication. It must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. It may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has a buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64URL encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, it can optionally specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints which may be vulnerable to probing attacks. It can cover this tradeoff by demanding  Original PSBT from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URI can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP is eligible to enjoy metadata protection from Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with a specific IP addresses by intersection.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 218,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Either \"with specific IP addresses\", or \"with a specific IP address\"\r\n\r\n```suggestion\r\nOHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\r\n```",
      "created_at": "2024-05-23T00:17:38Z",
      "updated_at": "2024-05-23T00:26:50Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610807554",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610807554"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 218,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610970913",
      "pull_request_review_id": 2072824280,
      "id": 1610970913,
      "node_id": "PRRC_kwDOAN28mc5gBXch",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 15,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": 1610673352,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "TIL about restrictive vs non-restrictive clauses",
      "created_at": "2024-05-23T04:51:20Z",
      "updated_at": "2024-05-23T04:51:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1610970913",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1610970913"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1623630215",
      "pull_request_review_id": 2092587393,
      "id": 1623630215,
      "node_id": "PRRC_kwDOAN28mc5gxqGH",
      "diff_hunk": "@@ -0,0 +1,285 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality including payment output substitution without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients which communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Version 1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism viable to implement in a majority of bitcoin software environments. This is realized as a simple protocol built on bitcoin URI requests, web standards, common crypto, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78 while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to PSBT version 2 to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. A Original PSBT timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism which depends on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] Payment codes directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, they start a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include their public key to be enrolled as a subdirectory identifier. The response message from the directory to receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, they await a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin uri including the directory endpoint in the <code>pj=</code> query parameter and a new <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the recipient by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin v2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT v2]] format to facilitate PSBT mutation.\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The recipient sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. It may go offline and replay enrollment to come back online.\n+* Out of band, the receiver of the payment shares a bitcoin URI with the sender including a <code>pj=</code> query parameter where the subdirectory is a base64URL encoded public key. To support version 1 senders the directory acts as an unsecured payjoin server so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64URL Key Config must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends <code>/receive</code> requests to await updates from the subdirectory. The receiver decrypts and authenticates the response which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. It updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, it relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 123,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "d7ffad81e605e958dcf7c2ae1f4c797a8631f146",
      "in_reply_to_id": 1610795246,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Because [PSBTv2 support is not yet merged in even bitcoin core](https://github.com/bitcoin/bitcoin/pull/21283), I plan to revert this BIP to using PSBTv0 in order to be compatible with wallets of today, as is done in the reference implementation, so I'll leave the comment until either the reference implementation uses PSBTv2 or the entire doc is reverted to PSBTv0",
      "created_at": "2024-06-02T18:23:12Z",
      "updated_at": "2024-06-02T18:24:21Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1623630215",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1623630215"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 123,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645140509",
      "pull_request_review_id": 2126619359,
      "id": 1645140509,
      "node_id": "PRRC_kwDOAN28mc5iDtod",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 161,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string is encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\r\n```\r\n\r\n- missing verb? (i.e. \"is\")\r\n\r\n- \"on a new line\" applies to the quary param only? If yes, consider `s/base64/base64,`",
      "created_at": "2024-06-18T21:53:25Z",
      "updated_at": "2024-06-18T22:15:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645140509",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645140509"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 161,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645143237",
      "pull_request_review_id": 2126619359,
      "id": 1645143237,
      "node_id": "PRRC_kwDOAN28mc5iDuTF",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 168,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe receiver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\r\n```",
      "created_at": "2024-06-18T21:57:07Z",
      "updated_at": "2024-06-18T22:15:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645143237",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645143237"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645146302",
      "pull_request_review_id": 2126619359,
      "id": 1645146302,
      "node_id": "PRRC_kwDOAN28mc5iDvC-",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 163,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe directory's OHTTP Gateway decapsulates the OHTTP request and handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway awaits a request from the receiver to the subdirectory endpoint and responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\r\n```\r\n\r\n(Not sure what the latest version of this sentence intends to say; it is a bit confusing, so my suggested edits are likely to be incorrect.)",
      "created_at": "2024-06-18T22:00:28Z",
      "updated_at": "2024-06-18T22:22:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645146302",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645146302"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 163,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645151610",
      "pull_request_review_id": 2126619359,
      "id": 1645151610,
      "node_id": "PRRC_kwDOAN28mc5iDwV6",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 178,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\r\n```",
      "created_at": "2024-06-18T22:08:17Z",
      "updated_at": "2024-06-18T22:15:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645151610",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645151610"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 178,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645192877",
      "pull_request_review_id": 2126694296,
      "id": 1645192877,
      "node_id": "PRRC_kwDOAN28mc5iD6at",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 201,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Suggest writing all 3 params (2 receiver, 1 sender) either followed by a colon, or by no colon.",
      "created_at": "2024-06-18T22:53:47Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645192877",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645192877"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 201,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645196253",
      "pull_request_review_id": 2126694296,
      "id": 1645196253,
      "node_id": "PRRC_kwDOAN28mc5iD7Pd",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 209,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Suggestion: link here to where BIP 78 recommends this.",
      "created_at": "2024-06-18T23:00:00Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645196253",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645196253"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645197148",
      "pull_request_review_id": 2126694296,
      "id": 1645197148,
      "node_id": "PRRC_kwDOAN28mc5iD7dc",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 211,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"I also like to for timeout\" -> unclear",
      "created_at": "2024-06-18T23:01:34Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645197148",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645197148"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 211,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645199123",
      "pull_request_review_id": 2126694296,
      "id": 1645199123,
      "node_id": "PRRC_kwDOAN28mc5iD78T",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 236,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only [be valid? be used?] for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\r\n```\r\n\r\n- \"Static keys shared in URIs must only for a single session\" -> missing verb\r\n\r\n- (no strong opinion about \"BIP21\", but you wrote \"BIP 21\" with a space throughout this draft)",
      "created_at": "2024-06-18T23:05:06Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645199123",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645199123"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645201454",
      "pull_request_review_id": 2126694296,
      "id": 1645201454,
      "node_id": "PRRC_kwDOAN28mc5iD8gu",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 234,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nHybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\r\n```",
      "created_at": "2024-06-18T23:09:20Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645201454",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645201454"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 234,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645202278",
      "pull_request_review_id": 2126694296,
      "id": 1645202278,
      "node_id": "PRRC_kwDOAN28mc5iD8tm",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 244,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThis authenticated encryption with additional data (AEAD) [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented in Bitcoin Core [optionally could link here to https://github.com/bitcoin/bitcoin/pull/15649] as specified in [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\r\n```",
      "created_at": "2024-06-18T23:10:54Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645202278",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645202278"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 244,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645205179",
      "pull_request_review_id": 2126694296,
      "id": 1645205179,
      "node_id": "PRRC_kwDOAN28mc5iD9a7",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 252,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a workaround where a new PSBT is created by the receiver instead of mutating it. This can cause strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\r\n```",
      "created_at": "2024-06-18T23:16:22Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645205179",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645205179"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 252,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645206007",
      "pull_request_review_id": 2126694296,
      "id": 1645206007,
      "node_id": "PRRC_kwDOAN28mc5iD9n3",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 256,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Perhaps explain further how/why these attacks are possible.\r\n\r\n```suggestion\r\nSince directories store arbitrary encrypted payloads, they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a subdirectory to receivers.\r\n```",
      "created_at": "2024-06-18T23:17:54Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645206007",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645206007"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 256,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645207872",
      "pull_request_review_id": 2126694296,
      "id": 1645207872,
      "node_id": "PRRC_kwDOAN28mc5iD-FA",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 260,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think this paragraph could be clearer/better written.\r\n\r\n```suggestion\r\nSince the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\r\n```",
      "created_at": "2024-06-18T23:21:30Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645207872",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645207872"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 260,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645208130",
      "pull_request_review_id": 2126694296,
      "id": 1645208130,
      "node_id": "PRRC_kwDOAN28mc5iD-JC",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 264,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nOblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\r\n```",
      "created_at": "2024-06-18T23:22:03Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645208130",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645208130"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645209350",
      "pull_request_review_id": 2126694296,
      "id": 1645209350,
      "node_id": "PRRC_kwDOAN28mc5iD-cG",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 266,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nUnlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\r\n```",
      "created_at": "2024-06-18T23:23:29Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645209350",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645209350"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 266,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645209930",
      "pull_request_review_id": 2126694296,
      "id": 1645209930,
      "node_id": "PRRC_kwDOAN28mc5iD-lK",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 270,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\r\n```",
      "created_at": "2024-06-18T23:24:32Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645209930",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645209930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 270,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645212021",
      "pull_request_review_id": 2126694296,
      "id": 1645212021,
      "node_id": "PRRC_kwDOAN28mc5iD_F1",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. ",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 272,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nSenders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel payjoin. \r\n```\r\n\r\nWhat must occur if `req-pj` is advertised by the receiver, but the sender doesn't support payjoin? Perhaps confirm here if it \"MUST consider the entire URI invalid\" per BIP 21, if that is the case.",
      "created_at": "2024-06-18T23:27:51Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645212021",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645212021"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645217985",
      "pull_request_review_id": 2126694296,
      "id": 1645217985,
      "node_id": "PRRC_kwDOAN28mc5iEAjB",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 274,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nReceivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution (since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks, otherwise). The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds.\r\n```\r\n- break up the long run-on sentence\r\n- \"to respond to the sender's request\" at the end seems a little redundant.",
      "created_at": "2024-06-18T23:39:42Z",
      "updated_at": "2024-06-19T00:00:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645217985",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645217985"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 274,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645218766",
      "pull_request_review_id": 2126694296,
      "id": 1645218766,
      "node_id": "PRRC_kwDOAN28mc5iEAvO",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 278,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nA production reference implementation client can be found at [https://crates.io/crates/payjoin-cli](https://crates.io/crates/payjoin-cli). Source code for the clients, the payjoin directory, and the development kit may be found here: [https://github.com/payjoin/rust-payjoin](https://github.com/payjoin/rust-payjoin). Source code for an Oblivous HTTP relay implementation may be found here [https://github.com/payjoin/ohttp-relay](https://github.com/payjoin/ohttp-relay). The reference implementation implements an asynchronous payment flow using HTTP and PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:\r\n```\r\n\r\nThere may be a more idiomatic way to do it, but it seems best to remove the trailing `.` from each link so that they function.\r\n\r\nIdem for the two links afterward and the other links in this BIP that otherwise would contain a trailing period.\r\n",
      "created_at": "2024-06-18T23:41:15Z",
      "updated_at": "2024-06-18T23:55:45Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645218766",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645218766"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645228301",
      "pull_request_review_id": 2126694296,
      "id": 1645228301,
      "node_id": "PRRC_kwDOAN28mc5iEDEN",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:\n+\n+A payjoin directory is run by the Payjoin Dev Kit team on https://payjo.in.\n+\n+Independent Oblivious HTTP relays are run by Obscura VPN at https://ohttp-relay.obscuravpn.io/payjoin and by BOB Spaces at https://pj.bobspacebkk.com.\n+\n+==Acknowledgements==\n+\n+Thank you to  OpenSats for funding this pursuit, to Human Rights Foundation for putting a bounty on it and funding invaluable BOB Space support, who I owe a thank you to as well. Thank you to Ethan Heilman, Nicolas Dorier, Kukks, nopara73, Kristaps Kaupe, Kixunil, /dev/fd0/, Craig Raw, Mike Schmidt, Murch, DÃ¡vid MolnÃ¡r, Lucas Ontiviero, Waxwing, Christopher Allen, Symphonic, Steve Meyers, Sjors Provost, Ava Chow, jbesraa, and countless plebs for feedback that has turned this idea from concept into draft, to Mike Jarmuz for suggesting that I write a BIP, and to Satsie for writing the \"All About BIPS\" zine which I've referenced a number of times in the drafting process. Thanks to Armin Sabouri, Ron Stoner, and Johns Beharry for hacking on the first iOS Payjoin receiver and uncovering the problem that this solves in the first place.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 286,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThank you to OpenSats for funding this pursuit, to the Human Rights Foundation for putting a bounty on it and funding invaluable BOB Space support, who I owe a thank you to as well. Thank you to Ethan Heilman, Nicolas Dorier, Kukks, nopara73, Kristaps Kaupe, Kixunil, /dev/fd0/, Craig Raw, Mike Schmidt, Murch, DÃ¡vid MolnÃ¡r, Lucas Ontiviero, Waxwing, Christopher Allen, Symphonic, Steve Meyers, Sjors Provost, Ava Chow, jbesraa, and countless plebs for feedback that has turned this idea from concept into draft, to Mike Jarmuz for suggesting that I write a BIP, and to Satsie (Stacy Waleyko) for writing the \"All About BIPS\" zine which I've referenced a number of times in the drafting process. Thanks to Armin Sabouri, Ron Stoner, and Johns Beharry for hacking on the first iOS Payjoin receiver and uncovering the problem that this solves in the first place.\r\n```\r\n\r\nI don't know if people like Murch, Waxwing, and Stacie would prefer to have their real names written in addition to their nickname, e.g. Mark \"Murch\" Erhardt, Waxwing (Adam Gibson), Satsie (Stacie Waleyko), etc.",
      "created_at": "2024-06-18T23:51:13Z",
      "updated_at": "2024-06-18T23:58:40Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1645228301",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1645228301"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1661026239",
      "pull_request_review_id": 2151346139,
      "id": 1661026239,
      "node_id": "PRRC_kwDOAN28mc5jAT-_",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:\n+\n+A payjoin directory is run by the Payjoin Dev Kit team on https://payjo.in.\n+\n+Independent Oblivious HTTP relays are run by Obscura VPN at https://ohttp-relay.obscuravpn.io/payjoin and by BOB Spaces at https://pj.bobspacebkk.com.\n+\n+==Acknowledgements==\n+\n+Thank you to  OpenSats for funding this pursuit, to Human Rights Foundation for putting a bounty on it and funding invaluable BOB Space support, who I owe a thank you to as well. Thank you to Ethan Heilman, Nicolas Dorier, Kukks, nopara73, Kristaps Kaupe, Kixunil, /dev/fd0/, Craig Raw, Mike Schmidt, Murch, DÃ¡vid MolnÃ¡r, Lucas Ontiviero, Waxwing, Christopher Allen, Symphonic, Steve Meyers, Sjors Provost, Ava Chow, jbesraa, and countless plebs for feedback that has turned this idea from concept into draft, to Mike Jarmuz for suggesting that I write a BIP, and to Satsie for writing the \"All About BIPS\" zine which I've referenced a number of times in the drafting process. Thanks to Armin Sabouri, Ron Stoner, and Johns Beharry for hacking on the first iOS Payjoin receiver and uncovering the problem that this solves in the first place.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 286,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1645228301,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just Murch is fine with me.",
      "created_at": "2024-07-01T13:05:52Z",
      "updated_at": "2024-07-01T13:05:52Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1661026239",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1661026239"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1664980223",
      "pull_request_review_id": 2157755256,
      "id": 1664980223,
      "node_id": "PRRC_kwDOAN28mc5jPZT_",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:\n+\n+A payjoin directory is run by the Payjoin Dev Kit team on https://payjo.in.\n+\n+Independent Oblivious HTTP relays are run by Obscura VPN at https://ohttp-relay.obscuravpn.io/payjoin and by BOB Spaces at https://pj.bobspacebkk.com.\n+\n+==Acknowledgements==\n+\n+Thank you to  OpenSats for funding this pursuit, to Human Rights Foundation for putting a bounty on it and funding invaluable BOB Space support, who I owe a thank you to as well. Thank you to Ethan Heilman, Nicolas Dorier, Kukks, nopara73, Kristaps Kaupe, Kixunil, /dev/fd0/, Craig Raw, Mike Schmidt, Murch, DÃ¡vid MolnÃ¡r, Lucas Ontiviero, Waxwing, Christopher Allen, Symphonic, Steve Meyers, Sjors Provost, Ava Chow, jbesraa, and countless plebs for feedback that has turned this idea from concept into draft, to Mike Jarmuz for suggesting that I write a BIP, and to Satsie for writing the \"All About BIPS\" zine which I've referenced a number of times in the drafting process. Thanks to Armin Sabouri, Ron Stoner, and Johns Beharry for hacking on the first iOS Payjoin receiver and uncovering the problem that this solves in the first place.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 286,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1645228301,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "EDIT: after reading the rest of the paragraph, I like the consistency and am fine staying as \"Satsie\" :)",
      "created_at": "2024-07-04T01:57:32Z",
      "updated_at": "2024-07-04T20:14:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1664980223",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1664980223"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 286,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665832890",
      "pull_request_review_id": 2159134367,
      "id": 1665832890,
      "node_id": "PRRC_kwDOAN28mc5jSpe6",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 27,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: there is a mix of \"V1\" and \"version 1\" phrasing used, specifically in this paragraph, but I have seen it in other parts of the doc. \"version 1\" seems to be favored. This also applies to a few instances of \"V2\"/\"version 2\".",
      "created_at": "2024-07-04T15:07:55Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665832890",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665832890"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665961643",
      "pull_request_review_id": 2159134367,
      "id": 1665961643,
      "node_id": "PRRC_kwDOAN28mc5jTI6r",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nRather than hosting a public server, the receiver starts an HTTP client session with the directory server to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```\r\n\r\nIt might be helpful to specify a bit more about the session, since that can be a pretty general term. I'm not sure if my suggestion here is the best, but you get the idea.",
      "created_at": "2024-07-04T17:45:53Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665961643",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665961643"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665964747",
      "pull_request_review_id": 2159134367,
      "id": 1665964747,
      "node_id": "PRRC_kwDOAN28mc5jTJrL",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nRather than hosting a public server, the receiver starts a session to receive messages and allocate a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```\r\n\r\nThis suggestion is kind of related to my previous comment. I read it as you start a session because you plan to receive messages, as well as allocate your subdirectory. However, when I initially read this sentence I questioned if the subdirectory was something local because I thought allocating the subdirectory was a separate, unrelated action from receiving messages. Since the session is to the directory server (specifying that is what my previous comment suggests), changing \"allocates\" to \"allocate\" (so that it matches the tense of \"receive\") allows the sentence to imply that the subdirectory is indeed part of the directory server.",
      "created_at": "2024-07-04T17:51:27Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665964747",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665964747"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665980530",
      "pull_request_review_id": 2159134367,
      "id": 1665980530,
      "node_id": "PRRC_kwDOAN28mc5jTNhy",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This part reads a little strange. Would either of these suggestions be an improvement?\r\n\r\n```suggestion\r\nRather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as the subdirectory identifier. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```\r\n\r\n```suggestion\r\nRather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key identifying the subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\r\n```",
      "created_at": "2024-07-04T18:05:37Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665980530",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665980530"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665983993",
      "pull_request_review_id": 2159134367,
      "id": 1665983993,
      "node_id": "PRRC_kwDOAN28mc5jTOX5",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Want to make sure I'm reading this correctly, this is when the requester starts polling for the Original PSBT, right? Before I saw the key down below for the line types, I got confused that the sender had not yet posted the original PSBT",
      "created_at": "2024-07-04T18:11:50Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665983993",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665983993"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665989802",
      "pull_request_review_id": 2159134367,
      "id": 1665989802,
      "node_id": "PRRC_kwDOAN28mc5jTPyq",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit : Another example of mixed \"V2\" / \"version 2\" usage. I personally lean towards V2, but it I think this doc favors \"version 2\". ",
      "created_at": "2024-07-04T18:24:15Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665989802",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665989802"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665991932",
      "pull_request_review_id": 2159134367,
      "id": 1665991932,
      "node_id": "PRRC_kwDOAN28mc5jTQT8",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 219,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nOHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\r\n```\r\n\r\nnit: moving the word \"from\" allows the two phrases \"from one another\" and \"from the directory\" to match/be consistent with the usage of \"from\"",
      "created_at": "2024-07-04T18:28:41Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665991932",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665991932"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665998609",
      "pull_request_review_id": 2159134367,
      "id": 1665998609,
      "node_id": "PRRC_kwDOAN28mc5jTR8R",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Re: the last sentence, so enrollment is idempotent, right? Not sure if adding that that term would be helpful or confusing to readers :smile: ",
      "created_at": "2024-07-04T18:43:08Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665998609",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665998609"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665999486",
      "pull_request_review_id": 2159134367,
      "id": 1665999486,
      "node_id": "PRRC_kwDOAN28mc5jTSJ-",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nPayjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\r\n```\r\n\r\nnit: Do you want \"url\" to be lowercase or all caps? This is the only occurence of it by itself (as opposed to \"base64url\"). At first I wasn't going to mention anything but I saw that \"URI\" was capitalized throughout the doc.",
      "created_at": "2024-07-04T18:45:14Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1665999486",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1665999486"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666011281",
      "pull_request_review_id": 2159134367,
      "id": 1666011281,
      "node_id": "PRRC_kwDOAN28mc5jTVCR",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is the \"session public key\" the same as the public key being referred to in the previous bullet point? (Line 109)",
      "created_at": "2024-07-04T19:06:52Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666011281",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666011281"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666017032",
      "pull_request_review_id": 2159134367,
      "id": 1666017032,
      "node_id": "PRRC_kwDOAN28mc5jTWcI",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Does the sender poll for the Payjoin PSBT?",
      "created_at": "2024-07-04T19:19:45Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666017032",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666017032"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666020327",
      "pull_request_review_id": 2159134367,
      "id": 1666020327,
      "node_id": "PRRC_kwDOAN28mc5jTXPn",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 174,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "nit: the rest of the doc refers to it as \"PSBT version 2\" (and not PSBTv2)\r\n\r\nI saw your comment about changing this BIP to use \"PSBTv0\", is that what it is called? Or is it PSBT version 1?",
      "created_at": "2024-07-04T19:26:05Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666020327",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666020327"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666023054",
      "pull_request_review_id": 2159134367,
      "id": 1666023054,
      "node_id": "PRRC_kwDOAN28mc5jTX6O",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 182,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What are the rules for capitalizing \"Payjoin\" and leaving it lowercase? One thing I noticed is \"Payjoin PSBT\" is capitalized since it's treated like proper noun so by that reasoning I understand why \"Payjoin payloads\" is capitalized. Not sure about something like \"Payjoin version 2\" since it is lowercase in other parts of this doc.",
      "created_at": "2024-07-04T19:32:17Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666023054",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666023054"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666025477",
      "pull_request_review_id": 2159134367,
      "id": 1666025477,
      "node_id": "PRRC_kwDOAN28mc5jTYgF",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 209,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are the \"request PSBTs\" the same as Original PSBTs? If so, I prefer the \"Orignial PSBT\" terminology since it is the same term that is used in the sequence diagram.",
      "created_at": "2024-07-04T19:38:04Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666025477",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666025477"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 209,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666028072",
      "pull_request_review_id": 2159134367,
      "id": 1666028072,
      "node_id": "PRRC_kwDOAN28mc5jTZIo",
      "diff_hunk": "",
      "path": "bip-0077/oblivious-http-sequence.png",
      "position": 1,
      "original_position": 1,
      "commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How easy is it for you to update this diagram? If it's within reason I'd consider doing the following:\r\n\r\n- Use an italic, bold, or underline font for \"Relay Request\", \"Gateway Request\", \"Gateway Response\", and \"Relay Response\" so that it is clear these are titles of the messages.\r\n\r\nFor consistency,\r\n- Add \"TO: Relay IP\" to the Gateway Response\r\n- Add \"TO: Client IP\" to the Relay Response",
      "created_at": "2024-07-04T19:43:00Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666028072",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666028072"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 1,
      "original_line": 1,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666029471",
      "pull_request_review_id": 2159134367,
      "id": 1666029471,
      "node_id": "PRRC_kwDOAN28mc5jTZef",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 230,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is \"transaction PSBTs\" redundant? Or does \"transaction\" not refer to a Bitcoin transaction?",
      "created_at": "2024-07-04T19:46:30Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666029471",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666029471"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666029695",
      "pull_request_review_id": 2159134367,
      "id": 1666029695,
      "node_id": "PRRC_kwDOAN28mc5jTZh_",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 230,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Are you able to provide a link to where the 7168 number comes from?",
      "created_at": "2024-07-04T19:47:02Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666029695",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666029695"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 230,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666035584",
      "pull_request_review_id": 2159134367,
      "id": 1666035584,
      "node_id": "PRRC_kwDOAN28mc5jTa-A",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 55,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "After reading the full BIP I've come to understand that the public key is specific to a session. It might be worth mentioning this up here at the top of the doc so that later when \"public key\" and \"session public key\" are used, there isn't a question on if these are separate things.",
      "created_at": "2024-07-04T19:59:33Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666035584",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666035584"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 55,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666036895",
      "pull_request_review_id": 2159134367,
      "id": 1666036895,
      "node_id": "PRRC_kwDOAN28mc5jTbSf",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 258,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nSince we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\r\n```",
      "created_at": "2024-07-04T20:02:56Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666036895",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666036895"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666037862",
      "pull_request_review_id": 2159134367,
      "id": 1666037862,
      "node_id": "PRRC_kwDOAN28mc5jTbhm",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 264,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": null,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nOblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\r\n```\r\n\r\nI'm only 80% sure of this grammar correction :laughing: ",
      "created_at": "2024-07-04T20:05:17Z",
      "updated_at": "2024-07-04T20:18:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1666037862",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1666037862"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 264,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667390307",
      "pull_request_review_id": 2161551250,
      "id": 1667390307,
      "node_id": "PRRC_kwDOAN28mc5jYltj",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each receiver subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===BIP 21 receiver parameters===\n+\n+A major benefit of BIP 78 payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+This proposal defines the following new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters:\n+\n+* <code>ohttp</code> represents the OHTTP Key Configuration of the directory. This is a base64url encoded public key of the directory's OHTTP Gateway. This parameter is required for version 2 payjoin URIs.\n+* <code>exp</code>: represents a request expiration after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+===Optional sender parameters===\n+\n+When the payjoin sender posts the original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec recommends broadcasting request PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>. <!-- I also like to for timeout, but it's hard to coordinate in an asynchronous way -->\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses from both one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All cyphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most transaction PSBTs without exceeding the 8KB limit of many HTTP/1.1 web servers.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the payjoin v2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP21 URI. Static keys shared in URIs must only for a single session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a payjoin directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD seems to be making its way into bitcoin by way of [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===PSBT Version 2===\n+\n+The PSBT version 1 protocol was replaced because it was not designed to have inputs and outputs be mutated. Payjoin mutates the PSBT, so BIP 78 uses a hack where a new PSBT is created by the receiver instead of mutating it. This can cause some strange behaviors from signers who don't know where to look to find the scripts that they are accountable for. PSBT version 2 makes mutating a PSBT's inputs and outputs trivial. It also eliminates the transaction finalization step. Receivers who do not understand PSBT version 1 may choose to reject Payjoin version 1 requests and only support PSBT version 2.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. Directory operators may impose an authentication requirement before they allocate a subdirectory to receivers to mitigate such attacks.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Since the Original PSBT is valid, even where <code>exp=</code> is specified, the receiver may broadcast it and lose out on savings from payment batching and  privacy protection from payjoin structure at any time. Though unfortunate, this failure mode is the typical bitcoin transaction flow today anyhow.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP address of both sender and receiver from the directory. This requires an additional key configuration to be shared in the bip21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory, not their peers. Directories may additionally be made available via Tor hidden service to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP21's URI Scheme]].\n+\n+Senders not supporting payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. <code>req-pj=</code> may be used to compel payjoin. \n+\n+Receivers may choose to support version 1 payloads. Version 2 payjoin URIs should enable <code>pjos=0</code> so that these v1 senders disable output substitution since the v1 messages are neither encrypted nor authenticated, putting them at risk for man-in-the-middle attacks otherwise. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Payjoin PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds to respond to the sender's request.\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at https://crates.io/crates/payjoin-cli. Source code for the clients, the payjoin directory, and development kit may be found here: https://github.com/payjoin/rust-payjoin. Source code for an Oblivous HTTP relay implementation may be found here https://github.com/payjoin/ohttp-relay. The reference implementation implements an asynchronous payment flow using HTTP using PSBTv1 with encryption and Oblivious HTTP and may be configured to the following independent production relays:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 278,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1645218766,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Huh, I thought they were working in the previewer. I think the idiomatic way to do it is to surround links with double square brackets `[[ ]]` so I'll do that.",
      "created_at": "2024-07-06T16:30:34Z",
      "updated_at": "2024-07-06T16:30:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667390307",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667390307"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 278,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402201",
      "pull_request_review_id": 2161560962,
      "id": 1667402201,
      "node_id": "PRRC_kwDOAN28mc5jYonZ",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1665983993,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yes indeed. If you think there might be a better way to express such a diagram I am open to suggestions.\r\n\r\nI can put the key on the top to help.",
      "created_at": "2024-07-06T18:11:51Z",
      "updated_at": "2024-07-06T18:11:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402201",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402201"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402391",
      "pull_request_review_id": 2161561150,
      "id": 1667402391,
      "node_id": "PRRC_kwDOAN28mc5jYoqX",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 105,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1665989802,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The document is titled PSBT Version 2 so I'll put \"BIP 370: PSBT Version 2 (PSBTv2)\" to enable the latter usage elsewhere",
      "created_at": "2024-07-06T18:13:46Z",
      "updated_at": "2024-07-06T18:13:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402391",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402391"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 105,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402566",
      "pull_request_review_id": 2161561359,
      "id": 1667402566,
      "node_id": "PRRC_kwDOAN28mc5jYotG",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 110,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666011281,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "yes, I'll clarify.",
      "created_at": "2024-07-06T18:16:02Z",
      "updated_at": "2024-07-06T18:16:02Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402566",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402566"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 110,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402644",
      "pull_request_review_id": 2161561418,
      "id": 1667402644,
      "node_id": "PRRC_kwDOAN28mc5jYouU",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666017032,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It does poll for the Payjoin PSBT by sending a payload containing the Original PSBT",
      "created_at": "2024-07-06T18:16:38Z",
      "updated_at": "2024-07-06T18:16:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402644",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402644"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402721",
      "pull_request_review_id": 2161561491,
      "id": 1667402721,
      "node_id": "PRRC_kwDOAN28mc5jYovh",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 174,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666020327,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "PSBTv0 == BIP 174. There is no version 1 because an upgrade from version 0 to version 1 was considered too confusing.",
      "created_at": "2024-07-06T18:17:27Z",
      "updated_at": "2024-07-06T18:17:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667402721",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667402721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 174,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667405025",
      "pull_request_review_id": 2161563457,
      "id": 1667405025,
      "node_id": "PRRC_kwDOAN28mc5jYpTh",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin V2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370 PSBT V2]] format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their payjoin public key and optional authentication credential according to the [[#enroll-messaging|enroll messaging]] protocol to receive a subdirectory allocation. The receiver may go offline and replay enrollment to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the original PSBT.\n+\n+====Enroll Messaging====\n+\n+Receivers must enroll with a directory to have a subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP gateway key configuration via an authenticated bootstrap mechanism before it can enroll to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory url as response. Enrollment may be replayed in case the receiver goes offline and should result in the same response.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The version 2 Original PSBT is serialized in base64 followed by the query parameter string on a new line. This plaintext string encrypted according to the HPKE using a shared secret derived from a newly generated session keypair public key combined with the receiver's subdirectory session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+The directory's OHTTP Gateway decapsulates the OHTTP request, handles the POST request at the receiver's internal subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's awaits a request from the receiver's to the subdirectory endpoint, encapsulates to responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by <code>/receive</code>. This request is encapsulated in OHTTP. \n+The recver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, or sends a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair <code>e</code> from which it derives a shared secret <code>ee</code> with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a POST message to the subdirectory followed by <code>/receive</code>.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+Other than requiring PSBTv2, the receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]]\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The payjoin directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without HTTP to enrolled subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 182,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666023054,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'm making anywhere Payjoin x is used as a proper noun capitalized, and anywhere it serves as a single transaction or adjective or verb lowercase.",
      "created_at": "2024-07-06T18:28:36Z",
      "updated_at": "2024-07-06T18:28:36Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667405025",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667405025"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 182,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667409921",
      "pull_request_review_id": 2161572971,
      "id": 1667409921,
      "node_id": "PRRC_kwDOAN28mc5jYqgB",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 78,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1665983993,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Ok cool. No I don't have any suggestions :laughing:. If this were something richer than an ASCII diagram I'd suggest making the two types of lines more obviously different but I'm not sure if there's much you can do about it in this format. \r\n\r\nI think it's normal/fine to leave the key at the bottom.",
      "created_at": "2024-07-06T18:58:34Z",
      "updated_at": "2024-07-06T18:58:34Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667409921",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667409921"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 78,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667410260",
      "pull_request_review_id": 2161573424,
      "id": 1667410260,
      "node_id": "PRRC_kwDOAN28mc5jYqlU",
      "diff_hunk": "@@ -0,0 +1,286 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2: Serverless Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin V1's requirements have proven to be an obstacle to adoption. V1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to enroll with a store-and-forward directory server to receive payjoin. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server, the receiver starts a session to receive messages and allocates a subdirectory from which to relay messages. The first message must include the receiver's public key to be enrolled as a subdirectory identifier. The response message from the directory to the receiver includes the newly enrolled subdirectory payjoin endpoint with the public key as identifying subdirectory. After enrollment, the receiver awaits a payjoin request on a session identified by the subdirectory. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> parameter including the payjoin directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the payjoin directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+| Request subdirectory             |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|           subdirectory           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|             Payjoin PSBT         |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 90,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b863a402e0250658985f08a455a6cd103e269e5",
      "in_reply_to_id": 1666017032,
      "user": {
        "login": "satsie",
        "id": 1823216,
        "node_id": "MDQ6VXNlcjE4MjMyMTY=",
        "avatar_url": "https://avatars.githubusercontent.com/u/1823216?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/satsie",
        "html_url": "https://github.com/satsie",
        "followers_url": "https://api.github.com/users/satsie/followers",
        "following_url": "https://api.github.com/users/satsie/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/satsie/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/satsie/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/satsie/subscriptions",
        "organizations_url": "https://api.github.com/users/satsie/orgs",
        "repos_url": "https://api.github.com/users/satsie/repos",
        "events_url": "https://api.github.com/users/satsie/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/satsie/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Got it. I might consider adding a footnote for that. The way the diagram is, it looks like the directory pushes a Payjoin PSBT to the sender. But I also think you are quite limited by what you can do with this format so instead of complicating the diagram, it may just be something that could be mentioned at the bottom.",
      "created_at": "2024-07-06T19:02:26Z",
      "updated_at": "2024-07-06T19:02:26Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1667410260",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1667410260"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 90,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1722503510",
      "pull_request_review_id": 2246701892,
      "id": 1722503510,
      "node_id": "PRRC_kwDOAN28mc5mq1FW",
      "diff_hunk": "@@ -0,0 +1,288 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism. This protocol also upgrades to [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| PSBT Version 2]] to simplify transaction construction.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution while using a directory relay without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to a public key. This key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. The response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint using the public key as a subdirectory identifier. Once a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an encrypted and authenticated payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+Payjoin version 2 messages use [[https://github.com/bitcoin/bips/blob/master/bip-0370.mediawiki| BIP 370: PSBT Version 2]] (PSBTv2) format to facilitate [[#psbt-version-2|PSBT mutation]].\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided.\n+* The sender creates a valid version 2 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, optional sender parameters, and HPKE keys are encrypted and authenticated, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is sent to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>/receive</code>]] requests to await updates from the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information. <!-* I believe PSBTv2 obviates this requirement -->\n+* Set input and output Transaction Modifiable Flags to 1.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+* Set SIGHASH_SINGLE Transaction Modifiable Flags flags to 1.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialilze a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 151,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "df3bd5239b20a9183d24d27c0d1d46da367a5262",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nA receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\r\n```",
      "created_at": "2024-08-19T23:26:07Z",
      "updated_at": "2024-08-19T23:26:14Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1722503510",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1722503510"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 151,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1790987558",
      "pull_request_review_id": 2353089756,
      "id": 1790987558,
      "node_id": "PRRC_kwDOAN28mc5qwE0m",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to the HPKE using a shared secret derived from a newly generated Payjoin Session keypair public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway awaits a request from the receiver to the Payjoin Session subdirectory endpoint and responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by. This request is encapsulated in OHTTP.\n+The receiver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, and otherwise continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a PUT message to the subdirectory.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender posts an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Payjoin PSBT and wait for a signature once a Payjoin PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 258,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "e44f748f6a273219462a97058a064db0b70d2dab",
      "in_reply_to_id": null,
      "user": {
        "login": "1440000bytes",
        "id": 147166694,
        "node_id": "U_kgDOCMWV5g",
        "avatar_url": "https://avatars.githubusercontent.com/u/147166694?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/1440000bytes",
        "html_url": "https://github.com/1440000bytes",
        "followers_url": "https://api.github.com/users/1440000bytes/followers",
        "following_url": "https://api.github.com/users/1440000bytes/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/1440000bytes/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/1440000bytes/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/1440000bytes/subscriptions",
        "organizations_url": "https://api.github.com/users/1440000bytes/orgs",
        "repos_url": "https://api.github.com/users/1440000bytes/repos",
        "events_url": "https://api.github.com/users/1440000bytes/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/1440000bytes/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Can add a link to attack vectors shared in BIP 78 as they apply to BIP 77 as well and mention that it should not be used for accepting donations: https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors",
      "created_at": "2024-10-07T23:09:51Z",
      "updated_at": "2024-10-07T23:09:51Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1790987558",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1790987558"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 252,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1791154881",
      "pull_request_review_id": 2353336935,
      "id": 1791154881,
      "node_id": "PRRC_kwDOAN28mc5qwtrB",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to the HPKE using a shared secret derived from a newly generated Payjoin Session keypair public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway awaits a request from the receiver to the Payjoin Session subdirectory endpoint and responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by. This request is encapsulated in OHTTP.\n+The receiver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, and otherwise continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a PUT message to the subdirectory.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender posts an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Payjoin PSBT and wait for a signature once a Payjoin PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 258,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "e44f748f6a273219462a97058a064db0b70d2dab",
      "in_reply_to_id": 1790987558,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I've now referenced the BIP 78 attack vectors thanks to your recommendation.\r\n\r\nWhy not use Payjoin to accept donations?",
      "created_at": "2024-10-08T04:19:00Z",
      "updated_at": "2024-10-08T04:19:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1791154881",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1791154881"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 252,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792305935",
      "pull_request_review_id": 2355197174,
      "id": 1792305935,
      "node_id": "PRRC_kwDOAN28mc5q1GsP",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to the HPKE using a shared secret derived from a newly generated Payjoin Session keypair public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver. The directory's OHTTP Gateway awaits a request from the receiver to the Payjoin Session subdirectory endpoint and responds with the HPKE encrypted Original PSBT payload acording to OHTTP.\n+\n+====Receive Messaging====\n+\n+The receiver sends a GET request to the path of the subdirectory followed by. This request is encapsulated in OHTTP.\n+The receiver then awaits an OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, and otherwise continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Once an Original PSBT Payload is decrypted and checked according to the [[#receivers-payjoin-psbt-checklist|checklist]], the receiver should respond with a Payjoin PSBT or an error. The receiver encrypts the PSBT according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's key <code>e</code> from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent to the directory in an OHTTP request encapsulating the binary payload as a PUT message to the subdirectory.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for requests and one for responses. Each buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender posts an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Payjoin PSBT and wait for a signature once a Payjoin PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 258,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "e44f748f6a273219462a97058a064db0b70d2dab",
      "in_reply_to_id": 1790987558,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> mention that it should not be used for accepting donations\r\n\r\n> for the benefit of users\r\n\r\nI think that would need a rationale to be helpful to users.",
      "created_at": "2024-10-08T18:10:46Z",
      "updated_at": "2024-10-08T18:10:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1792305935",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792305935"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 252,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 258,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792591720",
      "pull_request_review_id": 2355668363,
      "id": 1792591720,
      "node_id": "PRRC_kwDOAN28mc5q2Mdo",
      "diff_hunk": "@@ -0,0 +1,282 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
      "in_reply_to_id": null,
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "1. shouldn't the directory indicate to the receiver that authorization is required using a 401 response?\r\n\r\n2. wouldn't an `Authorization` header be more appropriate? Specifically RFC 6750? the wording \"required to submit an `Authenticate: <token>`\" doesn't indicate how it's to be submitted (seems to imply that it's as a header but closest is `WWW-Authenticate` which is a response header used in 40{1,7} responses)\r\n\r\n4. instead of \"should be anonymous credentials\", if a token is used maybe it's better to specify that it \"must be unlinkable\"?",
      "created_at": "2024-10-08T22:48:58Z",
      "updated_at": "2024-10-08T22:51:07Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1792591720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792591720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 151,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792831942",
      "pull_request_review_id": 2356005927,
      "id": 1792831942,
      "node_id": "PRRC_kwDOAN28mc5q3HHG",
      "diff_hunk": "@@ -0,0 +1,282 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|   Request Session subdirectory   |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |                  |                |\n+|       Session subdirectory       |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|      Request Original PSBT       |                  |                |\n++- - - - - - - - - - - - - - - - ->|                  |                |\n+|                                  |  Original PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|          Original PSBT           |                  |                |\n+|<---------------------------------|                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|           Payjoin PSBT           |                  |                |\n++--------------------------------->|                  |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |                |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver sends their Payjoin Session public key and optional authentication credential according to the [[#session-initiation|Session initiation]] protocol to receive a Payjoin Session subdirectory. The receiver may go offline and replay Session initiation to come back online.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, and encapsulated in OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender continues to replay this request in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and sent to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Receivers must initialize a Payjoin Session on a directory to have a Session subdirectory allocated to them, as follows:\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Payjoin Sessions begin by having a receiver send the static public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL as response. Initiation may be replayed in case the receiver goes offline and should result in the same response, i.e. it Is idempotent.\n+\n+Optionally, before returning the URI, the receiver may request an authentication token by presenting a message containing only the word <code>Authenticate: <description></code>, after which the receiver is required to submit an <code>Authenticate: <token></code> including the token from the directory out of band. If authentication fails, an error is returned.\n+\n+If a directory is operated by an exchange, it may give out authentication tokens for users of its app, or may require some proof of work out of band. Tokens should be anonymous credentials from the directory describing the parameters of their authorization. Specific credentialing is out of the scope of this proposal.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 153,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3b7be8cf18e60ccf4f516ca02db50c8ba2d1cd22",
      "in_reply_to_id": 1792591720,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> * shouldn't the directory indicate to the receiver that authorization is required using a 401 response?\r\n\r\nYes, that's proper HTTP semantics\r\n\r\n> * wouldn't an `Authorization` header be more appropriate? Specifically RFC 6750? the wording \"required to submit an `Authenticate: <token>`\" doesn't indicate how it's to be submitted (seems to imply that it's as a header but closest is `WWW-Authenticate` which is a response header used in 40{1,7} responses)\r\n\r\nYes\r\n\r\n> * instead of \"should be anonymous credentials\", if a token is used maybe it's better to specify that it \"must be unlinkable\"?\r\n\r\nYes\r\n\r\nTODO\r\n\r\n",
      "created_at": "2024-10-09T04:44:11Z",
      "updated_at": "2024-10-09T04:44:11Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1792831942",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1792831942"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 151,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 153,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1803615647",
      "pull_request_review_id": 2373349802,
      "id": 1803615647,
      "node_id": "PRRC_kwDOAN28mc5rgP2f",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+\n+The receiver encrypts the <code>Payjoin PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Payjoin PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Payjoin PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/NKpsk0/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 236,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "c917eab7e8d2c4cd72b50bb6db877a171ffcd037",
      "in_reply_to_id": null,
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\r\n```",
      "created_at": "2024-10-16T18:35:11Z",
      "updated_at": "2024-10-16T18:35:12Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1803615647",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1803615647"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 236,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003314",
      "pull_request_review_id": 2373985813,
      "id": 1804003314,
      "node_id": "PRRC_kwDOAN28mc5rhufy",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 154,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\r\n```",
      "created_at": "2024-10-17T01:56:32Z",
      "updated_at": "2024-10-17T02:02:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804003314",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003314"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003590",
      "pull_request_review_id": 2373985813,
      "id": 1804003590,
      "node_id": "PRRC_kwDOAN28mc5rhukG",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 160,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nUpon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Original PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\r\n```",
      "created_at": "2024-10-17T01:56:56Z",
      "updated_at": "2024-10-17T02:02:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804003590",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003590"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 160,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003720",
      "pull_request_review_id": 2373985813,
      "id": 1804003720,
      "node_id": "PRRC_kwDOAN28mc5rhumI",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 162,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\r\n```",
      "created_at": "2024-10-17T01:57:10Z",
      "updated_at": "2024-10-17T02:02:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804003720",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804003720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 162,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804004419",
      "pull_request_review_id": 2373985813,
      "id": 1804004419,
      "node_id": "PRRC_kwDOAN28mc5rhuxD",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+\n+The receiver encrypts the <code>Payjoin PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 164,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThe receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\r\n```",
      "created_at": "2024-10-17T01:58:27Z",
      "updated_at": "2024-10-17T02:02:29Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804004419",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804004419"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804012361",
      "pull_request_review_id": 2373998516,
      "id": 1804012361,
      "node_id": "PRRC_kwDOAN28mc5rhwtJ",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 104,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\r\n```",
      "created_at": "2024-10-17T02:13:05Z",
      "updated_at": "2024-10-17T22:22:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1804012361",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1804012361"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 104,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805498663",
      "pull_request_review_id": 2373998516,
      "id": 1805498663,
      "node_id": "PRRC_kwDOAN28mc5rnbkn",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 103,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This bullet point is a bit overloaded, it could instead link to existing parts of the documentation that describe the parameters in more detail.\r\n\r\n```suggestion\r\n* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters|receiver fragment parameters]] .\r\n  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\r\n```",
      "created_at": "2024-10-17T22:05:11Z",
      "updated_at": "2024-10-17T22:22:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1805498663",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805498663"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805502489",
      "pull_request_review_id": 2373998516,
      "id": 1805502489,
      "node_id": "PRRC_kwDOAN28mc5rncgZ",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 154,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "IIUC the sender should poll GET requests to their own subdirectory here, not the receiver's.\r\n\r\n```suggestion\r\nThe sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\r\n```",
      "created_at": "2024-10-17T22:10:34Z",
      "updated_at": "2024-10-17T22:22:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1805502489",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805502489"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 154,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805509458",
      "pull_request_review_id": 2373998516,
      "id": 1805509458,
      "node_id": "PRRC_kwDOAN28mc5rneNS",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 106,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Remove an unnecessary bullet point and indicate which subdirectory the request is stored in in the POST step.\r\n\r\n```suggestion\r\n* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\r\n* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\r\n```",
      "created_at": "2024-10-17T22:15:46Z",
      "updated_at": "2024-10-17T22:22:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1805509458",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805509458"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 104,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 106,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805511638",
      "pull_request_review_id": 2373998516,
      "id": 1805511638,
      "node_id": "PRRC_kwDOAN28mc5rnevW",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 107,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging|to the receiver subdirectory]]. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\r\n```",
      "created_at": "2024-10-17T22:17:10Z",
      "updated_at": "2024-10-17T22:22:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1805511638",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805511638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 107,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805513036",
      "pull_request_review_id": 2373998516,
      "id": 1805513036,
      "node_id": "PRRC_kwDOAN28mc5rnfFM",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 109,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\r\n```",
      "created_at": "2024-10-17T22:18:11Z",
      "updated_at": "2024-10-17T22:22:58Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1805513036",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1805513036"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 109,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1808006205",
      "pull_request_review_id": 2380754198,
      "id": 1808006205,
      "node_id": "PRRC_kwDOAN28mc5rw_w9",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Payjoin PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Payjoin PSBT           |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Payjoin PSBT   |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter where the subdirectory is the compressed Payjoin Session public key. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding. To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless. An <code>ohttp=</code> fragment parameter containing the directory's base64url encoded [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| Oblivious HTTP Key Configuration]] must also be provided. It should also include an <code>exp=</code> parameter with a Unix timestamp after which the receiver will broadcast the Original PSBT and stop polling the session.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulats it all as OHTTP. This [[#send-messaging|Original PSBT Request send message]] is made to the directory's OHTTP Gateway.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+* The request is stored in the subdirectory.\n+* Once the receiver is online, it sends [[#receive-messaging|<code>GET</code>]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+* The <code>Payjoin PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a request from the sender if it goes offline. Upon request, the directory relays the encrypted <code>Payjoin PSBT</code>.\n+* The sender validates the <code>Payjoin PSBT</code> according to [[#senders-payjoin-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Payjoin PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Payjoin PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Payjoin PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the receiver's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Payjoin PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Payjoin PSBT</code> according to the [[#receivers-payjoin-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Payjoin PSBT</code>.\n+\n+The receiver encrypts the <code>Payjoin PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Payjoin PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Payjoin PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 164,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "3046520ebaf481fa77e0e887bbb2be29f1961832",
      "in_reply_to_id": 1804004419,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consistency is key \r\n",
      "created_at": "2024-10-21T01:40:55Z",
      "updated_at": "2024-10-21T01:40:55Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1808006205",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1808006205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 164,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1809002205",
      "pull_request_review_id": 2382404494,
      "id": 1809002205,
      "node_id": "PRRC_kwDOAN28mc5r0y7d",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 168,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n===Receiver's Original PSBT checklist===\r\n\r\nThe receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"If the sender's inputs are all from the same scriptPubKey type, the receiver must match the same type\" step, which may be ignored.\r\n```",
      "created_at": "2024-10-21T15:03:43Z",
      "updated_at": "2024-10-21T15:03:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1809002205",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1809002205"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 166,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840939184",
      "pull_request_review_id": 2434059012,
      "id": 1840939184,
      "node_id": "PRRC_kwDOAN28mc5tuoCw",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 35,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This extraneous pipe character doesnâ€™t seem to show up anywhere, but still seems to be a syntax error.\r\n\r\n```suggestion\r\nThe BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\r\n```",
      "created_at": "2024-11-13T18:02:08Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840939184",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840939184"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 35,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840944740",
      "pull_request_review_id": 2434059012,
      "id": 1840944740,
      "node_id": "PRRC_kwDOAN28mc5tupZk",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It sounds like this proposal builds on BIPâ€¯21 URI Scheme, BIPâ€¯174 PSBT,  and expands on BIPâ€¯78, so perhaps those should be listed as requirements:\r\n\r\n```suggestion\r\n  License: BSD-2-Clause\r\n  Requires: 21, 78, 174\r\n```\r\n\r\nor even replacement:\r\n\r\n```suggestion\r\n  License: BSD-2-Clause\r\n  Requires: 21, 174\r\n  Replaces: 78\r\n```\r\n",
      "created_at": "2024-11-13T18:06:41Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840944740",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840944740"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840957533",
      "pull_request_review_id": 2434059012,
      "id": 1840957533,
      "node_id": "PRRC_kwDOAN28mc5tushd",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 119,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Just wondering, is this proposal only compatible with PSBT v0, or also PSBT v2?\r\nPerhaps it would make sense for this proposal to consider whether this proposal will be compatible with the efforts in \"Bip Draft: Sending Silent Payments in PSBTs #1687\" to ensure that it will be possible in the future to create Silent Payments-based Payjoins?",
      "created_at": "2024-11-13T18:17:00Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840957533",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840957533"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840964163",
      "pull_request_review_id": 2434059012,
      "id": 1840964163,
      "node_id": "PRRC_kwDOAN28mc5tuuJD",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 127,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n* Include complete UTXO data.\r\n* Insert additional outputs or additional inputs at random indices while retaining the order of existing inputs and outputs.\r\n```",
      "created_at": "2024-11-13T18:21:58Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840964163",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840964163"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 342,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840966010",
      "pull_request_review_id": 2434059012,
      "id": 1840966010,
      "node_id": "PRRC_kwDOAN28mc5tuul6",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 135,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems to me that the latter should also be mentioned in the \"MUST\" block above (see above) and then this could be reduced to the MUST NOT part:\r\n\r\n```suggestion\r\n* Shuffle the order of existing inputs or outputs.\r\n```",
      "created_at": "2024-11-13T18:23:24Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840966010",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840966010"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 135,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840973445",
      "pull_request_review_id": 2434059012,
      "id": 1840973445,
      "node_id": "PRRC_kwDOAN28mc5tuwaF",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 168,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": 1809002205,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe use \"output script\" instead of \"scriptPubKey\" since this document also uses \"input script\" elsewhere.",
      "created_at": "2024-11-13T18:29:22Z",
      "updated_at": "2024-11-13T19:40:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840973445",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840973445"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": 166,
      "start_side": "RIGHT",
      "line": null,
      "original_line": 168,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840975732",
      "pull_request_review_id": 2434059012,
      "id": 1840975732,
      "node_id": "PRRC_kwDOAN28mc5tuw90",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 172,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "inputs â‡’ input?\r\n\r\n```suggestion\r\nThe version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender input UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\r\n```",
      "created_at": "2024-11-13T18:31:12Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840975732",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840975732"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 172,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840979254",
      "pull_request_review_id": 2434059012,
      "id": 1840979254,
      "node_id": "PRRC_kwDOAN28mc5tux02",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 27,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "BIP 78 is titled \"A Simple Payjoin Proposal\", so maybe just to make the context abundantly clear, it may be useful to formally introduce \"Payjoin version 1\" as a moniker for BIPâ€¯78 Payjoins before the first use thereof (itâ€™s only introduced implicitly in line 31).",
      "created_at": "2024-11-13T18:34:16Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840979254",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840979254"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 27,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840994166",
      "pull_request_review_id": 2434059012,
      "id": 1840994166,
      "node_id": "PRRC_kwDOAN28mc5tu1d2",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 176,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "FWIU, itâ€™s the directory that is backwards compatible, not the Payjoin version 1 request\r\n\r\n```suggestion\r\nThe Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories for backwards compatibility with Payjoin version 1 requests.\r\n```",
      "created_at": "2024-11-13T18:45:19Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840994166",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840994166"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 176,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840997337",
      "pull_request_review_id": 2434059012,
      "id": 1840997337,
      "node_id": "PRRC_kwDOAN28mc5tu2PZ",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 184,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I noticed that \"BIPâ€¯78 Payjoin\" or \"Payjoin version 1\" appear to be used synonymously. Please only use one term to refer to the same concept throughout the document. If synonyms should be mentioned, please state them along the introduction of the term.",
      "created_at": "2024-11-13T18:47:46Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1840997337",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1840997337"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 184,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841003614",
      "pull_request_review_id": 2434059012,
      "id": 1841003614,
      "node_id": "PRRC_kwDOAN28mc5tu3xe",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 188,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Payjoin version 2\" vs \"version 2 Payjoin\":\r\n\r\n```suggestion\r\n* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for Payjoin version 2 URIs.\r\n```",
      "created_at": "2024-11-13T18:52:43Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841003614",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841003614"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 188,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841007588",
      "pull_request_review_id": 2434059012,
      "id": 1841007588,
      "node_id": "PRRC_kwDOAN28mc5tu4vk",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 219,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems that we may be referring to the agent behind the directory rather than the directory itself?\r\n\r\n```suggestion\r\nOHTTP protects sender and receiver IP addresses both from one another and from the directory provider. This makes it more difficult for a directory provider to correlate many payjoin transactions with specific IP addresses by intersection.\r\n```",
      "created_at": "2024-11-13T18:56:04Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841007588",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841007588"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 219,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841009589",
      "pull_request_review_id": 2434059012,
      "id": 1841009589,
      "node_id": "PRRC_kwDOAN28mc5tu5O1",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 225,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Iâ€™m surprised that the sequence diagram above was drawn in ASCII, while this is an image. Perhaps both should be provided in the same style.",
      "created_at": "2024-11-13T18:57:44Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841009589",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841009589"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 225,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841022383",
      "pull_request_review_id": 2434059012,
      "id": 1841022383,
      "node_id": "PRRC_kwDOAN28mc5tu8Wv",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+In addition to the attack vectors and mitigations in [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors| BIP 78 Payjoin version 1]], Payjoin version 2 has the following attack vectors.\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Proposal PSBT and wait for a signature once a Proposal PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an OHTTP Key Configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise Payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\n+\n+Senders not supporting Payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel Payjoin. If a sender intending to pay such a URI containing <code>req-pj=</code> does not support Payjoin, it MUST consider the entire URI invalid per BIP 21.\n+\n+Receivers may choose to support version 1 payloads. Version 2 Payjoin URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 272,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consistency nit:\r\n\r\n```suggestion\r\nReceivers may choose to support Payjoin version 1 payloads. Payjoin version 2  URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].\r\n```",
      "created_at": "2024-11-13T19:08:59Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841022383",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841022383"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841023704",
      "pull_request_review_id": 2434059012,
      "id": 1841023704,
      "node_id": "PRRC_kwDOAN28mc5tu8rY",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+In addition to the attack vectors and mitigations in [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors| BIP 78 Payjoin version 1]], Payjoin version 2 has the following attack vectors.\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Proposal PSBT and wait for a signature once a Proposal PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an OHTTP Key Configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise Payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\n+\n+Senders not supporting Payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel Payjoin. If a sender intending to pay such a URI containing <code>req-pj=</code> does not support Payjoin, it MUST consider the entire URI invalid per BIP 21.\n+\n+Receivers may choose to support version 1 payloads. Version 2 Payjoin URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 272,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is BHTTP? I donâ€™t think that was introduced in this document.",
      "created_at": "2024-11-13T19:10:13Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841023704",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841023704"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841025434",
      "pull_request_review_id": 2434059012,
      "id": 1841025434,
      "node_id": "PRRC_kwDOAN28mc5tu9Ga",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+In addition to the attack vectors and mitigations in [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors| BIP 78 Payjoin version 1]], Payjoin version 2 has the following attack vectors.\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Proposal PSBT and wait for a signature once a Proposal PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an OHTTP Key Configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise Payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\n+\n+Senders not supporting Payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel Payjoin. If a sender intending to pay such a URI containing <code>req-pj=</code> does not support Payjoin, it MUST consider the entire URI invalid per BIP 21.\n+\n+Receivers may choose to support version 1 payloads. Version 2 Payjoin URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 272,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Luckily there is no PSBT v1, otherwise \"version 1 Proposal PSBTs\" may be confusing. Either way, I think it would be better to use \"Payjoin version 1\" consistently instead of abbreviating.\r\n\r\n```suggestion\r\nReceivers may choose to support version 1 payloads. Version 2 Payjoin URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST Payjoin version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].\r\n```",
      "created_at": "2024-11-13T19:11:44Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841025434",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841025434"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 272,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841026721",
      "pull_request_review_id": 2434059012,
      "id": 1841026721,
      "node_id": "PRRC_kwDOAN28mc5tu9ah",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+In addition to the attack vectors and mitigations in [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors| BIP 78 Payjoin version 1]], Payjoin version 2 has the following attack vectors.\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Proposal PSBT and wait for a signature once a Proposal PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an OHTTP Key Configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise Payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\n+\n+Senders not supporting Payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel Payjoin. If a sender intending to pay such a URI containing <code>req-pj=</code> does not support Payjoin, it MUST consider the entire URI invalid per BIP 21.\n+\n+Receivers may choose to support version 1 payloads. Version 2 Payjoin URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at [[https://crates.io/crates/payjoin-cli]]. Source code for the clients, the Payjoin Directory, and development kit may be found here: [[https://github.com/payjoin/rust-payjoin]]. Source code for an Oblivous HTTP relay implementation may be found here [[https://github.com/payjoin/ohttp-relay]]. The reference implementation may be configured to the following independent production relays as of 24/09/26:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Typo:\r\n\r\n```suggestion\r\nAn production reference implementation client can be found at [[https://crates.io/crates/payjoin-cli]]. Source code for the clients, the Payjoin Directory, and development kit may be found here: [[https://github.com/payjoin/rust-payjoin]]. Source code for an Oblivious HTTP relay implementation may be found here [[https://github.com/payjoin/ohttp-relay]]. The reference implementation may be configured to the following independent production relays as of 24/09/26:\r\n```",
      "created_at": "2024-11-13T19:12:49Z",
      "updated_at": "2024-11-13T19:40:27Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841026721",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841026721"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841034908",
      "pull_request_review_id": 2434059012,
      "id": 1841034908,
      "node_id": "PRRC_kwDOAN28mc5tu_ac",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+In addition to the attack vectors and mitigations in [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors| BIP 78 Payjoin version 1]], Payjoin version 2 has the following attack vectors.\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Proposal PSBT and wait for a signature once a Proposal PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an OHTTP Key Configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise Payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\n+\n+Senders not supporting Payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel Payjoin. If a sender intending to pay such a URI containing <code>req-pj=</code> does not support Payjoin, it MUST consider the entire URI invalid per BIP 21.\n+\n+Receivers may choose to support version 1 payloads. Version 2 Payjoin URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at [[https://crates.io/crates/payjoin-cli]]. Source code for the clients, the Payjoin Directory, and development kit may be found here: [[https://github.com/payjoin/rust-payjoin]]. Source code for an Oblivous HTTP relay implementation may be found here [[https://github.com/payjoin/ohttp-relay]]. The reference implementation may be configured to the following independent production relays as of 24/09/26:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Iâ€™m not sure whether specifying \"production relays\" in the BIP makes sense as that information will almost inevitably outdate.\r\n\r\nI also think that \"production relays\" synonymously refers to what was previously called \"Payjoin Directory\". Please do not use synonyms but settle on one term.\r\n\r\n![image](https://github.com/user-attachments/assets/85dd89a6-2b41-4e94-a9e5-00e95cfec962)\r\nvia https://courses.lumenlearning.com/olemiss-technicalwriting/chapter/unit-3-using-appropiate-language-and-tone-avoiding-confusing-terms-lecture-2/",
      "created_at": "2024-11-13T19:19:01Z",
      "updated_at": "2024-11-13T19:40:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841034908",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841034908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841040529",
      "pull_request_review_id": 2434059012,
      "id": 1841040529,
      "node_id": "PRRC_kwDOAN28mc5tvAyR",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 15,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is clearer to repeat the active agent by name:\r\n\r\n```suggestion\r\nThis document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring the receiver to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\r\n```",
      "created_at": "2024-11-13T19:23:30Z",
      "updated_at": "2024-11-13T19:40:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841040529",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841040529"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841043367",
      "pull_request_review_id": 2434059012,
      "id": 1841043367,
      "node_id": "PRRC_kwDOAN28mc5tvBen",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 10,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please also link to all relevant mailing list threads via the Post-History header.",
      "created_at": "2024-11-13T19:25:47Z",
      "updated_at": "2024-11-13T19:40:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841043367",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841043367"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 14,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841052255",
      "pull_request_review_id": 2434059012,
      "id": 1841052255,
      "node_id": "PRRC_kwDOAN28mc5tvDpf",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 4,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Many visitors of the BIPs repository may first become aware of this proposal per the title. Does writing out \"version 2\" provide the biggest bang for the buck?\r\n\r\nWhat do you think about:\r\n\r\n```suggestion\r\n  Title: Payjoin v2â€”Async Payjoin\r\n```\r\n\r\nOr even:\r\n\r\n```suggestion\r\n  Title: Async Payjoin\r\n```",
      "created_at": "2024-11-13T19:32:19Z",
      "updated_at": "2024-11-13T19:40:28Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1841052255",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1841052255"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844586908",
      "pull_request_review_id": 2439811567,
      "id": 1844586908,
      "node_id": "PRRC_kwDOAN28mc5t8imc",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 119,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": 1840957533,
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "From the point of view of the BIP 77 Sender & Receiver roles, there are three relevant settings we might consider, whether the receiver knows `b_scan` or only `B_scan` (relevant for cut-through payments when the receiver's intended recipient is a 3rd party), or whether the sender knows `B_scan` at the time of sending the original PSBT.\r\n\r\nWhen the receiver only knows `B_scan`, they they know the corresponding `a` values of their inputs, but since the BIP 77 sender does not necessarily know `B_scan` yet, this requires another round of communication. The receiver can provide the ECDH_SHARE values `a*B_scan` for their inputs, and SP_V0_INFO values for their outputs as per BIP-PSBT-SP. Unfortunately, although the sender can complete compute the output scripts, they cannot sign for the receiver's inputs, nor can the receiver sign before the sender's ECDH_SHARE values are given because their output scripts are not finalized, which deviates from BIP 77.\r\n\r\nConversely, since BIP 77 specifies that the receiver modify the Original PSBT, which is already signed, the proposal PSBT can't be considered \"the same\" in line with BIP 370, as that requires that inputs and outputs no longer be modifiable to ensure signatures are invalidated, and BIP 352 requires that signatures commit to the input set to ensure output scripts are spendable. Therefore for BIP-PSBT-SP to be compatible with this use case it would need to relax BIP 370's rules for input/output modifiability as well, and introduce non-monotonicity to the Signer and Combiner roles.\r\n\r\nHowever, the other two settings don't require any modifications for compatibility:\r\n\r\nWhen the receiver knows `b_scan`, they can use the Original PSBT's witnesses to compute [A as per BIP 352](https://github.com/bitcoin/bips/blob/master/bip-0352.mediawiki#user-content-Scanning), adjust it to account for their own inputs, and use `b_scan` to derive their own output addresses before sending the proposal PSBT back to the sender, and the sender doesn't need to support silent payments in any way (also compatible with BIP 78 if output substitution is not disallowed). This allows a BIP 352 aware BIP 77 receiver receiver to statelessly avoid address reuse, and does not require state or growing the BIP 44 address gap limit even if BIP 77 sessions fail, so potentially quite valuable.\r\n\r\nSecondly, the case where the *sender* knows B_scan a priori (e.g. from the BIP 21 URI) is also independently interesting, but does not require any changes WRT the BIP-PSBT-SP.\r\n\r\nIf silent payments transactions are hypothetically used for sender initiated BIP 77 compatible payjoins (arguably topic of a separate BIP than BIP 77 anyway), the receiver can reply with a proposal PSBT as in BIP 77, with the silent payments transaction taking the place of the original PSBT. The sender's reply public key can be implicit, e.g. the BIP 352 `A` point (or arguably better yet, the sum of the R points?). This sort of assumes payjoin/rust-payjoin#364. If also assuming payjoin/rust-payjoin#386, the BIP 352 ECDH shared secret could be used to derive a tweak for the HPKE reply key, precluding the directory from censoring payjoins associated with a specific SP transaction.\r\n\r\nIn this situation, the sender already provided their ECDH secrets, which allows the receiver to dividing out the original PSBT's input set hash, add their own private keys, and the input hash of the modified input set, only requiring the sender to provide new signatures for the proposal PSBT.\r\n\r\nUnfortunately this final variant is not as useful as it might appears, because it assumes the sender won't do another round of input addition, which implies the transaction replacement will leak information about the payment amount and potentially violate the unnecessary input heuristics if the additional round of communication is to be avoided. If the sender is allowed to reply to the receiver, then it would need to provide ECDH_SHARE values as per BIP-PSBT-SP, in line with the case where receiver only knowing `B_scan`.",
      "created_at": "2024-11-15T22:14:12Z",
      "updated_at": "2024-11-15T22:14:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1844586908",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1844586908"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 280,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1924115270",
      "pull_request_review_id": 2565276147,
      "id": 1924115270,
      "node_id": "PRRC_kwDOAN28mc5yr6tG",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+In addition to the attack vectors and mitigations in [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors| BIP 78 Payjoin version 1]], Payjoin version 2 has the following attack vectors.\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Proposal PSBT and wait for a signature once a Proposal PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an OHTTP Key Configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise Payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\n+\n+Senders not supporting Payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel Payjoin. If a sender intending to pay such a URI containing <code>req-pj=</code> does not support Payjoin, it MUST consider the entire URI invalid per BIP 21.\n+\n+Receivers may choose to support version 1 payloads. Version 2 Payjoin URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at [[https://crates.io/crates/payjoin-cli]]. Source code for the clients, the Payjoin Directory, and development kit may be found here: [[https://github.com/payjoin/rust-payjoin]]. Source code for an Oblivous HTTP relay implementation may be found here [[https://github.com/payjoin/ohttp-relay]]. The reference implementation may be configured to the following independent production relays as of 24/09/26:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": null,
      "user": {
        "login": "spacebear21",
        "id": 144076611,
        "node_id": "U_kgDOCJZvQw",
        "avatar_url": "https://avatars.githubusercontent.com/u/144076611?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/spacebear21",
        "html_url": "https://github.com/spacebear21",
        "followers_url": "https://api.github.com/users/spacebear21/followers",
        "following_url": "https://api.github.com/users/spacebear21/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/spacebear21/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/spacebear21/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/spacebear21/subscriptions",
        "organizations_url": "https://api.github.com/users/spacebear21/orgs",
        "repos_url": "https://api.github.com/users/spacebear21/repos",
        "events_url": "https://api.github.com/users/spacebear21/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/spacebear21/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "> as of 24/09/26\r\n\r\nThis date is either wrong or the date format is misleading, I'd prefer if it was spelled out (e.g September 26th, 2024).\r\n\r\nI also concur with @murchandamus that the example relay/directory links don't belong in the BIP. The `payjoin-cli` crate mentions them in the README anyway.",
      "created_at": "2025-01-21T17:21:31Z",
      "updated_at": "2025-01-21T17:21:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r1924115270",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/1924115270"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2007762757",
      "pull_request_review_id": 2706259169,
      "id": 2007762757,
      "node_id": "PRRC_kwDOAN28mc53rAdF",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in [[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption. The increased opportunity to batch payments and execute transaction cut-through increases intent throughput, since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1 is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both requirements present significant barriers for all but sophisticated server operators or those wallets with complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\" responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for a number of block space optimizations, including payment batching and transaction cut-through. This proposal introduces authentication and encryption to secure output substitution by using a directory server without compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server for version 1 senders. Receivers responding to version 1 senders must disable output substitution, since their payloads are saved in plaintext, so that they may payjoin without the risk of the directory, acting as a version 1 unsecured Payjoin server, stealing funds.\n+\n+The protocols in this document reuse BIP 78's BIP 21 URI parameters. An \"Original PSBT\" timeout parameter is introduced which may also help coordinate the synchronous version 1 protocol.\n+\n+===Relation to Stowaway===\n+\n+[[https://docs.samourai.io/en/spend-tools#stowaway| Stowaway]] was a Payjoin coordination mechanism that depended on Tor, a third-party relay, and the [[https://paynym.is| PayNym]] [[https://github.com/bitcoin/bips/blob/master/bip-0047.mediawiki| BIP 47]] \"payment codes\" directory for subdirectory identification and encryption. The Payjoin version 2 protocol uses per-request public keys for relay subdirectory identification, authentication, and encryption instead of BIP 47 public keys derived from a wallet. Payjoin version 2 also supports asynchronous messaging, in contrast to Stowaway's synchronous messaging. Offline Stowaway depends on manual message passing rather than an asynchronous network protocol. Successful Stowaway execution results in 2-output transactions, while BIP 78, and this work may produce batched transactions with many outputs.\n+\n+==Specification==\n+\n+===Overview===\n+\n+Payjoin requests are made using familiar BIP 21 URIs. Instead of a public HTTP endpoint, this scheme allows an HTTP client to initiate a Payjoin Session at a store-and-forward directory server to send and receive Payjoin messages. Directories may optionally require an authorization credential before allocating resources in order to prevent DoS attacks. Sender and receiver payloads are buffered at the directory to support asynchronous interaction. Authenticated encryption prevents the directory from snooping on message contents or forging messages by way of HPKE. Oblivious HTTP is required for version 2 interactions in order to separate client IP addresses from the directory to prevent metadata attacks. Aside from application layer authenticated encryption and relayed asynchronous networking, version 2 messaging takes much the same form as the existing BIP 78 specification.\n+\n+===Basic scheme===\n+\n+The receiver first generates a 256-bit keypair. This key will be the basis of end-to-end authenticated encryption and identification of a particular payjoin over the directory.\n+\n+Rather than hosting a public server itself, the receiver initializes a Payjoin Session by requesting a subdirectory allocation related to their keypair's public key. This public key is used to identify a store-and-forward Session subdirectory on the Payjoin Directory server and establishes end-to-end encryption. A POST request to the Payjoin Directory including the receiver's public key initiates an associated Payjoin Session. A successful <code>201 CREATED</code> response message from the directory to the receiver includes the new Session subdirectory payjoin endpoint in the <code>Location</code> header using the compressed public key as a subdirectory identifier. As long as a Session is active, the receiver uses long polling to await a payjoin request to a Payjoin Session from the sender. Out of band, the receiver shares a [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] Payjoin URI including the directory endpoint in the <code>pj=</code> query parameter and a new Oblivious HTTP <code>ohttp=</code> fragment parameter including the Payjoin Directory's [[https://www.ietf.org/rfc/rfc9458.html#name-key-configuration| OHTTP Key Configuration]].\n+\n+The sender constructs an [[https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy| HPKE Auth mode]] payload containing a PSBT and optional parameters similar to BIP 78. The resulting ciphertext ensures message secrecy and integrity when passed to the receiver by the subdirectory <code>pj=</code> endpoint.\n+\n+Messages are secured by symmetric cipher rather than TLS or Onion routing session key. Sender and receiver may experience network interruption and proceed with the protocol since their request and response are buffered at the Payjoin Directory.\n+\n+====Sequence Diagram====\n+\n+<pre>\n+Key: \n+|-----> Single transmission\n+|- - -> Polled transmission\n+\n++----------+                 +-----------+       +--------+  +---------+\n+| Receiver |                 | Directory |       | Sender |  | Network |\n++----------+                 +-----------+       +--------+  +---------+\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      destination (address,       |                  |                |\n+|        subdirectory)             |                  |                |\n++---------------------------------------------------->|                |\n+|                                  |                  |                |\n+|    GET Request Original PSBT     |                  |                |\n++- - - - - - - - - - - - - - - - ->|   POST Request   |                |\n+|                                  |  Original PSBT   |                |\n+|    GET Response Original PSBT    |<-----------------|                |\n+|<---------------------------------|   GET Request    |                |\n+|                                  |  Proposal PSBT   |                |\n+|                                  |<- - - - - - - - -|                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|                                  |                  |                |\n+|      POST Proposal PSBT          |                  |                |\n++--------------------------------->|   GET Response   |                |\n+|                                  |   Proposal PSBT  |                |\n+|                                  |----------------->|                |\n+|                                  |                  |   Broadcast    |\n+|                                  |                  |   Payjoin      |\n+|                                  |                  +--------------->|\n+|                                  |                  |                |\n++                                  +                  +                +\n+</pre>\n+\n+===Payjoin version 2 messaging===\n+\n+The Payjoin version 2 protocol takes the following steps:\n+\n+* The receiver generates a Payjoin Session public key.\n+* Out of band, the receiver shares a bitcoin URI with the sender, including a <code>pj=</code> query parameter. The <code>pj</code> URL contains the compressed Payjoin Session public key, [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url-encoded]] followed by the [[#receiver-fragment-parameters| receiver fragment parameters]] .\n+  * To support version 1 senders, the directory acts as an unsecured Payjoin server, so <code>pjos=0</code> must be specified in the URI. Version 2 senders may safely allow output substitution regardless.\n+* The sender creates a valid version 0 PSBT satisfying the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. We call this the <code>Original PSBT</code>. This <code>Original PSBT</code>, and optional sender parameters, are wrapped in HPKE authenticated encryption, including a sender session public key as associated data, and encapsulates it all as OHTTP. This [[#send-messaging| Original PSBT Request send message]] is made to the directory's OHTTP Gateway. The request is stored in the receiver subdirectory.\n+* The sender polls GET requests to the subdirectory defined by the sender's Payjoin Session public key in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+* Once the receiver is online, it sends <code>GET</code> requests [[#receive-messaging| to the receiver subdirectory]] requests to the subdirectory. The receiver decrypts and authenticates the response, which it checks according to [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the receiver checklist]]. The receiver updates the Original PSBT to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+* The <code>Proposal PSBT</code> and HPKE keys are encrypted, authenticated, encapsulated in OHTTP, and POSTed to the directory's OHTTP Gateway.\n+* The directory awaits a GET request from the sender. Upon request, the directory relays the encrypted <code>Proposal PSBT</code>.\n+* The sender validates the <code>Proposal PSBT</code> according to [[#senders-proposal-psbt-checklist|the sender checklist]], signs its inputs and broadcasts the transaction to the Bitcoin network.\n+\n+The Original PSBT MUST:\n+\n+* Include complete UTXO data.\n+* Be signed.\n+* Exclude unnecessary fields such as global xpubs or keypath information.\n+* Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+* Include outputs unrelated to the sender-receiver transfer for batching purposes.\n+\n+The Proposal PSBT MUST:\n+\n+* Include all inputs from the Original PSBT.\n+* Include all outputs which do not belong to the receiver from the Original PSBT.\n+* Include complete UTXO data.\n+\n+The Proposal PSBT sender MAY:\n+\n+* Add, remove or modify Original PSBT outputs under the control of the receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+* Shuffle the order of inputs or outputs; the additional outputs or additional inputs must be inserted at a random index.\n+* Decrease the absolute fee of the Original PSBT.\n+\n+====Session Initiation====\n+\n+Sessions between senders and receivers are established out of band when a receiver shares a Payjoin URI containing its Payjoin Session public key with a sender.\n+\n+A receiver must first discover the directory's OHTTP Gateway Key Configuration via an authenticated bootstrap mechanism before it can initialize a Session to receive payjoin requests. This mechanism may vary by implementation but must follow [[https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01| OHTTP Consistency Requirements]] and should not reveal a receiver IP address to the directory. Some examples of suitable mechanisms include fetching over a VPN, using keys included with an application binary, https-in-http CONNECT method, https-in-WebSocket, or a Tor hidden service.\n+\n+Senders and receivers POST their Payjoin Session public key to the directory via OHTTP, receiving their subdirectory in a base64url encoded directory URL in the Location header of a <code>201 CREATED</code> response.\n+\n+If a directory is subject to denial of service attacks, it may require [[https://datatracker.ietf.org/doc/html/rfc6750| RFC 6750]] authorization and otherwise respond with <code>401</code> unauthorized responses to requests. Authorization tokens must be unlinkable to preserve client privacy. A specific unlinkable authorization token mechanism is out of the scope of this proposal.\n+\n+====Send Messaging====\n+\n+The Original PSBT is serialized in base64, followed by the query parameter string on a new line. This plaintext string is encrypted according to HPKE using a shared secret derived from the sender's Payjoin Session public key combined with the receiver's subdirectory Payjoin Session public key. The resulting HPKE payload body is then encapsulated according to Oblivious HTTP as a POST request to the directory's OHTTP Gateway to the receiver's payjoin session subdirectory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP request and handles the inner POST request at the receiver's Payjoin Session subdirectory endpoint, which stores the HPKE encrypted payload to be forwarded to the receiver.\n+\n+The sender then polls GET requests to the sender's Payjoin Session subdirectory endpoint in order to await a response from the directory containing a <code>Proposal PSBT</code>. It stops polling after expiry.\n+\n+====Receive Messaging====\n+\n+After sharing the Payjoin URI with the sender, the receiver sends a GET request to the path of the receiver's Payjoin Session subdirectory. This request is encapsulated in OHTTP. It continues to poll by sending a new OHTTP request after receiving an encapsulated 202 ACCEPTED response notifying the receiver that the directory has not yet received a request from the sender.\n+\n+Upon receiving OHTTP response from the directory encapsulating a request from the sender with status code 200 OK, the receiver decrypts the payload and checks the <code>Proposal PSBT</code> according to the [[#receivers-proposal-psbt-checklist|checklist]].\n+\n+The receiver then updates the <code>Original PSBT</code> to include new signed inputs and outputs, invalidating sender signatures, and may adjust the fee. The result is called the <code>Proposal PSBT</code>.\n+\n+The receiver encrypts the <code>Proposal PSBT</code> according to the HPKE protocol, generating an ephemeral keypair from which it derives a shared secret with the sender's Payjoin Session public key from the payload. It generates a nonce from sufficient randomness, and constructs a ciphertext containing the Proposal PSBT and serialized receiver ephemeral key <code>e</code>'s public key as associated data using ChaCha20Poly1305. A payload is constructed by concatenating the ephemeral public key, the nonce, and the ciphertext. This Proposal PSBT payload is then sent as a POST message to the directory in an OHTTP request encapsulating the binary payload to the sender's Payjoin Session subdirectory.\n+\n+===Receiver's Proposal PSBT checklist===\n+\n+The receiver checklist is the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist| the BIP 78 receiver checklist]], except for the \"Verify that the payjoin proposal did not introduce mixed input's type\" step, which may be ignored.\n+\n+===Sender's Proposal PSBT checklist===\n+\n+The version 2 sender's checklist is largely the same as the [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist| the BIP 78 checklist]], with the exception that mixed input script types are allowed, and it expects all UTXO data to be filled in. BIP 78 required sender inputs UTXO data to be excluded from the PSBT, which has caused many issues, as it required the sender to add them back to the Payjoin proposal PSBT. Version 2 has no such requirement.\n+\n+===Directory interactions===\n+\n+The Payjoin Directory provides a rendezvous point for sender and receiver to meet. The directory stores Payjoin payloads to support asynchronous communication. The directory must only accept OHTTP requests with an OHTTP Gateway for Payjoin version 2, accepting encrypted payloads. The directory may optionally accept HTTP/1.1 POST requests without OHTTP to Payjoin Session subdirectories to support backwards compatible Payjoin version 1 requests.\n+\n+===Subdirectories===\n+\n+Each Payjoin Session subdirectory allocated on the directory has one buffer for a PSBT payload. The buffer updates listeners through awaitable events so that updates are immediately apparent upon client request.\n+\n+===Receiver fragment parameters===\n+\n+A major benefit of BIP 78 Payjoin over other coordination mechanisms is its compatibility with the universal BIP 21 bitcoin URI standard.\n+\n+Instead of defining new [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21 URI]] parameters, Payjoin version 2 encodes parameters in the [[https://datatracker.ietf.org/doc/html/rfc3986#section-3.5| fragment]] of the URL following the <code>pj=</code> parameter in the BIP 21 URI. They follow the <code>#</code> character and follow the semantics of the [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki#abnf-grammar| BIP 21 \"otherparam\" grammar]], being separated by an <code>&</code> character.\n+\n+* <code>ohttp</code>: represents the OHTTP Key Configuration of the directory. This is a base64url encoded compressed public key of the directory's OHTTP Gateway, prefixed by the one byte Key Identifier, from which the [[https://www.ietf.org/rfc/rfc9458.html#section-3.1| RFC 9458 Key Configuration can be constructed]]. This parameter is required for version 2 Payjoin URIs.\n+* <code>exp</code>: represents a request expiration in [[https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16| Unix time]] after which the receiver reserves the right to broadcast the transaction extracted from the Original PSBT and ignore requests. This is only necessary for receivers who only support synchonous execution of the protocol, like automated payment processors.\n+\n+The '=' and '&' characters parameters must be [[https://datatracker.ietf.org/doc/html/rfc3986| RFC 3986]] percent-encoded as '%3D' and '%26' respectively according to BIP 21.\n+\n+For example, a properly encoded endpoint URL fragment looks like this <code>bitcoin:bcrt1qq34p97ah7fwxl3mnuyvtlg2serkawma8r9ylzr?pj=https://payjo.in/AoE6sWvRXaG5VAxea61t39syjhQGELKcXiI0DiLlnKtE#ohttp%3DAQJEXdFvFV4dCy48eYt8NEDsAXQznb67o2HObVYuE50cHg%26exp%3D1727464869&pjos=0</code>\n+\n+Using the fragment for Payjoin URI parameters makes for more compact QR codes too, since all of the characters are contained in alphanumeric QR mode is more compact than the byte mode.\n+\n+===Optional sender parameters===\n+\n+When a Payjoin sender POSTs an Original PSBT to the receiver, the sender should specify the following HTTP query string parameters:\n+\n+* <code>v</code>: represents the version number of the Payjoin protocol that the sender is using. This version is <code>2</code>.\n+\n+BIP 78's optional query parameters are also valid as version 2 parameters.\n+\n+==Rationale==\n+\n+===Request expiration & Original PSBT===\n+\n+The directory may hold a request for an offline payjoin peer until that peer comes online. However, the BIP 78 spec [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node| recommends]] broadcasting Original PSBTs in the case of an offline counterparty. Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which Payjoin intends to avoid.\n+\n+The existing BIP 78 protocol has to be synchronous only for automated endpoints, which may be vulnerable to probing attacks. It can cover this tradeoff by demanding an Original PSBT, from which a valid payment transaction may be extracted that would not preserve privacy the same way as a payjoin. BIP 21 URIs can communicate a request expiration to alleviate both of these problems. Receivers may specify a deadline after which they will broadcast this original with a new expiration parameter <code>exp=</code>.\n+\n+===HTTP===\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core to consider an implementation. Unlike a WebSockets protocol, plain HTTP can benefit from metadata protection by using Oblivious HTTP.\n+\n+===Oblivious HTTP===\n+\n+OHTTP protects sender and receiver IP addresses both from one another and from the directory. This makes it more difficult for a directory to correlate many payjoin transactions with specific IP addresses by intersection.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or third parties.\n+\n+====OHTTP Sequence Diagram====\n+\n+<img src=bip-0077/oblivious-http-sequence.png></img>\n+\n+\n+===Message Padding===\n+\n+All ciphertexts should be padded to the same length of 7168 bytes to prevent traffic analysis. This is sufficient size for most PSBTs without exceeding the [[https://www.geekersdigest.com/max-http-request-header-size-server-comparison/| 8KB limit]] of many HTTP/1.1 web servers. 8KB is also too small for image sharing, making misuse of the Payjoin Directory impractical.\n+\n+===Secp256k1 Hybrid Public Key Encryption===\n+\n+Hybrid Public Key Encryption (HPKE) is a modern web standard for secure message exchange without TLS. Since client and server agree on a configuration out of band, we can pre-define the Payjoin version 2 application specific configuration to use DHKEM(Secp256k1, HKDF-SHA256) and ChaCha20Poly1305 AEAD.\n+\n+The cryptographic handshake is conducted in parallel to the payjoin messaging inspired by the [[http://www.noiseprotocol.org/noise.html#zero-rtt-and-noise-protocols| zero-RTT]] version of the [[http://www.noiseprotocol.org/noise.html| Noise Framework]] [[https://noiseexplorer.com/patterns/IK/| IK]] pattern. A receiver shares its public key out of band in the BIP 21 URI. Static keys shared in URIs must only be used for a single Payjoin Session. The key is encoded in [[https://datatracker.ietf.org/doc/html/rfc4648#section-5| base64url]] encoding as a Payjoin Directory subdirectory in the <code>pj=</code> parameter.\n+\n+====Secp256k1-based DHKEM====\n+\n+[[https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html| Secp256k1-based DHKEM for HPKE]] is most appropriate because of secp256k1's availability in bitcoin contexts.\n+\n+====ChaCha20Poly1305 AEAD====\n+\n+This authenticated encryption with additional data [[https://en.wikipedia.org/wiki/ChaCha20-Poly1305| algorithm]] is standardized in [[https://www.rfc-editor.org/rfc/rfc8439| RFC 8439]] and has high performance. ChaCha20Poly1305 AEAD has been implemented [[https://github.com/bitcoin/bitcoin/pull/15649| in Bitcoin Core]] [[https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki| BIP 324]] as well. The protocol has widespread support in browsers, OpenSSL and libsodium. AES-GCM is more widespread but is both older, slower, and not necessarily already a dependency in bitcoin software.\n+\n+====HKDF-SHA256====\n+\n+SHA-256 is considered secure and is necessarily available in bitcoin contexts.\n+\n+===Attack vectors===\n+\n+In addition to the attack vectors and mitigations in [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#attack-vectors| BIP 78 Payjoin version 1]], Payjoin version 2 has the following attack vectors.\n+\n+Since directories store arbitrary encrypted payloads they are vulnerable to the tragedy of the commons and denial of service attacks. To mitigate such attacks, directory operators may impose an authentication requirement before they allocate a Payjoin Session subdirectory to receivers.\n+\n+Since we make use of 0-RTT HPKE, the first message containing the sender's Original PSBT has minimal forward secrecy. If the receiver's key is compromised, this message containing the Original PSBT could be read by the compromiser.\n+\n+Receivers may break spec by ignoring the <code>exp=</code> without financial consequence since the sender payload contains a valid transaction that may be broadcast at any time. There is no mechanism to enforce penalties if a receiver fails to construct a Proposal PSBT and wait for a signature once a Proposal PSBT is returned to a sender. However, such basic transactions that comply with the common-input assumption are the norm, so falling back to them is no worse than typical bitcoin transaction behavior.\n+\n+===Network privacy===\n+\n+Oblivious HTTP must be used to protect the IP addresses of both sender and receiver from the directory. This requires an OHTTP Key Configuration to be shared in the BIP 21 URI and for the directory to support Oblivious HTTP. A secp256k1 HPKE OHTTP configuration should be used to leverage the cryptography already available in bitcoin contexts.\n+\n+Unlike BIP 78 implementations, sender and receiver peers will only see the IP address of the directory and not that of their peers. Directories may additionally be made available via Tor hidden services to allow either of the peers to protect their IP from the directory without OHTTP.\n+\n+==Backwards compatibility==\n+\n+The receivers advertise Payjoin capabilities through [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21's URI Scheme]].\n+\n+Senders not supporting Payjoin will just ignore the <code>pj=</code> parameter and proceed to typical address-based transaction flows. A <code>req-pj=</code> parameter, as specified in BIP 21, may be advertised to compel Payjoin. If a sender intending to pay such a URI containing <code>req-pj=</code> does not support Payjoin, it MUST consider the entire URI invalid per BIP 21.\n+\n+Receivers may choose to support version 1 payloads. Version 2 Payjoin URIs for backwards compatible receivers MUST enable <code>pjos=0</code> so that these version 1 senders disable output substitution. Since the version 1 messages are neither encrypted nor authenticated, they would otherwise be at risk for man-in-the-middle attacks. The directory protocol should carry on as normal, responding to payjoin requests instead with this version 1 request as BHTTP in an OHTTP response. The receiver should POST version 1 Proposal PSBTs to the same subdirectory as in version 2 to respond to these version 1 senders within 30 seconds. If no response is received within 30 seconds, the directory should respond with an <code>unavailable</code> error code as [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-well-known-errors| defined in BIP 78]].\n+\n+==Reference implementation==\n+\n+An production reference implementation client can be found at [[https://crates.io/crates/payjoin-cli]]. Source code for the clients, the Payjoin Directory, and development kit may be found here: [[https://github.com/payjoin/rust-payjoin]]. Source code for an Oblivous HTTP relay implementation may be found here [[https://github.com/payjoin/ohttp-relay]]. The reference implementation may be configured to the following independent production relays as of 24/09/26:",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 276,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": 1924115270,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Yeah, that format makes me think it is intended to follow US conventions (MM/DD/YY). Writing it out or using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) (2024-09-26) would be better.",
      "created_at": "2025-03-21T14:57:38Z",
      "updated_at": "2025-03-21T14:57:38Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2007762757",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2007762757"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 276,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2012431154",
      "pull_request_review_id": 2714326376,
      "id": 2012431154,
      "node_id": "PRRC_kwDOAN28mc5380My",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 4,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": 1841052255,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If this is changed, would you prefer all instances of \"Payjoin version 2\" be replaced with \"Async Payjoin,\" or is \"Payjoin version 2\" sufficiently clear if it is defined to be what this document describes in contrast to \"Payjoin version 1?\"",
      "created_at": "2025-03-25T15:57:13Z",
      "updated_at": "2025-03-25T15:57:13Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2012431154",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2012431154"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2012985400",
      "pull_request_review_id": 2715287186,
      "id": 2012985400,
      "node_id": "PRRC_kwDOAN28mc53-7g4",
      "diff_hunk": "@@ -0,0 +1,280 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 4,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "28f064b98afd4c9138aa4ace51ebf348d3654d23",
      "in_reply_to_id": 1841052255,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "If itâ€™s introduced early on at some point that Payjoin v1 refers to BIP 78, and Payjoin v2 refers to this proposal, itâ€™s not necessary to replace everything.\r\n\r\nThat said, even this suggestion is optional.",
      "created_at": "2025-03-25T21:46:43Z",
      "updated_at": "2025-03-25T21:46:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2012985400",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2012985400"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025906039",
      "pull_request_review_id": 2738151745,
      "id": 2025906039,
      "node_id": "PRRC_kwDOAN28mc54wN93",
      "diff_hunk": "@@ -0,0 +1,553 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Payjoin Version 2 â€” Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+</pre>\n+\n+==Abstract==\n+\n+This document proposes a backwards-compatible second version of the Payjoin protocol described in\n+[[bip-0078.mediawiki|BIP 78]], allowing complete Payjoin receiver functionality, including payment output\n+substitution, without requiring one to host a secure public endpoint. This requirement is replaced with an\n+untrusted third-party directory accessed via HTTP clients that communicate using an asynchronous protocol\n+and authenticated, encrypted payloads. Authenticated encryption depends only on cryptographic primitives\n+available in Bitcoin Core. Requests use [[https://www.ietf.org/rfc/rfc9458.html| Oblivious HTTP]] to prevent\n+the directory and Payjoin peers from linking requests to client IP addresses.\n+\n+==Copyright==\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+==Motivation==\n+\n+Payjoin is the simplest case of interactive bitcoin batching, allowing two participants to combine their\n+transaction intents. It solves the sole privacy problem left open in the bitcoin paper, that transactions\n+with multiple inputs \"necessarily reveal that their inputs were owned by the same owner,\" by enabling two\n+owners to provide input in a transaction.\n+\n+The Payjoin protocols automate cooperative transaction construction to break that common-input assumption.\n+The increased opportunity to batch payments and execute transaction cut-through increases intent throughput,\n+since multiple intents combined take up fewer bytes than independent transactions.\n+\n+Payjoin version 1's requirements have proven to be an obstacle to adoption. Version 1 coordinates payjoins\n+over a public server endpoint secured by either TLS or Tor hidden service hosted by the receiver. Version 1\n+is also synchronous, requiring both sender and receiver to be online simultaneously to payjoin. Both\n+requirements present significant barriers for all but sophisticated server operators or those wallets with\n+complex Tor integration. Wallet developers [[https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-\n+January/018358.html| regard]] these as limits to Payjoin adoption.\n+\n+The primary goal of this proposal is to provide a practical coordination mechanism that can be implemented\n+in a majority of bitcoin software environments. This is done here using a simple protocol built on bitcoin\n+URI requests, web standards, common cryptography, and minimal dependencies.\n+\n+===Relation to BIP 78 (Payjoin version 1)===\n+\n+The message payloads in this version parallel those used in BIP 78, while being encapsulated in authenticated\n+encryption. TLS and Tor security, which depend on third-party authorities, are replaced with Hybrid Public\n+Key Encryption ([[https://www.rfc-editor.org/rfc/rfc9180| HPKE]]). The synchronous HTTP client-server model\n+is replaced with an asynchronous store-and-forward mechanism.\n+\n+The BIP 78 standard allows for an [[https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-\n+payjoin-server| unsecured Payjoin server|]] to operate separately from the so-called \"payment server\"\n+responsible for generating [[https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki| BIP 21]] request\n+URIs. Because BIP 78 messages relayed over an unsecured server are neither end-to-end authenticated nor\n+encrypted between sender and receiver, a malicious unsecured Payjoin server is able to modify the Proposal\n+PSBT in flight, thus requiring payment output substitution to be disabled. Output substitution is useful for\n+a number of block space optimizations, including payment batching and transaction cut-through. This proposal\n+introduces authentication and encryption to secure output substitution by using a directory server without\n+compromising sender or receiver privacy.\n+\n+Although unsecured Payjoin server separation is mentioned in BIP 78, no known specification or implementation\n+exists. This document specifies a way to use the Payjoin directory as an unsecured backwards compatible server",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 67,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "799e8c145da0304d847abfe59bd2311a1cf78968",
      "in_reply_to_id": null,
      "user": {
        "login": "thebrandonlucas",
        "id": 38222767,
        "node_id": "MDQ6VXNlcjM4MjIyNzY3",
        "avatar_url": "https://avatars.githubusercontent.com/u/38222767?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/thebrandonlucas",
        "html_url": "https://github.com/thebrandonlucas",
        "followers_url": "https://api.github.com/users/thebrandonlucas/followers",
        "following_url": "https://api.github.com/users/thebrandonlucas/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/thebrandonlucas/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/thebrandonlucas/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/thebrandonlucas/subscriptions",
        "organizations_url": "https://api.github.com/users/thebrandonlucas/orgs",
        "repos_url": "https://api.github.com/users/thebrandonlucas/repos",
        "events_url": "https://api.github.com/users/thebrandonlucas/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/thebrandonlucas/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There are alternately references to \"Payjoin directory\", \"Payjoin Directory\", and \"payjoin directory\" right now. Does a Payjoin Directory technically qualify as a proper noun? Same question for OHTTP relay vs. OHTTP Relay, since it is a specific type of relay.\r\n\r\nWhichever the choice, I think this should be consistent",
      "created_at": "2025-04-03T02:24:23Z",
      "updated_at": "2025-04-03T02:27:23Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2025906039",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2025906039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 67,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2071018392",
      "pull_request_review_id": 2811060783,
      "id": 2071018392,
      "node_id": "PRRC_kwDOAN28mc57cTuY",
      "diff_hunk": "@@ -421,6 +421,13 @@ Those proposing changes should consider that ultimately consent may rest with th\n | Standard\n | Final\n |-\n+| [[bip-0077.mediawiki|77]]\n+| Applications\n+| Payjoin Version 2 â€” Async Payjoin\n+| Dan Gould",
      "path": "README.mediawiki",
      "position": null,
      "original_position": 7,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "6f73925c06163a810ae4a97db7a31967976dc2da",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n| Dan Gould, Yuval Kogman\r\n```",
      "created_at": "2025-05-02T02:24:45Z",
      "updated_at": "2025-05-02T02:24:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2071018392",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2071018392"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 427,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2071019408",
      "pull_request_review_id": 2811062546,
      "id": 2071019408,
      "node_id": "PRRC_kwDOAN28mc57cT-Q",
      "diff_hunk": "@@ -0,0 +1,606 @@\n+<pre>\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin",
      "path": "bip-0077.mediawiki",
      "position": null,
      "original_position": 4,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "6f73925c06163a810ae4a97db7a31967976dc2da",
      "in_reply_to_id": null,
      "user": {
        "login": "jonatack",
        "id": 2415484,
        "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
        "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jonatack",
        "html_url": "https://github.com/jonatack",
        "followers_url": "https://api.github.com/users/jonatack/followers",
        "following_url": "https://api.github.com/users/jonatack/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/jonatack/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/jonatack/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
        "organizations_url": "https://api.github.com/users/jonatack/orgs",
        "repos_url": "https://api.github.com/users/jonatack/repos",
        "events_url": "https://api.github.com/users/jonatack/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/jonatack/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think the title here and in the README file entry for the BIP need to be the same.",
      "created_at": "2025-05-02T02:26:00Z",
      "updated_at": "2025-05-02T02:26:31Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2071019408",
      "author_association": "MEMBER",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2071019408"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 4,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2074319923",
      "pull_request_review_id": 2816306283,
      "id": 2074319923,
      "node_id": "PRRC_kwDOAN28mc57o5wz",
      "diff_hunk": "@@ -0,0 +1,672 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id), and encoding it in",
      "path": "bip-0077.md",
      "position": null,
      "original_position": 210,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "1ad8f269614bdb703c6e91b1a30aa67f70be893d",
      "in_reply_to_id": null,
      "user": {
        "login": "nothingmuch",
        "id": 14242,
        "node_id": "MDQ6VXNlcjE0MjQy",
        "avatar_url": "https://avatars.githubusercontent.com/u/14242?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nothingmuch",
        "html_url": "https://github.com/nothingmuch",
        "followers_url": "https://api.github.com/users/nothingmuch/followers",
        "following_url": "https://api.github.com/users/nothingmuch/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/nothingmuch/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/nothingmuch/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/nothingmuch/subscriptions",
        "organizations_url": "https://api.github.com/users/nothingmuch/orgs",
        "repos_url": "https://api.github.com/users/nothingmuch/repos",
        "events_url": "https://api.github.com/users/nothingmuch/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/nothingmuch/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\n(64 bits)](#64-bit-short-id-length), and encoding it in\r\n```",
      "created_at": "2025-05-05T22:41:25Z",
      "updated_at": "2025-05-05T22:41:25Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2074319923",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2074319923"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": null,
      "original_line": 210,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083294415",
      "pull_request_review_id": 2831069917,
      "id": 2083294415,
      "node_id": "PRRC_kwDOAN28mc58LIzP",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the\n+ciphertext.\n+\n+RFC 9180 [does not\n+specify](https://www.rfc-editor.org/rfc/rfc9180.html#section-10) the wire format\n+encoding of HPKE messages. To construct an HPKE payload, the secp256k1 public\n+key from the DHKEM is encoded using ElligatorSwift in 64 bytes. Note that\n+ElligatorSwift is only the wire format, when deriving shared secrets the curve\n+point is re-serialized in uncompressed form.\n+\n+```\n+PjV2MsgA Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +-----------------------+---------------------------------+------------+\n+|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |\n+|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The resulting HPKE payload is the body of a POST request to the\n+receiver's mailbox. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP\n+request and handles the inner POST request at the receiver's mailbox\n+endpoint, which stores the HPKE encrypted payload to be forwarded to the\n+receiver.\n+\n+The sender then polls OHTTP encapsulated GET requests to the sender's\n+mailbox endpoint until it receives a response from the directory\n+containing the receiver's *Proposal PSBT*, and proceeds to\n+[sign and broadcast](#sender-signing-and-broadcast).\n+It stops polling after expiration.\n+\n+#### Optional sender parameters\n+\n+[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\n+are also valid as version 2 parameters. Though in version 2 they are included in\n+the body as part of the ciphertext rather than as a query string.\n+\n+HPKE binds ciphertexts to application-specific `info` strings. Because\n+of this domain separation, BIP 78's `v` parameter is redundant and\n+should be omitted for version 2.\n+\n+### Receiver Proposal PSBT Messaging\n+\n+After sharing the Payjoin URI with the sender, the receiver polls via\n+OHTTP encapsulated GET requests to the receiver's mailbox endpoint. So\n+long as the mailbox contains no message, the directory responds with\n+status 202 ACCEPTED. Once a mailbox contains a message, the directory\n+returns it in the response body with status 200 OK.\n+\n+Upon receiving an encapsulated 200 OK response, the receiver decrypts\n+the payload and checks the *Original PSBT* therein according to the\n+[receiver checklist](#receivers-original-psbt-checklist).\n+\n+The receiver then updates the *Original PSBT* to include new signed\n+inputs and outputs, invalidating the sender's signature(s). The receiver\n+may also adjust the transaction fee. The result, called the *Proposal\n+PSBT*, must satisfy the [sender checklist](#senders-proposal-psbt-checklist)\n+\n+The Proposal PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the\n+  Original PSBT.\n+- Insert additional inputs and outputs at a random index.\n+\n+The Proposal PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the\n+  receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs contained in the Original PSBT.\n+- Decrease the absolute fee of the Original PSBT.\n+\n+The receiver encrypts the *Proposal PSBT* to the sender's reply key according to\n+[HPKE Auth\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy),\n+using the receiver's key for authentication. The HPKE `info` string is\n+`PjV2MsgB`. The HPKE wire format is the same as in the [sender's\n+message](#sender-original-psbt-messaging).\n+\n+```\n+PjV2MsgB Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +---------------------------------------------------------+------------+\n+|                |           Padded Plaintext                              |  AEAD Tag  |\n+|                |       (7088 bytes = 7168-64-16)                         | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The receiver makes the resulting HPKE payload the body of a POST request to the\n+sender's mailbox whose Short ID is derived from the sender's reply key. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Once the receiver makes this request, they wait for either transaction from the\n+Original PSBT or Proposal PSBT to be broadcast to the Bitcoin network.\n+\n+#### Receiver's Original PSBT checklist\n+\n+The receiver checklist is the same as the [the BIP 78 receiver\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist).\n+\n+### Sender signing and broadcast\n+\n+The sender validates the *Proposal PSBT* it receives against a\n+checklist. If the checks pass, it may sign and broadcast the resulting\n+payjoin transaction.\n+\n+#### Sender's Proposal PSBT checklist\n+\n+The version 2 sender's checklist is the same as the [the BIP 78 sender\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist).\n+\n+### Client/Directory interactions\n+\n+The Payjoin Directory provides a rendezvous point for senders and\n+receivers to exchange messages. The directory stores Payjoin payloads to\n+support asynchronous communication. Payjoin version 2 requests must be\n+submitted as encapsulated messages to the directory's OHTTP Gateway.\n+\n+The wire format OHTTP request is specified in [RFC\n+9458](https://www.ietf.org/rfc/rfc9458.html#name-hpke-encapsulation). HPKE\n+requires the directory's OHTTP key configuration. The plaintext is a binary\n+encoded HTTP request intended for the OHTTP target resource, usually a mailbox\n+endpoint.\n+\n+```\n+OHTTP Encapsulated Request Byte Representation (8192 bytes total)\n++--------------+-------------------------+------------------------------------------+\n+| OHTTP Header |         HPKE KEM        |               Ciphertext                 |\n+|  (7 bytes)   | Uncompressed Public Key |        (8120 bytes = 8192-65-7)          +\n+|              |        (65 bytes)       +-----------------------------+------------+\n+|              |                         |     Padded BHTTP Request    |  AEAD Tag  |\n+|              |                         | (8104 bytes = 8192-65-16-7) | (16 bytes) |\n++--------------+-------------------------+------------------------------------------+\n+```\n+\n+Response encryption uses the Export functionality of the request HPKE context to\n+establish a shared secret, and therefore consist of a 32 byte nonce followed by\n+the AEAD ciphertext and tag.\n+\n+```\n+OHTTP Encapsulated Response Byte Representation (8192 bytes total)\n++---------------------+------------------------------------------+\n+|        Nonce        |               Ciphertext                 |\n+|      (32 bytes)     |          (8160 bytes = 8192-32)          +\n+|                     +-----------------------------+------------+\n+|                     |     Padded BHTTP Response   |  AEAD Tag  |\n+|                     |   (8104 bytes = 8192-32-16) | (16 bytes) |\n++---------------------+------------------------------------------+\n+```\n+\n+GET requests on an empty mailbox should block until a message is posted\n+or a timeout occurs. The timeout should be 30 seconds because that will\n+not exceed the default timeout for most HTTP clients.\n+\n+The directory may optionally accept HTTP/1.1 POST requests without OHTTP\n+to mailbox endpoint URLs for backwards compatibility with Payjoin\n+version 1 senders.\n+\n+#### OHTTP Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+  title OHTTP Sequence Diagram\n+  participant C as Client\n+  participant R as OHTTP Relay\n+\n+  box PaleVioletRed Payjoin Directory\n+    participant G as OHTTP Gateway\n+    participant D as HTTP Resource\n+  end\n+\n+  C->>R: Relay Request<br/>FROM: Client IP<br/>[+ Encapsulated Request]\n+  R->>G: Gateway Request<br/>FROM: Relay IP<br/>[+ Encapsulated Request]\n+  G->>D: Request\n+  D->>G: Response\n+  G->>R: Gateway Response<br/>TO: Relay IP<br/>[+ Encapsulated Response]\n+  R->>C: Relay Response<br/>TO: Client IP<br/>[+ Encapsulated Response]\n+```\n+\n+### Relay/Directory interactions\n+\n+RFC 9458 requires each OHTTP Relay to be configured to forward requests\n+to exactly one OHTTP Gateway. This requirement prevents receivers from\n+being able to choose any directory, and senders from choosing relays\n+independently. Without addressing this limitation, senders would have to\n+know which relays are appropriate to use for each directory, creating a\n+tendency for one directory and its affiliated relays to monopolize the\n+Payjoin version 2 protocol.\n+\n+In order to allow OHTTP Relays to be used with any directory, a\n+directory's OHTTP Gateway may advertise this allowed purpose. This\n+advertisement prevents OHTTP Relays from acting as open internet proxies,\n+which would otherwise allow anonymized access to arbitrary resources and\n+expose them to denial-of-service attacks, as well as other forms of abuse.\n+When the directory receives a GET request to the `/.well-known/ohttp-gateway`\n+path with an `allowed_purposes` query parameter, its response body\n+should contain a magic string in the same format as a TLS ALPN protocol\n+list (a U16BE length encoded list of U8 length encoded strings). The\n+magic string is `BIP77 454403bb-9f7b-4385-b31f-acd2dae20b7e`, offering\n+an unambiguous signal to relays that this OHTTP Gateway will accept\n+requests associated with this purpose from any relay.\n+\n+By supporting this `allowed_purposes` parameter, the directory signals\n+to OHTTP Relays that it is willing to handle requests related to BIP 77\n+Payjoin version 2, removing the RFC 9458's requirement that relays and\n+Gateways be configured in a one-to-one relationship.\n+\n+## Rationale\n+\n+### Uppercase URL\n+\n+In order to simplify parsing and allow QR encoders to use [Alphanumeric\n+QR\n+mode](https://www.rfc-editor.org/rfc/rfc9285.html#name-the-alphabet-used-in-base45),\n+which is more compact than Byte mode, the mailbox endpoint URL,\n+including the fragment parameters, is encoded in uppercase.\n+\n+Unlike Bitcoin URI parameters, which require switching back to Byte\n+mode, the use of the URL fragment for session-specific parameters makes\n+it possible to stay in Alphanumeric mode.\n+\n+The `pj` parameter mailbox endpoint URL SHOULD be the last Bitcoin URI\n+parameter to avoid QR mode switching.\n+\n+### Session Expiration\n+\n+The directory may hold a message for an offline payjoin client until that\n+client comes online. However, the BIP 78 spec [\n+recommends](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node)\n+broadcasting Original PSBTs in the case of an offline counterparty.\n+Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which\n+Payjoin intends to avoid.\n+\n+Because BIP 78 is a synchronous protocol without a standard expiration\n+mechanism, and automated receivers are vulnerable to probing attacks,\n+BIP 78 encourages receivers to broadcast the Original PSBT after some\n+undefined expiration time.\n+\n+Because BIP 77 is an asynchronous protocol, it requires an explicit [\n+session-specific fragment\n+parameter](#receiver-fragment-parameters), `EX`, to\n+communicate this expiration time to the sender.\n+\n+There is no way for a sender to prevent a receiver from broadcasting the\n+fallback transaction extracted from the Original PSBT before the\n+receiver-specified expiration time.\n+\n+### 64-bit Short ID Length\n+\n+64 bits are sufficient to make the probability of experiencing a random\n+collision negligible. As of writing, the UTXO set has ~2^28 elements.\n+This is a very loose upper bound for the number of concurrent (non-spam)\n+sessions, for which the probability of a random collision will be less\n+than 1%. The actual number of sessions will of course be (orders of\n+magnitudes) lower given that sessions are short lived. With ~2^21\n+sessions (a loose bound on number of transactions that can be confirmed\n+in 24 hours) the probability is less than 1e-6. These figures bound the\n+probability of a collision existing anywhere in the entire set, whereas\n+the probability for an individual session to experience a collision is\n+\\<\\< 1e-10 in either case.\n+\n+### Complete UTXO Data\n+\n+Complete UTXO data is required because this information is required for\n+signing and calculating fees for some input types.\n+\n+### HTTP\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core\n+to consider an implementation. Unlike a WebSockets protocol, plain HTTP\n+can benefit from metadata protection by using Oblivious HTTP.\n+\n+### Oblivious HTTP\n+\n+OHTTP protects sender and receiver IP addresses both from one another\n+and from the directory. This makes it more difficult for a directory to\n+correlate many payjoin transactions with specific IP addresses.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or\n+third parties.\n+\n+### Uniform Payloads\n+\n+Encapsulated OHTTP payloads seen by the relay and directory, and\n+encrypted messages seen by the directory, are constructed to be uniform\n+so that these third-party services are unable to distinguish between\n+them.\n+\n+Encapsulated OHTTP messages are 8192 bytes long, and begin with a\n+cleartext OHTTP header and an uncompressed key which is distinguishable\n+from random bytes but uniform across different encapsulated requests.\n+\n+End-to-end encrypted messages are 7168 bytes long, and should be\n+indistinguishable from uniformly random bytes.\n+[ElligatorSwift as defined in BIP 324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#elligatorswift-encoding-of-curve-x-coordinates)\n+is used to encode encapsulated HPKE public keys prepended to the HPKE ciphertext\n+so that the directory can't distinguish between key material, the\n+ciphertext, and randomness. This ensures the two different protocol\n+messages are indistinguishable from each other as well as any protocol\n+extensions.\n+\n+These padded sizes are sufficient for most PSBTs without exceeding the [\n+8KB\n+limit](https://www.geekersdigest.com/max-http-request-header-size-server-comparison/)\n+of many HTTP/1.1 web servers. 8KB is also too small for image sharing,\n+making misuse of the directory impractical.\n+\n+### Secp256k1 Hybrid Public Key Encryption\n+\n+[RFC 9180 Hybrid Public Key\n+Encryption](https://www.rfc-editor.org/rfc/rfc9180.html)\n+(HPKE) is a modern IETF standard for secure\n+message exchange without TLS, which is not available in Bitcoin Core.\n+\n+Payjoin version 2 uses `DHKEM(Secp256k1, HKDF-SHA256)` and\n+`ChaCha20Poly1305` AEAD for both OHTTP encapsulation and for end-to-end\n+encryption between the sender and receiver.\n+\n+The receiver transmits its receiver key in [receiver fragment\n+parameters](#receiver-fragment-parameters). The sender shares\n+its reply key along with the Original PSBT. These keys are ephemeral and\n+must only be used for a single Payjoin Session.\n+\n+#### Secp256k1-based DHKEM\n+\n+[Secp256k1-based DHKEM for\n+HPKE](https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html)\n+is most appropriate because of secp256k1's availability in bitcoin\n+contexts.\n+\n+#### ChaCha20Poly1305 AEAD\n+\n+This authenticated encryption with additional data [\n+algorithm](https://en.wikipedia.org/wiki/ChaCha20-Poly1305)\n+is standardized in [RFC\n+8439](https://www.rfc-editor.org/rfc/rfc8439) and has high\n+performance. ChaCha20Poly1305 AEAD has been implemented [in Bitcoin\n+Core](https://github.com/bitcoin/bitcoin/pull/15649) for [\n+BIP 324 Encrypted\n+Transport](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki)\n+as well. This has widespread support in browsers and common\n+cryptographic libraries. AES-GCM is more widespread but slower without\n+hardware support and not typically already a dependency in bitcoin software.\n+\n+#### HKDF-SHA256\n+\n+SHA-256 is necessarily available in bitcoin contexts.",
      "path": "bip-0077.md",
      "position": 646,
      "original_position": 646,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "There may be a need for more information about HKDF-SHA256.\r\nBitcoin Core, for example, has an HKDF-SHA256 implementation (for BIP 324), but it only supports an output length of 32 bytes (L=32).\r\nhttps://github.com/bitcoin/bitcoin/blob/746ab19d5a13c98ae7492f9b6fb7bd6a2103c65d/src/crypto/hkdf_sha256_32.h#L13\r\n\r\nIs this implementation, for example, sufficient for Payjoin, or do we need a fully RFC 5896-compliant HKDF-SHA256 implementation?",
      "created_at": "2025-05-10T21:38:11Z",
      "updated_at": "2025-05-10T21:39:01Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2083294415",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083294415"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 646,
      "original_line": 646,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083296217",
      "pull_request_review_id": 2831071600,
      "id": 2083296217,
      "node_id": "PRRC_kwDOAN28mc58LJPZ",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the\n+ciphertext.\n+\n+RFC 9180 [does not\n+specify](https://www.rfc-editor.org/rfc/rfc9180.html#section-10) the wire format\n+encoding of HPKE messages. To construct an HPKE payload, the secp256k1 public\n+key from the DHKEM is encoded using ElligatorSwift in 64 bytes. Note that\n+ElligatorSwift is only the wire format, when deriving shared secrets the curve\n+point is re-serialized in uncompressed form.\n+\n+```\n+PjV2MsgA Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +-----------------------+---------------------------------+------------+\n+|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |\n+|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The resulting HPKE payload is the body of a POST request to the\n+receiver's mailbox. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP\n+request and handles the inner POST request at the receiver's mailbox\n+endpoint, which stores the HPKE encrypted payload to be forwarded to the\n+receiver.\n+\n+The sender then polls OHTTP encapsulated GET requests to the sender's\n+mailbox endpoint until it receives a response from the directory\n+containing the receiver's *Proposal PSBT*, and proceeds to\n+[sign and broadcast](#sender-signing-and-broadcast).\n+It stops polling after expiration.\n+\n+#### Optional sender parameters\n+\n+[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\n+are also valid as version 2 parameters. Though in version 2 they are included in\n+the body as part of the ciphertext rather than as a query string.\n+\n+HPKE binds ciphertexts to application-specific `info` strings. Because\n+of this domain separation, BIP 78's `v` parameter is redundant and\n+should be omitted for version 2.\n+\n+### Receiver Proposal PSBT Messaging\n+\n+After sharing the Payjoin URI with the sender, the receiver polls via\n+OHTTP encapsulated GET requests to the receiver's mailbox endpoint. So\n+long as the mailbox contains no message, the directory responds with\n+status 202 ACCEPTED. Once a mailbox contains a message, the directory\n+returns it in the response body with status 200 OK.\n+\n+Upon receiving an encapsulated 200 OK response, the receiver decrypts\n+the payload and checks the *Original PSBT* therein according to the\n+[receiver checklist](#receivers-original-psbt-checklist).\n+\n+The receiver then updates the *Original PSBT* to include new signed\n+inputs and outputs, invalidating the sender's signature(s). The receiver\n+may also adjust the transaction fee. The result, called the *Proposal\n+PSBT*, must satisfy the [sender checklist](#senders-proposal-psbt-checklist)\n+\n+The Proposal PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the\n+  Original PSBT.\n+- Insert additional inputs and outputs at a random index.\n+\n+The Proposal PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the\n+  receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs contained in the Original PSBT.\n+- Decrease the absolute fee of the Original PSBT.\n+\n+The receiver encrypts the *Proposal PSBT* to the sender's reply key according to\n+[HPKE Auth\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy),\n+using the receiver's key for authentication. The HPKE `info` string is\n+`PjV2MsgB`. The HPKE wire format is the same as in the [sender's\n+message](#sender-original-psbt-messaging).\n+\n+```\n+PjV2MsgB Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +---------------------------------------------------------+------------+\n+|                |           Padded Plaintext                              |  AEAD Tag  |\n+|                |       (7088 bytes = 7168-64-16)                         | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The receiver makes the resulting HPKE payload the body of a POST request to the\n+sender's mailbox whose Short ID is derived from the sender's reply key. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Once the receiver makes this request, they wait for either transaction from the\n+Original PSBT or Proposal PSBT to be broadcast to the Bitcoin network.\n+\n+#### Receiver's Original PSBT checklist\n+\n+The receiver checklist is the same as the [the BIP 78 receiver\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist).\n+\n+### Sender signing and broadcast\n+\n+The sender validates the *Proposal PSBT* it receives against a\n+checklist. If the checks pass, it may sign and broadcast the resulting\n+payjoin transaction.\n+\n+#### Sender's Proposal PSBT checklist\n+\n+The version 2 sender's checklist is the same as the [the BIP 78 sender\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist).\n+\n+### Client/Directory interactions\n+\n+The Payjoin Directory provides a rendezvous point for senders and\n+receivers to exchange messages. The directory stores Payjoin payloads to\n+support asynchronous communication. Payjoin version 2 requests must be\n+submitted as encapsulated messages to the directory's OHTTP Gateway.\n+\n+The wire format OHTTP request is specified in [RFC\n+9458](https://www.ietf.org/rfc/rfc9458.html#name-hpke-encapsulation). HPKE\n+requires the directory's OHTTP key configuration. The plaintext is a binary\n+encoded HTTP request intended for the OHTTP target resource, usually a mailbox\n+endpoint.\n+\n+```\n+OHTTP Encapsulated Request Byte Representation (8192 bytes total)\n++--------------+-------------------------+------------------------------------------+\n+| OHTTP Header |         HPKE KEM        |               Ciphertext                 |\n+|  (7 bytes)   | Uncompressed Public Key |        (8120 bytes = 8192-65-7)          +\n+|              |        (65 bytes)       +-----------------------------+------------+\n+|              |                         |     Padded BHTTP Request    |  AEAD Tag  |\n+|              |                         | (8104 bytes = 8192-65-16-7) | (16 bytes) |\n++--------------+-------------------------+------------------------------------------+\n+```\n+\n+Response encryption uses the Export functionality of the request HPKE context to\n+establish a shared secret, and therefore consist of a 32 byte nonce followed by\n+the AEAD ciphertext and tag.\n+\n+```\n+OHTTP Encapsulated Response Byte Representation (8192 bytes total)\n++---------------------+------------------------------------------+\n+|        Nonce        |               Ciphertext                 |\n+|      (32 bytes)     |          (8160 bytes = 8192-32)          +\n+|                     +-----------------------------+------------+\n+|                     |     Padded BHTTP Response   |  AEAD Tag  |\n+|                     |   (8104 bytes = 8192-32-16) | (16 bytes) |\n++---------------------+------------------------------------------+\n+```\n+\n+GET requests on an empty mailbox should block until a message is posted\n+or a timeout occurs. The timeout should be 30 seconds because that will\n+not exceed the default timeout for most HTTP clients.\n+\n+The directory may optionally accept HTTP/1.1 POST requests without OHTTP\n+to mailbox endpoint URLs for backwards compatibility with Payjoin\n+version 1 senders.\n+\n+#### OHTTP Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+  title OHTTP Sequence Diagram\n+  participant C as Client\n+  participant R as OHTTP Relay\n+\n+  box PaleVioletRed Payjoin Directory\n+    participant G as OHTTP Gateway\n+    participant D as HTTP Resource\n+  end\n+\n+  C->>R: Relay Request<br/>FROM: Client IP<br/>[+ Encapsulated Request]\n+  R->>G: Gateway Request<br/>FROM: Relay IP<br/>[+ Encapsulated Request]\n+  G->>D: Request\n+  D->>G: Response\n+  G->>R: Gateway Response<br/>TO: Relay IP<br/>[+ Encapsulated Response]\n+  R->>C: Relay Response<br/>TO: Client IP<br/>[+ Encapsulated Response]\n+```\n+\n+### Relay/Directory interactions\n+\n+RFC 9458 requires each OHTTP Relay to be configured to forward requests\n+to exactly one OHTTP Gateway. This requirement prevents receivers from\n+being able to choose any directory, and senders from choosing relays\n+independently. Without addressing this limitation, senders would have to\n+know which relays are appropriate to use for each directory, creating a\n+tendency for one directory and its affiliated relays to monopolize the\n+Payjoin version 2 protocol.\n+\n+In order to allow OHTTP Relays to be used with any directory, a\n+directory's OHTTP Gateway may advertise this allowed purpose. This\n+advertisement prevents OHTTP Relays from acting as open internet proxies,\n+which would otherwise allow anonymized access to arbitrary resources and\n+expose them to denial-of-service attacks, as well as other forms of abuse.\n+When the directory receives a GET request to the `/.well-known/ohttp-gateway`\n+path with an `allowed_purposes` query parameter, its response body\n+should contain a magic string in the same format as a TLS ALPN protocol\n+list (a U16BE length encoded list of U8 length encoded strings). The\n+magic string is `BIP77 454403bb-9f7b-4385-b31f-acd2dae20b7e`, offering\n+an unambiguous signal to relays that this OHTTP Gateway will accept\n+requests associated with this purpose from any relay.\n+\n+By supporting this `allowed_purposes` parameter, the directory signals\n+to OHTTP Relays that it is willing to handle requests related to BIP 77\n+Payjoin version 2, removing the RFC 9458's requirement that relays and\n+Gateways be configured in a one-to-one relationship.\n+\n+## Rationale\n+\n+### Uppercase URL\n+\n+In order to simplify parsing and allow QR encoders to use [Alphanumeric\n+QR\n+mode](https://www.rfc-editor.org/rfc/rfc9285.html#name-the-alphabet-used-in-base45),\n+which is more compact than Byte mode, the mailbox endpoint URL,\n+including the fragment parameters, is encoded in uppercase.\n+\n+Unlike Bitcoin URI parameters, which require switching back to Byte\n+mode, the use of the URL fragment for session-specific parameters makes\n+it possible to stay in Alphanumeric mode.\n+\n+The `pj` parameter mailbox endpoint URL SHOULD be the last Bitcoin URI\n+parameter to avoid QR mode switching.\n+\n+### Session Expiration\n+\n+The directory may hold a message for an offline payjoin client until that\n+client comes online. However, the BIP 78 spec [\n+recommends](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node)\n+broadcasting Original PSBTs in the case of an offline counterparty.\n+Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which\n+Payjoin intends to avoid.\n+\n+Because BIP 78 is a synchronous protocol without a standard expiration\n+mechanism, and automated receivers are vulnerable to probing attacks,\n+BIP 78 encourages receivers to broadcast the Original PSBT after some\n+undefined expiration time.\n+\n+Because BIP 77 is an asynchronous protocol, it requires an explicit [\n+session-specific fragment\n+parameter](#receiver-fragment-parameters), `EX`, to\n+communicate this expiration time to the sender.\n+\n+There is no way for a sender to prevent a receiver from broadcasting the\n+fallback transaction extracted from the Original PSBT before the\n+receiver-specified expiration time.\n+\n+### 64-bit Short ID Length\n+\n+64 bits are sufficient to make the probability of experiencing a random\n+collision negligible. As of writing, the UTXO set has ~2^28 elements.\n+This is a very loose upper bound for the number of concurrent (non-spam)\n+sessions, for which the probability of a random collision will be less\n+than 1%. The actual number of sessions will of course be (orders of\n+magnitudes) lower given that sessions are short lived. With ~2^21\n+sessions (a loose bound on number of transactions that can be confirmed\n+in 24 hours) the probability is less than 1e-6. These figures bound the\n+probability of a collision existing anywhere in the entire set, whereas\n+the probability for an individual session to experience a collision is\n+\\<\\< 1e-10 in either case.\n+\n+### Complete UTXO Data\n+\n+Complete UTXO data is required because this information is required for\n+signing and calculating fees for some input types.\n+\n+### HTTP\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core\n+to consider an implementation. Unlike a WebSockets protocol, plain HTTP\n+can benefit from metadata protection by using Oblivious HTTP.\n+\n+### Oblivious HTTP\n+\n+OHTTP protects sender and receiver IP addresses both from one another\n+and from the directory. This makes it more difficult for a directory to\n+correlate many payjoin transactions with specific IP addresses.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or\n+third parties.\n+\n+### Uniform Payloads\n+\n+Encapsulated OHTTP payloads seen by the relay and directory, and\n+encrypted messages seen by the directory, are constructed to be uniform\n+so that these third-party services are unable to distinguish between\n+them.\n+\n+Encapsulated OHTTP messages are 8192 bytes long, and begin with a\n+cleartext OHTTP header and an uncompressed key which is distinguishable\n+from random bytes but uniform across different encapsulated requests.\n+\n+End-to-end encrypted messages are 7168 bytes long, and should be\n+indistinguishable from uniformly random bytes.\n+[ElligatorSwift as defined in BIP 324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#elligatorswift-encoding-of-curve-x-coordinates)\n+is used to encode encapsulated HPKE public keys prepended to the HPKE ciphertext\n+so that the directory can't distinguish between key material, the\n+ciphertext, and randomness. This ensures the two different protocol\n+messages are indistinguishable from each other as well as any protocol\n+extensions.\n+\n+These padded sizes are sufficient for most PSBTs without exceeding the [\n+8KB\n+limit](https://www.geekersdigest.com/max-http-request-header-size-server-comparison/)\n+of many HTTP/1.1 web servers. 8KB is also too small for image sharing,\n+making misuse of the directory impractical.\n+\n+### Secp256k1 Hybrid Public Key Encryption\n+\n+[RFC 9180 Hybrid Public Key\n+Encryption](https://www.rfc-editor.org/rfc/rfc9180.html)",
      "path": "bip-0077.md",
      "position": 610,
      "original_position": 610,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "w0xlt",
        "id": 94266259,
        "node_id": "U_kgDOBZ5jkw",
        "avatar_url": "https://avatars.githubusercontent.com/u/94266259?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/w0xlt",
        "html_url": "https://github.com/w0xlt",
        "followers_url": "https://api.github.com/users/w0xlt/followers",
        "following_url": "https://api.github.com/users/w0xlt/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/w0xlt/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/w0xlt/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/w0xlt/subscriptions",
        "organizations_url": "https://api.github.com/users/w0xlt/orgs",
        "repos_url": "https://api.github.com/users/w0xlt/repos",
        "events_url": "https://api.github.com/users/w0xlt/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/w0xlt/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This section and perhaps the next one (Secp256k1 based DHKEM) may need to be more detailed.\r\n\r\n[RFC 9180 (Section 7.1)](https://www.ietf.org/rfc/rfc9180.html#section-7.1) lists the initial set of registered KEM identifiers. These include DHKEMs based on:\r\n* NIST curves: P-256, P-384, P-521\r\n* Curve25519, Curve448\r\n* Crucially, secp256k1 is not among the curves for which KEMs are pre-defined in RFC 9180.\r\n\r\nInstead of the 'Secp256k1-based DHKEM' section of this BIP pointing to a draft link, it could describe the scheme directly here",
      "created_at": "2025-05-10T21:51:55Z",
      "updated_at": "2025-05-10T21:52:00Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2083296217",
      "author_association": "NONE",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083296217"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083664709",
      "pull_request_review_id": 2831563387,
      "id": 2083664709,
      "node_id": "PRRC_kwDOAN28mc58MjNF",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the\n+ciphertext.\n+\n+RFC 9180 [does not\n+specify](https://www.rfc-editor.org/rfc/rfc9180.html#section-10) the wire format\n+encoding of HPKE messages. To construct an HPKE payload, the secp256k1 public\n+key from the DHKEM is encoded using ElligatorSwift in 64 bytes. Note that\n+ElligatorSwift is only the wire format, when deriving shared secrets the curve\n+point is re-serialized in uncompressed form.\n+\n+```\n+PjV2MsgA Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +-----------------------+---------------------------------+------------+\n+|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |\n+|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The resulting HPKE payload is the body of a POST request to the\n+receiver's mailbox. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP\n+request and handles the inner POST request at the receiver's mailbox\n+endpoint, which stores the HPKE encrypted payload to be forwarded to the\n+receiver.\n+\n+The sender then polls OHTTP encapsulated GET requests to the sender's\n+mailbox endpoint until it receives a response from the directory\n+containing the receiver's *Proposal PSBT*, and proceeds to\n+[sign and broadcast](#sender-signing-and-broadcast).\n+It stops polling after expiration.\n+\n+#### Optional sender parameters\n+\n+[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\n+are also valid as version 2 parameters. Though in version 2 they are included in\n+the body as part of the ciphertext rather than as a query string.\n+\n+HPKE binds ciphertexts to application-specific `info` strings. Because\n+of this domain separation, BIP 78's `v` parameter is redundant and\n+should be omitted for version 2.\n+\n+### Receiver Proposal PSBT Messaging\n+\n+After sharing the Payjoin URI with the sender, the receiver polls via\n+OHTTP encapsulated GET requests to the receiver's mailbox endpoint. So\n+long as the mailbox contains no message, the directory responds with\n+status 202 ACCEPTED. Once a mailbox contains a message, the directory\n+returns it in the response body with status 200 OK.\n+\n+Upon receiving an encapsulated 200 OK response, the receiver decrypts\n+the payload and checks the *Original PSBT* therein according to the\n+[receiver checklist](#receivers-original-psbt-checklist).\n+\n+The receiver then updates the *Original PSBT* to include new signed\n+inputs and outputs, invalidating the sender's signature(s). The receiver\n+may also adjust the transaction fee. The result, called the *Proposal\n+PSBT*, must satisfy the [sender checklist](#senders-proposal-psbt-checklist)\n+\n+The Proposal PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the\n+  Original PSBT.\n+- Insert additional inputs and outputs at a random index.\n+\n+The Proposal PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the\n+  receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs contained in the Original PSBT.\n+- Decrease the absolute fee of the Original PSBT.\n+\n+The receiver encrypts the *Proposal PSBT* to the sender's reply key according to\n+[HPKE Auth\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy),\n+using the receiver's key for authentication. The HPKE `info` string is\n+`PjV2MsgB`. The HPKE wire format is the same as in the [sender's\n+message](#sender-original-psbt-messaging).\n+\n+```\n+PjV2MsgB Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +---------------------------------------------------------+------------+\n+|                |           Padded Plaintext                              |  AEAD Tag  |\n+|                |       (7088 bytes = 7168-64-16)                         | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The receiver makes the resulting HPKE payload the body of a POST request to the\n+sender's mailbox whose Short ID is derived from the sender's reply key. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Once the receiver makes this request, they wait for either transaction from the\n+Original PSBT or Proposal PSBT to be broadcast to the Bitcoin network.\n+\n+#### Receiver's Original PSBT checklist\n+\n+The receiver checklist is the same as the [the BIP 78 receiver\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist).\n+\n+### Sender signing and broadcast\n+\n+The sender validates the *Proposal PSBT* it receives against a\n+checklist. If the checks pass, it may sign and broadcast the resulting\n+payjoin transaction.\n+\n+#### Sender's Proposal PSBT checklist\n+\n+The version 2 sender's checklist is the same as the [the BIP 78 sender\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist).\n+\n+### Client/Directory interactions\n+\n+The Payjoin Directory provides a rendezvous point for senders and\n+receivers to exchange messages. The directory stores Payjoin payloads to\n+support asynchronous communication. Payjoin version 2 requests must be\n+submitted as encapsulated messages to the directory's OHTTP Gateway.\n+\n+The wire format OHTTP request is specified in [RFC\n+9458](https://www.ietf.org/rfc/rfc9458.html#name-hpke-encapsulation). HPKE\n+requires the directory's OHTTP key configuration. The plaintext is a binary\n+encoded HTTP request intended for the OHTTP target resource, usually a mailbox\n+endpoint.\n+\n+```\n+OHTTP Encapsulated Request Byte Representation (8192 bytes total)\n++--------------+-------------------------+------------------------------------------+\n+| OHTTP Header |         HPKE KEM        |               Ciphertext                 |\n+|  (7 bytes)   | Uncompressed Public Key |        (8120 bytes = 8192-65-7)          +\n+|              |        (65 bytes)       +-----------------------------+------------+\n+|              |                         |     Padded BHTTP Request    |  AEAD Tag  |\n+|              |                         | (8104 bytes = 8192-65-16-7) | (16 bytes) |\n++--------------+-------------------------+------------------------------------------+\n+```\n+\n+Response encryption uses the Export functionality of the request HPKE context to\n+establish a shared secret, and therefore consist of a 32 byte nonce followed by\n+the AEAD ciphertext and tag.\n+\n+```\n+OHTTP Encapsulated Response Byte Representation (8192 bytes total)\n++---------------------+------------------------------------------+\n+|        Nonce        |               Ciphertext                 |\n+|      (32 bytes)     |          (8160 bytes = 8192-32)          +\n+|                     +-----------------------------+------------+\n+|                     |     Padded BHTTP Response   |  AEAD Tag  |\n+|                     |   (8104 bytes = 8192-32-16) | (16 bytes) |\n++---------------------+------------------------------------------+\n+```\n+\n+GET requests on an empty mailbox should block until a message is posted\n+or a timeout occurs. The timeout should be 30 seconds because that will\n+not exceed the default timeout for most HTTP clients.\n+\n+The directory may optionally accept HTTP/1.1 POST requests without OHTTP\n+to mailbox endpoint URLs for backwards compatibility with Payjoin\n+version 1 senders.\n+\n+#### OHTTP Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+  title OHTTP Sequence Diagram\n+  participant C as Client\n+  participant R as OHTTP Relay\n+\n+  box PaleVioletRed Payjoin Directory\n+    participant G as OHTTP Gateway\n+    participant D as HTTP Resource\n+  end\n+\n+  C->>R: Relay Request<br/>FROM: Client IP<br/>[+ Encapsulated Request]\n+  R->>G: Gateway Request<br/>FROM: Relay IP<br/>[+ Encapsulated Request]\n+  G->>D: Request\n+  D->>G: Response\n+  G->>R: Gateway Response<br/>TO: Relay IP<br/>[+ Encapsulated Response]\n+  R->>C: Relay Response<br/>TO: Client IP<br/>[+ Encapsulated Response]\n+```\n+\n+### Relay/Directory interactions\n+\n+RFC 9458 requires each OHTTP Relay to be configured to forward requests\n+to exactly one OHTTP Gateway. This requirement prevents receivers from\n+being able to choose any directory, and senders from choosing relays\n+independently. Without addressing this limitation, senders would have to\n+know which relays are appropriate to use for each directory, creating a\n+tendency for one directory and its affiliated relays to monopolize the\n+Payjoin version 2 protocol.\n+\n+In order to allow OHTTP Relays to be used with any directory, a\n+directory's OHTTP Gateway may advertise this allowed purpose. This\n+advertisement prevents OHTTP Relays from acting as open internet proxies,\n+which would otherwise allow anonymized access to arbitrary resources and\n+expose them to denial-of-service attacks, as well as other forms of abuse.\n+When the directory receives a GET request to the `/.well-known/ohttp-gateway`\n+path with an `allowed_purposes` query parameter, its response body\n+should contain a magic string in the same format as a TLS ALPN protocol\n+list (a U16BE length encoded list of U8 length encoded strings). The\n+magic string is `BIP77 454403bb-9f7b-4385-b31f-acd2dae20b7e`, offering\n+an unambiguous signal to relays that this OHTTP Gateway will accept\n+requests associated with this purpose from any relay.\n+\n+By supporting this `allowed_purposes` parameter, the directory signals\n+to OHTTP Relays that it is willing to handle requests related to BIP 77\n+Payjoin version 2, removing the RFC 9458's requirement that relays and\n+Gateways be configured in a one-to-one relationship.\n+\n+## Rationale\n+\n+### Uppercase URL\n+\n+In order to simplify parsing and allow QR encoders to use [Alphanumeric\n+QR\n+mode](https://www.rfc-editor.org/rfc/rfc9285.html#name-the-alphabet-used-in-base45),\n+which is more compact than Byte mode, the mailbox endpoint URL,\n+including the fragment parameters, is encoded in uppercase.\n+\n+Unlike Bitcoin URI parameters, which require switching back to Byte\n+mode, the use of the URL fragment for session-specific parameters makes\n+it possible to stay in Alphanumeric mode.\n+\n+The `pj` parameter mailbox endpoint URL SHOULD be the last Bitcoin URI\n+parameter to avoid QR mode switching.\n+\n+### Session Expiration\n+\n+The directory may hold a message for an offline payjoin client until that\n+client comes online. However, the BIP 78 spec [\n+recommends](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node)\n+broadcasting Original PSBTs in the case of an offline counterparty.\n+Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which\n+Payjoin intends to avoid.\n+\n+Because BIP 78 is a synchronous protocol without a standard expiration\n+mechanism, and automated receivers are vulnerable to probing attacks,\n+BIP 78 encourages receivers to broadcast the Original PSBT after some\n+undefined expiration time.\n+\n+Because BIP 77 is an asynchronous protocol, it requires an explicit [\n+session-specific fragment\n+parameter](#receiver-fragment-parameters), `EX`, to\n+communicate this expiration time to the sender.\n+\n+There is no way for a sender to prevent a receiver from broadcasting the\n+fallback transaction extracted from the Original PSBT before the\n+receiver-specified expiration time.\n+\n+### 64-bit Short ID Length\n+\n+64 bits are sufficient to make the probability of experiencing a random\n+collision negligible. As of writing, the UTXO set has ~2^28 elements.\n+This is a very loose upper bound for the number of concurrent (non-spam)\n+sessions, for which the probability of a random collision will be less\n+than 1%. The actual number of sessions will of course be (orders of\n+magnitudes) lower given that sessions are short lived. With ~2^21\n+sessions (a loose bound on number of transactions that can be confirmed\n+in 24 hours) the probability is less than 1e-6. These figures bound the\n+probability of a collision existing anywhere in the entire set, whereas\n+the probability for an individual session to experience a collision is\n+\\<\\< 1e-10 in either case.\n+\n+### Complete UTXO Data\n+\n+Complete UTXO data is required because this information is required for\n+signing and calculating fees for some input types.\n+\n+### HTTP\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core\n+to consider an implementation. Unlike a WebSockets protocol, plain HTTP\n+can benefit from metadata protection by using Oblivious HTTP.\n+\n+### Oblivious HTTP\n+\n+OHTTP protects sender and receiver IP addresses both from one another\n+and from the directory. This makes it more difficult for a directory to\n+correlate many payjoin transactions with specific IP addresses.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or\n+third parties.\n+\n+### Uniform Payloads\n+\n+Encapsulated OHTTP payloads seen by the relay and directory, and\n+encrypted messages seen by the directory, are constructed to be uniform\n+so that these third-party services are unable to distinguish between\n+them.\n+\n+Encapsulated OHTTP messages are 8192 bytes long, and begin with a\n+cleartext OHTTP header and an uncompressed key which is distinguishable\n+from random bytes but uniform across different encapsulated requests.\n+\n+End-to-end encrypted messages are 7168 bytes long, and should be\n+indistinguishable from uniformly random bytes.\n+[ElligatorSwift as defined in BIP 324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#elligatorswift-encoding-of-curve-x-coordinates)\n+is used to encode encapsulated HPKE public keys prepended to the HPKE ciphertext\n+so that the directory can't distinguish between key material, the\n+ciphertext, and randomness. This ensures the two different protocol\n+messages are indistinguishable from each other as well as any protocol\n+extensions.\n+\n+These padded sizes are sufficient for most PSBTs without exceeding the [\n+8KB\n+limit](https://www.geekersdigest.com/max-http-request-header-size-server-comparison/)\n+of many HTTP/1.1 web servers. 8KB is also too small for image sharing,\n+making misuse of the directory impractical.\n+\n+### Secp256k1 Hybrid Public Key Encryption\n+\n+[RFC 9180 Hybrid Public Key\n+Encryption](https://www.rfc-editor.org/rfc/rfc9180.html)",
      "path": "bip-0077.md",
      "position": 610,
      "original_position": 610,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": 2083296217,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I'd rather post to the draft, which [IANA also links to as the authoritative reference](https://www.iana.org/assignments/hpke/hpke.xhtml) rather than try to copy it.\r\n\r\nI also find the sentence structure \"x may need to be more detailed\" confusing because I don't know what inspired the comment. Do you have a reason why you prefer a specific level of increased detail?",
      "created_at": "2025-05-12T00:21:42Z",
      "updated_at": "2025-05-12T00:32:57Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2083664709",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083664709"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 610,
      "original_line": 610,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083667288",
      "pull_request_review_id": 2831567069,
      "id": 2083667288,
      "node_id": "PRRC_kwDOAN28mc58Mj1Y",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the\n+ciphertext.\n+\n+RFC 9180 [does not\n+specify](https://www.rfc-editor.org/rfc/rfc9180.html#section-10) the wire format\n+encoding of HPKE messages. To construct an HPKE payload, the secp256k1 public\n+key from the DHKEM is encoded using ElligatorSwift in 64 bytes. Note that\n+ElligatorSwift is only the wire format, when deriving shared secrets the curve\n+point is re-serialized in uncompressed form.\n+\n+```\n+PjV2MsgA Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +-----------------------+---------------------------------+------------+\n+|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |\n+|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The resulting HPKE payload is the body of a POST request to the\n+receiver's mailbox. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP\n+request and handles the inner POST request at the receiver's mailbox\n+endpoint, which stores the HPKE encrypted payload to be forwarded to the\n+receiver.\n+\n+The sender then polls OHTTP encapsulated GET requests to the sender's\n+mailbox endpoint until it receives a response from the directory\n+containing the receiver's *Proposal PSBT*, and proceeds to\n+[sign and broadcast](#sender-signing-and-broadcast).\n+It stops polling after expiration.\n+\n+#### Optional sender parameters\n+\n+[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\n+are also valid as version 2 parameters. Though in version 2 they are included in\n+the body as part of the ciphertext rather than as a query string.\n+\n+HPKE binds ciphertexts to application-specific `info` strings. Because\n+of this domain separation, BIP 78's `v` parameter is redundant and\n+should be omitted for version 2.\n+\n+### Receiver Proposal PSBT Messaging\n+\n+After sharing the Payjoin URI with the sender, the receiver polls via\n+OHTTP encapsulated GET requests to the receiver's mailbox endpoint. So\n+long as the mailbox contains no message, the directory responds with\n+status 202 ACCEPTED. Once a mailbox contains a message, the directory\n+returns it in the response body with status 200 OK.\n+\n+Upon receiving an encapsulated 200 OK response, the receiver decrypts\n+the payload and checks the *Original PSBT* therein according to the\n+[receiver checklist](#receivers-original-psbt-checklist).\n+\n+The receiver then updates the *Original PSBT* to include new signed\n+inputs and outputs, invalidating the sender's signature(s). The receiver\n+may also adjust the transaction fee. The result, called the *Proposal\n+PSBT*, must satisfy the [sender checklist](#senders-proposal-psbt-checklist)\n+\n+The Proposal PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the\n+  Original PSBT.\n+- Insert additional inputs and outputs at a random index.\n+\n+The Proposal PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the\n+  receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs contained in the Original PSBT.\n+- Decrease the absolute fee of the Original PSBT.\n+\n+The receiver encrypts the *Proposal PSBT* to the sender's reply key according to\n+[HPKE Auth\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy),\n+using the receiver's key for authentication. The HPKE `info` string is\n+`PjV2MsgB`. The HPKE wire format is the same as in the [sender's\n+message](#sender-original-psbt-messaging).\n+\n+```\n+PjV2MsgB Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +---------------------------------------------------------+------------+\n+|                |           Padded Plaintext                              |  AEAD Tag  |\n+|                |       (7088 bytes = 7168-64-16)                         | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The receiver makes the resulting HPKE payload the body of a POST request to the\n+sender's mailbox whose Short ID is derived from the sender's reply key. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Once the receiver makes this request, they wait for either transaction from the\n+Original PSBT or Proposal PSBT to be broadcast to the Bitcoin network.\n+\n+#### Receiver's Original PSBT checklist\n+\n+The receiver checklist is the same as the [the BIP 78 receiver\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist).\n+\n+### Sender signing and broadcast\n+\n+The sender validates the *Proposal PSBT* it receives against a\n+checklist. If the checks pass, it may sign and broadcast the resulting\n+payjoin transaction.\n+\n+#### Sender's Proposal PSBT checklist\n+\n+The version 2 sender's checklist is the same as the [the BIP 78 sender\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#senders-payjoin-proposal-checklist).\n+\n+### Client/Directory interactions\n+\n+The Payjoin Directory provides a rendezvous point for senders and\n+receivers to exchange messages. The directory stores Payjoin payloads to\n+support asynchronous communication. Payjoin version 2 requests must be\n+submitted as encapsulated messages to the directory's OHTTP Gateway.\n+\n+The wire format OHTTP request is specified in [RFC\n+9458](https://www.ietf.org/rfc/rfc9458.html#name-hpke-encapsulation). HPKE\n+requires the directory's OHTTP key configuration. The plaintext is a binary\n+encoded HTTP request intended for the OHTTP target resource, usually a mailbox\n+endpoint.\n+\n+```\n+OHTTP Encapsulated Request Byte Representation (8192 bytes total)\n++--------------+-------------------------+------------------------------------------+\n+| OHTTP Header |         HPKE KEM        |               Ciphertext                 |\n+|  (7 bytes)   | Uncompressed Public Key |        (8120 bytes = 8192-65-7)          +\n+|              |        (65 bytes)       +-----------------------------+------------+\n+|              |                         |     Padded BHTTP Request    |  AEAD Tag  |\n+|              |                         | (8104 bytes = 8192-65-16-7) | (16 bytes) |\n++--------------+-------------------------+------------------------------------------+\n+```\n+\n+Response encryption uses the Export functionality of the request HPKE context to\n+establish a shared secret, and therefore consist of a 32 byte nonce followed by\n+the AEAD ciphertext and tag.\n+\n+```\n+OHTTP Encapsulated Response Byte Representation (8192 bytes total)\n++---------------------+------------------------------------------+\n+|        Nonce        |               Ciphertext                 |\n+|      (32 bytes)     |          (8160 bytes = 8192-32)          +\n+|                     +-----------------------------+------------+\n+|                     |     Padded BHTTP Response   |  AEAD Tag  |\n+|                     |   (8104 bytes = 8192-32-16) | (16 bytes) |\n++---------------------+------------------------------------------+\n+```\n+\n+GET requests on an empty mailbox should block until a message is posted\n+or a timeout occurs. The timeout should be 30 seconds because that will\n+not exceed the default timeout for most HTTP clients.\n+\n+The directory may optionally accept HTTP/1.1 POST requests without OHTTP\n+to mailbox endpoint URLs for backwards compatibility with Payjoin\n+version 1 senders.\n+\n+#### OHTTP Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+  title OHTTP Sequence Diagram\n+  participant C as Client\n+  participant R as OHTTP Relay\n+\n+  box PaleVioletRed Payjoin Directory\n+    participant G as OHTTP Gateway\n+    participant D as HTTP Resource\n+  end\n+\n+  C->>R: Relay Request<br/>FROM: Client IP<br/>[+ Encapsulated Request]\n+  R->>G: Gateway Request<br/>FROM: Relay IP<br/>[+ Encapsulated Request]\n+  G->>D: Request\n+  D->>G: Response\n+  G->>R: Gateway Response<br/>TO: Relay IP<br/>[+ Encapsulated Response]\n+  R->>C: Relay Response<br/>TO: Client IP<br/>[+ Encapsulated Response]\n+```\n+\n+### Relay/Directory interactions\n+\n+RFC 9458 requires each OHTTP Relay to be configured to forward requests\n+to exactly one OHTTP Gateway. This requirement prevents receivers from\n+being able to choose any directory, and senders from choosing relays\n+independently. Without addressing this limitation, senders would have to\n+know which relays are appropriate to use for each directory, creating a\n+tendency for one directory and its affiliated relays to monopolize the\n+Payjoin version 2 protocol.\n+\n+In order to allow OHTTP Relays to be used with any directory, a\n+directory's OHTTP Gateway may advertise this allowed purpose. This\n+advertisement prevents OHTTP Relays from acting as open internet proxies,\n+which would otherwise allow anonymized access to arbitrary resources and\n+expose them to denial-of-service attacks, as well as other forms of abuse.\n+When the directory receives a GET request to the `/.well-known/ohttp-gateway`\n+path with an `allowed_purposes` query parameter, its response body\n+should contain a magic string in the same format as a TLS ALPN protocol\n+list (a U16BE length encoded list of U8 length encoded strings). The\n+magic string is `BIP77 454403bb-9f7b-4385-b31f-acd2dae20b7e`, offering\n+an unambiguous signal to relays that this OHTTP Gateway will accept\n+requests associated with this purpose from any relay.\n+\n+By supporting this `allowed_purposes` parameter, the directory signals\n+to OHTTP Relays that it is willing to handle requests related to BIP 77\n+Payjoin version 2, removing the RFC 9458's requirement that relays and\n+Gateways be configured in a one-to-one relationship.\n+\n+## Rationale\n+\n+### Uppercase URL\n+\n+In order to simplify parsing and allow QR encoders to use [Alphanumeric\n+QR\n+mode](https://www.rfc-editor.org/rfc/rfc9285.html#name-the-alphabet-used-in-base45),\n+which is more compact than Byte mode, the mailbox endpoint URL,\n+including the fragment parameters, is encoded in uppercase.\n+\n+Unlike Bitcoin URI parameters, which require switching back to Byte\n+mode, the use of the URL fragment for session-specific parameters makes\n+it possible to stay in Alphanumeric mode.\n+\n+The `pj` parameter mailbox endpoint URL SHOULD be the last Bitcoin URI\n+parameter to avoid QR mode switching.\n+\n+### Session Expiration\n+\n+The directory may hold a message for an offline payjoin client until that\n+client comes online. However, the BIP 78 spec [\n+recommends](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receiver-does-not-need-to-be-a-full-node)\n+broadcasting Original PSBTs in the case of an offline counterparty.\n+Doing so exposes a naÃ¯ve, surveillance-vulnerable transaction which\n+Payjoin intends to avoid.\n+\n+Because BIP 78 is a synchronous protocol without a standard expiration\n+mechanism, and automated receivers are vulnerable to probing attacks,\n+BIP 78 encourages receivers to broadcast the Original PSBT after some\n+undefined expiration time.\n+\n+Because BIP 77 is an asynchronous protocol, it requires an explicit [\n+session-specific fragment\n+parameter](#receiver-fragment-parameters), `EX`, to\n+communicate this expiration time to the sender.\n+\n+There is no way for a sender to prevent a receiver from broadcasting the\n+fallback transaction extracted from the Original PSBT before the\n+receiver-specified expiration time.\n+\n+### 64-bit Short ID Length\n+\n+64 bits are sufficient to make the probability of experiencing a random\n+collision negligible. As of writing, the UTXO set has ~2^28 elements.\n+This is a very loose upper bound for the number of concurrent (non-spam)\n+sessions, for which the probability of a random collision will be less\n+than 1%. The actual number of sessions will of course be (orders of\n+magnitudes) lower given that sessions are short lived. With ~2^21\n+sessions (a loose bound on number of transactions that can be confirmed\n+in 24 hours) the probability is less than 1e-6. These figures bound the\n+probability of a collision existing anywhere in the entire set, whereas\n+the probability for an individual session to experience a collision is\n+\\<\\< 1e-10 in either case.\n+\n+### Complete UTXO Data\n+\n+Complete UTXO data is required because this information is required for\n+signing and calculating fees for some input types.\n+\n+### HTTP\n+\n+HTTP is ubiquitous. Using simple HTTP polling allows even Bitcoin Core\n+to consider an implementation. Unlike a WebSockets protocol, plain HTTP\n+can benefit from metadata protection by using Oblivious HTTP.\n+\n+### Oblivious HTTP\n+\n+OHTTP protects sender and receiver IP addresses both from one another\n+and from the directory. This makes it more difficult for a directory to\n+correlate many payjoin transactions with specific IP addresses.\n+\n+OHTTP relays can be run as basic HTTP proxies from wallet providers or\n+third parties.\n+\n+### Uniform Payloads\n+\n+Encapsulated OHTTP payloads seen by the relay and directory, and\n+encrypted messages seen by the directory, are constructed to be uniform\n+so that these third-party services are unable to distinguish between\n+them.\n+\n+Encapsulated OHTTP messages are 8192 bytes long, and begin with a\n+cleartext OHTTP header and an uncompressed key which is distinguishable\n+from random bytes but uniform across different encapsulated requests.\n+\n+End-to-end encrypted messages are 7168 bytes long, and should be\n+indistinguishable from uniformly random bytes.\n+[ElligatorSwift as defined in BIP 324](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki#elligatorswift-encoding-of-curve-x-coordinates)\n+is used to encode encapsulated HPKE public keys prepended to the HPKE ciphertext\n+so that the directory can't distinguish between key material, the\n+ciphertext, and randomness. This ensures the two different protocol\n+messages are indistinguishable from each other as well as any protocol\n+extensions.\n+\n+These padded sizes are sufficient for most PSBTs without exceeding the [\n+8KB\n+limit](https://www.geekersdigest.com/max-http-request-header-size-server-comparison/)\n+of many HTTP/1.1 web servers. 8KB is also too small for image sharing,\n+making misuse of the directory impractical.\n+\n+### Secp256k1 Hybrid Public Key Encryption\n+\n+[RFC 9180 Hybrid Public Key\n+Encryption](https://www.rfc-editor.org/rfc/rfc9180.html)\n+(HPKE) is a modern IETF standard for secure\n+message exchange without TLS, which is not available in Bitcoin Core.\n+\n+Payjoin version 2 uses `DHKEM(Secp256k1, HKDF-SHA256)` and\n+`ChaCha20Poly1305` AEAD for both OHTTP encapsulation and for end-to-end\n+encryption between the sender and receiver.\n+\n+The receiver transmits its receiver key in [receiver fragment\n+parameters](#receiver-fragment-parameters). The sender shares\n+its reply key along with the Original PSBT. These keys are ephemeral and\n+must only be used for a single Payjoin Session.\n+\n+#### Secp256k1-based DHKEM\n+\n+[Secp256k1-based DHKEM for\n+HPKE](https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html)\n+is most appropriate because of secp256k1's availability in bitcoin\n+contexts.\n+\n+#### ChaCha20Poly1305 AEAD\n+\n+This authenticated encryption with additional data [\n+algorithm](https://en.wikipedia.org/wiki/ChaCha20-Poly1305)\n+is standardized in [RFC\n+8439](https://www.rfc-editor.org/rfc/rfc8439) and has high\n+performance. ChaCha20Poly1305 AEAD has been implemented [in Bitcoin\n+Core](https://github.com/bitcoin/bitcoin/pull/15649) for [\n+BIP 324 Encrypted\n+Transport](https://github.com/bitcoin/bips/blob/master/bip-0324.mediawiki)\n+as well. This has widespread support in browsers and common\n+cryptographic libraries. AES-GCM is more widespread but slower without\n+hardware support and not typically already a dependency in bitcoin software.\n+\n+#### HKDF-SHA256\n+\n+SHA-256 is necessarily available in bitcoin contexts.",
      "path": "bip-0077.md",
      "position": 646,
      "original_position": 646,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": 2083294415,
      "user": {
        "login": "DanGould",
        "id": 8525467,
        "node_id": "MDQ6VXNlcjg1MjU0Njc=",
        "avatar_url": "https://avatars.githubusercontent.com/u/8525467?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DanGould",
        "html_url": "https://github.com/DanGould",
        "followers_url": "https://api.github.com/users/DanGould/followers",
        "following_url": "https://api.github.com/users/DanGould/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/DanGould/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/DanGould/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/DanGould/subscriptions",
        "organizations_url": "https://api.github.com/users/DanGould/orgs",
        "repos_url": "https://api.github.com/users/DanGould/repos",
        "events_url": "https://api.github.com/users/DanGould/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/DanGould/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "The rationale for choosing HKDF-SHA256 is not that it is already implemented in bitcoin core, but that its primitive, sha-256, is necessarily available in all contexts.\r\n\r\nHowever, the linked [secp256k1-based DHKEM for HPKE draft](https://www.ietf.org/archive/id/draft-wahby-cfrg-hpke-kem-secp256k1-01.html) explicitly sets Nsecret = 32 for the secp256k1 KEM, so Bitcoin Coreâ€™s L=32-constrained HKDFâ€‘SHA256 should satisfy spec out of the box.",
      "created_at": "2025-05-12T00:29:46Z",
      "updated_at": "2025-05-12T00:29:46Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2083667288",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2083667288"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 646,
      "original_line": 646,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093415621",
      "pull_request_review_id": 2847213995,
      "id": 2093415621,
      "node_id": "PRRC_kwDOAN28mc58xvzF",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174",
      "path": "bip-0077.md",
      "position": 15,
      "original_position": 15,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I see that you require BIPâ€¯21. Given that BIPâ€¯321 meanwhile was merged and proposes to replace BIPâ€¯21, you may be interested in having a look at that and potentially building on BIPâ€¯321 instead.\r\n\r\nAlso, doesnâ€™t this supersede BIPâ€¯78?",
      "created_at": "2025-05-16T17:11:27Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093415621",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093415621"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 15,
      "original_line": 15,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093437638",
      "pull_request_review_id": 2847213995,
      "id": 2093437638,
      "node_id": "PRRC_kwDOAN28mc58x1LG",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic",
      "path": "bip-0077.md",
      "position": 33,
      "original_position": 33,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Rephrasing this in active voice might be a bit smoother to read: \r\n```suggestion\r\nPayjoin protocol described in [BIP 78](bip-0078.mediawiki). An untrusted third-party \"directory server\" replaces the requirement\r\nfor a receiver to host a secure public endpoint for interactions.\r\nHTTP clients \r\naccess the directory server using an asynchronous protocol and authenticated, encrypted\r\npayloads. The design preserves complete Payjoin receiver functionality, including payment\r\noutput substitution. Authenticated encryption depends only on cryptographic\r\n```\r\n```",
      "created_at": "2025-05-16T17:28:29Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093437638",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093437638"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 28,
      "original_start_line": 28,
      "start_side": "RIGHT",
      "line": 33,
      "original_line": 33,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093452467",
      "pull_request_review_id": 2847213995,
      "id": 2093452467,
      "node_id": "PRRC_kwDOAN28mc58x4yz",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.",
      "path": "bip-0077.md",
      "position": 47,
      "original_position": 47,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "How about:\r\n```suggestion\r\ntheir inputs were owned by the same owner.\" \r\nPayjoin \r\naddresses the _common-input-ownership heuristic_ \r\nby making it practical to spend inputs owned by multiple parties in one transaction.\r\n```",
      "created_at": "2025-05-16T17:40:30Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093452467",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093452467"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 44,
      "original_start_line": 44,
      "start_side": "RIGHT",
      "line": 47,
      "original_line": 47,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093455948",
      "pull_request_review_id": 2847213995,
      "id": 2093455948,
      "node_id": "PRRC_kwDOAN28mc58x5pM",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a",
      "path": "bip-0077.md",
      "position": 54,
      "original_position": 54,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Iâ€™m not familiar with \"examplar\". Did you mean\r\n```suggestion\r\nOne might think of the Payjoin example of combining a\r\n```\r\n?\r\n",
      "created_at": "2025-05-16T17:43:18Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093455948",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093455948"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 54,
      "original_line": 54,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093458667",
      "pull_request_review_id": 2847213995,
      "id": 2093458667,
      "node_id": "PRRC_kwDOAN28mc58x6Tr",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal",
      "path": "bip-0077.md",
      "position": 74,
      "original_position": 74,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "With widespread again in the next sentence, how about: \r\n\r\n```suggestion\r\ncoordination mechanism appropriate for broad implementation. This proposal\r\n```",
      "created_at": "2025-05-16T17:45:35Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093458667",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093458667"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 74,
      "original_line": 74,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093461469",
      "pull_request_review_id": 2847213995,
      "id": 2093461469,
      "node_id": "PRRC_kwDOAN28mc58x6_d",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.",
      "path": "bip-0077.md",
      "position": 52,
      "original_position": 52,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe:\r\n```suggestion\r\ndeployed by exchanges. When combined, the same movement of funds can use\r\nless block weight and save fees.\r\n```",
      "created_at": "2025-05-16T17:48:01Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093461469",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093461469"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 51,
      "original_start_line": 51,
      "start_side": "RIGHT",
      "line": 52,
      "original_line": 52,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093467221",
      "pull_request_review_id": 2847213995,
      "id": 2093467221,
      "node_id": "PRRC_kwDOAN28mc58x8ZV",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction",
      "path": "bip-0077.md",
      "position": 56,
      "original_position": 56,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"transfer with a receiver consolidation\" feels a bit more complicated than necessary. Maybe\r\n\r\n```suggestion\r\nA natural application of Payjoin would be to combine\r\ngetting paid with consolidating UTXOs into one transaction. But Payjoin\r\ncan also secure [transaction\r\n```",
      "created_at": "2025-05-16T17:52:31Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093467221",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093467221"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 54,
      "original_start_line": 54,
      "start_side": "RIGHT",
      "line": 56,
      "original_line": 56,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093472465",
      "pull_request_review_id": 2847213995,
      "id": 2093472465,
      "node_id": "PRRC_kwDOAN28mc58x9rR",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an",
      "path": "bip-0077.md",
      "position": 59,
      "original_position": 59,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Maybe:\r\n```suggestion\r\nallowing a sender to pay a receiver who also pays\r\na third parties in the same transaction. For example, deposits to an\r\n```",
      "created_at": "2025-05-16T17:56:30Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093472465",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093472465"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 58,
      "original_start_line": 58,
      "start_side": "RIGHT",
      "line": 59,
      "original_line": 59,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093472930",
      "pull_request_review_id": 2847213995,
      "id": 2093472930,
      "node_id": "PRRC_kwDOAN28mc58x9yi",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies",
      "path": "bip-0077.md",
      "position": 60,
      "original_position": 60,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nexchange may \"cut through\" per a single transaction that also facilitates\r\n```",
      "created_at": "2025-05-16T17:56:55Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093472930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093472930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 60,
      "original_line": 60,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093484930",
      "pull_request_review_id": 2847213995,
      "id": 2093484930,
      "node_id": "PRRC_kwDOAN28mc58yAuC",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.",
      "path": "bip-0077.md",
      "position": 62,
      "original_position": 62,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Nit: This restates the same point as lines 49â€“52.\r\n\r\n```suggestion\r\nwithdrawals. Payjoin enables blockspace-efficient transactions that reduce\r\nfees while addressing privacy risks.\r\n```\r\nor\r\n```suggestion\r\nwithdrawals. Payjoin enables blockspace-efficient transactions that reduce\r\nfees and address privacy risks.\r\n```\r\n\r\n",
      "created_at": "2025-05-16T18:06:57Z",
      "updated_at": "2025-05-16T21:37:43Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093484930",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093484930"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 61,
      "original_start_line": 61,
      "start_side": "RIGHT",
      "line": 62,
      "original_line": 62,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093489597",
      "pull_request_review_id": 2847213995,
      "id": 2093489597,
      "node_id": "PRRC_kwDOAN28mc58yB29",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end",
      "path": "bip-0077.md",
      "position": 81,
      "original_position": 81,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Version 2\" has not explicitly been introduced, although it is implied by the use of \"version 1\" before. Perhaps better:\r\n```suggestion\r\ntransaction. In this proposal, they exchange asynchronous end-to-end\r\n```",
      "created_at": "2025-05-16T18:10:45Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093489597",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093489597"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 81,
      "original_line": 81,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093490450",
      "pull_request_review_id": 2847213995,
      "id": 2093490450,
      "node_id": "PRRC_kwDOAN28mc58yCES",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox",
      "path": "bip-0077.md",
      "position": 89,
      "original_position": 89,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It is ambiguous whether \"its\" refers to Session or URI (or even the receiver)â€”in technical writing, itâ€™s better to be repetitive than to make me think! ;)\r\n\r\nMaybe:\r\n\r\n```suggestion\r\n  by sharing a [Payjoin URI](#payjoin-uri) that includes the sessionâ€™s directory mailbox\r\n```",
      "created_at": "2025-05-16T18:11:30Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093490450",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093490450"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 89,
      "original_line": 89,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093495039",
      "pull_request_review_id": 2847213995,
      "id": 2093495039,
      "node_id": "PRRC_kwDOAN28mc58yDL_",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.",
      "path": "bip-0077.md",
      "position": 98,
      "original_position": 98,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should \"contributions\" here be more specific? E.g. \"at least one receiver input and changes to the output amount or optionally additional outputs\"?\r\n\r\n```suggestion\r\n  in response, based on the Original PSBT and including receiver\r\n  contributions.\r\n```",
      "created_at": "2025-05-16T18:15:23Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093495039",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093495039"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 97,
      "original_start_line": 97,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093506758",
      "pull_request_review_id": 2847213995,
      "id": 2093506758,
      "node_id": "PRRC_kwDOAN28mc58yGDG",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.",
      "path": "bip-0077.md",
      "position": 98,
      "original_position": 98,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"receiver contributions\" trips me up here.\r\n\r\n```suggestion\r\n- The receiver gets this message and\r\n  [posts a message containing a *Proposal\r\n  PSBT*](#receiver-proposal-psbt-messaging)\r\n  in response, by [extending|amending] the Original PSBT with additional inputs or outputs.\r\n```",
      "created_at": "2025-05-16T18:25:56Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093506758",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093506758"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 94,
      "original_start_line": 94,
      "start_side": "RIGHT",
      "line": 98,
      "original_line": 98,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093507694",
      "pull_request_review_id": 2847213995,
      "id": 2093507694,
      "node_id": "PRRC_kwDOAN28mc58yGRu",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.",
      "path": "bip-0077.md",
      "position": 103,
      "original_position": 103,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should it be mentioned that the two transactions are in conflict and only one can be confirmed?",
      "created_at": "2025-05-16T18:26:45Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093507694",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093507694"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 102,
      "original_start_line": 102,
      "start_side": "RIGHT",
      "line": 103,
      "original_line": 103,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093509061",
      "pull_request_review_id": 2847213995,
      "id": 2093509061,
      "node_id": "PRRC_kwDOAN28mc58yGnF",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band",
      "path": "bip-0077.md",
      "position": 118,
      "original_position": 118,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Consistency nit:\r\n```suggestion\r\n    R-)S:  Payjoin URI (BIP 21) out of band\r\n```",
      "created_at": "2025-05-16T18:28:01Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093509061",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093509061"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 118,
      "original_line": 118,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093510548",
      "pull_request_review_id": 2847213995,
      "id": 2093510548,
      "node_id": "PRRC_kwDOAN28mc58yG-U",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.",
      "path": "bip-0077.md",
      "position": 145,
      "original_position": 145,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nlieu of TLS.\r\n```",
      "created_at": "2025-05-16T18:29:21Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093510548",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093510548"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 145,
      "original_line": 145,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093530291",
      "pull_request_review_id": 2847213995,
      "id": 2093530291,
      "node_id": "PRRC_kwDOAN28mc58yLyz",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).",
      "path": "bip-0077.md",
      "position": 185,
      "original_position": 185,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "This whole section could be clarified by distinguishing between the query parameter _key_ and query parameter _value_. I assume that the uppercase requirement is referring to the value, and not the key. If it is referring to the key, it would be incompatible with BIPâ€¯321 which says:\r\n\"The query parameter keys are also case-insensitive. Query parameter values and bitcoin address fields may be case-sensitive depending on their content.\"",
      "created_at": "2025-05-16T18:47:12Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093530291",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093530291"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 174,
      "original_start_line": 174,
      "start_side": "RIGHT",
      "line": 185,
      "original_line": 185,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093557958",
      "pull_request_review_id": 2847213995,
      "id": 2093557958,
      "node_id": "PRRC_kwDOAN28mc58ySjG",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78",
      "path": "bip-0077.md",
      "position": 189,
      "original_position": 189,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Please feel free to reject this feedback, if you prefer it the way it is, but just \"version 1\" and \"version 2\" strike me as poor monikers for the Payjoin proposals. As \"versions\" are so abundant in computer science, each instance makes me stop to evaluate what it refers to. Also, BIPâ€¯3 proposes to introduce a Changelog section and a Version header, so documents will additionally have their versions.\r\n\r\nI think I recommended something similar in the winter, but I would recommend to pick more distinct terms, then to consistently and exclusively use the same term throughout the document to refer to the same proposal, e.g.:\r\n\r\n- \"Simple Payjoin\" and \"Async Payjoin\r\n- \"Payjoin v1\" and \"Payjoin v2\"\r\n- \"BIPâ€¯78\" and \"this proposal\"\r\n\r\nI would recommend against:\r\n\r\n- \"version 1\" and \"version 2\" (nonspecific)\r\n- \"Payjoin version 1\" and \"Payjoin version 2\" (wordy, the lowercased 'version' makes it hard to pick out as being proper nouns)\r\n\r\n```suggestion\r\nSince BIPâ€¯78 payloads are neither encrypted nor authenticated,\r\na directory used for backwards-compatible payloads is known\r\nas an [\"unsecured payjoin server\" in BIP 78\r\n```\r\n\r\nI would generally recommend against it, but if multiple terms are used for the same abstract concept, I would recommend that they are explicitly introduced, Ã  la \"we may in the following also use 'Payjoin v1' to refer to BIPâ€¯78: Simple Payjoin, while 'Payjoin v2' will refer to the proposal described in this document, BIPâ€¯77: Async Payjoin.\"",
      "created_at": "2025-05-16T19:11:45Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093557958",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093557958"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 187,
      "original_start_line": 187,
      "start_side": "RIGHT",
      "line": 189,
      "original_line": 189,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093561720",
      "pull_request_review_id": 2847213995,
      "id": 2093561720,
      "node_id": "PRRC_kwDOAN28mc58yTd4",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.",
      "path": "bip-0077.md",
      "position": 192,
      "original_position": 192,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "- Start of sentence\r\n- `pjos` used before introduction\r\n- \"enable\" seems like an odd choice when the value indicates that something is being disabled\r\n\r\nHow about:\r\n\r\n```suggestion\r\nBackwards-compatible receivers MUST disable output\r\nsubstitution by setting `pjos=0` to prevent modification by a malicious directory.\r\n```",
      "created_at": "2025-05-16T19:15:13Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093561720",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093561720"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 191,
      "original_start_line": 191,
      "start_side": "RIGHT",
      "line": 192,
      "original_line": 192,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093562473",
      "pull_request_review_id": 2847213995,
      "id": 2093562473,
      "node_id": "PRRC_kwDOAN28mc58yTpp",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox",
      "path": "bip-0077.md",
      "position": 196,
      "original_position": 196,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nIn this proposal, the URL in the `pj` parameter value is the mailbox\r\n```\r\nor\r\n```suggestion\r\nIn this proposal, the `pj` parameter value is the mailbox\r\n```",
      "created_at": "2025-05-16T19:16:03Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093562473",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093562473"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 196,
      "original_line": 196,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093571377",
      "pull_request_review_id": 2847213995,
      "id": 2093571377,
      "node_id": "PRRC_kwDOAN28mc58yV0x",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints",
      "path": "bip-0077.md",
      "position": 202,
      "original_position": 202,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "See above\r\n",
      "created_at": "2025-05-16T19:24:31Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093571377",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093571377"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 202,
      "original_line": 202,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093598017",
      "pull_request_review_id": 2847213995,
      "id": 2093598017,
      "node_id": "PRRC_kwDOAN28mc58ycVB",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).",
      "path": "bip-0077.md",
      "position": 212,
      "original_position": 212,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "It seems a bit confusing to talk about bech32 encoding and then dropping several parts of the bech32 encoding.\r\n\r\nPerhaps something in the vein of \"encoded using the bech32 character set\" would be less confusing?",
      "created_at": "2025-05-16T19:49:08Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093598017",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093598017"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 209,
      "original_start_line": 209,
      "start_side": "RIGHT",
      "line": 212,
      "original_line": 212,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093612800",
      "pull_request_review_id": 2847213995,
      "id": 2093612800,
      "node_id": "PRRC_kwDOAN28mc58yf8A",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:",
      "path": "bip-0077.md",
      "position": 233,
      "original_position": 233,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Given that bech32 also has a separator, this is ambiguous. I assume you mean that the whole parameters (key:value) are separated by plusses. But does that mean you still want to use the \"1\" separator between the 'HRP' and the parameter value? Given that this sounds like regular query parameters, would it perhaps be better to say keys and values instead of mentioning HRPs? â€” Ah, I just saw the example below.\r\n\r\nHow about:\r\n\r\n```suggestion\r\nThese session-specific parameters use a bech32-inspired encoding.\r\nThe parameter key takes the position of the HRP, followed by the '1' separator, followed by the parameter value encoded using the bech32 character set in [uppercase](#uppercase-url). The checksum is omitted. Parameters are separated by a `+` character:\r\n```",
      "created_at": "2025-05-16T20:01:50Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093612800",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093612800"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 230,
      "original_start_line": 230,
      "start_side": "RIGHT",
      "line": 233,
      "original_line": 233,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093616927",
      "pull_request_review_id": 2847213995,
      "id": 2093616927,
      "node_id": "PRRC_kwDOAN28mc58yg8f",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will",
      "path": "bip-0077.md",
      "position": 235,
      "original_position": 235,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "What is \"compressed form\"?",
      "created_at": "2025-05-16T20:05:27Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093616927",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093616927"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 235,
      "original_line": 235,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093618112",
      "pull_request_review_id": 2847213995,
      "id": 2093618112,
      "node_id": "PRRC_kwDOAN28mc58yhPA",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed",
      "path": "bip-0077.md",
      "position": 208,
      "original_position": 208,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should \"compressed public key\" be defined more specifically?",
      "created_at": "2025-05-16T20:06:46Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093618112",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093618112"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 208,
      "original_line": 208,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093619711",
      "pull_request_review_id": 2847213995,
      "id": 2093619711,
      "node_id": "PRRC_kwDOAN28mc58yhn_",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`",
      "path": "bip-0077.md",
      "position": 249,
      "original_position": 249,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Is the order of the session parameters fixed?",
      "created_at": "2025-05-16T20:08:29Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093619711",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093619711"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 249,
      "original_line": 249,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093621115",
      "pull_request_review_id": 2847213995,
      "id": 2093621115,
      "node_id": "PRRC_kwDOAN28mc58yh97",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying",
      "path": "bip-0077.md",
      "position": 255,
      "original_position": 255,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nThis transaction is serialized as a BIPâ€¯174 PSBTv0, satisfying\r\n```",
      "created_at": "2025-05-16T20:09:53Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093621115",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093621115"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 255,
      "original_line": 255,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093622774",
      "pull_request_review_id": 2847213995,
      "id": 2093622774,
      "node_id": "PRRC_kwDOAN28mc58yiX2",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the",
      "path": "bip-0077.md",
      "position": 275,
      "original_position": 275,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\"Its\" made me stumble:\r\n\r\n```suggestion\r\nThe sender generates an ephemeral mailbox key. The corresponding public key is known as the\r\n```",
      "created_at": "2025-05-16T20:11:32Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093622774",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093622774"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 275,
      "original_line": 275,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093623354",
      "pull_request_review_id": 2847213995,
      "id": 2093623354,
      "node_id": "PRRC_kwDOAN28mc58yig6",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the",
      "path": "bip-0077.md",
      "position": 283,
      "original_position": 283,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "```suggestion\r\nusing the mailbox endpoint. The 16-byte authentication tag is appended to the\r\n```",
      "created_at": "2025-05-16T20:12:05Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093623354",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093623354"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 283,
      "original_line": 283,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093629490",
      "pull_request_review_id": 2847213995,
      "id": 2093629490,
      "node_id": "PRRC_kwDOAN28mc58ykAy",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the\n+ciphertext.\n+\n+RFC 9180 [does not\n+specify](https://www.rfc-editor.org/rfc/rfc9180.html#section-10) the wire format\n+encoding of HPKE messages. To construct an HPKE payload, the secp256k1 public\n+key from the DHKEM is encoded using ElligatorSwift in 64 bytes. Note that\n+ElligatorSwift is only the wire format, when deriving shared secrets the curve\n+point is re-serialized in uncompressed form.\n+\n+```\n+PjV2MsgA Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +-----------------------+---------------------------------+------------+\n+|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |\n+|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The resulting HPKE payload is the body of a POST request to the\n+receiver's mailbox. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP\n+request and handles the inner POST request at the receiver's mailbox\n+endpoint, which stores the HPKE encrypted payload to be forwarded to the\n+receiver.\n+\n+The sender then polls OHTTP encapsulated GET requests to the sender's\n+mailbox endpoint until it receives a response from the directory\n+containing the receiver's *Proposal PSBT*, and proceeds to\n+[sign and broadcast](#sender-signing-and-broadcast).\n+It stops polling after expiration.\n+\n+#### Optional sender parameters\n+\n+[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\n+are also valid as version 2 parameters. Though in version 2 they are included in\n+the body as part of the ciphertext rather than as a query string.",
      "path": "bip-0077.md",
      "position": 326,
      "original_position": 326,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "\r\nMaybe:\r\n```suggestion\r\n[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\r\ncan be used in Payjoin v2, but must be included\r\nin the body as part of the ciphertext rather than as a query string.\r\n```",
      "created_at": "2025-05-16T20:18:08Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093629490",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093629490"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 324,
      "original_start_line": 324,
      "start_side": "RIGHT",
      "line": 326,
      "original_line": 326,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093678019",
      "pull_request_review_id": 2847213995,
      "id": 2093678019,
      "node_id": "PRRC_kwDOAN28mc58yv3D",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the\n+ciphertext.\n+\n+RFC 9180 [does not\n+specify](https://www.rfc-editor.org/rfc/rfc9180.html#section-10) the wire format\n+encoding of HPKE messages. To construct an HPKE payload, the secp256k1 public\n+key from the DHKEM is encoded using ElligatorSwift in 64 bytes. Note that\n+ElligatorSwift is only the wire format, when deriving shared secrets the curve\n+point is re-serialized in uncompressed form.\n+\n+```\n+PjV2MsgA Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +-----------------------+---------------------------------+------------+\n+|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |\n+|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The resulting HPKE payload is the body of a POST request to the\n+receiver's mailbox. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP\n+request and handles the inner POST request at the receiver's mailbox\n+endpoint, which stores the HPKE encrypted payload to be forwarded to the\n+receiver.\n+\n+The sender then polls OHTTP encapsulated GET requests to the sender's\n+mailbox endpoint until it receives a response from the directory\n+containing the receiver's *Proposal PSBT*, and proceeds to\n+[sign and broadcast](#sender-signing-and-broadcast).\n+It stops polling after expiration.\n+\n+#### Optional sender parameters\n+\n+[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\n+are also valid as version 2 parameters. Though in version 2 they are included in\n+the body as part of the ciphertext rather than as a query string.\n+\n+HPKE binds ciphertexts to application-specific `info` strings. Because\n+of this domain separation, BIP 78's `v` parameter is redundant and\n+should be omitted for version 2.\n+\n+### Receiver Proposal PSBT Messaging\n+\n+After sharing the Payjoin URI with the sender, the receiver polls via\n+OHTTP encapsulated GET requests to the receiver's mailbox endpoint. So\n+long as the mailbox contains no message, the directory responds with\n+status 202 ACCEPTED. Once a mailbox contains a message, the directory\n+returns it in the response body with status 200 OK.\n+\n+Upon receiving an encapsulated 200 OK response, the receiver decrypts\n+the payload and checks the *Original PSBT* therein according to the\n+[receiver checklist](#receivers-original-psbt-checklist).\n+\n+The receiver then updates the *Original PSBT* to include new signed\n+inputs and outputs, invalidating the sender's signature(s). The receiver\n+may also adjust the transaction fee. The result, called the *Proposal\n+PSBT*, must satisfy the [sender checklist](#senders-proposal-psbt-checklist)\n+\n+The Proposal PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the\n+  Original PSBT.\n+- Insert additional inputs and outputs at a random index.",
      "path": "bip-0077.md",
      "position": 355,
      "original_position": 355,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "Should this be more specific? Is the receiver required to add at least one input? Would it e.g., be permissible to just split his output to perform a cut-through transaction?",
      "created_at": "2025-05-16T21:06:52Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093678019",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093678019"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 355,
      "original_line": 355,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093683259",
      "pull_request_review_id": 2847213995,
      "id": 2093683259,
      "node_id": "PRRC_kwDOAN28mc58yxI7",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the\n+ciphertext.\n+\n+RFC 9180 [does not\n+specify](https://www.rfc-editor.org/rfc/rfc9180.html#section-10) the wire format\n+encoding of HPKE messages. To construct an HPKE payload, the secp256k1 public\n+key from the DHKEM is encoded using ElligatorSwift in 64 bytes. Note that\n+ElligatorSwift is only the wire format, when deriving shared secrets the curve\n+point is re-serialized in uncompressed form.\n+\n+```\n+PjV2MsgA Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +-----------------------+---------------------------------+------------+\n+|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |\n+|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The resulting HPKE payload is the body of a POST request to the\n+receiver's mailbox. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP\n+request and handles the inner POST request at the receiver's mailbox\n+endpoint, which stores the HPKE encrypted payload to be forwarded to the\n+receiver.\n+\n+The sender then polls OHTTP encapsulated GET requests to the sender's\n+mailbox endpoint until it receives a response from the directory\n+containing the receiver's *Proposal PSBT*, and proceeds to\n+[sign and broadcast](#sender-signing-and-broadcast).\n+It stops polling after expiration.\n+\n+#### Optional sender parameters\n+\n+[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\n+are also valid as version 2 parameters. Though in version 2 they are included in\n+the body as part of the ciphertext rather than as a query string.\n+\n+HPKE binds ciphertexts to application-specific `info` strings. Because\n+of this domain separation, BIP 78's `v` parameter is redundant and\n+should be omitted for version 2.\n+\n+### Receiver Proposal PSBT Messaging\n+\n+After sharing the Payjoin URI with the sender, the receiver polls via\n+OHTTP encapsulated GET requests to the receiver's mailbox endpoint. So\n+long as the mailbox contains no message, the directory responds with\n+status 202 ACCEPTED. Once a mailbox contains a message, the directory\n+returns it in the response body with status 200 OK.\n+\n+Upon receiving an encapsulated 200 OK response, the receiver decrypts\n+the payload and checks the *Original PSBT* therein according to the\n+[receiver checklist](#receivers-original-psbt-checklist).\n+\n+The receiver then updates the *Original PSBT* to include new signed\n+inputs and outputs, invalidating the sender's signature(s). The receiver\n+may also adjust the transaction fee. The result, called the *Proposal\n+PSBT*, must satisfy the [sender checklist](#senders-proposal-psbt-checklist)\n+\n+The Proposal PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the\n+  Original PSBT.\n+- Insert additional inputs and outputs at a random index.\n+\n+The Proposal PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the\n+  receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs contained in the Original PSBT.\n+- Decrease the absolute fee of the Original PSBT.\n+\n+The receiver encrypts the *Proposal PSBT* to the sender's reply key according to\n+[HPKE Auth\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy),\n+using the receiver's key for authentication. The HPKE `info` string is\n+`PjV2MsgB`. The HPKE wire format is the same as in the [sender's\n+message](#sender-original-psbt-messaging).\n+\n+```\n+PjV2MsgB Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +---------------------------------------------------------+------------+\n+|                |           Padded Plaintext                              |  AEAD Tag  |\n+|                |       (7088 bytes = 7168-64-16)                         | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The receiver makes the resulting HPKE payload the body of a POST request to the\n+sender's mailbox whose Short ID is derived from the sender's reply key. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Once the receiver makes this request, they wait for either transaction from the\n+Original PSBT or Proposal PSBT to be broadcast to the Bitcoin network.\n+\n+#### Receiver's Original PSBT checklist\n+\n+The receiver checklist is the same as the [the BIP 78 receiver\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist).",
      "path": "bip-0077.md",
      "position": 398,
      "original_position": 398,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "I think itâ€™s valuable to point out that itâ€™s the same between BIPâ€¯78 and BIPâ€¯77, but it might make sense to copy the check list here, given that this is the superseding document.",
      "created_at": "2025-05-16T21:12:58Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093683259",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093683259"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": 397,
      "original_start_line": 397,
      "start_side": "RIGHT",
      "line": 398,
      "original_line": 398,
      "side": "RIGHT"
    },
    {
      "url": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093683339",
      "pull_request_review_id": 2847213995,
      "id": 2093683339,
      "node_id": "PRRC_kwDOAN28mc58yxKL",
      "diff_hunk": "@@ -0,0 +1,703 @@\n+```\n+  BIP: 77\n+  Layer: Applications\n+  Title: Async Payjoin\n+  Author: Dan Gould <d@ngould.dev>\n+          Yuval Kogman <nothingmuch@woobling.org>\n+  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-0077\n+  Post-History: https://github.com/bitcoin/bips/pull/1483\n+                https://gnusha.org/pi/bitcoindev/7B11AE34-27A7-46ED-95BF-66CA13BA26F3@ngould.dev/#t\n+                https://gnusha.org/pi/bitcoindev/3C0A6E4C-444E-4E75-829C-1A21D8EE40E0@ngould.dev/#t\n+  Status: Draft\n+  Type: Standards Track\n+  Created: 2023-08-08\n+  License: BSD-2-Clause\n+  Requires: 21, 78, 173, 174\n+```\n+\n+## Copyright\n+\n+This BIP is licensed under the 2-clause BSD license.\n+\n+## Abstract\n+\n+Payjoin lets Bitcoin senders and receivers interact to make batched\n+transactions.\n+\n+This document proposes a second, backwards-compatible, asynchronous version of the\n+Payjoin protocol described in [BIP 78](bip-0078.mediawiki). The requirement\n+for a receiver to host a secure public endpoint for interactions is replaced by\n+that of an untrusted third-party \"directory\" server accessed via HTTP clients that\n+communicate using an asynchronous protocol and authenticated, encrypted\n+payloads. Complete Payjoin receiver functionality, including payment\n+output substitution, is preserved. Authenticated encryption depends only on cryptographic\n+primitives available in Bitcoin Core. Requests use [Oblivious\n+HTTP](https://www.ietf.org/rfc/rfc9458.html) (OHTTP) to\n+prevent the directory and other Payjoin clients from linking requests to client\n+IP addresses.\n+\n+## Motivation\n+\n+Satoshi Nakamoto pointed out one specific privacy risk in the\n+[whitepaper](https://bitcoin.org/en/bitcoin-paper),\n+that transactions with multiple inputs \"necessarily reveal that\n+their inputs were owned by the same owner.\" Payjoin enables *inputs* owned\n+by distinct owners to be spent in a batch. Thus, Payjoin can\n+address that risk which would come to be called the \"common-input-ownership heuristic\"\n+by making interactive batching practical.\n+\n+While addressing Bitcoin's primal privacy risk, Payjoin *input* batching\n+also improves on the widespread non-interactive *output* batching practice\n+deployed by exchanges. When combined, the same movement of funds can use even\n+less block weight and so save more fees.\n+\n+One might think of the Payjoin examplar combining a\n+transfer with a receiver consolidation into one transaction. But Payjoin\n+can also secure [transaction\n+cut-through](https://bitcointalk.org/index.php?topic=281848.0),Â Â \n+allowing a sender to transfer funds to a receiver who immediately transfers\n+funds to third parties all in one transaction. For example, deposits to an\n+exchange may \"cut through\" a single transaction that also satisfies\n+withdrawals. Payjoin enables more blockspace-efficient transactions to save\n+transaction fees while addressing privacy risks.\n+\n+However, BIP 78's Payjoin version 1 requirements have proven to be an\n+obstacle to adoption. Version 1 receivers must host a secured\n+public-facing HTTP server. Mobile and web environments limit the ability\n+to fulfil such a requirement. Version 1 also requires synchronous\n+communication. Both sender and receiver must be online simultaneously.\n+Wallet developers [\n+regard](https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2021-January/018358.html)\n+these requirements as barriers to Payjoin adoption.\n+\n+To address these limitations, our goal is to specify a practical\n+coordinationmechanism appropriate for widespread implementation. This proposal\n+leverages widespread solutions to common problems, building on established web\n+standards and common Bitcoin primitives.\n+\n+## Overview\n+\n+A Payjoin *sender* and *receiver* interact so that they may both contribute to a\n+transaction. To do so in version 2, they exchange asynchronous end-to-end\n+encrypted messages by relaying them to a store-and-forward *directory* server\n+using OHTTP.\n+\n+Before initiating the protocol, the receiver must secure communications with\n+the directory by [bootstrapping](#ohttp-bootstrapping).\n+\n+- The receiver [initiates a Payjoin Session](#session-initiation)\n+  by sharing a [Payjoin URI](#payjoin-uri) that includes its directory mailbox\n+  for receiving messages.\n+- The sender [posts a message](#sender-original-psbt-messaging)\n+  containing a fully signed fallback transaction, known as the *Original PSBT*,\n+  to the mailbox.\n+- The receiver gets this message and\n+  [posts a message containing a *Proposal\n+  PSBT*](#receiver-proposal-psbt-messaging)\n+  in response, based on the Original PSBT and including receiver\n+  contributions.\n+- The sender gets the Proposal PSBT, [checks it, signs, and\n+  broadcasts](#sender-signing-and-broadcast) the final transaction.\n+\n+At any point, either party may choose to broadcast the\n+fallback transaction described by the Original PSBT instead of proceeding.\n+\n+Messages are buffered in the directory, allowing both parties to tolerate\n+temporary disconnections and resume communication by polling.\n+\n+### Sequence Diagram\n+\n+```mermaid\n+sequenceDiagram\n+    title Async Payjoin Sequence Diagram\n+    participant R as Receiver\n+    participant D as Directory\n+    participant S as Sender\n+    participant N as Network\n+\n+    R-)S:  Payjoin Uri (BIP 21) out of band\n+    \n+    R-->>D: Poll GET Requests<br/>for Original PSBT\n+    activate DÂ \n+    S->>D: POST Request<br/>Original PSBT\n+    D->>R: GET Response<br/>Original PSBT\n+    deactivate D\n+\n+    S-->>D: Poll GET Requests<br/>for Proposal PSBT\n+    activate D\n+    R->>D: POST Request<br/>Proposal PSBT\n+    D->>S: GET Response<br/>Proposal PSBT\n+    deactivate D\n+\n+    S->>N: Broadcast Payjoin\n+```\n+\n+## Specification\n+\n+### OHTTP Bootstrapping\n+\n+Before initiating a Payjoin Session a receiver must first discover the\n+directory's\n+[OHTTP Key Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1),\n+via an authenticated\n+bootstrap mechanism. The key configuration contains information to establish\n+[Hybrid Public Key Encryption](#secp256k1-hybrid-public-key-encryption) (HPKE) in order to secure communications between the client and the directory in\n+liu of TLS.\n+\n+The bootstrap mechanism may vary by implementation but must\n+follow [OHTTP Consistency\n+Requirements](https://datatracker.ietf.org/doc/html/draft-ietf-privacypass-key-consistency-01)\n+and should not reveal a receiver IP address to the directory. Some\n+examples of suitable mechanisms include getting a key configuration\n+from a payjoin URI, a trusted application binary, or fetching using https-in-http\n+CONNECT method, https-in-WebSocket, Tor, or a VPN.\n+\n+Directory OHTTP Gateways MUST support [RFC 9540 Key Configuration\n+Fetching](https://www.rfc-editor.org/rfc/rfc9540.html#name-key-configuration-fetching)\n+via GET request. RFC 9540 defines the\n+gateway location as `/.well-known/ohttp-gateway`.\n+\n+### Session Initiation\n+\n+A receivers initiates a session by sharing a Payjoin URI. Because a URI\n+contains sensitive information, such as a receiver address, it should be shared\n+over a confidential channel.\n+\n+#### Payjoin URI\n+\n+Bitcoin URIs ([BIP\n+21](https://github.com/bitcoin/bips/blob/master/bip-0021.mediawiki)\n+or [BIP\n+321](https://github.com/bitcoin/bips/blob/master/bip-0321.mediawiki))\n+are a standard way to request bitcoin.\n+\n+A Payjoin URI is a Bitcoin URI that contains a `pj` parameter. The `pj`\n+parameter is a URL in both BIP 78 and BIP 77.\n+\n+Senders that understand Bitcoin URI but don't support Payjoin will just\n+ignore the `pj` parameter and proceed to typical address-based\n+transaction flows.\n+\n+A `req-pj` parameter, as specified in BIP 21, may be used instead of\n+`pj` to signal that Payjoin is required.\n+\n+The `pj` parameter must be [uppercased and should be the last parameter\n+of the URI](#uppercase-url).\n+\n+Since version 1 payloads are neither encrypted nor authenticated,\n+a directory used for backwards-compatible payloads is known\n+as an [\"unsecured payjoin server\" in BIP 78\n+parlance](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#unsecured-payjoin-server).\n+backwards-compatible receivers MUST enable `pjos=0` to disable output\n+substitution in order to prevent modification by a malicious directory.\n+\n+##### Mailbox endpoint\n+\n+In Payjoin version 2 the URL in the `pj` parameter is the mailbox\n+endpoint URL. Mailboxes are shared HTTP resources hosted by the\n+directory and serve as OHTTP Target Resources. Clients use these endpoints\n+to relay encrypted messages. They `POST` messages to and `GET` messages from\n+mailbox endpoints via OHTTP.\n+\n+Payjoin version 1 senders may POST messages directly to mailbox endpoints\n+for [backwards compatibility](#backwards-compatibility).\n+\n+###### Short ID\n+\n+A Short ID identifies a mailbox. The Short ID is the path component of\n+the mailbox endpoint. One is derived by hashing the compressed\n+secp256k1 mailbox public key with SHA-256, truncating it to [8 bytes\n+(64 bits)](#64-bit-short-id-length), and encoding it in\n+[uppercase](#uppercase-url) bech32 with no checksum and with\n+no HRP (also omitting the '1' separator).\n+\n+##### Receiver fragment parameters\n+\n+Payjoin version 2 introduces session-specific parameters which the\n+receiver shares encoded in the URI.\n+\n+Instead of defining new Bitcoin URI parameters, the session-specific\n+parameters are encoded in the [\n+fragment](https://datatracker.ietf.org/doc/html/rfc3986#section-3.5)\n+of the the mailbox endpoint URL.\n+\n+The `#` fragment separator character must be [RFC 3986\n+percent-encoded](https://datatracker.ietf.org/doc/html/rfc3986#section-2.1)\n+as `%23`,Â becauseÂ itÂ separates the\n+fragmentÂ ofÂ theÂ mailboxÂ endpointÂ URLÂ includedÂ inÂ the `pj` parameter, not the\n+fragment of the Bitcoin URI.\n+\n+These session-specific parameters are [\n+uppercase](#uppercase-url) bech32 encoded, with no checksum,\n+and are separated by a `+` character and prefixed with HRPs according to\n+their role:\n+\n+- `RK`: encodes the *receiver key* in compressed form. Senders will\n+  initiate HPKE with the receiver using this key.\n+- `OH`: encodes an alternate format of the OHTTP Key Configuration of\n+  the directory. It consists of a compressed public key of the\n+  directory's OHTTP Gateway, prefixed by the 2-byte Key Identifier. A [\n+  RFC 9458 Key\n+  Configuration](https://www.ietf.org/rfc/rfc9458.html#section-3.1)\n+  is reconstructed by assuming the HPKE KEM ID and Symmetric Algorithms\n+  are [fixed](#secp256k1-hybrid-public-key-encryption).\n+- `EX`: specifies a [session\n+  expiration](#session-expiration) in [unix\n+  time](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_16).\n+\n+For example, a properly encoded endpoint Bitcoin URI looks like this\n+`bitcoin:tb1q6q6de88mj8qkg0q5lupmpfexwnqjsr4d2gvx2p?amount=0.00666666&pjos=0&pj=HTTPS://PAYJO.IN/TXJCGKTKXLUUZ%23RK1Q0DJS3VVDXWQQTLQ8022QGXSX7ML9PHZ6EDSF6AKEWQG758JPS2EV+OH1QYPM59NK2LXXS4890SUAXXYT25Z2VAPHP0X7YEYCJXGWAG6UG9ZU6NQ+EX1WKV8CEC`\n+\n+### Sender Original PSBT Messaging\n+\n+The sender constructs the fallback transaction, a typical transaction\n+spending funds to the receiver's address specified in the Payjoin URI.\n+This transaction is serialized as a version 0 PSBT, satisfying\n+[the receiver checklist](#receivers-original-psbt-checklist).\n+\n+The Original PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Be fully signed.\n+- Exclude unnecessary fields such as global xpubs or keypath\n+  information.\n+- Be broadcastable.\n+\n+The Original PSBT MAY:\n+\n+- Include outputs unrelated to the sender-receiver transfer for batching\n+  purposes.\n+\n+This *Original PSBT* is encoded as base64, followed by the query\n+parameter string on a new line containing [optional sender\n+parameters](#optional-sender-parameters).\n+\n+The sender generates an ephemeral mailbox key. Its public key is known as the\n+*reply key*, and it is prepended to the base64 plaintext string, serialized in\n+compressed form as 33 bytes.\n+\n+This plaintext string is encrypted to the receiver key according to [HPKE Base\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-encryption-to-a-public-key).\n+The HPKE `info` string, used for domain separation, is `PjV2MsgA`. The\n+ciphertext ensures message secrecy and integrity when passed to the receiver\n+using the mailbox endpoint. The 16 byte authentication tag is appended to the\n+ciphertext.\n+\n+RFC 9180 [does not\n+specify](https://www.rfc-editor.org/rfc/rfc9180.html#section-10) the wire format\n+encoding of HPKE messages. To construct an HPKE payload, the secp256k1 public\n+key from the DHKEM is encoded using ElligatorSwift in 64 bytes. Note that\n+ElligatorSwift is only the wire format, when deriving shared secrets the curve\n+point is re-serialized in uncompressed form.\n+\n+```\n+PjV2MsgA Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +-----------------------+---------------------------------+------------+\n+|                |       Reply Key       |         Padded Plaintext        |  AEAD Tag  |\n+|                |       (33 bytes)      |   (7055 bytes = 7168-64-33-16)  | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The resulting HPKE payload is the body of a POST request to the\n+receiver's mailbox. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Upon receipt, the directory's OHTTP Gateway decapsulates the OHTTP\n+request and handles the inner POST request at the receiver's mailbox\n+endpoint, which stores the HPKE encrypted payload to be forwarded to the\n+receiver.\n+\n+The sender then polls OHTTP encapsulated GET requests to the sender's\n+mailbox endpoint until it receives a response from the directory\n+containing the receiver's *Proposal PSBT*, and proceeds to\n+[sign and broadcast](#sender-signing-and-broadcast).\n+It stops polling after expiration.\n+\n+#### Optional sender parameters\n+\n+[BIP 78's optional sender parameters](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#optional-parameters)\n+are also valid as version 2 parameters. Though in version 2 they are included in\n+the body as part of the ciphertext rather than as a query string.\n+\n+HPKE binds ciphertexts to application-specific `info` strings. Because\n+of this domain separation, BIP 78's `v` parameter is redundant and\n+should be omitted for version 2.\n+\n+### Receiver Proposal PSBT Messaging\n+\n+After sharing the Payjoin URI with the sender, the receiver polls via\n+OHTTP encapsulated GET requests to the receiver's mailbox endpoint. So\n+long as the mailbox contains no message, the directory responds with\n+status 202 ACCEPTED. Once a mailbox contains a message, the directory\n+returns it in the response body with status 200 OK.\n+\n+Upon receiving an encapsulated 200 OK response, the receiver decrypts\n+the payload and checks the *Original PSBT* therein according to the\n+[receiver checklist](#receivers-original-psbt-checklist).\n+\n+The receiver then updates the *Original PSBT* to include new signed\n+inputs and outputs, invalidating the sender's signature(s). The receiver\n+may also adjust the transaction fee. The result, called the *Proposal\n+PSBT*, must satisfy the [sender checklist](#senders-proposal-psbt-checklist)\n+\n+The Proposal PSBT MUST:\n+\n+- Include complete UTXO data.\n+- Include all inputs from the Original PSBT.\n+- Include all outputs which do not belong to the receiver from the\n+  Original PSBT.\n+- Insert additional inputs and outputs at a random index.\n+\n+The Proposal PSBT sender MAY:\n+\n+- Add, remove or modify Original PSBT outputs under the control of the\n+  receiver (i.e. not sender change).\n+\n+The Proposal PSBT MUST NOT:\n+\n+- Shuffle the order of inputs or outputs contained in the Original PSBT.\n+- Decrease the absolute fee of the Original PSBT.\n+\n+The receiver encrypts the *Proposal PSBT* to the sender's reply key according to\n+[HPKE Auth\n+mode](https://www.rfc-editor.org/rfc/rfc9180.html#name-authentication-using-an-asy),\n+using the receiver's key for authentication. The HPKE `info` string is\n+`PjV2MsgB`. The HPKE wire format is the same as in the [sender's\n+message](#sender-original-psbt-messaging).\n+\n+```\n+PjV2MsgB Byte Representation (7168 bytes total)\n++---------------------------------------------------------------------------------------+\n+| ElligatorSwift |                             Ciphertext                               |\n+|   (64 bytes)   |                            (7104 bytes)                              |\n+|                +---------------------------------------------------------+------------+\n+|                |           Padded Plaintext                              |  AEAD Tag  |\n+|                |       (7088 bytes = 7168-64-16)                         | (16 bytes) |\n++---------------------------------------------------------------------------------------+\n+```\n+\n+The receiver makes the resulting HPKE payload the body of a POST request to the\n+sender's mailbox whose Short ID is derived from the sender's reply key. This request is then [\n+encapsulated](#client-directory-interactions) according to\n+Oblivious HTTP to the directory's OHTTP Gateway. OHTTP serializes the\n+inner request as BHTTP, and provides another layer of HPKE encryption,\n+between the client and directory.\n+\n+Once the receiver makes this request, they wait for either transaction from the\n+Original PSBT or Proposal PSBT to be broadcast to the Bitcoin network.\n+\n+#### Receiver's Original PSBT checklist\n+\n+The receiver checklist is the same as the [the BIP 78 receiver\n+checklist](https://github.com/bitcoin/bips/blob/master/bip-0078.mediawiki#receivers-original-psbt-checklist).\n+\n+### Sender signing and broadcast\n+\n+The sender validates the *Proposal PSBT* it receives against a\n+checklist. If the checks pass, it may sign and broadcast the resulting\n+payjoin transaction.\n+\n+#### Sender's Proposal PSBT checklist\n+\n+The version 2 sender's checklist is the same as the [the BIP 78 sender",
      "path": "bip-0077.md",
      "position": 408,
      "original_position": 408,
      "commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "original_commit_id": "9042380f316beb9aa9fa97ad642cb3da2800ee56",
      "in_reply_to_id": null,
      "user": {
        "login": "murchandamus",
        "id": 4060799,
        "node_id": "MDQ6VXNlcjQwNjA3OTk=",
        "avatar_url": "https://avatars.githubusercontent.com/u/4060799?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/murchandamus",
        "html_url": "https://github.com/murchandamus",
        "followers_url": "https://api.github.com/users/murchandamus/followers",
        "following_url": "https://api.github.com/users/murchandamus/following%7B/other_user%7D",
        "gists_url": "https://api.github.com/users/murchandamus/gists%7B/gist_id%7D",
        "starred_url": "https://api.github.com/users/murchandamus/starred%7B/owner%7D%7B/repo%7D",
        "subscriptions_url": "https://api.github.com/users/murchandamus/subscriptions",
        "organizations_url": "https://api.github.com/users/murchandamus/orgs",
        "repos_url": "https://api.github.com/users/murchandamus/repos",
        "events_url": "https://api.github.com/users/murchandamus/events%7B/privacy%7D",
        "received_events_url": "https://api.github.com/users/murchandamus/received_events",
        "type": "User",
        "site_admin": false,
        "patch_url": null
      },
      "body": "As above.",
      "created_at": "2025-05-16T21:13:05Z",
      "updated_at": "2025-05-16T21:37:44Z",
      "html_url": "https://github.com/bitcoin/bips/pull/1483#discussion_r2093683339",
      "author_association": "CONTRIBUTOR",
      "_links": {
        "self": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/comments/2093683339"
        },
        "pull_request": {
          "href": "https://api.github.com/repos/bitcoin/bips/pulls/1483"
        }
      },
      "start_line": null,
      "original_start_line": null,
      "start_side": null,
      "line": 408,
      "original_line": 408,
      "side": "RIGHT"
    }
  ]
}